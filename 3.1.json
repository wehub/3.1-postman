{
	"openapi": "3.0.0",
	"info": {
		"title": "",
		"version": "v3.1",
		"termsOfService": "https://dev.wepay.com/platform-tos",
		"contact": {
			"name": "WePay API Support",
			"email": "api@wepay.com",
			"url": "https://dev.wepay.com/support"
		},
		"description": "Use WePay's APIs to integrate with [Link](/link), [Clear](/clear), or [Core](/core), and to leverage feature offerings like [Digital Wallets](/digital-wallets) and [Card Present](/card-present)."
	},
	"servers": [
		{
			"url": "https://stage-api.wepay.com",
			"description": "Stage"
		}
	],
	"paths": {
		"/accounts": {
			"post": {
				"tags": [
					"/accounts/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"balances": {
										"currencies": {
											"USD": {
												"balance": 100000,
												"incoming_pending": 5000,
												"outgoing_pending": 21200,
												"reserve": 10000
											}
										}
									},
									"create_time": 1480700534,
									"api_version": "3.1",
									"beneficiary": {
										"id": "295f2816-07b9-4d9e-a035-4f0884ef228b",
										"resource": "legal_entities",
										"path": "/legal_entities/295f2816-07b9-4d9e-a035-4f0884ef228b"
									},
									"custom_data": null,
									"description": "Foo Bar Shop on 5th ave.",
									"documents": [],
									"enhanced_review": "not_requested",
									"id": "d3f61e56-5d99-4895-af2d-a07ab48476e9",
									"incoming_payments": {
										"accepted_methods": [
											"payment_bank",
											"mastercard",
											"visa",
											"amex"
										]
									},
									"industry": {
										"category_detail": "Website design",
										"merchant_category_code": "7333"
									},
									"name": "Foo Bar Shop",
									"owner": {
										"id": "3cd20b3c-4008-400b-b708-2b844ce7be84",
										"path": "/legal_entities/3cd20b3c-4008-400b-b708-2b844ce7be84",
										"resource": "legal_entities"
									},
									"path": "/accounts/d3f61e56-5d99-4895-af2d-a07ab48476e9",
									"payout": {
										"currencies": {
											"USD": {
												"next_payout_time": 14987382982,
												"payout_method_id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
												"period": "daily"
											}
										},
										"default_currency": "USD"
									},
									"pricing": {
										"currencies": {
											"USD": {
												"credit_card": null,
												"payment_bank": null,
												"recurring_fee": null,
												"other_fees": {
													"debit_failure_fee": null
												}
											}
										}
									},
									"reference_id": null,
									"resource": "accounts",
									"statement_description": "Purchase from Foo Bar Shop",
									"platform_onboarding_time": null,
									"projected_monthly_transaction_volume": 500,
									"convenience_fee_amount": 30,
									"transaction_type": "internet",
									"transaction_division_mid": null,
									"onboarding_location": {
										"line1": "123 candy st.",
										"city": "redwood city",
										"region": "CA",
										"country": "US",
										"postal_code": "94063"
									},
									"accepted_method_of_payments": {
										"countries": {
											"US": {
												"visa": {
													"card_not_present": {
														"credit": true,
														"debit": true
													},
													"card_present": {
														"contact": {
															"credit": true,
															"debit": true
														},
														"contactless": {
															"credit": true,
															"debit": true
														}
													}
												}
											}
										}
									}
								},
								"schema": {
									"$ref": "#/components/schemas/account-resp-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, UNSUPPORTED_COUNTRY, UNSUPPORTED_CURRENCY ",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /accounts call allows your platform to create a new account owned by a legal entity. The accounts resource allows your platform to create a new merchant account for each distinct business purpose.",
				"operationId": "POST_accounts",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"description": "Foo Bar Shop on 5th ave.",
								"industry": {
									"category_detail": "Website design",
									"merchant_category_code": "7333"
								},
								"legal_entity_id": "3cd20b3c-4008-400b-b708-2b844ce7be84",
								"name": "Foo Bar Shop",
								"payout": {
									"currencies": {
										"USD": {
											"payout_method_id": "0102b1c6-2bc7-448a-aa1d-0d180a1d982a",
											"period": "daily",
											"payout_purpose": {
												"sales_payout": {
													"payout_method_id": "0102b1c6-2bc7-448a-aa1d-0d180a1d982a",
													"period": "daily"
												}
											}
										}
									}
								},
								"reference_id": null,
								"statement_description": "Purchase from Foo Bar Shop",
								"projected_monthly_transaction_volume": 500,
								"convenience_fee_amount": 30,
								"transaction_type": "internet",
								"onboarding_location": {
									"line1": "123 candy st.",
									"city": "redwood city",
									"region": "CA",
									"country": "US",
									"postal_code": "94063"
								},
								"accepted_method_of_payments": {
									"countries": {
										"US": {
											"american_express": {
												"card_not_present": {
													"credit": true,
													"debit": true
												},
												"card_present": {
													"contact": {
														"credit": true,
														"debit": true
													},
													"contactless": {
														"credit": true,
														"debit": true
													}
												},
												"configurations": {
													"se_number": "1234567890",
													"seller_id": "321121234",
													"transaction_code": "conveyed"
												}
											}
										}
									}
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"legal_entity_id": {
										"$ref": "#/components/schemas/id"
									},
									"accepted_method_of_payments": {
										"additionalProperties": false,
										"properties": {
											"countries": {
												"additionalProperties": false,
												"properties": {
													"CA": {
														"additionalProperties": false,
														"properties": {
															"american_express": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	},
																	"configurations": {
																		"additionalProperties": false,
																		"properties": {
																			"se_number": {
																				"type": "string",
																				"maxLength": 10,
																				"minLength": 10
																			},
																			"transaction_code": {
																				"enum": [
																					"conveyed"
																				],
																				"x-enumDescriptions": {
																					"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
																				},
																				"type": "string"
																			},
																			"seller_id": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"transaction_code",
																			"se_number"
																		],
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"apple_pay": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"card_present": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"diners_club": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"discover": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"electronic_check": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"configurations": {
																		"additionalProperties": false,
																		"properties": {
																			"company_name": {
																				"type": "string",
																				"maxLength": 16,
																				"minLength": 1
																			},
																			"description": {
																				"type": "string",
																				"maxLength": 10,
																				"minLength": 1
																			}
																		},
																		"type": "object",
																		"required": [
																			"company_name",
																			"description"
																		]
																	}
																},
																"type": "object"
															},
															"google_pay": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"card_present": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"interac": {
																"additionalProperties": false,
																"properties": {
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"debit": {
																						"type": "boolean",
																						"default": true,
																						"description": "The contactless payment functionality of Interac® Debit is also called Interac Flash."
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"jcb": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"master_card": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"visa": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													},
													"US": {
														"additionalProperties": false,
														"properties": {
															"accel": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"american_express": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	},
																	"configurations": {
																		"additionalProperties": false,
																		"properties": {
																			"se_number": {
																				"type": "string",
																				"maxLength": 10,
																				"minLength": 10
																			},
																			"transaction_code": {
																				"enum": [
																					"conveyed"
																				],
																				"x-enumDescriptions": {
																					"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
																				},
																				"type": "string"
																			},
																			"seller_id": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"transaction_code",
																			"se_number"
																		],
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"apple_pay": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"card_present": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"diners_club": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"discover": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"electronic_check": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"configurations": {
																		"additionalProperties": false,
																		"properties": {
																			"company_name": {
																				"type": "string",
																				"maxLength": 16,
																				"minLength": 1
																			},
																			"description": {
																				"type": "string",
																				"maxLength": 10,
																				"minLength": 1
																			}
																		},
																		"type": "object",
																		"required": [
																			"company_name",
																			"description"
																		]
																	}
																},
																"type": "object"
															},
															"google_pay": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"card_present": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"jcb": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"master_card": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"nyce": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"pulse": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"star": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"visa": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											}
										},
										"type": "object",
										"description": "Provide the merchant's identifiers with different card brands they accept as methods of payment."
									},
									"beneficiary_legal_entity_id": {
										"type": "string",
										"nullable": true,
										"description": "If the Account is being transferred to a beneficiary, provide the Legal Entity ID of the beneficiary receiving the Account. **Note:** This parameter requires permission from WePay to use."
									},
									"convenience_fee_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"maximum": 9999999,
										"description": "Describe the [convenience fees](/clear/certify/card-network-rules/#convenience-fees) for [Merchant IC+](/pricing/merchant-interchange-plus/) accounts in cents."
									},
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"description": {
										"maxLength": 65535,
										"type": "string",
										"nullable": true,
										"description": "Short description of the merchant account."
									},
									"incoming_payments": {
										"$ref": "#/components/schemas/incoming_payments-req-v3_1"
									},
									"industry": {
										"additionalProperties": false,
										"properties": {
											"category_detail": {
												"maxLength": 1024,
												"type": "string",
												"nullable": true,
												"description": "Details about the merchant's industry category."
											},
											"merchant_category_code": {
												"pattern": "^\\d{4}$",
												"type": "string",
												"description": "Category code associated with the merchant's industry.",
												"nullable": true
											}
										},
										"type": "object",
										"description": "Categorizes the type of service or item a merchant is providing."
									},
									"name": {
										"maxLength": 255,
										"minLength": 1,
										"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*\\w+.*$",
										"type": "string",
										"nullable": true,
										"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
									},
									"onboarding_location": {
										"additionalProperties": false,
										"properties": {
											"city": {
												"maxLength": 30,
												"type": "string",
												"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
											},
											"country": {
												"$ref": "#/components/schemas/country_code"
											},
											"line1": {
												"maxLength": 60,
												"type": "string",
												"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
											},
											"postal_code": {
												"maxLength": 14,
												"type": "string",
												"description": "Postal code associated with the address."
											},
											"region": {
												"maxLength": 30,
												"type": "string",
												"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
											},
											"line2": {
												"maxLength": 60,
												"type": "string",
												"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
											}
										},
										"required": [
											"line1",
											"city",
											"postal_code",
											"region",
											"country"
										],
										"type": "object",
										"nullable": true,
										"x-isAddress": true,
										"description": "Address of the legal entity, controller, or additional representatives. When representing the entity's address, send the entity's address of operation. When representing the controller or additional representative send the individual's residential address."
									},
									"payout": {
										"$ref": "#/components/schemas/payout-req-v3_1"
									},
									"platform_onboarding_time": {
										"type": "integer",
										"minimum": 0,
										"format": "int64",
										"nullable": true,
										"description": "The Unix epoch time (in seconds) when the account finished onboarding to the platform."
									},
									"pricing": {
										"$ref": "#/components/schemas/pricing-create-v3_1"
									},
									"projected_monthly_transaction_volume": {
										"type": "integer",
										"nullable": true,
										"description": "The projected monthly transaction volume, TPV, of an account."
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits-v3_1"
									},
									"reference_id": {
										"$ref": "#/components/schemas/reference_id"
									},
									"referral_partner": {
										"maxLength": 75,
										"minLength": 1,
										"type": "string",
										"description": "The non ISV partner/solution that refers merchants for payment processing services"
									},
									"statement_description": {
										"maxLength": 255,
										"minLength": 1,
										"type": "string",
										"nullable": true,
										"pattern": "^((?![Ww][Ee][Pp][Aa][Yy])[ -~ùûüÿàâæçéèêëïîôœÙÛÜŸÀÆÇÉÈÊËÏÎÔŒ«»‘“”—–€])*$",
										"description": "A non-empty, ASCII-printable string that does **not** contain the word WePay. This will appear on payers' credit card statements. **Note:** The API allows up to 255 characters, but card issuers will only print 12-14 characters on statements. Find more information [here](/clear/onboard-merchants/)."
									},
									"transaction_type": {
										"type": "string",
										"enum": [
											"internet",
											"retail"
										],
										"x-enumDescriptions": {
											"internet": "The merchant will process card-not-present web transactions.",
											"retail": "The merchant will process card-present transactions."
										},
										"nullable": true,
										"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_type/description"
									}
								},
								"required": [
									"legal_entity_id"
								],
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Client-IP",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create an account"
			},
			"get": {
				"tags": [
					"/accounts/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": "/accounts?page=AQQHAAEX8yf1HDkrXqO7R-wy2joNU6ooRNCyDb-sSbbvR-8J6jKeFgpqprcIsuEnBh4fqImpR2eYjKIgSCirw2mhEFR7m5AsSj1OkG9emNFWhXQvreOczuQU7UzZ",
									"previous": null,
									"api_version": "3.1",
									"results": [
										{
											"convenience_fee_amount": 25,
											"transaction_type": "internet",
											"onboarding_location": {
												"line1": "123 candy st.",
												"city": "redwood city",
												"region": "CA",
												"country": "US",
												"postal_code": "94063"
											},
											"transaction_division_mid": null,
											"accepted_method_of_payments": {
												"countries": {
													"US": {
														"visa": {
															"card_not_present": {
																"credit": true,
																"debit": true
															},
															"card_present": {
																"contact": {
																	"credit": true,
																	"debit": true
																},
																"contactless": {
																	"credit": true,
																	"debit": true
																}
															}
														}
													}
												}
											},
											"balances": {
												"currencies": {
													"USD": {
														"balance": 100000,
														"incoming_pending": 5000,
														"outgoing_pending": 21200,
														"reserve": 10000
													}
												}
											},
											"create_time": 1480700534,
											"api_version": "3.1",
											"beneficiary": {
												"id": "295f2816-07b9-4d9e-a035-4f0884ef228b",
												"resource": "legal_entities",
												"path": "/legal_entities/295f2816-07b9-4d9e-a035-4f0884ef228b"
											},
											"custom_data": null,
											"description": "Foo Bar Shop on 5th ave.",
											"documents": [],
											"enhanced_review": "not_requested",
											"id": "d3f61e56-5d99-4895-af2d-a07ab48476e9",
											"incoming_payments": {
												"accepted_methods": [
													"payment_bank",
													"mastercard",
													"visa",
													"amex"
												],
												"amex": {
													"countries": {
														"US": {
															"opt_blue": {
																"opt_into_marketing": true,
																"amex_seller_number": 1912187301,
																"amex_seller_id": "970001000016308"
															}
														}
													}
												}
											},
											"industry": {
												"category_detail": "Website design",
												"merchant_category_code": "7333"
											},
											"name": "Foo Bar Shop",
											"owner": {
												"id": "3cd20b3c-4008-400b-b708-2b844ce7be84",
												"path": "/legal_entities/3cd20b3c-4008-400b-b708-2b844ce7be84",
												"resource": "legal_entities"
											},
											"path": "/accounts/d3f61e56-5d99-4895-af2d-a07ab48476e9",
											"payout": {
												"currencies": {
													"USD": {
														"next_payout_time": 14987382982,
														"payout_method_id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
														"period": "daily"
													}
												},
												"default_currency": "USD"
											},
											"pricing": {
												"currencies": {
													"USD": {
														"credit_card": null,
														"payment_bank": null,
														"recurring_fee": null,
														"other_fees": {
															"debit_failure_fee": null
														}
													}
												}
											},
											"reference_id": null,
											"resource": "accounts",
											"statement_description": "Purchase from Foo Bar Shop",
											"platform_onboarding_time": null,
											"projected_monthly_transaction_volume": 400
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/account-resp-v3_1"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of account objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"results",
										"next",
										"previous"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /accounts call allows your platform to look up a collection of accounts. The accounts resource allows your platform to create a new merchant account for each distinct business purpose.",
				"operationId": "GET_accounts",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp (in UNIX seconds) for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp (in UNIX seconds) for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "The ID of the legal entity you want to lookup accounts for.",
						"schema": {
							"$ref": "#/components/schemas/id"
						}
					},
					{
						"name": "beneficiary_legal_entity_id",
						"in": "query",
						"description": "Filter search window by elements that match the account's beneficiary legal entity.",
						"schema": {
							"$ref": "#/components/schemas/id"
						}
					},
					{
						"name": "reference_id",
						"in": "query",
						"description": "Return elements having this reference_id.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of accounts"
			}
		},
		"/accounts/{id}": {
			"post": {
				"tags": [
					"/accounts/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"balances": {
										"currencies": {
											"USD": {
												"balance": 100000,
												"incoming_pending": 5000,
												"outgoing_pending": 21200,
												"reserve": 10000
											}
										}
									},
									"create_time": 1480700534,
									"api_version": "3.1",
									"convenience_fee_amount": 25,
									"transaction_type": "internet",
									"onboarding_location": {
										"line1": "123 candy st.",
										"city": "redwood city",
										"region": "CA",
										"country": "US",
										"postal_code": "94063"
									},
									"transaction_division_mid": null,
									"accepted_method_of_payments": {
										"countries": {
											"US": {
												"visa": {
													"card_not_present": {
														"credit": true,
														"debit": true
													},
													"card_present": {
														"contact": {
															"credit": true,
															"debit": true
														},
														"contactless": {
															"credit": true,
															"debit": true
														}
													}
												}
											}
										}
									},
									"beneficiary": {
										"id": "295f2816-07b9-4d9e-a035-4f0884ef228b",
										"resource": "legal_entities",
										"path": "/legal_entities/295f2816-07b9-4d9e-a035-4f0884ef228b"
									},
									"custom_data": null,
									"description": "Foo Bar Shop on 5th ave.",
									"documents": [],
									"enhanced_review": "not_requested",
									"id": "d3f61e56-5d99-4895-af2d-a07ab48476e9",
									"incoming_payments": {
										"accepted_methods": [
											"payment_bank",
											"mastercard",
											"visa",
											"amex"
										],
										"amex": {
											"countries": {
												"US": {
													"opt_blue": {
														"opt_into_marketing": true,
														"amex_seller_number": 1912187301,
														"amex_seller_id": "970001000016308"
													}
												}
											}
										}
									},
									"industry": {
										"category_detail": "Website design",
										"merchant_category_code": "7333"
									},
									"name": "Foo Bar Shop",
									"owner": {
										"id": "3cd20b3c-4008-400b-b708-2b844ce7be84",
										"path": "/legal_entities/3cd20b3c-4008-400b-b708-2b844ce7be84",
										"resource": "legal_entities"
									},
									"path": "/accounts/d3f61e56-5d99-4895-af2d-a07ab48476e9",
									"payout": {
										"currencies": {
											"USD": {
												"next_payout_time": 14987382982,
												"payout_method_id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
												"period": "daily"
											}
										},
										"default_currency": "USD"
									},
									"pricing": {
										"currencies": {
											"USD": {
												"credit_card": null,
												"payment_bank": null,
												"recurring_fee": null,
												"other_fees": {
													"debit_failure_fee": null
												}
											}
										}
									},
									"reference_id": null,
									"resource": "accounts",
									"statement_description": "Purchase from Foo Bar Shop",
									"platform_onboarding_time": null,
									"projected_monthly_transaction_volume": 500
								},
								"schema": {
									"$ref": "#/components/schemas/account-resp-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, UNSUPPORTED_COUNTRY, UNSUPPORTED_CURRENCY",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"409": {
						"description": "RESOURCE_CONFLICT",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /accounts/{id} call allows your platform to update and add custom data to an account. The accounts resource allows your platform to create a new merchant account for each distinct business purpose.",
				"operationId": "POST_accounts-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"description": "Foo Bar Shop on 5th ave.",
								"industry": {
									"category_detail": "Website design",
									"merchant_category_code": "7333"
								},
								"name": "Foo Bar Shop",
								"incoming_payments": {
									"amex": {
										"countries": {
											"US": {
												"opt_blue": {
													"opt_into_marketing": true
												}
											}
										}
									}
								},
								"convenience_fee_amount": 25,
								"transaction_type": "internet",
								"onboarding_location": {
									"line1": "123 candy st.",
									"city": "redwood city",
									"region": "CA",
									"country": "US",
									"postal_code": "94063"
								},
								"accepted_method_of_payments": {
									"countries": {
										"US": {
											"visa": {
												"card_not_present": {
													"credit": true,
													"debit": true
												},
												"card_present": {
													"contact": {
														"credit": true,
														"debit": true
													},
													"contactless": {
														"credit": true,
														"debit": true
													}
												}
											}
										}
									}
								},
								"payout": {
									"currencies": {
										"USD": {
											"payout_method_id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
											"period": "daily",
											"payout_purpose": {
												"sales_payout": {
													"payout_method_id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
													"period": "daily"
												}
											}
										}
									}
								},
								"reference_id": null,
								"statement_description": "Purchase from Foo Bar Shop",
								"projected_monthly_transaction_volume": 500
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"accepted_method_of_payments": {
										"additionalProperties": false,
										"properties": {
											"countries": {
												"additionalProperties": false,
												"properties": {
													"CA": {
														"additionalProperties": false,
														"properties": {
															"american_express": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	},
																	"configurations": {
																		"additionalProperties": false,
																		"properties": {
																			"se_number": {
																				"type": "string",
																				"maxLength": 10,
																				"minLength": 10
																			},
																			"transaction_code": {
																				"enum": [
																					"conveyed"
																				],
																				"x-enumDescriptions": {
																					"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
																				},
																				"type": "string"
																			},
																			"seller_id": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"transaction_code",
																			"se_number"
																		],
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"apple_pay": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"card_present": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"diners_club": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"discover": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"electronic_check": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"configurations": {
																		"additionalProperties": false,
																		"properties": {
																			"company_name": {
																				"type": "string",
																				"maxLength": 16,
																				"minLength": 1
																			},
																			"description": {
																				"type": "string",
																				"maxLength": 10,
																				"minLength": 1
																			}
																		},
																		"type": "object",
																		"required": [
																			"company_name",
																			"description"
																		]
																	}
																},
																"type": "object"
															},
															"google_pay": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"card_present": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"interac": {
																"additionalProperties": false,
																"properties": {
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"debit": {
																						"type": "boolean",
																						"default": true,
																						"description": "The contactless payment functionality of Interac® Debit is also called Interac Flash."
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"jcb": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"master_card": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"visa": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													},
													"US": {
														"additionalProperties": false,
														"properties": {
															"accel": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"american_express": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	},
																	"configurations": {
																		"additionalProperties": false,
																		"properties": {
																			"se_number": {
																				"type": "string",
																				"maxLength": 10,
																				"minLength": 10
																			},
																			"transaction_code": {
																				"enum": [
																					"conveyed"
																				],
																				"x-enumDescriptions": {
																					"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
																				},
																				"type": "string"
																			},
																			"seller_id": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"transaction_code",
																			"se_number"
																		],
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"apple_pay": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"card_present": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"diners_club": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"discover": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"electronic_check": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"configurations": {
																		"additionalProperties": false,
																		"properties": {
																			"company_name": {
																				"type": "string",
																				"maxLength": 16,
																				"minLength": 1
																			},
																			"description": {
																				"type": "string",
																				"maxLength": 10,
																				"minLength": 1
																			}
																		},
																		"type": "object",
																		"required": [
																			"company_name",
																			"description"
																		]
																	}
																},
																"type": "object"
															},
															"google_pay": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"type": "boolean",
																		"default": true
																	},
																	"card_present": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"jcb": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"master_card": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"nyce": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"pulse": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"star": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"visa": {
																"additionalProperties": false,
																"properties": {
																	"card_not_present": {
																		"additionalProperties": false,
																		"properties": {
																			"credit": {
																				"type": "boolean",
																				"default": true
																			},
																			"debit": {
																				"type": "boolean",
																				"default": true
																			}
																		},
																		"type": "object"
																	},
																	"card_present": {
																		"additionalProperties": false,
																		"properties": {
																			"contact": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			},
																			"contactless": {
																				"additionalProperties": false,
																				"properties": {
																					"credit": {
																						"type": "boolean",
																						"default": true
																					},
																					"debit": {
																						"type": "boolean",
																						"default": true
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											}
										},
										"type": "object",
										"description": "Provide the merchant's identifiers with different card brands they accept as methods of payment."
									},
									"beneficiary_legal_entity_id": {
										"type": "string",
										"nullable": true,
										"description": "If the Account is being transferred to a beneficiary, provide the Legal Entity ID of the beneficiary receiving the Account. **Note:** This parameter requires permission from WePay to use."
									},
									"convenience_fee_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"maximum": 9999999,
										"description": "Describe the [convenience fees](/clear/certify/card-network-rules/#convenience-fees) for [Merchant IC+](/pricing/merchant-interchange-plus/) accounts in cents."
									},
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"description": {
										"maxLength": 65535,
										"type": "string",
										"nullable": true,
										"description": "Short description of the merchant account."
									},
									"documents": {
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true,
										"description": "For Accounts on [Merchant IC+ pricing](/pricing/merchant-interchange-plus/), [upload documents](/api/latest/overview#/http/guides/document-upload) showing your platform's fee disclosure to the merchant during their onboarding, and provide those IDs here. For more information, refer to [this section](/pricing/merchant-interchange-plus/#disclose-merchant-ic-pricing) of the Merchant IC+ cookbook."
									},
									"incoming_payments": {
										"$ref": "#/components/schemas/incoming_payments-req-v3_1"
									},
									"industry": {
										"additionalProperties": false,
										"properties": {
											"category_detail": {
												"maxLength": 1024,
												"type": "string",
												"nullable": true,
												"description": "Details about the merchant's industry category."
											},
											"merchant_category_code": {
												"pattern": "^\\d{4}$",
												"type": "string",
												"description": "Category code associated with the merchant's industry.",
												"nullable": true
											}
										},
										"type": "object",
										"description": "Categorizes the type of service or item a merchant is providing."
									},
									"name": {
										"maxLength": 255,
										"minLength": 1,
										"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*\\w+.*$",
										"type": "string",
										"nullable": true,
										"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
									},
									"onboarding_location": {
										"additionalProperties": false,
										"properties": {
											"city": {
												"maxLength": 30,
												"type": "string",
												"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
											},
											"country": {
												"$ref": "#/components/schemas/country_code"
											},
											"line1": {
												"maxLength": 60,
												"type": "string",
												"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
											},
											"postal_code": {
												"maxLength": 14,
												"type": "string",
												"description": "Postal code associated with the address."
											},
											"region": {
												"maxLength": 30,
												"type": "string",
												"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
											},
											"line2": {
												"maxLength": 60,
												"type": "string",
												"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
											}
										},
										"required": [
											"line1",
											"city",
											"postal_code",
											"region",
											"country"
										],
										"type": "object",
										"nullable": true,
										"x-isAddress": true,
										"description": "Address of the legal entity, controller, or additional representatives. When representing the entity's address, send the entity's address of operation. When representing the controller or additional representative send the individual's residential address."
									},
									"payout": {
										"$ref": "#/components/schemas/payout-req-v3_1"
									},
									"platform_onboarding_time": {
										"type": "integer",
										"minimum": 0,
										"format": "int64",
										"nullable": true,
										"description": "The Unix epoch time (in seconds) when the account finished onboarding to the platform."
									},
									"pricing": {
										"$ref": "#/components/schemas/pricing-update-v3_1"
									},
									"projected_monthly_transaction_volume": {
										"type": "integer",
										"nullable": true,
										"description": "The projected monthly transaction volume, TPV, of an account."
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits-v3_1"
									},
									"reference_id": {
										"$ref": "#/components/schemas/reference_id"
									},
									"statement_description": {
										"maxLength": 255,
										"minLength": 1,
										"type": "string",
										"nullable": true,
										"pattern": "^((?![Ww][Ee][Pp][Aa][Yy])[ -~ùûüÿàâæçéèêëïîôœÙÛÜŸÀÆÇÉÈÊËÏÎÔŒ«»‘“”—–€])*$",
										"description": "A non-empty, ASCII-printable string that does **not** contain the word WePay. This will appear on payers' credit card statements. **Note:** The API allows up to 255 characters, but card issuers will only print 12-14 characters on statements. Find more information [here](/clear/onboard-merchants/)."
									},
									"transaction_type": {
										"type": "string",
										"enum": [
											"internet",
											"retail"
										],
										"x-enumDescriptions": {
											"internet": "The merchant will process card-not-present web transactions.",
											"retail": "The merchant will process card-present transactions."
										},
										"nullable": true,
										"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_type/description"
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Client-IP",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update an account"
			},
			"get": {
				"tags": [
					"/accounts/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"convenience_fee_amount": 25,
									"transaction_type": "internet",
									"onboarding_location": {
										"line1": "123 candy st.",
										"city": "redwood city",
										"region": "CA",
										"country": "US",
										"postal_code": "94063"
									},
									"transaction_division_mid": null,
									"accepted_method_of_payments": {
										"countries": {
											"US": {
												"visa": {
													"card_not_present": {
														"credit": true,
														"debit": true
													},
													"card_present": {
														"contact": {
															"credit": true,
															"debit": true
														},
														"contactless": {
															"credit": true,
															"debit": true
														}
													}
												}
											}
										}
									},
									"balances": {
										"currencies": {
											"USD": {
												"balance": 100000,
												"incoming_pending": 5000,
												"outgoing_pending": 21200,
												"reserve": 10000
											}
										}
									},
									"create_time": 1480700534,
									"custom_data": null,
									"api_version": "3.1",
									"beneficiary": {
										"id": "295f2816-07b9-4d9e-a035-4f0884ef228b",
										"resource": "legal_entities",
										"path": "/legal_entities/295f2816-07b9-4d9e-a035-4f0884ef228b"
									},
									"description": "Foo Bar Shop on 5th ave.",
									"documents": [],
									"enhanced_review": "not_requested",
									"id": "d3f61e56-5d99-4895-af2d-a07ab48476e9",
									"incoming_payments": {
										"accepted_methods": [
											"payment_bank",
											"mastercard",
											"visa",
											"amex"
										],
										"amex": {
											"countries": {
												"US": {
													"opt_blue": {
														"opt_into_marketing": true,
														"amex_seller_number": 1912187301,
														"amex_seller_id": "970001000016308"
													}
												}
											}
										}
									},
									"industry": {
										"category_detail": "Website design",
										"merchant_category_code": "7333"
									},
									"name": "Foo Bar Shop",
									"owner": {
										"id": "3cd20b3c-4008-400b-b708-2b844ce7be84",
										"path": "/legal_entities/3cd20b3c-4008-400b-b708-2b844ce7be84",
										"resource": "legal_entities"
									},
									"path": "/accounts/d3f61e56-5d99-4895-af2d-a07ab48476e9",
									"payout": {
										"currencies": {
											"USD": {
												"next_payout_time": 14987382982,
												"payout_method_id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
												"period": "daily"
											}
										},
										"default_currency": "USD"
									},
									"pricing": {
										"currencies": {
											"USD": {
												"credit_card": null,
												"payment_bank": null,
												"recurring_fee": null,
												"other_fees": {
													"debit_failure_fee": null
												}
											}
										}
									},
									"reference_id": null,
									"resource": "accounts",
									"statement_description": "Purchase from Foo Bar Shop",
									"platform_onboarding_time": null,
									"projected_monthly_transaction_volume": 500
								},
								"schema": {
									"$ref": "#/components/schemas/account-resp-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"401": {
						"description": "COULD_NOT_AUTHENTICATE",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /accounts/{id} call allows your platform to look up a single account. The accounts resource allows your platform to create a new merchant account for each distinct business purpose.",
				"operationId": "GET_accounts-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get an account"
			},
			"delete": {
				"tags": [
					"/accounts/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"balances": {
										"currencies": {
											"USD": {
												"balance": 100000,
												"incoming_pending": 5000,
												"outgoing_pending": 21200,
												"reserve": 10000
											}
										}
									},
									"create_time": 1480700534,
									"custom_data": null,
									"api_version": "3.1",
									"beneficiary": {
										"id": "295f2816-07b9-4d9e-a035-4f0884ef228b",
										"resource": "legal_entities",
										"path": "/legal_entities/295f2816-07b9-4d9e-a035-4f0884ef228b"
									},
									"description": "Foo Bar Shop on 5th ave.",
									"documents": [],
									"enhanced_review": "not_requested",
									"id": "d3f61e56-5d99-4895-af2d-a07ab48476e9",
									"incoming_payments": {
										"accepted_methods": [
											"payment_bank",
											"mastercard",
											"visa",
											"amex"
										],
										"amex": {
											"countries": {
												"US": {
													"opt_blue": {
														"opt_into_marketing": true,
														"amex_seller_number": 1912187301,
														"amex_seller_id": "970001000016308"
													}
												}
											}
										}
									},
									"industry": {
										"category_detail": "Website design",
										"merchant_category_code": "7333"
									},
									"name": "Foo Bar Shop",
									"owner": {
										"id": "3cd20b3c-4008-400b-b708-2b844ce7be84",
										"path": "/legal_entities/3cd20b3c-4008-400b-b708-2b844ce7be84",
										"resource": "legal_entities"
									},
									"path": "/accounts/d3f61e56-5d99-4895-af2d-a07ab48476e9",
									"payout": {
										"currencies": {
											"USD": {
												"next_payout_time": 14987382982,
												"payout_method_id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
												"period": "daily"
											}
										},
										"default_currency": "USD"
									},
									"pricing": {
										"currencies": {
											"USD": {
												"credit_card": null,
												"payment_bank": null,
												"recurring_fee": null,
												"other_fees": {
													"debit_failure_fee": null
												}
											}
										}
									},
									"reference_id": null,
									"resource": "accounts",
									"statement_description": "Purchase from Foo Bar Shop",
									"platform_onboarding_time": null,
									"projected_monthly_transaction_volume": 500
								},
								"schema": {
									"$ref": "#/components/schemas/account-resp-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"401": {
						"description": "COULD_NOT_AUTHENTICATE",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"409": {
						"description": "RESOURCE_CONFLICT",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The DELETE /accounts/{id} call allows your platform to delete a single account. The accounts resource allows your platform to create a new merchant account for each distinct business purpose. This endpoint is currently restricted and only intended for Core or Clear partners’ use. If access to this endpoint is required, work with your Integration Engineer or Technical Account Manager to enable the configuration and gain access.",
				"operationId": "DELETE_accounts-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Delete an account"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"description": "ID of the merchant account, generated by WePay when the account is created.",
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/accounts/{id}/capabilities": {
			"post": {
				"tags": [
					"/accounts/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"transaction_division_setup": {
										"current_issues": [
											{
												"identity_verification": {
													"path": "controller.personal_verification.documents",
													"requested_documents": [
														"passport",
														"drivers_license"
													],
													"message": "we need to verify your date of birth"
												},
												"issue_type": "identity_verification",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											}
										],
										"enabled": true,
										"upcoming_issues": {}
									},
									"payments": {
										"enabled": true,
										"current_issues": [],
										"upcoming_issues": {}
									},
									"payouts": {
										"enabled": false,
										"current_issues": [
											{
												"issue_type": "application_block",
												"application_block": {
													"reason": "This is a sham!"
												},
												"target": {
													"resource": "accounts",
													"id": "f779afd5-f860-43fb-9d19-d47d3b099bf3",
													"path": "/accounts/f779afd5-f860-43fb-9d19-d47d3b099bf3"
												}
											}
										],
										"upcoming_issues": {}
									},
									"terminals": {
										"enabled": true,
										"current_issues": [],
										"upcoming_issues": {}
									},
									"id": null,
									"resource": "capabilities",
									"path": "/accounts/f779afd5-f860-43fb-9d19-d47d3b099bf3/capabilities",
									"owner": {
										"id": "f779afd5-f860-43fb-9d19-d47d3b099bf3",
										"resource": "accounts",
										"path": "/accounts/f779afd5-f860-43fb-9d19-d47d3b099bf3"
									},
									"api_version": "3.1"
								},
								"schema": {
									"$ref": "#/components/schemas/capabilities-resp-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "**This endpoint requires permission from WePay.** The POST /accounts/{id}/capabilities call allows your platform to update an account's capabilities. The accounts resource allows your platform to create a new merchant account for each distinct business purpose.",
				"operationId": "POST_accounts-id-capabilities",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"payouts": {
									"application_block": {
										"is_blocked": true,
										"reason": "This is a sham!"
									}
								}
							},
							"schema": {
								"type": "object",
								"properties": {
									"payments": {
										"type": "object",
										"properties": {
											"application_block": {
												"type": "object",
												"properties": {
													"is_blocked": {
														"type": "boolean",
														"description": "Applies a block on the capability when true. To remove the block set to false."
													},
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"required": [
													"is_blocked",
													"reason"
												],
												"additionalProperties": false,
												"description": "**This parameter requires permission from WePay** and allows your application to block an account's payment, payout, or terminal capabilities. Read more about this feature [here](https://dev.wepay.com/docs/basic-integration/manage-payment-operations#close-accounts).",
												"example": {
													"is_blocked": true,
													"reason": "This merchant requires additional vetting"
												}
											}
										},
										"additionalProperties": false,
										"description": "Specify the capability being updated.",
										"example": {
											"application_block": {
												"is_blocked": true,
												"reason": "This merchant requires additional vetting."
											}
										}
									},
									"payouts": {
										"type": "object",
										"properties": {
											"application_block": {
												"type": "object",
												"properties": {
													"is_blocked": {
														"type": "boolean",
														"description": "Applies a block on the capability when true. To remove the block set to false."
													},
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"required": [
													"is_blocked",
													"reason"
												],
												"additionalProperties": false,
												"description": "**This parameter requires permission from WePay** and allows your application to block an account's payment, payout, or terminal capabilities. Read more about this feature [here](https://dev.wepay.com/docs/basic-integration/manage-payment-operations#close-accounts).",
												"example": {
													"is_blocked": true,
													"reason": "This merchant requires additional vetting"
												}
											}
										},
										"additionalProperties": false,
										"description": "Specify the capability being updated.",
										"example": {
											"application_block": {
												"is_blocked": true,
												"reason": "This merchant requires additional vetting."
											}
										}
									}
								},
								"additionalProperties": false,
								"description": "Update an account's capabilities. **This parameter requires permission from WePay** and allows your application to block an account's payment or payout capabilities. Read more about this feature [here](https://dev.wepay.com/docs/basic-integration/onboard-merchants#block-accounts).",
								"example": {
									"payouts": {
										"application_block": {
											"is_blocked": true,
											"reason": "This is a sham!"
										}
									}
								}
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "is_expanded",
						"in": "query",
						"schema": {
							"default": true,
							"type": "boolean"
						}
					}
				],
				"summary": "Update capabilities"
			},
			"get": {
				"tags": [
					"/accounts/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"id": null,
									"owner": {
										"id": "9647b114-55ca-4c58-8072-d424d879ac06",
										"path": "/accounts/9647b114-55ca-4c58-8072-d424d879ac06",
										"resource": "accounts"
									},
									"path": "/accounts/9647b114-55ca-4c58-8072-d424d879ac06/capabilities",
									"transaction_division_setup": {
										"current_issues": [
											{
												"identity_verification": {
													"path": "controller.personal_verification.documents",
													"requested_documents": [
														"passport",
														"drivers_license"
													],
													"message": "we need to verify your date of birth"
												},
												"issue_type": "identity_verification",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											}
										],
										"enabled": true,
										"upcoming_issues": {}
									},
									"payments": {
										"current_issues": [
											{
												"identity_verification": {
													"path": "controller.personal_verification.documents",
													"requested_documents": [
														"drivers_license",
														"current_lease_contract"
													],
													"message": "we need to verify your address"
												},
												"issue_type": "identity_verification",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											},
											{
												"risk_outreach": {
													"path": "controller.personal_verification.documents",
													"requested_documents": [
														"drivers_license",
														"current_lease_contract"
													],
													"message": "we need to verify your address"
												},
												"issue_type": "risk_outreach",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											}
										],
										"enabled": true,
										"upcoming_issues": {
											"1512344668": [
												{
													"errant_fields": {
														"controller.address": [
															"is_null"
														],
														"controller.date_of_birth": [
															"is_null"
														],
														"controller.name": [
															"is_null"
														],
														"controller.personal_country_info.US.social_security_number": [
															"is_null"
														],
														"controller.phone": [
															"is_null"
														],
														"entity_country_info.US.legal_form": [
															"is_null"
														],
														"terms_of_service.acceptance_time": [
															"is_null"
														],
														"terms_of_service.original_ip": [
															"is_null"
														],
														"terms_of_service.terms_of_service_version": [
															"is_null"
														]
													},
													"issue_type": "errant_fields",
													"target": {
														"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
														"resource": "legal_entities"
													}
												}
											]
										}
									},
									"payouts": {
										"current_issues": [
											{
												"errant_fields": {
													"controller.name": [
														"is_null"
													]
												},
												"issue_type": "errant_fields",
												"target": {
													"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
													"resource": "legal_entities"
												}
											},
											{
												"additional_documents_required": [
													"additional_representatives.representative_0.personal_verification.documents"
												],
												"issue_type": "additional_documents_required",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											},
											{
												"identity_verification": {
													"path": "controller.personal_verification.documents",
													"requested_documents": [
														"drivers_license",
														"current_lease_contract"
													],
													"message": "we need to verify your address"
												},
												"issue_type": "identity_verification",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											},
											{
												"risk_outreach": {
													"path": "controller.personal_verification.documents",
													"requested_documents": [
														"drivers_license",
														"current_lease_contract"
													],
													"message": "we need to verify your address"
												},
												"issue_type": "risk_outreach",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											}
										],
										"enabled": false,
										"upcoming_issues": {
											"1512344668": [
												{
													"errant_fields": {
														"controller.address": [
															"is_null"
														],
														"controller.date_of_birth": [
															"is_null"
														],
														"controller.personal_country_info.US.social_security_number": [
															"is_null"
														],
														"controller.phone": [
															"is_null"
														],
														"entity_country_info.US.legal_form": [
															"is_null"
														],
														"terms_of_service.acceptance_time": [
															"is_null"
														],
														"terms_of_service.original_ip": [
															"is_null"
														],
														"terms_of_service.terms_of_service_version": [
															"is_null"
														]
													},
													"issue_type": "errant_fields",
													"target": {
														"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
														"resource": "legal_entities"
													}
												}
											]
										}
									},
									"terminals": {
										"current_issues": [
											{
												"errant_fields": {
													"controller.phone": [
														"is_null"
													],
													"address": [
														"is_null"
													],
													"entity_country_info.US.employer_identification_number": [
														"is_null"
													],
													"controller.date_of_birth": [
														"is_null"
													],
													"phone": [
														"is_null"
													],
													"controller.name": [
														"is_null"
													],
													"controller.personal_country_info.US.social_security_number": [
														"is_null"
													],
													"entity_country_info.US.legal_form": [
														"is_null"
													],
													"controller.email": [
														"is_null"
													]
												},
												"issue_type": "errant_fields",
												"target": {
													"resource": "legal_entities",
													"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e"
												}
											},
											{
												"identity_verification": {
													"path": "controller.personal_verification.documents",
													"requested_documents": [
														"drivers_license",
														"current_lease_contract"
													],
													"message": "we need to verify your address"
												},
												"issue_type": "identity_verification",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											},
											{
												"risk_outreach": {
													"path": "controller.personal_verification.documents",
													"requested_documents": [
														"current_bank_statement"
													],
													"message": "we need to verify your date of birth"
												},
												"issue_type": "risk_outreach",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											},
											{
												"errant_fields": {
													"name": [
														"is_null"
													],
													"industry.merchant_category_code": [
														"is_unsupported_value"
													]
												},
												"issue_type": "errant_fields",
												"target": {
													"resource": "accounts",
													"id": "9647b114-55ca-4c58-8072-d424d879ac06",
													"path": "/accounts/9647b114-55ca-4c58-8072-d424d879ac06"
												}
											}
										],
										"enabled": false,
										"upcoming_issues": {}
									},
									"resource": "capabilities",
									"api_version": "3.1"
								},
								"schema": {
									"$ref": "#/components/schemas/capabilities-resp-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /accounts/{id}/capabilities call allows your platform to look up an account's capabilities. The accounts resource allows your platform to create a new merchant account for each distinct business purpose.",
				"operationId": "GET_accounts-id-capabilities",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "is_expanded",
						"in": "query",
						"schema": {
							"default": true,
							"type": "boolean"
						}
					}
				],
				"summary": "Get capabilities"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the merchant account, generated by WePay when the account is created."
				}
			]
		},
		"/adjustments": {
			"get": {
				"tags": [
					"/adjustments/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": "/adjustments?page=QVFQNUFBRVh4SmJxMVpwdTI4L3ArUmlvTUFQTEgzWVlHek5KNk1YZS84alpHNmsvVTF0TzVZc1VnMWRpZDRNcjJQQVNsNG41aklzR0toZ2tLVGlvUjFmSGR2Vm5OdFBaSTJvbHRxWldTWTZUb3poc1hwdm9MZHhKMW1FOHhxc05UeWFXSWRNT0k0WXowa0RDYWdaNUhGcytRZmJxR29FamY2dkk5MWFuVmppQ1MvNGVNRVJPNFdGV0JxelJFdz09",
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"amount": 1000,
											"create_time": 1520543108,
											"currency": "USD",
											"custom_data": null,
											"id": "9fed5d2f-3957-412c-9f30-efabcc2b5405",
											"owner": {
												"id": "46f481b3-a267-48e5-b6b6-e7685d3031f8",
												"path": "/accounts/46f481b3-a267-48e5-b6b6-e7685d3031f8",
												"resource": "accounts"
											},
											"path": "/adjustments/9fed5d2f-3957-412c-9f30-efabcc2b5405",
											"reason": {
												"reason_code": "REIMBURSEMENTS_AND_CORRECTIONS",
												"reason_message": "Adjustment for reimbursement or corrections.",
												"details": [
													{
														"detail_code": "bank_overdraft_fee",
														"detail_message": "Reimbursement of Bank Overdraft Fee."
													}
												]
											},
											"resource": "adjustments",
											"txnr_adjustment": {
												"id": "80027dfa-39a2-4d6e-ac7a-024c61340bc2",
												"path": "/transaction_records/80027dfa-39a2-4d6e-ac7a-024c61340bc2",
												"resource": "transaction_records"
											},
											"type": "credit",
											"api_version": "3.0"
										},
										{
											"amount": -1000,
											"create_time": 1520471396,
											"currency": "USD",
											"custom_data": null,
											"id": "91e3d7f6-0fe7-4f66-a414-715fbece14e2",
											"owner": {
												"id": "46f481b3-a267-48e5-b6b6-e7685d3031f8",
												"path": "/accounts/46f481b3-a267-48e5-b6b6-e7685d3031f8",
												"resource": "accounts"
											},
											"path": "/adjustments/91e3d7f6-0fe7-4f66-a414-715fbece14e2",
											"reason": {
												"reason_code": "ESCHEATMENT",
												"reason_message": "Adjustment due to abandoned funds.",
												"details": [
													{
														"detail_code": "escheatment",
														"detail_message": "Abandoned funds escheated to state of account-holder."
													}
												]
											},
											"resource": "adjustments",
											"txnr_adjustment": {
												"id": "a904c2cc-4eb1-4cba-bab5-8ff20c600f90",
												"path": "/transaction_records/a904c2cc-4eb1-4cba-bab5-8ff20c600f90",
												"resource": "transaction_records"
											},
											"type": "debit",
											"api_version": "3.0"
										},
										{
											"amount": 1000,
											"create_time": 1520471380,
											"currency": "USD",
											"custom_data": null,
											"id": "1020c224-b5c3-44ef-8a95-7e220e23b743",
											"owner": {
												"id": "46f481b3-a267-48e5-b6b6-e7685d3031f8",
												"path": "/accounts/46f481b3-a267-48e5-b6b6-e7685d3031f8",
												"resource": "accounts"
											},
											"path": "/adjustments/1020c224-b5c3-44ef-8a95-7e220e23b743",
											"reason": {
												"reason_code": "REIMBURSEMENTS_AND_CORRECTIONS",
												"reason_message": "Adjustment for reimbursement or corrections.",
												"details": [
													{
														"detail_code": "bank_overdraft_fee",
														"detail_message": "Reimbursement of Bank Overdraft Fee."
													}
												]
											},
											"resource": "adjustments",
											"txnr_adjustment": {
												"id": "50bcdd90-c351-4814-a16d-769bcf59ac9f",
												"path": "/transaction_records/50bcdd90-c351-4814-a16d-769bcf59ac9f",
												"resource": "transaction_records"
											},
											"type": "credit",
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/adjustments"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of adjustment objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"previous",
										"next",
										"results"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /adjustments call allows your platform to look up a collection of adjustments. Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `adjustments.created` Notification event topic in order to programmatically integrate new Adjustments that WePay makes to the merchant's Account.",
				"operationId": "GET_adjustments",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "owner_id",
						"in": "query",
						"schema": {
							"type": "string"
						},
						"description": "Return elements owned by this resource instance."
					}
				],
				"summary": "Get a collection of adjustments"
			}
		},
		"/adjustments/{id}": {
			"get": {
				"tags": [
					"/adjustments/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 1000,
									"create_time": 1520471380,
									"currency": "USD",
									"custom_data": null,
									"id": "9fed5d2f-3957-412c-9f30-efabcc2b5405",
									"owner": {
										"id": "46f481b3-a267-48e5-b6b6-e7685d3031f8",
										"path": "/accounts/46f481b3-a267-48e5-b6b6-e7685d3031f8",
										"resource": "accounts"
									},
									"path": "/adjustments/9fed5d2f-3957-412c-9f30-efabcc2b5405",
									"reason": {
										"reason_code": "REIMBURSEMENTS_AND_CORRECTIONS",
										"reason_message": "Adjustment for reimbursement or corrections.",
										"details": [
											{
												"detail_code": "bank_overdraft_fee",
												"detail_message": "Reimbursement of Bank Overdraft Fee."
											}
										]
									},
									"resource": "adjustments",
									"txnr_adjustment": {
										"id": "80027dfa-39a2-4d6e-ac7a-024c61340bc2",
										"path": "/transaction_records/80027dfa-39a2-4d6e-ac7a-024c61340bc2",
										"resource": "transaction_records"
									},
									"type": "credit",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/adjustments"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /adjustments/{id} call allows your platform to look up a single adjustment. Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `adjustments.created` Notification event topic in order to programmatically integrate new Adjustments that WePay makes to the merchant's Account.",
				"operationId": "GET_adjustments-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get an adjustment"
			},
			"post": {
				"tags": [
					"/adjustments/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 1000,
									"create_time": 1520471380,
									"currency": "USD",
									"custom_data": {
										"reference_number": 43453
									},
									"id": "b3cfe648-1215-4b04-a856-9021454aeda9",
									"owner": {
										"id": "f9cd0a9b-9f61-47df-8eb6-ff1a6177ad01",
										"path": "/accounts/f9cd0a9b-9f61-47df-8eb6-ff1a6177ad01",
										"resource": "accounts"
									},
									"path": "/adjustments/b3cfe648-1215-4b04-a856-9021454aeda9",
									"reason": {
										"reason_code": "REIMBURSEMENTS_AND_CORRECTIONS",
										"reason_message": "Adjustment for reimbursement or corrections.",
										"details": [
											{
												"detail_code": "bank_overdraft_fee",
												"detail_message": "Reimbursement of Bank Overdraft Fee."
											}
										]
									},
									"resource": "adjustments",
									"txnr_adjustment": {
										"id": "a7ce1142-e4f7-4790-aa10-dcc151ae1b7b",
										"path": "/transaction_records/a7ce1142-e4f7-4790-aa10-dcc151ae1b7b",
										"resource": "transaction_records"
									},
									"type": "credit",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/adjustments"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /adjustments/{id} call allows your platform to update and add custom data to an adjustment. The adjustments resource notifies your platform that WePay made an adjustment to an account.",
				"operationId": "POST_adjustments-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"custom_data": {
									"reference_number": 43453
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update an adjustment"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the adjustment, generated by WePay when the adjustment is created."
				}
			]
		},
		"/billing_statements": {
			"get": {
				"tags": [
					"/billing_statements/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"previous": "/billing_statements?page=aaabc123def456",
									"next": "/billing_statements?page=cccde123fgh456",
									"results": [
										{
											"id": "c4a1abf1-34ac-40e8-bdba-5649f0665421",
											"resource": "billing_statements",
											"path": "/billing_statements/c4a1abf1-34ac-40e8-bdba-5649f0665421",
											"owner": {
												"id": "c4a1abf1-34ac-40e8-bdba-5649f0643043",
												"resource": "accounts",
												"path": "/accounts/c4a1abf1-34ac-40e8-bdba-5649f0643043"
											},
											"create_time": 1546300800,
											"total_fee_amount": 2300000,
											"currency": "USD",
											"month": 1,
											"year": 2019,
											"api_version": "3.0"
										},
										{
											"id": "85a84216-c2d5-11e9-9cb5-2a2ae2dbcce4",
											"resource": "billing_statements",
											"path": "/billing_statements/85a84216-c2d5-11e9-9cb5-2a2ae2dbcce4",
											"owner": {
												"id": "c4a1abf1-34ac-40e8-bdba-5649f0643043",
												"resource": "accounts",
												"path": "/accounts/c4a1abf1-34ac-40e8-bdba-5649f0643043"
											},
											"create_time": 1548979200,
											"total_fee_amount": 1320000,
											"currency": "USD",
											"month": 2,
											"year": 2019,
											"api_version": "3.0"
										}
									],
									"api_version": "3.0"
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"next": {
											"type": "string",
											"nullable": true
										},
										"previous": {
											"type": "string",
											"nullable": true
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/billing_statement"
											},
											"type": "array",
											"uniqueItems": true
										}
									},
									"required": [
										"next",
										"previous",
										"results",
										"api_version"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /billing_statements call allows your platform to look up a collection of billing statements. Billing statements provide aggregate transaction amounts for an account in a certain time period. Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `billing_statements.created` Notification event topic to programmatically incorporate new Billing Statements. Learn more about [MIC+](/docs/cookbooks/merchant-interchange+).",
				"operationId": "GET_billing_statements",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements starting from this page. If specified, no other query parameters can be specified.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Maximum number of items per page of results.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 500,
							"type": "integer"
						}
					},
					{
						"name": "account_id",
						"in": "query",
						"description": "All billing statements owned by an account.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of billing statements"
			}
		},
		"/billing_statements/{id}": {
			"get": {
				"tags": [
					"/billing_statements/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"id": "c4a1abf1-34ac-40e8-bdba-5649f0665421",
									"resource": "billing_statements",
									"path": "/billing_statements/c4a1abf1-34ac-40e8-bdba-5649f0665421",
									"owner": {
										"id": "c4a1abf1-34ac-40e8-bdba-5649f0643043",
										"resource": "accounts",
										"path": "/accounts/c4a1abf1-34ac-40e8-bdba-5649f0643043"
									},
									"create_time": 1546300800,
									"total_fee_amount": 198904,
									"currency": "USD",
									"month": 9,
									"year": 2019,
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/billing_statement"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /billing_statements/{id} call allows your platform to look up a single billing statement. Billing statements provide aggregate transaction amounts for an account in a certain time period. Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `billing_statements.created` Notification event topic to programmatically incorporate new Billing Statements. Learn more about [MIC+](/docs/cookbooks/merchant-interchange+).",
				"operationId": "GET_billing_statements-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a billing statement"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/billing_statements/{id}/fees_summary": {
			"get": {
				"tags": [
					"/billing_statements/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"previous": "/billing_statements/{id}/fees_summary?page=aaabc123def456",
									"next": "/billing_statements/{id}/fees_summary?page=cccde123fgh456",
									"results": [
										{
											"fee_type": "VISA",
											"fee_category": " VISA BUSINESS TIER 3 - STANDARD",
											"currency": "USD",
											"total_amount": 56594,
											"item_count": 1,
											"variable_fee_bps": 295,
											"fixed_fee_amount": 20,
											"fixed_fee_markup_amount": 0,
											"variable_fee_markup_bps": 15,
											"total_interchange_fee": 1690,
											"total_markup": 8489,
											"total_fees": 10179,
											"api_version": "3.0"
										},
										{
											"fee_type": "VISA",
											"fee_category": "VISA BUSINESS TIER 4 - STANDARD",
											"currency": "USD",
											"total_amount": 652134,
											"item_count": 9,
											"variable_fee_bps": 295,
											"fixed_fee_amount": 25,
											"fixed_fee_markup_amount": 0,
											"variable_fee_markup_bps": 15,
											"total_interchange_fee": 19463,
											"total_markup": 97820,
											"total_fees": 117823,
											"api_version": "3.0"
										},
										{
											"fee_type": "VISA",
											"fee_category": "VISA CORPORATE CARD - CARD NOT PRESENT",
											"currency": "USD",
											"total_amount": 202903,
											"item_count": 4,
											"variable_fee_bps": 265,
											"fixed_fee_amount": 10,
											"fixed_fee_markup_amount": 0,
											"variable_fee_markup_bps": 15,
											"total_interchange_fee": 5417,
											"total_markup": 30435,
											"total_fees": 35852,
											"api_version": "3.0"
										},
										{
											"fee_type": "ECHECK",
											"fee_category": "eCheck fees",
											"currency": "USD",
											"total_amount": 20290,
											"item_count": 6,
											"variable_fee_bps": null,
											"fixed_fee_amount": null,
											"fixed_fee_markup_amount": 0,
											"variable_fee_markup_bps": 15,
											"total_markup": 5417,
											"total_fees": 5417,
											"total_interchange_fee": null,
											"api_version": "3.0"
										},
										{
											"fee_type": "ECHECK",
											"fee_category": "eCheck fees max",
											"currency": "USD",
											"total_amount": 20290,
											"item_count": 6,
											"variable_fee_bps": null,
											"fixed_fee_amount": null,
											"fixed_fee_markup_amount": 0,
											"variable_fee_markup_bps": 15,
											"total_markup": 5417,
											"total_fees": 5417,
											"total_interchange_fee": null,
											"api_version": "3.0"
										},
										{
											"fee_type": "ECHECK",
											"fee_category": "eCheck fees min",
											"currency": "USD",
											"total_amount": 20290,
											"item_count": 6,
											"variable_fee_bps": null,
											"fixed_fee_amount": null,
											"fixed_fee_markup_amount": 0,
											"variable_fee_markup_bps": 15,
											"total_markup": 5417,
											"total_fees": 5417,
											"total_interchange_fee": null,
											"api_version": "3.0"
										},
										{
											"fee_type": "CHARGEBACK",
											"fee_category": "Chargeback fees",
											"currency": "USD",
											"total_amount": 20290,
											"item_count": 4,
											"variable_fee_bps": 0,
											"fixed_fee_amount": 1500,
											"fixed_fee_markup_amount": null,
											"variable_fee_markup_bps": null,
											"total_markup": null,
											"total_fees": 6000,
											"total_interchange_fee": null,
											"api_version": "3.0"
										},
										{
											"fee_type": "VISA",
											"fee_category": "Visa Fraud Chargeback Fee",
											"currency": "USD",
											"total_amount": 9000,
											"item_count": 10,
											"variable_fee_bps": null,
											"fixed_fee_amount": 10,
											"fixed_fee_markup_amount": null,
											"variable_fee_markup_bps": null,
											"total_markup": null,
											"total_fees": 100,
											"total_interchange_fee": 100,
											"api_version": "3.0"
										},
										{
											"fee_type": "VISA",
											"fee_category": "'VI Intl RefundTrx APF Credit",
											"currency": "USD",
											"total_amount": -5000,
											"item_count": 10,
											"variable_fee_bps": -10,
											"fixed_fee_amount": null,
											"fixed_fee_markup_amount": null,
											"variable_fee_markup_bps": 10,
											"total_markup": 0,
											"total_fees": 500,
											"total_interchange_fee": 500,
											"api_version": "3.0"
										},
										{
											"fee_type": "OTHER",
											"fee_category": "MC ACQUIRING FEE",
											"currency": "USD",
											"total_amount": 8807781,
											"item_count": 49,
											"variable_fee_bps": 4,
											"fixed_fee_amount": 0,
											"fixed_fee_markup_amount": null,
											"variable_fee_markup_bps": null,
											"total_markup": null,
											"total_fees": 352,
											"total_interchange_fee": 352,
											"api_version": "3.0"
										},
										{
											"fee_type": "RECURRING FEES",
											"fee_category": "Monthly",
											"currency": "USD",
											"total_amount": null,
											"item_count": null,
											"variable_fee_bps": null,
											"fixed_fee_amount": null,
											"fixed_fee_markup_amount": 2500,
											"variable_fee_markup_bps": null,
											"total_markup": 2500,
											"total_fees": 2500,
											"total_interchange_fee": null,
											"api_version": "3.0"
										},
										{
											"fee_type": "VISA",
											"fee_category": "Auth Fees",
											"currency": "USD",
											"total_amount": null,
											"item_count": 100,
											"variable_fee_bps": null,
											"fixed_fee_amount": null,
											"fixed_fee_markup_amount": 30,
											"variable_fee_markup_bps": null,
											"total_markup": 30,
											"total_fees": 30,
											"total_interchange_fee": null,
											"api_version": "3.0"
										},
										{
											"fee_type": "MASTERCARD",
											"fee_category": "Auth Fees",
											"currency": "USD",
											"total_amount": null,
											"item_count": 50,
											"variable_fee_bps": null,
											"fixed_fee_amount": null,
											"fixed_fee_markup_amount": 30,
											"variable_fee_markup_bps": null,
											"total_markup": 1500,
											"total_fees": 1500,
											"total_interchange_fee": null,
											"api_version": "3.0"
										},
										{
											"fee_type": "ADJUSTMENT",
											"fee_category": "Financial Adjustment",
											"currency": "USD",
											"month": 1,
											"total_amount": 100,
											"item_count": null,
											"variable_fee_bps": null,
											"fixed_fee_amount": null,
											"fixed_fee_markup_amount": null,
											"variable_fee_markup_bps": null,
											"total_markup": null,
											"total_fees": null,
											"total_interchange_fee": null,
											"api_version": "3.0"
										},
										{
											"fee_type": "ACCOUNT_DEBIT_FAILURE",
											"fee_category": "BILLING FAILURE",
											"currency": "USD",
											"total_amount": null,
											"item_count": 25,
											"variable_fee_bps": null,
											"fixed_fee_amount": null,
											"fixed_fee_markup_amount": 1000,
											"variable_fee_markup_bps": null,
											"total_markup": null,
											"total_fees": 25000,
											"total_interchange_fee": null,
											"api_version": "3.0"
										}
									],
									"api_version": "3.0"
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"next": {
											"type": "string",
											"nullable": true
										},
										"previous": {
											"type": "string",
											"nullable": true
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/billing_statements_id_fees_summary_response"
											},
											"type": "array",
											"uniqueItems": true
										}
									},
									"required": [
										"results",
										"next",
										"previous",
										"api_version"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /billing_statements/{id}/fees_summary call allows your platform to look up fees associated with a merchant's billing statement. Fees are organized in the response based on fee type and fee category. Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `billing_statements.created` Notification event topic to programmatically incorporate new Billing Statements. Learn more about [MIC+](/docs/cookbooks/merchant-interchange+).",
				"operationId": "GET_billing_statements-id-fees_summary",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements starting from this page. If specified, no other query parameters can be specified.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Maximum number of items per page of results.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 500,
							"type": "integer"
						}
					}
				],
				"summary": "Get fees in a billing statement"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/billing_statements/{id}/transactions_summary": {
			"get": {
				"tags": [
					"/billing_statements/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"previous": "/billing_statements/{id}/transactions_summary?page=aaabc123def456",
									"next": "/billing_statements/{id}/transactions_summary?page=cccde123fgh456",
									"results": [
										{
											"year": 2019,
											"month": 9,
											"day": 1,
											"total_amount": 511246,
											"currency": "USD",
											"item_count": 94,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 23658,
													"item_count": 5
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 30934,
													"item_count": 7
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 54187,
													"item_count": 9
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 402467,
													"item_count": 73
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 2,
											"total_amount": 241168,
											"currency": "USD",
											"item_count": 94,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 3418,
													"item_count": 7
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 14375,
													"item_count": 16
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 223375,
													"item_count": 71
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 3,
											"total_amount": 941700,
											"currency": "USD",
											"item_count": 39,
											"summaries": [
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 569375,
													"item_count": 4
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 372325,
													"item_count": 35
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 4,
											"total_amount": 77847,
											"currency": "USD",
											"item_count": 3,
											"summaries": [
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 77847,
													"item_count": 3
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 5,
											"total_amount": 990031,
											"currency": "USD",
											"item_count": 19,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 91286,
													"item_count": 1
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 66458,
													"item_count": 1
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 184396,
													"item_count": 5
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 647891,
													"item_count": 12
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 6,
											"total_amount": 71005,
											"currency": "USD",
											"item_count": 15,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 8820,
													"item_count": 2
												},
												{
													"fee_type": "CHARGEBACK",
													"currency": "USD",
													"total_amount": 4582,
													"item_count": 1
												},
												{
													"fee_type": "ECHECK",
													"currency": "USD",
													"total_amount": 287,
													"item_count": 2
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 6024,
													"item_count": 4
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 55874,
													"item_count": 6
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 7,
											"total_amount": -2020,
											"currency": "USD",
											"item_count": 23,
											"summaries": [
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": -2020,
													"item_count": 13
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 8,
											"total_amount": 664938,
											"currency": "USD",
											"item_count": 27,
											"summaries": [
												{
													"fee_type": "ECHECK",
													"currency": "USD",
													"total_amount": 87,
													"item_count": 1
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 664851,
													"item_count": 26
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 10,
											"total_amount": 22203,
											"currency": "USD",
											"item_count": 15,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 6588,
													"item_count": 6
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 417,
													"item_count": 1
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 5711,
													"item_count": 2
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 9487,
													"item_count": 6
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 11,
											"total_amount": 158,
											"currency": "USD",
											"item_count": 1,
											"summaries": [
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 158,
													"item_count": 1
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 12,
											"total_amount": 1417191,
											"currency": "USD",
											"item_count": 52,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 6154,
													"item_count": 3
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 15831,
													"item_count": 5
												},
												{
													"fee_type": "ECHECK",
													"currency": "USD",
													"total_amount": 341,
													"item_count": 3
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 553269,
													"item_count": 16
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 841596,
													"item_count": 25
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 13,
											"total_amount": 335,
											"currency": "USD",
											"item_count": 1,
											"summaries": [
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 335,
													"item_count": 1
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 14,
											"total_amount": 1416065,
											"currency": "USD",
											"item_count": 33,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 9985,
													"item_count": 2
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 6533,
													"item_count": 4
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 884751,
													"item_count": 17
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 514796,
													"item_count": 10
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 15,
											"total_amount": 926455,
											"currency": "USD",
											"item_count": 20,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 41584,
													"item_count": 5
												},
												{
													"fee_type": "ECHECK",
													"currency": "USD",
													"total_amount": 115,
													"item_count": 2
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 884756,
													"item_count": 13
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 16,
											"total_amount": 1020642,
											"currency": "USD",
											"item_count": 33,
											"summaries": [
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 87455,
													"item_count": 6
												},
												{
													"fee_type": "ECHECK",
													"currency": "USD",
													"total_amount": 148,
													"item_count": 2
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 445871,
													"item_count": 10
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 487168,
													"item_count": 15
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 17,
											"total_amount": 608128,
											"currency": "USD",
											"item_count": 30,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 51487,
													"item_count": 6
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 44871,
													"item_count": 5
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 63158,
													"item_count": 4
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 448612,
													"item_count": 15
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 18,
											"total_amount": 448,
											"currency": "USD",
											"item_count": 1,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 448,
													"item_count": 1
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 19,
											"total_amount": 364,
											"currency": "USD",
											"item_count": 1,
											"summaries": [
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 364,
													"item_count": 1
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 20,
											"total_amount": 156985,
											"currency": "USD",
											"item_count": 75,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 4784,
													"item_count": 11
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 3315,
													"item_count": 3
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 23415,
													"item_count": 16
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 125471,
													"item_count": 45
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 21,
											"total_amount": 1574818,
											"currency": "USD",
											"item_count": 82,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 2500,
													"item_count": 2
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 8845,
													"item_count": 6
												},
												{
													"fee_type": "ECHECK",
													"currency": "USD",
													"total_amount": 336,
													"item_count": 4
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 941552,
													"item_count": 17
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 621585,
													"item_count": 53
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 22,
											"total_amount": 1230130,
											"currency": "USD",
											"item_count": 65,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 77412,
													"item_count": 5
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 63125,
													"item_count": 9
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 852639,
													"item_count": 20
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 236954,
													"item_count": 31
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 23,
											"total_amount": 700524,
											"currency": "USD",
											"item_count": 84,
											"summaries": [
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 36925,
													"item_count": 12
												},
												{
													"fee_type": "ECHECK",
													"currency": "USD",
													"total_amount": 150,
													"item_count": 1
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 326528,
													"item_count": 28
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 336921,
													"item_count": 43
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 24,
											"total_amount": 31623,
											"currency": "USD",
											"item_count": 27,
											"summaries": [
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 6521,
													"item_count": 12
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 2541,
													"item_count": 3
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 22561,
													"item_count": 12
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 25,
											"total_amount": 709128,
											"currency": "USD",
											"item_count": 84,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 1521,
													"item_count": 4
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 58931,
													"item_count": 15
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 33691,
													"item_count": 28
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 614985,
													"item_count": 37
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 26,
											"total_amount": 822509,
											"currency": "USD",
											"item_count": 68,
											"summaries": [
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 55814,
													"item_count": 14
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 51214,
													"item_count": 21
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 715481,
													"item_count": 33
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 27,
											"total_amount": 720322,
											"currency": "USD",
											"item_count": 45,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 669,
													"item_count": 1
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 5145,
													"item_count": 3
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 51294,
													"item_count": 14
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 663214,
													"item_count": 27
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 28,
											"total_amount": 898745,
											"currency": "USD",
											"item_count": 70,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 2561,
													"item_count": 5
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 33157,
													"item_count": 14
												},
												{
													"fee_type": "ECHECK",
													"currency": "USD",
													"total_amount": 119,
													"item_count": 2
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 231456,
													"item_count": 2
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 631452,
													"item_count": 25
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 29,
											"total_amount": 1417495,
											"currency": "USD",
											"item_count": 68,
											"summaries": [
												{
													"fee_type": "AMEX",
													"currency": "USD",
													"total_amount": 2336,
													"item_count": 2
												},
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 4157,
													"item_count": 2
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 696421,
													"item_count": 30
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 714581,
													"item_count": 34
												}
											],
											"api_version": "3.0"
										},
										{
											"year": 2019,
											"month": 9,
											"day": 30,
											"total_amount": 511556,
											"currency": "USD",
											"item_count": 54,
											"summaries": [
												{
													"fee_type": "DISCOVER",
													"currency": "USD",
													"total_amount": 552,
													"item_count": 2
												},
												{
													"fee_type": "MASTERCARD",
													"currency": "USD",
													"total_amount": 69415,
													"item_count": 17
												},
												{
													"fee_type": "VISA",
													"currency": "USD",
													"total_amount": 441589,
													"item_count": 35
												}
											],
											"api_version": "3.0"
										}
									],
									"api_version": "3.0"
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"next": {
											"type": "string",
											"nullable": true
										},
										"previous": {
											"type": "string",
											"nullable": true
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/billing_statements_id_transactions_summary_response"
											},
											"type": "array",
											"uniqueItems": true
										}
									},
									"required": [
										"next",
										"previous",
										"results",
										"api_version"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /billing_statements/{id}/transactions_summary call allows your platform to look up all transactions in a single billing statement.Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `billing_statements.created` Notification event topic to programmatically incorporate new Billing Statements. Learn more about [MIC+](/docs/cookbooks/merchant-interchange+).",
				"operationId": "GET_billing_statements-id-transactions_summary",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements starting from this page. If specified, no other query parameters can be specified.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Maximum number of items per page of results.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 500,
							"type": "integer"
						}
					}
				],
				"summary": "Get transactions in a billing statement"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/disputes": {
			"get": {
				"tags": [
					"/disputes/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": "/disputes?page=QVFQNUFBRVhTODFydGc1V1FMMTZwU28rZXJ5L1Q4S3ZqU0JnSDliUklPdm1adEpITUtsanFMMU84aWtjMnl6RDhxakkrZ2xGNzQ2YVFvanEvaXExbUtXUmFVeEtqelF5TTQ0L04vS0NPa3dmS01BWnBvWjI0b0IvQ0I5NzM2OS9icExZSENOTmhhTmhyS1R4RVF2Sk1ucHNyNFErOXdOYXE1R1hPL3BSUXhEY21xb01VT3FDeGxyVnpPclg5S1RIci9PdDF4WXE5RUFndHJ1alN2ODhNSGc0",
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"amount": 2200,
											"create_time": 1519348426,
											"currency": "USD",
											"custom_data": null,
											"documentation": {
												"documents": [],
												"explanation": ""
											},
											"fee": 0,
											"id": "0645172c-c054-11e7-abc4-cec278b6b50a",
											"owner": {
												"id": "0ccb661e-c054-11e7-abc4-cec278b6b50a",
												"path": "/accounts/0ccb661e-c054-11e7-abc4-cec278b6b50a",
												"resource": "accounts"
											},
											"path": "/disputes/0645172c-c054-11e7-abc4-cec278b6b50a",
											"payment": {
												"id": "14f45de6-c054-11e7-abc4-cec278b6b50a",
												"path": "/payments/14f45de6-c054-11e7-abc4-cec278b6b50a",
												"resource": "payments"
											},
											"card_brand": "visa",
											"reason": {
												"reason_code": "RECOGNITION",
												"reason_message": "The payer did not recognize the transaction",
												"details": [
													{
														"detail_code": "11.2",
														"detail_message": "Declined Authorization"
													}
												]
											},
											"resolution": null,
											"resource": "disputes",
											"status": "awaiting_merchant_response",
											"txnr_chargeback_app_fees": null,
											"txnr_chargeback_merchant": {
												"id": "1ce52e72-c054-11e7-abc4-cec278b6b50a",
												"path": "/transaction_records/1ce52e72-c054-11e7-abc4-cec278b6b50a",
												"resource": "transaction_records"
											},
											"txnr_chargeback_reversal_app_fee": null,
											"txnr_chargeback_reversal_merchant": null,
											"txnr_merchant_chargeback_fee": {
												"id": "f2e5c7a7-c054-11e7-abc4-6b50acec278b",
												"path": "/transaction_records/f2e5c7a7-c054-11e7-abc4-6b50acec278b",
												"resource": "transaction_records"
											},
											"type": "chargeback",
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/disputes"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of dispute objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"previous",
										"next",
										"results"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /disputes call allows your platform to look up a collection of disputes. Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `disputes.created` Notification event topic in order to programmatically integrate any new Disputes that a merchant receives. Learn more about Disputes in [Manage Payment Operations](/clear/options/respond-to-disputes/) and in the [Disputes Deep Dive](/docs/resources/disputes-deep-dive) resource.",
				"operationId": "GET_disputes",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "owner_id",
						"in": "query",
						"schema": {
							"type": "string"
						},
						"description": "Return elements owned by this resource instance."
					},
					{
						"name": "type",
						"in": "query",
						"description": "Type of dispute. Possible values: `chargeback`, `inquiry`.",
						"schema": {
							"enum": [
								"inquiry",
								"chargeback",
								"second_chargeback",
								"debit_adjustment"
							],
							"x-enumDescriptions": {
								"inquiry": "Some card brands like AmEx will issue an inquiry to get more information about a charge. If inquiries are not responded to, the inquiry will be closed and a dispute will be created.",
								"chargeback": "When a chargeback occurs, it means that the card holder or card issuer does not believe the payment should have been made. Merchants can challenge a dispute by uploading documentation.",
								"second_chargeback": "When a second chargeback occurs, it means that the merchant challenged the original dispute which was then resolved in favor of the merchant. Then, either the card holder or card issuer provides additional evidence regarding the dispute, so the same transaction is disputed again.",
								"debit_adjustment": "When a debit adjustment occurs, it means that there is a change that needs to be made against the original transaction, could either debit or credit the merchant."
							},
							"type": "string"
						}
					},
					{
						"name": "payment_id",
						"in": "query",
						"schema": {
							"type": "string"
						},
						"description": "ID of the payment associated with the dispute."
					},
					{
						"name": "status",
						"in": "query",
						"schema": {
							"enum": [
								"awaiting_merchant_response",
								"pending_wepay_review",
								"awaiting_chargeback_decision",
								"resolved",
								"awaiting_chargeback_decision_with_credit",
								"awaiting_chargeback_decision_without_credit"
							],
							"x-enumDescriptions": {
								"awaiting_merchant_response": "The merchant has not provided any response to the dispute. If the merchant want to attempt to recoup these funds, they must upload documentation supporting the charge.",
								"pending_wepay_review": "WePay is reviewing the dispute and any documentation submitted by the merchant. Once WePay's review is complete, the status will be updated.",
								"awaiting_chargeback_decision": "The card issuer is reviewing the dispute and all related evidence and documentation. Once the card issuer's review is complete, the status will be updated.",
								"resolved": "The dispute has been resolved. Find more information in the resolution JSON block.",
								"awaiting_chargeback_decision_with_credit": "The card issuer is reviewing the dispute and all related evidence and documentation. Until a final decision is made, the merchant has a credit for the amount of the dispute and fees. Note that if the dispute is ultimately resolved in favor of the payer, this credit will be reversed and debited from the merchant.",
								"awaiting_chargeback_decision_without_credit": "The card issuer is reviewing the dispute and all related evidence and documentation. The merchant will not receive a credit for the dispute while this process takes place. If the dispute is resolved in favor of the merchant, then the merchant will receive the funds back."
							},
							"type": "string"
						},
						"description": "Status of the dispute. Possible values include: `awaiting_merchant_response`, `awaiting_chargeback_decision`, `pending_wepay_review`,`resolved`,`awaiting_chargeback_decision_with_credit`,`awaiting_chargeback_decision_without_credit`."
					}
				],
				"summary": "Get a collection of disputes"
			}
		},
		"/disputes/{id}": {
			"get": {
				"tags": [
					"/disputes/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 2200,
									"create_time": 1519348426,
									"currency": "USD",
									"custom_data": null,
									"documentation": {
										"documents": [
											"docu-abc123",
											"docu-efg456",
											"docu-hij789"
										],
										"explanation": "lorem ipsum dolores umbridge"
									},
									"fee": 0,
									"id": "55ef5b88-c055-11e7-abc4-cec278b6b50a",
									"owner": {
										"id": "5b8d9ed8-c055-11e7-abc4-cec278b6b50a",
										"path": "/accounts/5b8d9ed8-c055-11e7-abc4-cec278b6b50a",
										"resource": "accounts"
									},
									"path": "/disputes/55ef5b88-c055-11e7-abc4-cec278b6b50a",
									"payment": {
										"id": "61ab8bb8-c055-11e7-abc4-cec278b6b50a",
										"path": "/payments/61ab8bb8-c055-11e7-abc4-cec278b6b50a",
										"resource": "payments"
									},
									"card_brand": "visa",
									"reason": {
										"reason_code": "RECOGNITION",
										"reason_message": "The payer did not recognize the transaction",
										"details": [
											{
												"detail_code": "11.2",
												"detail_message": "Declined Authorization"
											}
										]
									},
									"resolution": null,
									"resource": "disputes",
									"status": "pending_wepay_review",
									"txnr_chargeback_app_fees": null,
									"txnr_chargeback_merchant": {
										"id": "6b171104-c055-11e7-abc4-cec278b6b50a",
										"path": "/transaction_records/6b171104-c055-11e7-abc4-cec278b6b50a",
										"resource": "transaction_records"
									},
									"txnr_chargeback_reversal_app_fee": null,
									"txnr_chargeback_reversal_merchant": null,
									"txnr_merchant_chargeback_fee": {
										"id": "f2e5c7a7-c054-11e7-abc4-6b50acec278b",
										"path": "/transaction_records/f2e5c7a7-c054-11e7-abc4-6b50acec278b",
										"resource": "transaction_records"
									},
									"type": "chargeback",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/disputes"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /disputes/{id} call allows your platform to look up a single dispute. Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `disputes.created` Notification event topic in order to programmatically integrate any new Disputes that a merchant receives. Learn more about Disputes in [Manage Payment Operations](/clear/options/respond-to-disputes/) and in the [Disputes Deep Dive](/docs/resources/disputes-deep-dive) resource.",
				"operationId": "GET_disputes-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a dispute"
			},
			"post": {
				"tags": [
					"/disputes/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 2200,
									"create_time": 1519348426,
									"currency": "USD",
									"custom_data": null,
									"documentation": {
										"documents": [
											"docu-abc123",
											"docu-efg456",
											"docu-hij789"
										],
										"explanation": "lorem ipsum dolores umbridge"
									},
									"fee": 0,
									"id": "47521346-c054-11e7-abc4-cec278b6b50a",
									"owner": {
										"id": "4e46a6c6-c054-11e7-abc4-cec278b6b50a",
										"path": "/accounts/4e46a6c6-c054-11e7-abc4-cec278b6b50a",
										"resource": "accounts"
									},
									"path": "/disputes/47521346-c054-11e7-abc4-cec278b6b50a",
									"payment": {
										"id": "532c82aa-c054-11e7-abc4-cec278b6b50a",
										"path": "/payments/532c82aa-c054-11e7-abc4-cec278b6b50a",
										"resource": "payments"
									},
									"card_brand": "visa",
									"reason": {
										"reason_code": "RECOGNITION",
										"reason_message": "The payer did not recognize the transaction",
										"details": [
											{
												"detail_code": "11.2",
												"detail_message": "Declined Authorization"
											}
										]
									},
									"resolution": null,
									"resource": "disputes",
									"status": "pending_wepay_review",
									"txnr_chargeback_app_fees": null,
									"txnr_chargeback_merchant": {
										"id": "5c7a7f2e-c054-11e7-abc4-cec278b6b50a",
										"path": "/transaction_records/5c7a7f2e-c054-11e7-abc4-cec278b6b50a",
										"resource": "transaction_records"
									},
									"txnr_chargeback_reversal_app_fee": null,
									"txnr_chargeback_reversal_merchant": null,
									"txnr_merchant_chargeback_fee": {
										"id": "f2e5c7a7-c054-11e7-abc4-6b50acec278b",
										"path": "/transaction_records/f2e5c7a7-c054-11e7-abc4-6b50acec278b",
										"resource": "transaction_records"
									},
									"type": "chargeback",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/disputes"
								}
							}
						}
					},
					"400": {
						"description": "DISPUTE_CANNOT_BE_FURTHER_MODIFIED, INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /disputes/{id}  call allows your platform to update and add custom data to a single dispute. Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `disputes.created` Notification event topic in order to programmatically integrate any new Disputes that a merchant receives. Learn more about Disputes in [Manage Payment Operations](/clear/options/respond-to-disputes/) and in the [Disputes Deep Dive](/docs/resources/disputes-deep-dive) resource.",
				"operationId": "POST_disputes-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"documentation": {
									"documents": [
										"docu-abc123",
										"docu-efg456",
										"docu-hij789"
									],
									"explanation": "lorem ipsum dolores umbridge"
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"documentation": {
										"additionalProperties": false,
										"properties": {
											"documents": {
												"items": {
													"maxLength": 255,
													"minLength": 1,
													"type": "string"
												},
												"type": "array",
												"maxItems": 5,
												"description": "An array of document IDs. The document IDs are returned via the document upload feature in the [JavaScript library](/sdks-and-libraries/helper-js/). These documents will be used to challenge a dispute."
											},
											"explanation": {
												"maxLength": 65535,
												"type": "string",
												"description": "A free-form textual description from the merchant."
											}
										},
										"type": "object",
										"description": "Documentation provided by your merchant to challenge the dispute."
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update a dispute"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the dispute, generated by WePay when the dispute is created."
				}
			]
		},
		"/disputes/{id}/concede": {
			"post": {
				"tags": [
					"/disputes/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 2200,
									"create_time": 1519348426,
									"currency": "USD",
									"custom_data": null,
									"documentation": {
										"documents": [
											"docu-abc123",
											"docu-efg456",
											"docu-hij789"
										],
										"explanation": "lorem ipsum dolores umbridge"
									},
									"fee": 0,
									"id": "2fe5f054-c056-11e7-abc4-cec278b6b50a",
									"owner": {
										"id": "35674a3c-c056-11e7-abc4-cec278b6b50a",
										"path": "/accounts/35674a3c-c056-11e7-abc4-cec278b6b50a",
										"resource": "accounts"
									},
									"path": "/disputes/2fe5f054-c056-11e7-abc4-cec278b6b50a",
									"payment": {
										"id": "3a30889e-c056-11e7-abc4-cec278b6b50a",
										"path": "/payments/3a30889e-c056-11e7-abc4-cec278b6b50a",
										"resource": "payments"
									},
									"card_brand": "visa",
									"reason": {
										"reason_code": "RECOGNITION",
										"reason_message": "The payer did not recognize the transaction",
										"details": [
											{
												"detail_code": "11.2",
												"detail_message": "Declined Authorization"
											}
										]
									},
									"resolution": {
										"resolution_time": 123283237765,
										"type": "lost"
									},
									"resource": "disputes",
									"status": "resolved",
									"txnr_chargeback_app_fees": null,
									"txnr_chargeback_merchant": {
										"id": "421ac402-c056-11e7-abc4-cec278b6b50a",
										"path": "/transaction_records/421ac402-c056-11e7-abc4-cec278b6b50a",
										"resource": "transaction_records"
									},
									"txnr_chargeback_reversal_app_fee": null,
									"txnr_chargeback_reversal_merchant": null,
									"txnr_merchant_chargeback_fee": {
										"id": "f2e5c7a7-c054-11e7-abc4-6b50acec278b",
										"path": "/transaction_records/f2e5c7a7-c054-11e7-abc4-6b50acec278b",
										"resource": "transaction_records"
									},
									"type": "chargeback",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/disputes"
								}
							}
						}
					},
					"400": {
						"description": "DISPUTE_CANNOT_BE_CONCEDED, INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /disputes/{id}/concede call allows your platform to concede a dispute on behalf of your merchant. Learn more about Disputes in [Manage Payment Operations](/clear/options/respond-to-disputes/) and in the [Disputes Deep Dive](/docs/resources/disputes-deep-dive) resource.",
				"operationId": "POST_disputes-id-concede",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Concede a dispute"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/items": {
			"post": {
				"tags": [
					"/items/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1390656130,
									"description": "Classic Iron Anvil",
									"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"owner": {
										"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"resource": "accounts"
									},
									"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"photos": [],
									"price": 490,
									"product_code": "XYZ321",
									"product_details": {
										"band": "nike"
									},
									"product_name": "Acme Anvil - 100 Lb",
									"reference_number": "abc_123456",
									"resource": "items",
									"shipping_options": [
										"regular",
										"expedited"
									],
									"state": "active",
									"terms": {
										"terms_text": "lorem ipsum...",
										"terms_uri": "https://example.com/terms_of_service"
									},
									"uri": "https://example.com/abc_123456",
									"weight": {
										"units": "pounds",
										"weight": 1
									},
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/item-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /items call allows your platform to create a new item. Items describe an item or service for sale.  For standardized merchandise, an item could be a stock keeping unit (SKU). ",
				"operationId": "POST_items",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"account_id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
								"description": "Classic Iron Anvil",
								"photos": [],
								"price": 490,
								"product_code": "XYZ321",
								"product_details": {
									"band": "nike"
								},
								"product_name": "Acme Anvil - 100 Lb",
								"rbits": [
									{
										"address": {
											"origin_address": {
												"city": "Sunnyvale",
												"country": "US",
												"line1": "20 Main Street",
												"postal_code": "94085",
												"region": "CA"
											}
										},
										"receive_time": 1367958263,
										"source": "partner_database",
										"type": "address"
									}
								],
								"reference_number": "abc_123456",
								"shipping_options": [
									"regular",
									"expedited"
								],
								"terms": {
									"terms_text": "lorem ipsum...",
									"terms_uri": "https://example.com/terms_of_service"
								},
								"uri": "https://example.com/abc_123456",
								"weight": {
									"units": "pounds",
									"weight": 1
								}
							},
							"schema": {
								"$ref": "#/components/schemas/item-req"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create an item"
			},
			"get": {
				"tags": [
					"/items/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": "/items?page=AQQHAAEX8yf1HDkrXqO7R-wy2joNU6ooRNCyDb-sSbbvR-8J6jKeFgpqprcIsuEnBh4fqImpR2eYjKIgSCirw2mhEFR7m5AsSj1OkG9emNFWhXQvreOczuQU7UzZ",
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"create_time": 1390656130,
											"description": "Classic Iron Anvil",
											"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
											"owner": {
												"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
												"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
												"resource": "accounts"
											},
											"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
											"photos": [],
											"price": 490,
											"product_code": "XYZ321",
											"product_details": {
												"band": "nike"
											},
											"product_name": "Acme Anvil - 100 Lb",
											"reference_number": "abc_123456",
											"resource": "items",
											"shipping_options": [
												"regular",
												"expedited"
											],
											"state": "active",
											"terms": {
												"terms_text": "lorem ipsum...",
												"terms_uri": "https://example.com/terms_of_service"
											},
											"uri": "https://example.com/abc_123456",
											"weight": {
												"units": "pounds",
												"weight": 1
											},
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. You can perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. You can perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/item-resp"
											},
											"type": "array",
											"description": "An array of item objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"results",
										"next",
										"previous"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /items call allows your platform to look up a collection of items. Items describe an item or service for sale.  For standardized merchandise, an item could be a stock keeping unit (SKU). ",
				"operationId": "GET_items",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "reference_number",
						"in": "query",
						"description": "Return items created with this reference number.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of items"
			}
		},
		"/items/{id}": {
			"get": {
				"tags": [
					"/items/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1390656130,
									"description": "Classic Iron Anvil",
									"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"owner": {
										"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"resource": "accounts"
									},
									"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"photos": [],
									"price": 490,
									"product_code": "XYZ321",
									"product_details": {
										"band": "nike"
									},
									"product_name": "Acme Anvil - 100 Lb",
									"reference_number": "abc_123456",
									"resource": "items",
									"shipping_options": [
										"regular",
										"expedited"
									],
									"state": "active",
									"terms": {
										"terms_text": "lorem ipsum...",
										"terms_uri": "https://example.com/terms_of_service"
									},
									"uri": "https://example.com/abc_123456",
									"weight": {
										"units": "pounds",
										"weight": 1
									},
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/item-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /items/{id} call allows your platform to look up a single item. Items describe an item or service for sale.  For standardized merchandise, an item could be a stock keeping unit (SKU). ",
				"operationId": "GET_items-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get an item"
			},
			"delete": {
				"tags": [
					"/items/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1390656130,
									"description": "Classic Iron Anvil",
									"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"owner": {
										"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"resource": "accounts"
									},
									"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"photos": [],
									"price": 490,
									"product_code": "XYZ321",
									"product_details": {
										"band": "nike"
									},
									"product_name": "Acme Anvil - 100 Lb",
									"reference_number": "abc_123456",
									"resource": "items",
									"shipping_options": [
										"regular",
										"expedited"
									],
									"state": "deleted",
									"terms": {
										"terms_text": "lorem ipsum...",
										"terms_uri": "https://example.com/terms_of_service"
									},
									"uri": "https://example.com/abc_123456",
									"weight": {
										"units": "pounds",
										"weight": 1
									},
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/item-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The DELETE /items/{id} call allows your platform to delete an item. Items describe an item or service for sale.  For standardized merchandise, an item could be a stock keeping unit (SKU). ",
				"operationId": "DELETE_items-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Delete an item"
			},
			"post": {
				"tags": [
					"/items/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1390656130,
									"description": "Classic Iron Anvil",
									"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"owner": {
										"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"resource": "accounts"
									},
									"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"photos": [],
									"price": 490,
									"product_code": "XYZ321",
									"product_details": {
										"band": "nike"
									},
									"product_name": "Acme Anvil - 100 Lb",
									"reference_number": "abc_123456",
									"resource": "items",
									"shipping_options": [
										"regular",
										"expedited"
									],
									"state": "deleted",
									"terms": {
										"terms_text": "lorem ipsum...",
										"terms_uri": "https://example.com/terms_of_service"
									},
									"uri": "https://example.com/abc_123456",
									"weight": {
										"units": "pounds",
										"weight": 1
									},
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/item-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /items/{id} call allows your platform to update and add custom data an item. Items describe an item or service for sale.  For standardized merchandise, an item could be a stock keeping unit (SKU). ",
				"operationId": "POST_items-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"account_id": "ABC123",
								"description": "Classic Iron Anvil",
								"photos": [],
								"price": 490,
								"product_code": "XYZ321",
								"product_details": {
									"band": "nike"
								},
								"product_name": "Acme Anvil - 100 Lb",
								"rbits": [
									{
										"address": {
											"origin_address": {
												"city": "Sunnyvale",
												"country": "US",
												"line1": "20 Main Street",
												"postal_code": "94085",
												"region": "CA"
											}
										},
										"receive_time": 1367958263,
										"source": "partner_database",
										"type": "address"
									}
								],
								"reference_number": "abc_123456",
								"shipping_options": [
									"regular",
									"expedited"
								],
								"terms": {
									"terms_text": "lorem ipsum...",
									"terms_uri": "https://example.com/terms_of_service"
								},
								"uri": "https://example.com/abc_123456",
								"weight": {
									"units": "pounds",
									"weight": 1
								}
							},
							"schema": {
								"$ref": "#/components/schemas/item-id-req"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update an item"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the order, generated by WePay when the order is created."
				}
			]
		},
		"/legal_entities": {
			"post": {
				"tags": [
					"/legal_entities/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.0": {
										"value": {
											"additional_representatives": null,
											"address": {
												"city": "San Francisco",
												"country": "US",
												"line1": "123 Fake Street",
												"postal_code": "94101",
												"region": "CA"
											},
											"public_ownership": {
												"is_publicly_traded": false,
												"is_subsidiary": false,
												"parent_company_name": null,
												"primary_exchange": null,
												"traded_exchanges": {}
											},
											"attestation": {
												"attester_type": "controller",
												"controller": {
													"attest_time": 1490656130,
													"original_ip": "12.37.161.213"
												}
											},
											"controller": {
												"reference_id": "reference_id_0",
												"address": {
													"city": "Beverly Hills",
													"country": "US",
													"line1": "456 Nocturn Alley",
													"postal_code": "90210",
													"region": "CA"
												},
												"date_of_birth_is_present": true,
												"email": "example@example.com",
												"name": {
													"first": "Foo",
													"last": "Bar"
												},
												"personal_country_info": {
													"US": {
														"social_security_number_is_present": true
													}
												},
												"phone": {
													"country_code": "+1",
													"phone_number": "5556667777"
												},
												"job_title": "CFO"
											},
											"account_controller": null,
											"controller_type": "controller",
											"country": "US",
											"create_time": 1480700534,
											"custom_data": null,
											"api_version": "3.0",
											"description": "The Foo Bar Shop on 5th ave.",
											"entity_country_info": {
												"US": {
													"employer_identification_number": "123211230"
												},
												"country_of_formation": "CA",
												"operates_in_sanctioned_countries": [
													"CU",
													"SY"
												],
												"year_of_formation": 1991
											},
											"entity_name": "Foo Bar Shop",
											"email": "example@email.com",
											"id": "b116768c-dac0-4ef1-8024-7d3056c6b186",
											"owner": {
												"id": "9dac302a-9d88-4bb7-bba2-8bd8a373acc5",
												"path": null,
												"resource": "applications"
											},
											"path": "/legal_entities/b116768c-dac0-4ef1-8024-7d3056c6b186",
											"phone": null,
											"primary_url": "http://www.example.com",
											"preferred_locale": "en_US",
											"resource": "legal_entities",
											"terms_of_service": {
												"acceptance_time": 1490656130,
												"original_ip": "12.37.161.213",
												"terms_of_service_version": "platform"
											},
											"reference_id": null,
											"significant_beneficiaries": {
												"affiliations": {
													"affiliation_0": {
														"name": "charity_a",
														"countries": [
															"US",
															"CA"
														],
														"association_types": {
															"contractual_obligation": true,
															"donor": false,
															"funding_recipient": false,
															"other": "other association_type",
															"parent_organization": true,
															"program_affiliation": false,
															"resource_delivery_provider": false,
															"transfer_retention_or_expenditure": false
														}
													}
												},
												"entities": {
													"art_and_culture": false,
													"education": true,
													"individual": false,
													"labor_union": true,
													"other": "some significant beneficiary",
													"political_organization": false,
													"religious": true,
													"social_service_and_economic_development": false
												},
												"geographies": {
													"local": true,
													"regional": true,
													"national": false,
													"international": [
														"US",
														"CA"
													]
												},
												"non_domestic_location_beneficiaries": [
													"US",
													"CA"
												]
											},
											"significant_donors": {
												"corporate_entity": true,
												"endowment_fund": true,
												"government": false,
												"individual": true,
												"institutional": false,
												"other": "some significant donor",
												"other_charitable_organization": true
											},
											"enterprise_customer_id": "12345"
										}
									}
								},
								"schema": {
									"$ref": "#/components/schemas/legal_entity-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, UNSUPPORTED_COUNTRY",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /legal_entities call allows your platform to create a new legal entity. Onboarding a merchant requires the creation of a legal entity. A legal entity may be a business, individual, nonprofit, etc., and is completely owned by a single partner application. WePay collects information about the legal entity so we can properly underwrite them when provisioning a merchant account.",
				"operationId": "POST_legal_entities",
				"requestBody": {
					"content": {
						"application/json": {
							"examples": {
								"v3.0.example.1": {
									"value": {
										"country": "CA",
										"description": "Req to create a CA legal entity"
									}
								},
								"v3.0.example.2": {
									"value": {
										"address": {
											"city": "San Francisco",
											"country": "US",
											"line1": "123 Fake Street",
											"postal_code": "94101",
											"region": "CA"
										},
										"attestation": {
											"attester_type": "controller",
											"controller": {
												"attest_time": 1490656130,
												"original_ip": "12.37.161.213"
											}
										},
										"controller": {
											"reference_id": "reference_id_0",
											"address": {
												"city": "Beverly Hills",
												"country": "US",
												"line1": "456 Nocturn Alley",
												"postal_code": "90210",
												"region": "CA"
											},
											"date_of_birth": {
												"day": 1,
												"month": 1,
												"year": 1900
											},
											"email": "example@example.com",
											"name": {
												"first": "Foo",
												"last": "Bar"
											},
											"personal_country_info": {
												"US": {
													"social_security_number": "012-34-5678"
												}
											},
											"phone": {
												"country_code": "+1",
												"phone_number": "5556667777"
											},
											"job_title": "CFO"
										},
										"account_controller": null,
										"controller_type": "controller",
										"country": "US",
										"description": "The Foo Bar Shop on 5th ave.",
										"entity_country_info": {
											"US": {
												"employer_identification_number": "123211230"
											},
											"country_of_formation": "CA",
											"operates_in_sanctioned_countries": [
												"CU",
												"SY"
											],
											"year_of_formation": 1991
										},
										"entity_name": "Foo Bar Shop",
										"email": "example@email.com",
										"primary_url": "http://www.example.com",
										"preferred_locale": "en_US",
										"significant_beneficiaries": {
											"affiliations": {
												"affiliation_0": {
													"name": "charity_a",
													"countries": [
														"US",
														"CA"
													],
													"association_types": {
														"contractual_obligation": true,
														"donor": false,
														"funding_recipient": false,
														"other": "other association_type",
														"parent_organization": true,
														"program_affiliation": false,
														"resource_delivery_provider": false,
														"transfer_retention_or_expenditure": false
													}
												}
											},
											"entities": {
												"art_and_culture": false,
												"education": true,
												"individual": false,
												"labor_union": true,
												"other": "some significant beneficiary",
												"political_organization": false,
												"religious": true,
												"social_service_and_economic_development": false
											},
											"geographies": {
												"local": true,
												"regional": true,
												"national": false,
												"international": [
													"US",
													"CA"
												]
											},
											"non_domestic_location_beneficiaries": [
												"US",
												"CA"
											]
										},
										"significant_donors": {
											"corporate_entity": true,
											"endowment_fund": true,
											"government": false,
											"individual": true,
											"institutional": false,
											"other": "some significant donor",
											"other_charitable_organization": true
										},
										"terms_of_service": {
											"acceptance_time": 1490656130,
											"original_ip": "12.37.161.213",
											"terms_of_service_version": "platform"
										}
									}
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"country": {
										"$ref": "#/components/schemas/country_code"
									},
									"account_controller": {
										"$ref": "#/components/schemas/shared_account_controller"
									},
									"additional_representatives": {
										"$ref": "#/components/schemas/shared_additional_representatives_request"
									},
									"address": {
										"$ref": "#/components/schemas/legal_entities_address"
									},
									"attestation": {
										"additionalProperties": false,
										"properties": {
											"attester_type": {
												"enum": [
													"additional_representative",
													"controller",
													"other_representative"
												],
												"type": "string",
												"x-isOneOfKey": true,
												"description": "Describes by whom a legal entity is attested. The value will be `controller` unless your platform has permission from WePay to collect attestation from other representatives.",
												"x-enumDescriptions": {
													"additional_representative": "**This option requires permission.** The legal entity is attested by one of the additional representatives.",
													"controller": "The legal entity is attested by the controller.",
													"other_representative": "**This option requires permission.** The legal entity is attested by other representative."
												}
											},
											"additional_representative": {
												"$ref": "#/components/schemas/legal_entities_attestation_additional_representative"
											},
											"controller": {
												"$ref": "#/components/schemas/legal_entities_attestation_controller"
											},
											"other_representative": {
												"$ref": "#/components/schemas/legal_entities_attestation_other_representative"
											}
										},
										"required": [
											"attester_type"
										],
										"type": "object",
										"nullable": true,
										"description": "Indicate that the controller has attested to the validity of CIP/KYC details submitted. Find more information [here](/clear/options/kyc-and-cip-certification/#attestation)."
									},
									"controller": {
										"$ref": "#/components/schemas/shared_controller_request"
									},
									"controller_type": {
										"$ref": "#/components/schemas/controller_type"
									},
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"description": {
										"maxLength": 1024,
										"type": "string",
										"nullable": true,
										"description": "Description of the Legal Entity. WePay uses this information for underwriting purposes."
									},
									"email": {
										"$ref": "#/components/schemas/entity-email-nullable"
									},
									"enterprise_customer_id": {
										"$ref": "#/components/schemas/enterprise_customer_id"
									},
									"entity_country_info": {
										"additionalProperties": false,
										"properties": {
											"CA": {
												"$ref": "#/components/schemas/shared_entity_country_info_CA"
											},
											"GB": {
												"$ref": "#/components/schemas/shared_entity_country_info_GB"
											},
											"US": {
												"$ref": "#/components/schemas/shared_entity_country_info_US"
											},
											"country_of_formation": {
												"$ref": "#/components/schemas/country_code-nullable"
											},
											"operates_in_sanctioned_countries": {
												"type": "array",
												"uniqueItems": true,
												"items": {
													"enum": [
														"CU",
														"IR",
														"KP",
														"SY",
														"XX"
													],
													"x-enumDescriptions": {
														"CU": "Cuba",
														"IR": "Iran",
														"KP": "North Korea",
														"SY": "Syria",
														"XX": "WePay's custom 2-digit ISO code for Crimea Region, as a 2-digit code does not exist."
													},
													"type": "string"
												},
												"nullable": true,
												"description": "An array of sanctioned countries where the Legal Entity operates. Possible values include `CU`, `IR`, `KP`, `XX`, `SY`. Note that `XX` is used to represent Crimea, as it does not have its own 2-digit ISO code. If the merchant indicates they do not have operations in one of the sanctioned countries listed above, then pass an empty array: `[]`. This field is required, if the value is left `null`, capabilities (payments and payouts) will be disabled."
											},
											"year_of_formation": {
												"type": "integer",
												"minimum": 0,
												"nullable": true,
												"description": "The year when the Legal Entity originated."
											}
										},
										"type": "object",
										"description": "Information about the Legal Entity."
									},
									"entity_name": {
										"maxLength": 255,
										"minLength": 1,
										"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*$",
										"type": "string",
										"nullable": true,
										"description": "The name of the legal entity. This should **not** contain a merchant's DBA; DBAs can be included on the Account resource. Must not contain the word `wepay`."
									},
									"phone": {
										"$ref": "#/components/schemas/phone-legal_entities-nullable"
									},
									"preferred_locale": {
										"description": "The preferred locale of the legal entity. For merchants using the WePay Merchant Center, or receiving payments emails from WePay, this option will set the language preference.",
										"enum": [
											"en_US",
											"es_US",
											"en_CA",
											"fr_CA"
										],
										"x-enumDescriptions": {
											"en_US": "Locale string representing English - United States",
											"es_US": "Locale string representing Spanish - United States",
											"en_CA": "Locale string representing English - Canada",
											"fr_CA": "Locale string representing French - Canada"
										},
										"nullable": true,
										"type": "string"
									},
									"primary_url": {
										"$ref": "#/components/schemas/uri-nullable"
									},
									"public_ownership": {
										"$ref": "#/components/schemas/shared_public_ownership_request"
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									},
									"reference_id": {
										"$ref": "#/components/schemas/reference_id"
									},
									"referral_details": {
										"type": "object",
										"description": "Information regarding the referring representative",
										"properties": {
											"email": {
												"$ref": "#/components/schemas/email"
											},
											"name": {
												"additionalProperties": false,
												"properties": {
													"first": {
														"maxLength": 30,
														"minLength": 2,
														"type": "string",
														"description": "First name."
													},
													"last": {
														"maxLength": 30,
														"minLength": 2,
														"type": "string",
														"description": "Last name."
													}
												},
												"required": [
													"first",
													"last"
												],
												"type": "object"
											},
											"standard_id": {
												"$ref": "#/components/schemas/standard_id"
											},
											"coupon_code": {
												"$ref": "#/components/schemas/coupon_code"
											}
										},
										"required": [
											"name",
											"email",
											"standard_id"
										]
									},
									"significant_beneficiaries": {
										"additionalProperties": false,
										"properties": {
											"affiliations": {
												"additionalProperties": false,
												"properties": {
													"affiliation_0": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_1": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_2": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_3": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_4": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_5": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_6": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_7": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_8": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_9": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													}
												},
												"type": "object",
												"nullable": true,
												"description": "Information about all of the significant beneficiaries' affiliations. 10 affiliations are allowed at most."
											},
											"entities": {
												"additionalProperties": false,
												"properties": {
													"art_and_culture": {
														"type": "boolean",
														"default": false
													},
													"education": {
														"type": "boolean",
														"default": false
													},
													"individual": {
														"type": "boolean",
														"default": false
													},
													"labor_union": {
														"type": "boolean",
														"default": false
													},
													"other": {
														"type": "string",
														"maxLength": 255,
														"minLength": 1,
														"nullable": true
													},
													"political_organization": {
														"type": "boolean",
														"default": false
													},
													"religious": {
														"type": "boolean",
														"default": false
													},
													"social_service_and_economic_development": {
														"type": "boolean",
														"default": false
													}
												},
												"type": "object",
												"nullable": true,
												"description": "Describe significant beneficiaries' entity type."
											},
											"geographies": {
												"additionalProperties": false,
												"properties": {
													"international": {
														"type": "array",
														"minItems": 1,
														"uniqueItems": true,
														"items": {
															"$ref": "#/components/schemas/country_code"
														}
													},
													"local": {
														"type": "boolean",
														"default": true
													},
													"national": {
														"type": "boolean",
														"default": false
													},
													"regional": {
														"type": "boolean",
														"default": false
													}
												},
												"type": "object",
												"nullable": true,
												"description": "Information about significant beneficiaries' geographic locations, including `regional` and `international` details."
											},
											"non_domestic_location_beneficiaries": {
												"type": "array",
												"uniqueItems": true,
												"items": {
													"$ref": "#/components/schemas/country_code"
												},
												"nullable": true,
												"description": "**Note:** Although this is nested in the `significant_beneficiaries` object, this information must be collected for all non-domestic beneficiaries, even if they receive or control less than 10% of the organization's funds."
											}
										},
										"type": "object",
										"description": "Identify significant beneficiaries. **Note:** A significant beneficiary either receives or is responsible for 10% or more of the organization's funds."
									},
									"significant_donors": {
										"additionalProperties": false,
										"properties": {
											"corporate_entity": {
												"type": "boolean",
												"default": false
											},
											"endowment_fund": {
												"type": "boolean",
												"default": false
											},
											"government": {
												"type": "boolean",
												"default": false
											},
											"individual": {
												"type": "boolean",
												"default": false
											},
											"institutional": {
												"type": "boolean",
												"default": false
											},
											"other": {
												"type": "string",
												"maxLength": 255,
												"minLength": 1,
												"nullable": true
											},
											"other_charitable_organization": {
												"type": "boolean",
												"default": false
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Identify significant donors. **Note:** A significant donor contributes 10% or more of the organization's total volume."
									},
									"terms_of_service": {
										"additionalProperties": false,
										"properties": {
											"acceptance_time": {
												"type": "integer",
												"format": "int64",
												"minimum": 0,
												"nullable": true,
												"description": "Time (in UNIX) when WePay's Terms of Service was accepted."
											},
											"original_ip": {
												"maxLength": 45,
												"pattern": "^[A-F0-9a-f:\\.]*$",
												"type": "string",
												"nullable": true,
												"description": "The IP address in use when WePay's Terms of Service was accepted."
											},
											"terms_of_service_version": {
												"maxLength": 20,
												"pattern": "^[A-Za-z0-9_]+$",
												"type": "string",
												"nullable": true,
												"description": "The version of WePay's Terms of Service that was accepted."
											}
										},
										"type": "object",
										"description": "Data regarding the legal entity's acceptance of the WePay terms of service."
									},
									"token": {
										"$ref": "#/components/schemas/shared_token_request"
									}
								},
								"required": [
									"country"
								],
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Client-IP",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create a legal entity"
			},
			"get": {
				"tags": [
					"/legal_entities/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.0": {
										"value": {
											"results": [
												{
													"terms_of_service": {
														"acceptance_time": 1490656130,
														"original_ip": "12.37.161.213"
													},
													"controller": null,
													"entity_name": "Top Cookie",
													"phone": {
														"country_code": "+1",
														"phone_number": "2817389195"
													},
													"primary_url": null,
													"description": "Top Cookie is happy to deliver delicous cookies to the community.",
													"address": {
														"line1": "123 candy st",
														"city": "Beverly Hills",
														"postal_code": "90210",
														"region": "CA",
														"country": "US"
													},
													"entity_country_info": {
														"US": {
															"legal_form": "government_entity",
															"employer_identification_number": "321121234"
														},
														"country_of_formation": null,
														"operates_in_sanctioned_countries": null,
														"year_of_formation": null
													},
													"additional_representatives": null,
													"custom_data": null,
													"significant_donors": null,
													"significant_beneficiaries": {
														"entities": null,
														"geographies": null,
														"affiliations": null,
														"non_domestic_location_beneficiaries": null
													},
													"public_ownership": {
														"is_publicly_traded": true,
														"is_subsidiary": false,
														"parent_company_name": null,
														"primary_exchange": "NASDAQ",
														"traded_exchanges": {
															"NYSE": {
																"symbol": "ABCD",
																"country": "US",
																"name": "New York stock exchange"
															},
															"NASDAQ": {
																"symbol": "ABCD",
																"country": "US",
																"name": "NASDAQ stock exchange"
															}
														}
													},
													"controller_type": "account_controller",
													"account_controller": {
														"email": "matthewt+tst_merchant_2@wepay.com",
														"name": {
															"first": "Foo",
															"last": "bar"
														},
														"phone": {
															"country_code": "+1",
															"phone_number": "125556667777"
														},
														"address": {
															"line1": "456 Nocturn Alley",
															"city": "Beverly Hills",
															"postal_code": "90210",
															"region": "CA",
															"country": "US"
														},
														"email_is_verified": false
													},
													"country": "US",
													"create_time": 1626192190,
													"id": "1ba4cb4d-f842-4478-8c96-c62b9b360465",
													"resource": "legal_entities",
													"path": "/legal_entities/1ba4cb4d-f842-4478-8c96-c62b9b360465",
													"owner": {
														"id": "183700",
														"resource": "applications",
														"path": null
													},
													"api_version": "3.0"
												},
												{
													"terms_of_service": {
														"acceptance_time": 1490656130,
														"original_ip": "12.37.161.213"
													},
													"controller": {
														"is_beneficial_owner": null,
														"name": {
															"first": "Foo",
															"last": "Bar"
														},
														"phone": {
															"country_code": "+1",
															"phone_number": "5556667777"
														},
														"address": {
															"line1": "456 Nocturn Alley",
															"city": "Beverly Hills",
															"postal_code": "90210",
															"region": "CA",
															"country": "US"
														},
														"email": "example@example.com",
														"email_is_verified": false,
														"personal_country_info": {
															"US": {
																"social_security_number_last_four_is_present": true,
																"social_security_number_is_present": true
															}
														},
														"job_title": null,
														"date_of_birth_is_present": true
													},
													"entity_name": "Hermes Test Charity",
													"phone": null,
													"primary_url": null,
													"description": "The Hermes Test Charity is very important",
													"address": {
														"line1": "123 Fake Street",
														"city": "San Francisco",
														"postal_code": "94101",
														"region": "CA",
														"country": "US"
													},
													"entity_country_info": {
														"US": {
															"legal_form": "individual",
															"employer_identification_number": "123211230"
														},
														"country_of_formation": null,
														"operates_in_sanctioned_countries": null,
														"year_of_formation": null
													},
													"additional_representatives": null,
													"custom_data": null,
													"significant_donors": null,
													"significant_beneficiaries": {
														"entities": null,
														"geographies": null,
														"affiliations": null,
														"non_domestic_location_beneficiaries": null
													},
													"public_ownership": {
														"is_publicly_traded": false,
														"is_subsidiary": false,
														"parent_company_name": null,
														"primary_exchange": null,
														"traded_exchanges": {}
													},
													"country": "US",
													"create_time": 1626191603,
													"id": "7b6cb66c-3df4-4869-b115-58e7cdc7bf33",
													"resource": "legal_entities",
													"path": "/legal_entities/7b6cb66c-3df4-4869-b115-58e7cdc7bf33",
													"owner": {
														"id": "183700",
														"resource": "applications",
														"path": null
													},
													"api_version": "3.0-alpha.1"
												}
											],
											"next": "/legal_entities?page=AQQHAAEXtz_V9KPMrlPgme_I5pIcbszHp0DPyrUcrGhnVrJRyzda-opQzSTM6imFTfuqVEq6IWykF90G8ve0OzjLWTvigfnVLoX9WkVniQEXJeNMyVRfVHXGros8",
											"previous": null,
											"api_version": "3.0-alpha.1"
										}
									}
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/legal_entity-resp"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of legal entity objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"results",
										"next",
										"previous"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /legal_entities call allows your platform to look up a collection of legal entities. Onboarding a merchant requires the creation of a legal entity. A legal entity may be a business, individual, nonprofit, etc., and is completely owned by a single partner application. WePay collects information about the legal entity so we can properly underwrite them when provisioning a merchant account.",
				"operationId": "GET_legal_entities",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The create time epoch timestamp (in seconds) for the start of the search window, inclusive.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The create time epoch timestamp (in seconds) for the end of the search window, inclusive.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "reference_id",
						"in": "query",
						"description": "Return elements having this reference_id.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of legal entities"
			}
		},
		"/legal_entities/{id}": {
			"post": {
				"tags": [
					"/legal_entities/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.0": {
										"value": {
											"additional_representatives": null,
											"address": {
												"city": "San Francisco",
												"country": "US",
												"line1": "123 Fake Street",
												"postal_code": "94101",
												"region": "CA"
											},
											"attestation": {
												"attester_type": "other_representative",
												"other_representative": {
													"attest_time": 1490656130,
													"job_title": "CEO",
													"name": {
														"first": "Foo",
														"last": "Bar"
													},
													"original_ip": "12.37.161.213"
												}
											},
											"controller": {
												"reference_id": "reference_id_0",
												"address": {
													"city": "Beverly Hills",
													"country": "US",
													"line1": "456 Nocturn Alley",
													"postal_code": "90210",
													"region": "CA"
												},
												"date_of_birth_is_present": true,
												"email": "example@example.com",
												"name": {
													"first": "Foo",
													"last": "Bar"
												},
												"personal_country_info": {
													"US": {
														"social_security_number_is_present": true
													}
												},
												"phone": {
													"country_code": "+1",
													"phone_number": "5556667777"
												},
												"job_title": "CFO"
											},
											"account_controller": null,
											"controller_type": "controller",
											"public_ownership": {
												"is_publicly_traded": true,
												"is_subsidiary": false,
												"parent_company_name": null,
												"primary_exchange": "NASDAQ",
												"traded_exchanges": {
													"NYSE": {
														"symbol": "ABCD",
														"country": "US",
														"name": "New York stock exchange"
													},
													"NASDAQ": {
														"symbol": "ABCD",
														"country": "US",
														"name": "NASDAQ stock exchange"
													}
												}
											},
											"country": "US",
											"create_time": 1480700534,
											"custom_data": null,
											"api_version": "3.0",
											"description": "The Foo Bar Shop on 5th ave.",
											"entity_country_info": {
												"US": {
													"employer_identification_number": "123211230"
												},
												"country_of_formation": null,
												"operates_in_sanctioned_countries": null,
												"year_of_formation": null
											},
											"entity_name": "Foo Bar Shop",
											"email": "example@email.com",
											"id": "b116768c-dac0-4ef1-8024-7d3056c6b186",
											"owner": {
												"id": "9dac302a-9d88-4bb7-bba2-8bd8a373acc5",
												"path": null,
												"resource": "applications"
											},
											"path": "/legal_entities/b116768c-dac0-4ef1-8024-7d3056c6b186",
											"phone": null,
											"primary_url": "http://www.example.com",
											"resource": "legal_entities",
											"significant_beneficiaries": {
												"affiliations": null,
												"entities": null,
												"geographies": null,
												"non_domestic_location_beneficiaries": null
											},
											"significant_donors": null,
											"terms_of_service": {
												"acceptance_time": 1490656130,
												"original_ip": "12.37.161.213",
												"terms_of_service_version": "platform"
											},
											"reference_id": null,
											"enterprise_customer_id": "12345"
										}
									}
								},
								"schema": {
									"$ref": "#/components/schemas/legal_entity-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, UNSUPPORTED_COUNTRY",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"409": {
						"description": "RESOURCE_CONFLICT",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /legal_entities/{id} call allows your platform to update and add custom data to a legal entity. Onboarding a merchant requires the creation of a legal entity. A legal entity may be a business, individual, nonprofit, etc., and is completely owned by a single partner application. WePay collects information about the legal entity so we can properly underwrite them when provisioning a merchant account.",
				"operationId": "POST_legal_entities-id",
				"requestBody": {
					"content": {
						"application/json": {
							"examples": {
								"v3.0": {
									"value": {
										"address": {
											"city": "San Francisco",
											"country": "US",
											"line1": "123 Fake Street",
											"postal_code": "94101",
											"region": "CA"
										},
										"attestation": {
											"attester_type": "other_representative",
											"other_representative": {
												"attest_time": 1490656130,
												"job_title": "CEO",
												"name": {
													"first": "Foo",
													"last": "Bar"
												},
												"original_ip": "12.37.161.213"
											}
										},
										"controller": {
											"reference_id": "reference_id_0",
											"address": {
												"city": "Beverly Hills",
												"country": "US",
												"line1": "456 Nocturn Alley",
												"postal_code": "90210",
												"region": "CA"
											},
											"date_of_birth": {
												"day": 1,
												"month": 1,
												"year": 1900
											},
											"email": "example@example.com",
											"name": {
												"first": "Foo",
												"last": "Bar"
											},
											"personal_country_info": {
												"US": {
													"social_security_number": "012-34-5678"
												}
											},
											"phone": {
												"country_code": "+1",
												"phone_number": "5556667777"
											},
											"job_title": "CFO"
										},
										"account_controller": null,
										"controller_type": "controller",
										"description": "The Foo Bar Shop on 5th ave.",
										"entity_country_info": {
											"US": {
												"employer_identification_number": "123211230"
											}
										},
										"entity_name": "Foo Bar Shop",
										"email": "example@email.com",
										"primary_url": "http://www.example.com",
										"significant_beneficiaries": {
											"affiliations": {
												"affiliation_0": {
													"name": "charity_a",
													"countries": [
														"US",
														"CA"
													],
													"association_types": {
														"contractual_obligation": true,
														"donor": false,
														"funding_recipient": false,
														"other": "other association_type",
														"parent_organization": true,
														"program_affiliation": false,
														"resource_delivery_provider": false,
														"transfer_retention_or_expenditure": false
													}
												}
											},
											"entities": {
												"art_and_culture": false,
												"education": true,
												"individual": false,
												"labor_union": true,
												"other": "some significant beneficiary",
												"political_organization": false,
												"religious": true,
												"social_service_and_economic_development": false
											},
											"geographies": {
												"local": true,
												"regional": true,
												"national": false,
												"international": [
													"US",
													"CA"
												]
											},
											"non_domestic_location_beneficiaries": [
												"US",
												"CA"
											]
										},
										"significant_donors": {
											"corporate_entity": true,
											"endowment_fund": true,
											"government": false,
											"individual": true,
											"institutional": false,
											"other": "some significant donor",
											"other_charitable_organization": true
										}
									}
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"account_controller": {
										"$ref": "#/components/schemas/shared_account_controller"
									},
									"additional_representatives": {
										"$ref": "#/components/schemas/shared_additional_representatives_request"
									},
									"address": {
										"$ref": "#/components/schemas/legal_entities_address"
									},
									"attestation": {
										"additionalProperties": false,
										"properties": {
											"attester_type": {
												"enum": [
													"additional_representative",
													"controller",
													"other_representative"
												],
												"type": "string",
												"x-isOneOfKey": true,
												"description": "Describes by whom a legal entity is attested. The value will be `controller` unless your platform has permission from WePay to collect attestation from other representatives.",
												"x-enumDescriptions": {
													"additional_representative": "**This option requires permission.** The legal entity is attested by one of the additional representatives.",
													"controller": "The legal entity is attested by the controller.",
													"other_representative": "**This option requires permission.** The legal entity is attested by other representative."
												}
											},
											"additional_representative": {
												"$ref": "#/components/schemas/legal_entities_attestation_additional_representative"
											},
											"controller": {
												"$ref": "#/components/schemas/legal_entities_attestation_controller"
											},
											"other_representative": {
												"$ref": "#/components/schemas/legal_entities_attestation_other_representative"
											}
										},
										"required": [
											"attester_type"
										],
										"type": "object",
										"nullable": true,
										"description": "Indicate that the controller has attested to the validity of CIP/KYC details submitted. Find more information [here](/clear/options/kyc-and-cip-certification/#attestation)."
									},
									"controller": {
										"$ref": "#/components/schemas/shared_controller_request"
									},
									"controller_type": {
										"$ref": "#/components/schemas/controller_type"
									},
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"description": {
										"maxLength": 1024,
										"type": "string",
										"nullable": true,
										"description": "Description of the Legal Entity. WePay uses this information for underwriting purposes."
									},
									"email": {
										"$ref": "#/components/schemas/entity-email-nullable"
									},
									"entity_country_info": {
										"additionalProperties": false,
										"properties": {
											"CA": {
												"$ref": "#/components/schemas/shared_entity_country_info_CA"
											},
											"GB": {
												"$ref": "#/components/schemas/shared_entity_country_info_GB"
											},
											"US": {
												"$ref": "#/components/schemas/shared_entity_country_info_US"
											},
											"country_of_formation": {
												"$ref": "#/components/schemas/country_code-nullable"
											},
											"operates_in_sanctioned_countries": {
												"type": "array",
												"uniqueItems": true,
												"items": {
													"enum": [
														"CU",
														"IR",
														"KP",
														"SY",
														"XX"
													],
													"x-enumDescriptions": {
														"CU": "Cuba",
														"IR": "Iran",
														"KP": "North Korea",
														"SY": "Syria",
														"XX": "WePay's custom 2-digit ISO code for Crimea Region, as a 2-digit code does not exist."
													},
													"type": "string"
												},
												"nullable": true,
												"description": "An array of sanctioned countries where the Legal Entity operates. Possible values include `CU`, `IR`, `KP`, `XX`, `SY`. Note that `XX` is used to represent Crimea, as it does not have its own 2-digit ISO code. If the merchant indicates they do not have operations in one of the sanctioned countries listed above, then pass an empty array: `[]`. This field is required, if the value is left `null`, capabilities (payments and payouts) will be disabled."
											},
											"year_of_formation": {
												"type": "integer",
												"minimum": 0,
												"nullable": true,
												"description": "The year when the Legal Entity originated."
											}
										},
										"type": "object",
										"description": "Information about the Legal Entity."
									},
									"entity_name": {
										"maxLength": 255,
										"minLength": 1,
										"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*$",
										"type": "string",
										"nullable": true,
										"description": "The name of the legal entity. This should **not** contain a merchant's DBA; DBAs can be included on the Account resource. Must not contain the word `wepay`."
									},
									"phone": {
										"$ref": "#/components/schemas/phone-legal_entities-nullable"
									},
									"preferred_locale": {
										"description": "The preferred locale of the legal entity. For merchants using the WePay Merchant Center, or receiving payments emails from WePay, this option will set the language preference.",
										"enum": [
											"en_US",
											"es_US",
											"en_CA",
											"fr_CA"
										],
										"x-enumDescriptions": {
											"en_US": "Locale string representing English - United States",
											"es_US": "Locale string representing Spanish - United States",
											"en_CA": "Locale string representing English - Canada",
											"fr_CA": "Locale string representing French - Canada"
										},
										"nullable": true,
										"type": "string"
									},
									"primary_url": {
										"$ref": "#/components/schemas/uri-nullable"
									},
									"public_ownership": {
										"$ref": "#/components/schemas/shared_public_ownership_request"
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									},
									"reference_id": {
										"$ref": "#/components/schemas/reference_id"
									},
									"referral_details": {
										"type": "object",
										"description": "Information regarding the referring representative",
										"properties": {
											"email": {
												"$ref": "#/components/schemas/email"
											},
											"name": {
												"additionalProperties": false,
												"properties": {
													"first": {
														"maxLength": 30,
														"minLength": 2,
														"type": "string",
														"description": "First name."
													},
													"last": {
														"maxLength": 30,
														"minLength": 2,
														"type": "string",
														"description": "Last name."
													}
												},
												"required": [
													"first",
													"last"
												],
												"type": "object"
											},
											"standard_id": {
												"$ref": "#/components/schemas/standard_id"
											},
											"coupon_code": {
												"$ref": "#/components/schemas/coupon_code"
											}
										},
										"required": [
											"name",
											"email",
											"standard_id"
										]
									},
									"significant_beneficiaries": {
										"additionalProperties": false,
										"properties": {
											"affiliations": {
												"additionalProperties": false,
												"properties": {
													"affiliation_0": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_1": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_2": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_3": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_4": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_5": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_6": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_7": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_8": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													},
													"affiliation_9": {
														"$ref": "#/components/schemas/legal_entities_affiliation"
													}
												},
												"type": "object",
												"nullable": true,
												"description": "Information about all of the significant beneficiaries' affiliations. 10 affiliations are allowed at most."
											},
											"entities": {
												"additionalProperties": false,
												"properties": {
													"art_and_culture": {
														"type": "boolean",
														"default": false
													},
													"education": {
														"type": "boolean",
														"default": false
													},
													"individual": {
														"type": "boolean",
														"default": false
													},
													"labor_union": {
														"type": "boolean",
														"default": false
													},
													"other": {
														"type": "string",
														"maxLength": 255,
														"minLength": 1,
														"nullable": true
													},
													"political_organization": {
														"type": "boolean",
														"default": false
													},
													"religious": {
														"type": "boolean",
														"default": false
													},
													"social_service_and_economic_development": {
														"type": "boolean",
														"default": false
													}
												},
												"type": "object",
												"nullable": true,
												"description": "Describe significant beneficiaries' entity type."
											},
											"geographies": {
												"additionalProperties": false,
												"properties": {
													"international": {
														"type": "array",
														"minItems": 1,
														"uniqueItems": true,
														"items": {
															"$ref": "#/components/schemas/country_code"
														}
													},
													"local": {
														"type": "boolean",
														"default": true
													},
													"national": {
														"type": "boolean",
														"default": false
													},
													"regional": {
														"type": "boolean",
														"default": false
													}
												},
												"type": "object",
												"nullable": true,
												"description": "Information about significant beneficiaries' geographic locations, including `regional` and `international` details."
											},
											"non_domestic_location_beneficiaries": {
												"type": "array",
												"uniqueItems": true,
												"items": {
													"$ref": "#/components/schemas/country_code"
												},
												"nullable": true,
												"description": "**Note:** Although this is nested in the `significant_beneficiaries` object, this information must be collected for all non-domestic beneficiaries, even if they receive or control less than 10% of the organization's funds."
											}
										},
										"type": "object",
										"description": "Identify significant beneficiaries. **Note:** A significant beneficiary either receives or is responsible for 10% or more of the organization's funds."
									},
									"significant_donors": {
										"additionalProperties": false,
										"properties": {
											"corporate_entity": {
												"type": "boolean",
												"default": false
											},
											"endowment_fund": {
												"type": "boolean",
												"default": false
											},
											"government": {
												"type": "boolean",
												"default": false
											},
											"individual": {
												"type": "boolean",
												"default": false
											},
											"institutional": {
												"type": "boolean",
												"default": false
											},
											"other": {
												"type": "string",
												"maxLength": 255,
												"minLength": 1,
												"nullable": true
											},
											"other_charitable_organization": {
												"type": "boolean",
												"default": false
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Identify significant donors. **Note:** A significant donor contributes 10% or more of the organization's total volume."
									},
									"terms_of_service": {
										"additionalProperties": false,
										"properties": {
											"acceptance_time": {
												"type": "integer",
												"format": "int64",
												"minimum": 0,
												"nullable": true,
												"description": "Time (in UNIX) when WePay's Terms of Service was accepted."
											},
											"original_ip": {
												"maxLength": 45,
												"pattern": "^[A-F0-9a-f:\\.]*$",
												"type": "string",
												"nullable": true,
												"description": "The IP address in use when WePay's Terms of Service was accepted."
											},
											"terms_of_service_version": {
												"maxLength": 20,
												"pattern": "^[A-Za-z0-9_]+$",
												"type": "string",
												"nullable": true,
												"description": "The version of WePay's Terms of Service that was accepted."
											}
										},
										"type": "object",
										"description": "Data regarding the legal entity's acceptance of the WePay terms of service."
									},
									"token": {
										"$ref": "#/components/schemas/shared_token_request"
									}
								},
								"type": "object",
								"description": "The JSON request body to update data on an existing Legal Entity."
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update a legal entity"
			},
			"get": {
				"tags": [
					"/legal_entities/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.0": {
										"value": {
											"additional_representatives": null,
											"address": {
												"city": "San Francisco",
												"country": "US",
												"line1": "123 Fake Street",
												"postal_code": "94101",
												"region": "CA"
											},
											"attestation": null,
											"controller": {
												"reference_id": "reference_id_0",
												"address": {
													"city": "Beverly Hills",
													"country": "US",
													"line1": "456 Nocturn Alley",
													"postal_code": "90210",
													"region": "CA"
												},
												"date_of_birth_is_present": true,
												"email": "example@example.com",
												"name": {
													"first": "Foo",
													"last": "Bar"
												},
												"personal_country_info": {
													"US": {
														"social_security_number_is_present": true
													}
												},
												"phone": {
													"country_code": "+1",
													"phone_number": "5556667777"
												},
												"job_title": "CFO"
											},
											"account_controller": null,
											"controller_type": "controller",
											"public_ownership": {
												"is_publicly_traded": true,
												"is_subsidiary": false,
												"parent_company_name": "Coca Cola",
												"primary_exchange": "NASDAQ",
												"traded_exchanges": {
													"NYSE": {
														"symbol": "ABCD",
														"country": "US",
														"name": "New York stock exchange"
													},
													"NASDAQ": {
														"symbol": "ABCD",
														"country": "US",
														"name": "NASDAQ stock exchange"
													}
												}
											},
											"country": "US",
											"create_time": 1480700534,
											"custom_data": null,
											"api_version": "3.0",
											"description": "The Foo Bar Shop on 5th ave.",
											"entity_country_info": {
												"US": {
													"employer_identification_number": "123211230"
												},
												"country_of_formation": null,
												"operates_in_sanctioned_countries": null,
												"year_of_formation": null
											},
											"entity_name": "Foo Bar Shop",
											"email": "example@email.com",
											"id": "b116768c-dac0-4ef1-8024-7d3056c6b186",
											"owner": {
												"id": "9dac302a-9d88-4bb7-bba2-8bd8a373acc5",
												"path": null,
												"resource": "applications"
											},
											"path": "/legal_entities/b116768c-dac0-4ef1-8024-7d3056c6b186",
											"phone": null,
											"primary_url": "http://www.example.com",
											"resource": "legal_entities",
											"significant_beneficiaries": {
												"affiliations": null,
												"entities": null,
												"geographies": null,
												"non_domestic_location_beneficiaries": null
											},
											"significant_donors": null,
											"terms_of_service": {
												"acceptance_time": 1490656130,
												"original_ip": "12.37.161.213",
												"terms_of_service_version": "platform"
											},
											"reference_id": null,
											"enterprise_customer_id": "12345"
										}
									}
								},
								"schema": {
									"$ref": "#/components/schemas/legal_entity-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /legal_entities/{id} call allows your platform to look up a single legal entity. Onboarding a merchant requires the creation of a legal entity. A legal entity may be a business, individual, nonprofit, etc., and is completely owned by a single partner application. WePay collects information about the legal entity so we can properly underwrite them when provisioning a merchant account.",
				"operationId": "GET_legal_entities-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a legal entity"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the legal entity, generated by WePay when the legal entity is created."
				}
			]
		},
		"/legal_entities/{id}/verifications": {
			"post": {
				"tags": [
					"/legal_entities/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"additional_representatives": {
										"representative_0": {
											"reference_id": "reference_id_0",
											"personal_verification": {
												"current_issues": [
													{
														"additional_documents_required": [
															"additional_representatives.representative_0.personal_verification.documents"
														],
														"issue_type": "additional_documents_required",
														"target": {
															"id": null,
															"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
															"resource": "verifications"
														}
													}
												],
												"documents": [
													{
														"create_time": 1480700611,
														"id": "31b16e40-6af7-4c8a-9a9f-ad413ba7293f",
														"owner": {
															"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
															"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
															"resource": "legal_entities"
														},
														"path": null,
														"reject_reason": {
															"details": [
																{
																	"detail_code": "illegible",
																	"detail_message": "image is illegible"
																}
															],
															"reason_code": "failed_risk_review",
															"reason_message": "failed review"
														},
														"resource": "documents",
														"status": "rejected",
														"type": "social_security_card"
													}
												],
												"verified": false
											}
										},
										"representative_1": {
											"reference_id": "reference_id_1",
											"personal_verification": {
												"current_issues": [],
												"documents": [],
												"verified": true
											}
										},
										"representative_2": {
											"reference_id": "reference_id_2",
											"personal_verification": {
												"current_issues": [
													{
														"additional_documents_required": [
															"additional_representatives.representative_2.personal_verification.documents"
														],
														"issue_type": "additional_documents_required",
														"target": {
															"id": null,
															"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
															"resource": "verifications"
														}
													}
												],
												"documents": [],
												"verified": false
											}
										},
										"representative_3": null
									},
									"controller": {
										"reference_id": "reference_id_4",
										"personal_verification": {
											"current_issues": [
												{
													"in_review": [
														"controller.personal_verification"
													],
													"issue_type": "in_review",
													"target": {
														"id": null,
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
														"resource": "verifications"
													}
												},
												{
													"identity_verification": {
														"path": "controller.personal_verification.documents",
														"requested_documents": [
															"drivers_license",
															"current_lease_contract"
														],
														"message": "we need to verify your date of birth"
													},
													"issue_type": "identity_verification",
													"target": {
														"id": null,
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
														"resource": "verifications"
													}
												},
												{
													"risk_outreach": {
														"path": "controller.personal_verification.documents",
														"requested_documents": [
															"current_bank_statement"
														],
														"message": "we need to verify your date of birth"
													},
													"issue_type": "identity_verification",
													"target": {
														"id": null,
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
														"resource": "verifications"
													}
												}
											],
											"documents": [
												{
													"create_time": 1480700611,
													"id": "724ec0d3-2eb5-461e-b72d-a15c6b1a9970",
													"owner": {
														"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
														"resource": "legal_entities"
													},
													"path": null,
													"reject_reason": null,
													"resource": "documents",
													"status": "in_review",
													"type": "social_security_card"
												},
												{
													"create_time": 1480700611,
													"id": "3838d4ba-f497-4b6f-8d22-19b90cec4f23",
													"owner": {
														"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
														"resource": "legal_entities"
													},
													"path": null,
													"reject_reason": null,
													"resource": "documents",
													"status": "verified",
													"type": "drivers_license"
												},
												{
													"create_time": 1480700611,
													"id": "242f9ec7-a309-412c-976d-cc84074a508a",
													"owner": {
														"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
														"resource": "legal_entities"
													},
													"path": null,
													"reject_reason": null,
													"resource": "documents",
													"status": "in_review",
													"type": "passport"
												}
											],
											"verified": false
										}
									},
									"entity_verification": {
										"current_issues": [
											{
												"identity_verification": {
													"path": "entity_verification.documents",
													"requested_documents": [
														"drivers_license",
														"current_lease_contract"
													],
													"message": "we need to verify your address"
												},
												"issue_type": "identity_verification",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											},
											{
												"risk_outreach": {
													"path": "entity_verification.documents",
													"requested_documents": [
														"drivers_license",
														"current_lease_contract"
													],
													"message": "we need to verify your address"
												},
												"issue_type": "risk_outreach",
												"target": {
													"id": null,
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
													"resource": "verifications"
												}
											}
										],
										"documents": [
											{
												"create_time": 1480700611,
												"id": "99e0d61d-0b47-41df-9c33-b7bf456d07a8",
												"owner": {
													"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
													"resource": "legal_entities"
												},
												"path": null,
												"reject_reason": null,
												"resource": "documents",
												"status": "verified",
												"type": "evidence_of_corporate_registration"
											}
										],
										"verified": true
									},
									"id": null,
									"owner": {
										"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
										"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
										"resource": "legal_entities"
									},
									"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
									"resource": "verifications",
									"api_version": "3.0"
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"additional_representatives": {
											"$ref": "#/components/schemas/legal_entities_id_verifications_additional_representatives_response"
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"controller": {
											"$ref": "#/components/schemas/legal_entities_id_verifications_controller_response"
										},
										"entity_verification": {
											"additionalProperties": false,
											"properties": {
												"verified": {
													"type": "boolean",
													"description": "Indicates if the personal verification details of the controller have been verified."
												},
												"current_issues": {
													"items": {
														"additionalProperties": false,
														"properties": {
															"issue_type": {
																"enum": [
																	"additional_documents_required",
																	"errant_fields",
																	"identity_verification",
																	"in_review",
																	"risk_outreach"
																],
																"x-enumDescriptions": {
																	"additional_documents_required": "**Note:** This is the default value for additional information during merchant verification, but can be replaced by `identity_verification` by working with your integration team. This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [Example notification](https://gist.github.com/wehub/edcae2ecefbd76df9e3b3e6a97a954cf).",
																	"errant_fields": "This value describes missing or invalid onboarding information.",
																	"identity_verification": "**Note:** Work with your integration team to enable this value, which would then replace `additional_documents_required` and enhance the end user experience. The preferred method is `identity_verification`, so please work with your integration team to get this enabled to replace the `additional_documents_required` value. WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives.",
																	"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete.",
																	"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant."
																},
																"type": "string",
																"description": "Indicates the reason(s) the current issue has appeared."
															},
															"target": {
																"additionalProperties": false,
																"properties": {
																	"id": {
																		"type": "string",
																		"nullable": true
																	},
																	"path": {
																		"type": "string",
																		"nullable": true
																	},
																	"resource": {
																		"type": "string",
																		"nullable": true
																	}
																},
																"required": [
																	"resource",
																	"id",
																	"path"
																],
																"type": "object",
																"description": "Indicates the resource associated with the current issue."
															},
															"additional_documents_required": {
																"items": {
																	"type": "string"
																},
																"type": "array",
																"description": "Indicates if additional documentation is required for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, then any and all required documentation will be presented in this array."
															},
															"errant_fields": {
																"additionalProperties": {
																	"items": {
																		"enum": [
																			"is_false",
																			"is_null",
																			"is_po_box",
																			"is_unsupported_value",
																			"includes_dba",
																			"does_not_match_provided_doc",
																			"does_not_match_government_sources",
																			"invalid_url"
																		],
																		"x-enumDescriptions": {
																			"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
																			"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
																			"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
																			"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
																			"includes_dba": "Business Legal Name should not include Doing Business As (DBA).",
																			"does_not_match_provided_doc": "The value of the target does not match provided documentation.",
																			"does_not_match_government_sources": "The value of the target does not match government sources.",
																			"invalid_url": "WePay cannot verify the URL. The merchant should double check their website URL and submit it again."
																		},
																		"type": "string"
																	},
																	"minItems": 1,
																	"type": "array",
																	"uniqueItems": true
																},
																"type": "object",
																"description": "Indicates which fields need to be updated."
															},
															"identity_verification": {
																"type": "object",
																"additionalProperties": false,
																"properties": {
																	"message": {
																		"type": "string",
																		"nullable": true,
																		"description": "Agent provided contextual message."
																	},
																	"path": {
																		"type": "string",
																		"description": "Path to targeted individual (controller, entity, or additional_representative)"
																	},
																	"requested_documents": {
																		"items": {
																			"enum": [
																				"articles_of_association",
																				"benefits_card",
																				"birth_certificate",
																				"canadian_citizenship",
																				"canadian_health_card",
																				"certificate_of_association",
																				"certificate_of_authority",
																				"certificate_of_citizenship",
																				"certificate_of_formation",
																				"certificate_of_incorporation",
																				"certificate_of_naturalization",
																				"certificate_of_organization",
																				"certified_copy_of_court_order",
																				"charity_license",
																				"credit_card_statement",
																				"current_bank_statement",
																				"current_lease_contract",
																				"current_local_tax_bill",
																				"current_utility_bill",
																				"dba_registration",
																				"divorce_decree",
																				"drivers_license",
																				"electoral_register_entry",
																				"employment_authorization_card",
																				"evidence_of_authority",
																				"evidence_of_corporate_registration",
																				"evidence_of_name_change",
																				"evidence_of_nonprofit_registration",
																				"firearms_certificate",
																				"foreign_passport",
																				"hud_statement",
																				"identity_card_northern_ireland",
																				"insurance_bill",
																				"insurance_card",
																				"insurance_declaration_page",
																				"irs_501c3_determination",
																				"irs_confirmation_of_tin",
																				"marriage_certificate",
																				"matricula_consular_card",
																				"military_orders",
																				"mortgage_closing_document",
																				"mortgage_statement",
																				"national_identity_card",
																				"order_of_creation",
																				"other_evidence_of_filings",
																				"other_government_issued_photo_id",
																				"other_supporting_docs",
																				"partnership_agreement",
																				"passport",
																				"paystub",
																				"permanent_resident_card",
																				"sentri_card",
																				"social_insurance_number_card",
																				"social_security_benefit_notice",
																				"social_security_card",
																				"tax_exemption_letter",
																				"trust_agreement",
																				"vehicle_registration"
																			],
																			"x-enumDescriptions": {
																				"articles_of_association": "",
																				"benefits_card": "",
																				"birth_certificate": "",
																				"canadian_citizenship": "",
																				"canadian_health_card": "",
																				"certificate_of_association": "",
																				"certificate_of_authority": "",
																				"certificate_of_citizenship": "",
																				"certificate_of_formation": "",
																				"certificate_of_incorporation": "",
																				"certificate_of_naturalization": "",
																				"certificate_of_organization": "",
																				"certified_copy_of_court_order": "",
																				"charity_license": "",
																				"credit_card_statement": "",
																				"current_bank_statement": "",
																				"current_lease_contract": "",
																				"current_local_tax_bill": "",
																				"current_utility_bill": "",
																				"dba_registration": "",
																				"divorce_decree": "",
																				"drivers_license": "",
																				"electoral_register_entry": "",
																				"employment_authorization_card": "",
																				"evidence_of_authority": "",
																				"evidence_of_corporate_registration": "",
																				"evidence_of_name_change": "",
																				"evidence_of_nonprofit_registration": "",
																				"firearms_certificate": "",
																				"foreign_passport": "",
																				"hud_statement": "",
																				"identity_card_northern_ireland": "",
																				"insurance_bill": "",
																				"insurance_card": "",
																				"insurance_declaration_page": "",
																				"irs_501c3_determination": "",
																				"irs_confirmation_of_tin": "",
																				"marriage_certificate": "",
																				"matricula_consular_card": "",
																				"military_orders": "",
																				"mortgage_closing_document": "",
																				"mortgage_statement": "",
																				"national_identity_card": "",
																				"order_of_creation": "",
																				"other_evidence_of_filings": "",
																				"other_government_issued_photo_id": "",
																				"other_supporting_docs": "",
																				"partnership_agreement": "",
																				"passport": "",
																				"paystub": "",
																				"permanent_resident_card": "",
																				"sentri_card": "",
																				"social_insurance_number_card": "",
																				"social_security_benefit_notice": "",
																				"social_security_card": "",
																				"tax_exemption_letter": "",
																				"trust_agreement": "",
																				"vehicle_registration": ""
																			},
																			"type": "string"
																		},
																		"type": "array",
																		"description": "Types of documents that would fulfill request."
																	}
																},
																"required": [
																	"path",
																	"requested_documents",
																	"message"
																]
															},
															"in_review": {
																"items": {
																	"type": "string"
																},
																"type": "array",
																"description": "Indicates if verification information is under review (if any) for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, and `in_review` is `true`, then this array will contain the path of the item(s) under review."
															},
															"risk_outreach": {
																"type": "object",
																"additionalProperties": false,
																"properties": {
																	"message": {
																		"type": "string",
																		"nullable": true,
																		"description": "Agent provided contextual message."
																	},
																	"path": {
																		"type": "string",
																		"description": "Path to targeted individual (controller, entity, or additional_representative)"
																	},
																	"requested_documents": {
																		"items": {
																			"enum": [
																				"articles_of_association",
																				"benefits_card",
																				"birth_certificate",
																				"canadian_citizenship",
																				"canadian_health_card",
																				"certificate_of_association",
																				"certificate_of_authority",
																				"certificate_of_citizenship",
																				"certificate_of_formation",
																				"certificate_of_incorporation",
																				"certificate_of_naturalization",
																				"certificate_of_organization",
																				"certified_copy_of_court_order",
																				"charity_license",
																				"credit_card_statement",
																				"current_bank_statement",
																				"current_lease_contract",
																				"current_local_tax_bill",
																				"current_utility_bill",
																				"dba_registration",
																				"divorce_decree",
																				"drivers_license",
																				"electoral_register_entry",
																				"employment_authorization_card",
																				"evidence_of_authority",
																				"evidence_of_corporate_registration",
																				"evidence_of_name_change",
																				"evidence_of_nonprofit_registration",
																				"firearms_certificate",
																				"foreign_passport",
																				"hud_statement",
																				"identity_card_northern_ireland",
																				"insurance_bill",
																				"insurance_card",
																				"insurance_declaration_page",
																				"irs_501c3_determination",
																				"irs_confirmation_of_tin",
																				"marriage_certificate",
																				"matricula_consular_card",
																				"military_orders",
																				"mortgage_closing_document",
																				"mortgage_statement",
																				"national_identity_card",
																				"order_of_creation",
																				"other_evidence_of_filings",
																				"other_government_issued_photo_id",
																				"other_supporting_docs",
																				"partnership_agreement",
																				"passport",
																				"paystub",
																				"permanent_resident_card",
																				"sentri_card",
																				"social_insurance_number_card",
																				"social_security_benefit_notice",
																				"social_security_card",
																				"tax_exemption_letter",
																				"trust_agreement",
																				"vehicle_registration"
																			],
																			"x-enumDescriptions": {
																				"articles_of_association": "",
																				"benefits_card": "",
																				"birth_certificate": "",
																				"canadian_citizenship": "",
																				"canadian_health_card": "",
																				"certificate_of_association": "",
																				"certificate_of_authority": "",
																				"certificate_of_citizenship": "",
																				"certificate_of_formation": "",
																				"certificate_of_incorporation": "",
																				"certificate_of_naturalization": "",
																				"certificate_of_organization": "",
																				"certified_copy_of_court_order": "",
																				"charity_license": "",
																				"credit_card_statement": "",
																				"current_bank_statement": "",
																				"current_lease_contract": "",
																				"current_local_tax_bill": "",
																				"current_utility_bill": "",
																				"dba_registration": "",
																				"divorce_decree": "",
																				"drivers_license": "",
																				"electoral_register_entry": "",
																				"employment_authorization_card": "",
																				"evidence_of_authority": "",
																				"evidence_of_corporate_registration": "",
																				"evidence_of_name_change": "",
																				"evidence_of_nonprofit_registration": "",
																				"firearms_certificate": "",
																				"foreign_passport": "",
																				"hud_statement": "",
																				"identity_card_northern_ireland": "",
																				"insurance_bill": "",
																				"insurance_card": "",
																				"insurance_declaration_page": "",
																				"irs_501c3_determination": "",
																				"irs_confirmation_of_tin": "",
																				"marriage_certificate": "",
																				"matricula_consular_card": "",
																				"military_orders": "",
																				"mortgage_closing_document": "",
																				"mortgage_statement": "",
																				"national_identity_card": "",
																				"order_of_creation": "",
																				"other_evidence_of_filings": "",
																				"other_government_issued_photo_id": "",
																				"other_supporting_docs": "",
																				"partnership_agreement": "",
																				"passport": "",
																				"paystub": "",
																				"permanent_resident_card": "",
																				"sentri_card": "",
																				"social_insurance_number_card": "",
																				"social_security_benefit_notice": "",
																				"social_security_card": "",
																				"tax_exemption_letter": "",
																				"trust_agreement": "",
																				"vehicle_registration": ""
																			},
																			"type": "string"
																		},
																		"type": "array",
																		"description": "Types of documents that would fulfill request."
																	}
																},
																"required": [
																	"path",
																	"requested_documents",
																	"message"
																]
															}
														},
														"required": [
															"issue_type",
															"target"
														],
														"type": "object",
														"description": "Returns an array of objects identifying why WePay is unable to verify an entity, controller, or additional representative. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type` and will be one of: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`."
													},
													"type": "array"
												},
												"documents": {
													"items": {
														"additionalProperties": false,
														"properties": {
															"create_time": {
																"$ref": "#/components/schemas/create_time"
															},
															"id": {
																"$ref": "#/components/schemas/id"
															},
															"owner": {
																"$ref": "#/components/schemas/shared_owner_response"
															},
															"path": {
																"type": "string",
																"nullable": true
															},
															"reject_reason": {
																"additionalProperties": false,
																"properties": {
																	"details": {
																		"items": {
																			"additionalProperties": false,
																			"properties": {
																				"detail_code": {
																					"enum": [
																						"illegible",
																						"corrupt_file",
																						"info_mismatch",
																						"doc_unsupported",
																						"incomplete"
																					],
																					"type": "string",
																					"nullable": true,
																					"x-enumDescriptions": {
																						"illegible": "Quality of the file or text in the file was such that the document content could not be read.",
																						"corrupt_file": "The file could not be used. The merchant must create a new file and try again.",
																						"info_mismatch": "The information in the document did not match the information on file for the merchant. The merchant must provide documents with information pertaining to the business, otherwise re-submit the data provided to WePay.",
																						"doc_unsupported": "The provided document does not satisfy the requirement from WePay.",
																						"incomplete": "The provided document does not completely satisfy the requirements. Additional documents may be requested."
																					}
																				},
																				"detail_message": {
																					"type": "string",
																					"nullable": true
																				}
																			},
																			"required": [
																				"detail_code",
																				"detail_message"
																			],
																			"type": "object"
																		},
																		"type": "array",
																		"uniqueItems": true
																	},
																	"reason_code": {
																		"enum": [
																			"failed_risk_review"
																		],
																		"type": "string",
																		"x-enumDescriptions": {
																			"failed_risk_review": "The provided document failed WePay risk review."
																		}
																	},
																	"reason_message": {
																		"type": "string"
																	}
																},
																"required": [
																	"reason_code",
																	"reason_message",
																	"details"
																],
																"type": "object",
																"nullable": true,
																"description": "Describes the reasons a document was rejected."
															},
															"resource": {
																"enum": [
																	"documents"
																],
																"x-enumDescriptions": {
																	"documents": ""
																},
																"type": "string"
															},
															"status": {
																"enum": [
																	"in_review",
																	"verified",
																	"rejected"
																],
																"x-enumDescriptions": {
																	"in_review": "The document has been received and is currently being reviewed by WePay. Once review is complete, the status will be updated.",
																	"verified": "WePay was able to verify the information in the document, and no further action is needed for this specific requirement.",
																	"rejected": "WePay was unable to verify the document, so the merchant must address the issues listed in the `reject_reason.detail_code` parameter."
																},
																"type": "string"
															},
															"type": {
																"enum": [
																	"articles_of_association",
																	"benefits_card",
																	"birth_certificate",
																	"canadian_citizenship",
																	"canadian_health_card",
																	"certificate_of_association",
																	"certificate_of_authority",
																	"certificate_of_citizenship",
																	"certificate_of_formation",
																	"certificate_of_incorporation",
																	"certificate_of_naturalization",
																	"certificate_of_organization",
																	"certified_copy_of_court_order",
																	"charity_license",
																	"credit_card_statement",
																	"current_bank_statement",
																	"current_lease_contract",
																	"current_local_tax_bill",
																	"current_utility_bill",
																	"dba_registration",
																	"divorce_decree",
																	"drivers_license",
																	"electoral_register_entry",
																	"employment_authorization_card",
																	"evidence_of_authority",
																	"evidence_of_corporate_registration",
																	"evidence_of_name_change",
																	"evidence_of_nonprofit_registration",
																	"firearms_certificate",
																	"foreign_passport",
																	"hud_statement",
																	"identity_card_northern_ireland",
																	"insurance_bill",
																	"insurance_card",
																	"insurance_declaration_page",
																	"irs_501c3_determination",
																	"irs_confirmation_of_tin",
																	"marriage_certificate",
																	"matricula_consular_card",
																	"military_orders",
																	"mortgage_closing_document",
																	"mortgage_statement",
																	"national_identity_card",
																	"order_of_creation",
																	"other_evidence_of_filings",
																	"other_government_issued_photo_id",
																	"other_supporting_docs",
																	"partnership_agreement",
																	"passport",
																	"paystub",
																	"permanent_resident_card",
																	"sentri_card",
																	"social_insurance_number_card",
																	"social_security_benefit_notice",
																	"social_security_card",
																	"tax_exemption_letter",
																	"trust_agreement",
																	"vehicle_registration"
																],
																"x-enumDescriptions": {
																	"articles_of_association": "",
																	"benefits_card": "",
																	"birth_certificate": "",
																	"canadian_citizenship": "",
																	"canadian_health_card": "",
																	"certificate_of_association": "",
																	"certificate_of_authority": "",
																	"certificate_of_citizenship": "",
																	"certificate_of_formation": "",
																	"certificate_of_incorporation": "",
																	"certificate_of_naturalization": "",
																	"certificate_of_organization": "",
																	"certified_copy_of_court_order": "",
																	"charity_license": "",
																	"credit_card_statement": "",
																	"current_bank_statement": "",
																	"current_lease_contract": "",
																	"current_local_tax_bill": "",
																	"current_utility_bill": "",
																	"dba_registration": "",
																	"divorce_decree": "",
																	"drivers_license": "",
																	"electoral_register_entry": "",
																	"employment_authorization_card": "",
																	"evidence_of_authority": "",
																	"evidence_of_corporate_registration": "",
																	"evidence_of_name_change": "",
																	"evidence_of_nonprofit_registration": "",
																	"firearms_certificate": "",
																	"foreign_passport": "",
																	"hud_statement": "",
																	"identity_card_northern_ireland": "",
																	"insurance_bill": "",
																	"insurance_card": "",
																	"insurance_declaration_page": "",
																	"irs_501c3_determination": "",
																	"irs_confirmation_of_tin": "",
																	"marriage_certificate": "",
																	"matricula_consular_card": "",
																	"military_orders": "",
																	"mortgage_closing_document": "",
																	"mortgage_statement": "",
																	"national_identity_card": "",
																	"order_of_creation": "",
																	"other_evidence_of_filings": "",
																	"other_government_issued_photo_id": "",
																	"other_supporting_docs": "",
																	"partnership_agreement": "",
																	"passport": "",
																	"paystub": "",
																	"permanent_resident_card": "",
																	"sentri_card": "",
																	"social_insurance_number_card": "",
																	"social_security_benefit_notice": "",
																	"social_security_card": "",
																	"tax_exemption_letter": "",
																	"trust_agreement": "",
																	"vehicle_registration": ""
																},
																"type": "string"
															}
														},
														"required": [
															"resource",
															"id",
															"path",
															"owner",
															"create_time",
															"type",
															"status",
															"reject_reason"
														],
														"type": "object"
													},
													"type": "array",
													"description": "The document IDs are returned via the document upload feature in the JavaScript library. These documents will be used for identity verification. Check out Document Upload for more details."
												}
											},
											"required": [
												"verified"
											],
											"type": "object",
											"description": "Personal information for additional beneficial owners of the legal entity. **Note:** You can pass `{}` to signify that this legal entity does not have any additional representatives."
										},
										"id": {
											"nullable": true,
											"type": "string",
											"description": "ID of the legal entity, generated by WePay when the legal entity is created."
										},
										"owner": {
											"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
										},
										"path": {
											"$ref": "#/components/schemas/path"
										},
										"resource": {
											"$ref": "#/components/schemas/resource-verifications"
										}
									},
									"required": [
										"resource",
										"id",
										"path",
										"owner",
										"controller",
										"additional_representatives",
										"entity_verification",
										"api_version"
									],
									"type": "object",
									"description": "Includes information to help WePay verify the identity of a legal entity."
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, JSON_PARSE_FAILURE",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"409": {
						"description": "RESOURCE_CONFLICT",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"operationId": "POST_legal_entities-id-verifications",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"controller": {
									"personal_verification": {
										"documents": [
											"724ec0d3-2eb5-461e-b72d-a15c6b1a9970",
											"3838d4ba-f497-4b6f-8d22-19b90cec4f23",
											"242f9ec7-a309-412c-976d-cc84074a508a"
										]
									}
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"additional_representatives": {
										"additionalProperties": false,
										"properties": {
											"representative_0": {
												"$ref": "#/components/schemas/legal_entities_id_verifications_representative_request"
											},
											"representative_1": {
												"$ref": "#/components/schemas/legal_entities_id_verifications_representative_request"
											},
											"representative_2": {
												"$ref": "#/components/schemas/legal_entities_id_verifications_representative_request"
											},
											"representative_3": {
												"$ref": "#/components/schemas/legal_entities_id_verifications_representative_request"
											}
										},
										"type": "object",
										"description": "Personal information for additional beneficial owners of the legal entity."
									},
									"controller": {
										"$ref": "#/components/schemas/legal_entities_id_verifications_representative_request"
									},
									"entity_verification": {
										"additionalProperties": false,
										"properties": {
											"documents": {
												"items": {
													"type": "string"
												},
												"type": "array",
												"uniqueItems": true,
												"description": "An array of document IDs. The document IDs are returned via the document upload feature in the JavaScript library. These documents will be used for identity verification. Check out Document Upload for more details."
											}
										},
										"type": "object",
										"description": "Includes information to help WePay verify the identity of a legal entity."
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "is_expanded",
						"in": "query",
						"schema": {
							"default": true,
							"type": "boolean"
						}
					}
				],
				"summary": "Update verification information",
				"description": "The POST /legal_entities/{id}/verifications call allows your platform to add and update documents to help WePay verify the identity of a legal entity. Onboarding a merchant requires the creation of a legal entity. A legal entity may be a business, individual, nonprofit, etc., and is completely owned by a single partner application. WePay collects information about the legal entity so we can properly underwrite them when provisioning a merchant account."
			},
			"get": {
				"tags": [
					"/legal_entities/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"additional_representatives": {
										"representative_0": {
											"reference_id": "reference_id_0",
											"personal_verification": {
												"current_issues": [
													{
														"additional_documents_required": [
															"additional_representatives.representative_0.personal_verification.documents"
														],
														"issue_type": "additional_documents_required",
														"target": {
															"id": null,
															"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
															"resource": "verifications"
														}
													},
													{
														"identity_verification": {
															"path": "additional_representatives.representative_0.personal_verification.documents",
															"requested_documents": [
																"drivers_license",
																"current_lease_contract"
															],
															"message": "we need to verify your address"
														},
														"issue_type": "identity_verification",
														"target": {
															"id": null,
															"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
															"resource": "verifications"
														}
													},
													{
														"risk_outreach": {
															"path": "additional_representatives.representative_0.personal_verification.documents",
															"requested_documents": [
																"drivers_license",
																"current_lease_contract"
															],
															"message": "we need to verify your address"
														},
														"issue_type": "risk_outreach",
														"target": {
															"id": null,
															"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
															"resource": "verifications"
														}
													}
												],
												"documents": [
													{
														"create_time": 1480700611,
														"id": "31b16e40-6af7-4c8a-9a9f-ad413ba7293f",
														"owner": {
															"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
															"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
															"resource": "legal_entities"
														},
														"path": null,
														"reject_reason": {
															"details": [
																{
																	"detail_code": "illegible",
																	"detail_message": "image is illegible"
																}
															],
															"reason_code": "failed_risk_review",
															"reason_message": "failed review"
														},
														"resource": "documents",
														"status": "rejected",
														"type": "social_security_card"
													}
												],
												"verified": false
											}
										},
										"representative_1": {
											"reference_id": "reference_id_1",
											"personal_verification": {
												"current_issues": [],
												"documents": [],
												"verified": true
											}
										},
										"representative_2": {
											"reference_id": "reference_id_2",
											"personal_verification": {
												"current_issues": [
													{
														"additional_documents_required": [
															"additional_representatives.representative_2.personal_verification.documents"
														],
														"issue_type": "additional_documents_required",
														"target": {
															"id": null,
															"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
															"resource": "verifications"
														}
													}
												],
												"documents": [],
												"verified": false
											}
										},
										"representative_3": {
											"reference_id": "reference_id_3",
											"personal_verification": {
												"current_issues": [
													{
														"target": {
															"id": "null",
															"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
															"resource": "verifications"
														},
														"issue_type": "errant_fields",
														"errant_fields": {
															"entity_name": [
																"includes_dba"
															],
															"primary_url": [
																"invalid_url"
															],
															"address": [
																"does_not_match_provided_doc",
																"does_not_match_government_sources"
															]
														}
													}
												],
												"documents": [],
												"verified": false
											}
										}
									},
									"controller": {
										"reference_id": "reference_id_4",
										"personal_verification": {
											"current_issues": [
												{
													"in_review": [
														"controller.personal_verification"
													],
													"issue_type": "in_review",
													"target": {
														"id": null,
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
														"resource": "verifications"
													}
												},
												{
													"identity_verification": {
														"path": "controller.personal_verification.documents",
														"requested_documents": [
															"drivers_license",
															"current_lease_contract"
														],
														"message": "we need to verify your address"
													},
													"issue_type": "identity_verification",
													"target": {
														"id": null,
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
														"resource": "verifications"
													}
												},
												{
													"risk_outreach": {
														"path": "controller.personal_verification.documents",
														"requested_documents": [
															"current_bank_statement"
														],
														"message": "we need to verify your date of birth"
													},
													"issue_type": "risk_outreach",
													"target": {
														"id": null,
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
														"resource": "verifications"
													}
												}
											],
											"documents": [
												{
													"create_time": 1480700611,
													"id": "724ec0d3-2eb5-461e-b72d-a15c6b1a9970",
													"owner": {
														"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
														"resource": "legal_entities"
													},
													"path": null,
													"reject_reason": null,
													"resource": "documents",
													"status": "in_review",
													"type": "social_security_card"
												},
												{
													"create_time": 1480700611,
													"id": "3838d4ba-f497-4b6f-8d22-19b90cec4f23",
													"owner": {
														"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
														"resource": "legal_entities"
													},
													"path": null,
													"reject_reason": null,
													"resource": "documents",
													"status": "verified",
													"type": "drivers_license"
												},
												{
													"create_time": 1480700611,
													"id": "242f9ec7-a309-412c-976d-cc84074a508a",
													"owner": {
														"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
														"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
														"resource": "legal_entities"
													},
													"path": null,
													"reject_reason": null,
													"resource": "documents",
													"status": "in_review",
													"type": "passport"
												}
											],
											"verified": false
										}
									},
									"entity_verification": {
										"current_issues": [],
										"documents": [
											{
												"create_time": 1480700611,
												"id": "99e0d61d-0b47-41df-9c33-b7bf456d07a8",
												"owner": {
													"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
													"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
													"resource": "legal_entities"
												},
												"path": null,
												"reject_reason": null,
												"resource": "documents",
												"status": "verified",
												"type": "evidence_of_corporate_registration"
											}
										],
										"verified": true
									},
									"id": null,
									"owner": {
										"id": "672b72f5-5136-4304-b553-ec7c8544b51e",
										"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e",
										"resource": "legal_entities"
									},
									"path": "/legal_entities/672b72f5-5136-4304-b553-ec7c8544b51e/verifications",
									"resource": "verifications",
									"api_version": "3.0"
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"additional_representatives": {
											"$ref": "#/components/schemas/legal_entities_id_verifications_additional_representatives_response"
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"controller": {
											"$ref": "#/components/schemas/legal_entities_id_verifications_controller_response"
										},
										"entity_verification": {
											"additionalProperties": false,
											"properties": {
												"verified": {
													"type": "boolean",
													"description": "Indicates if the personal verification details of the controller have been verified."
												},
												"current_issues": {
													"items": {
														"additionalProperties": false,
														"properties": {
															"issue_type": {
																"enum": [
																	"additional_documents_required",
																	"errant_fields",
																	"identity_verification",
																	"in_review",
																	"risk_outreach"
																],
																"x-enumDescriptions": {
																	"additional_documents_required": "**Note:** This is the default value for additional information during merchant verification, but can be replaced by `identity_verification` by working with your integration team. This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [Example notification](https://gist.github.com/wehub/edcae2ecefbd76df9e3b3e6a97a954cf).",
																	"errant_fields": "This value describes missing or invalid onboarding information.",
																	"identity_verification": "**Note:** Work with your integration team to enable this value, which would then replace `additional_documents_required` and enhance the end user experience. The preferred method is `identity_verification`, so please work with your integration team to get this enabled to replace the `additional_documents_required` value. WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives.",
																	"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete.",
																	"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant."
																},
																"type": "string",
																"description": "Indicates the reason(s) the current issue has appeared."
															},
															"target": {
																"additionalProperties": false,
																"properties": {
																	"id": {
																		"type": "string",
																		"nullable": true
																	},
																	"path": {
																		"type": "string",
																		"nullable": true
																	},
																	"resource": {
																		"type": "string",
																		"nullable": true
																	}
																},
																"required": [
																	"resource",
																	"id",
																	"path"
																],
																"type": "object",
																"description": "Indicates the resource associated with the current issue."
															},
															"additional_documents_required": {
																"items": {
																	"type": "string"
																},
																"type": "array",
																"description": "Indicates if additional documentation is required for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, then any and all required documentation will be presented in this array."
															},
															"errant_fields": {
																"additionalProperties": {
																	"items": {
																		"enum": [
																			"is_false",
																			"is_null",
																			"is_po_box",
																			"is_unsupported_value",
																			"includes_dba",
																			"does_not_match_provided_doc",
																			"does_not_match_government_sources",
																			"invalid_url"
																		],
																		"x-enumDescriptions": {
																			"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
																			"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
																			"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
																			"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
																			"includes_dba": "Business Legal Name should not include Doing Business As (DBA).",
																			"does_not_match_provided_doc": "The value of the target does not match provided documentation.",
																			"does_not_match_government_sources": "The value of the target does not match government sources.",
																			"invalid_url": "WePay cannot verify the URL. The merchant should double check their website URL and submit it again."
																		},
																		"type": "string"
																	},
																	"minItems": 1,
																	"type": "array",
																	"uniqueItems": true
																},
																"type": "object",
																"description": "Indicates which fields need to be updated."
															},
															"identity_verification": {
																"type": "object",
																"additionalProperties": false,
																"properties": {
																	"message": {
																		"type": "string",
																		"nullable": true,
																		"description": "Agent provided contextual message."
																	},
																	"path": {
																		"type": "string",
																		"description": "Path to targeted individual (controller, entity, or additional_representative)"
																	},
																	"requested_documents": {
																		"items": {
																			"enum": [
																				"articles_of_association",
																				"benefits_card",
																				"birth_certificate",
																				"canadian_citizenship",
																				"canadian_health_card",
																				"certificate_of_association",
																				"certificate_of_authority",
																				"certificate_of_citizenship",
																				"certificate_of_formation",
																				"certificate_of_incorporation",
																				"certificate_of_naturalization",
																				"certificate_of_organization",
																				"certified_copy_of_court_order",
																				"charity_license",
																				"credit_card_statement",
																				"current_bank_statement",
																				"current_lease_contract",
																				"current_local_tax_bill",
																				"current_utility_bill",
																				"dba_registration",
																				"divorce_decree",
																				"drivers_license",
																				"electoral_register_entry",
																				"employment_authorization_card",
																				"evidence_of_authority",
																				"evidence_of_corporate_registration",
																				"evidence_of_name_change",
																				"evidence_of_nonprofit_registration",
																				"firearms_certificate",
																				"foreign_passport",
																				"hud_statement",
																				"identity_card_northern_ireland",
																				"insurance_bill",
																				"insurance_card",
																				"insurance_declaration_page",
																				"irs_501c3_determination",
																				"irs_confirmation_of_tin",
																				"marriage_certificate",
																				"matricula_consular_card",
																				"military_orders",
																				"mortgage_closing_document",
																				"mortgage_statement",
																				"national_identity_card",
																				"order_of_creation",
																				"other_evidence_of_filings",
																				"other_government_issued_photo_id",
																				"other_supporting_docs",
																				"partnership_agreement",
																				"passport",
																				"paystub",
																				"permanent_resident_card",
																				"sentri_card",
																				"social_insurance_number_card",
																				"social_security_benefit_notice",
																				"social_security_card",
																				"tax_exemption_letter",
																				"trust_agreement",
																				"vehicle_registration"
																			],
																			"x-enumDescriptions": {
																				"articles_of_association": "",
																				"benefits_card": "",
																				"birth_certificate": "",
																				"canadian_citizenship": "",
																				"canadian_health_card": "",
																				"certificate_of_association": "",
																				"certificate_of_authority": "",
																				"certificate_of_citizenship": "",
																				"certificate_of_formation": "",
																				"certificate_of_incorporation": "",
																				"certificate_of_naturalization": "",
																				"certificate_of_organization": "",
																				"certified_copy_of_court_order": "",
																				"charity_license": "",
																				"credit_card_statement": "",
																				"current_bank_statement": "",
																				"current_lease_contract": "",
																				"current_local_tax_bill": "",
																				"current_utility_bill": "",
																				"dba_registration": "",
																				"divorce_decree": "",
																				"drivers_license": "",
																				"electoral_register_entry": "",
																				"employment_authorization_card": "",
																				"evidence_of_authority": "",
																				"evidence_of_corporate_registration": "",
																				"evidence_of_name_change": "",
																				"evidence_of_nonprofit_registration": "",
																				"firearms_certificate": "",
																				"foreign_passport": "",
																				"hud_statement": "",
																				"identity_card_northern_ireland": "",
																				"insurance_bill": "",
																				"insurance_card": "",
																				"insurance_declaration_page": "",
																				"irs_501c3_determination": "",
																				"irs_confirmation_of_tin": "",
																				"marriage_certificate": "",
																				"matricula_consular_card": "",
																				"military_orders": "",
																				"mortgage_closing_document": "",
																				"mortgage_statement": "",
																				"national_identity_card": "",
																				"order_of_creation": "",
																				"other_evidence_of_filings": "",
																				"other_government_issued_photo_id": "",
																				"other_supporting_docs": "",
																				"partnership_agreement": "",
																				"passport": "",
																				"paystub": "",
																				"permanent_resident_card": "",
																				"sentri_card": "",
																				"social_insurance_number_card": "",
																				"social_security_benefit_notice": "",
																				"social_security_card": "",
																				"tax_exemption_letter": "",
																				"trust_agreement": "",
																				"vehicle_registration": ""
																			},
																			"type": "string"
																		},
																		"type": "array",
																		"description": "Types of documents that would fulfill request."
																	}
																},
																"required": [
																	"path",
																	"requested_documents",
																	"message"
																]
															},
															"in_review": {
																"items": {
																	"type": "string"
																},
																"type": "array",
																"description": "Indicates if verification information is under review (if any) for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, and `in_review` is `true`, then this array will contain the path of the item(s) under review."
															},
															"risk_outreach": {
																"type": "object",
																"additionalProperties": false,
																"properties": {
																	"message": {
																		"type": "string",
																		"nullable": true,
																		"description": "Agent provided contextual message."
																	},
																	"path": {
																		"type": "string",
																		"description": "Path to targeted individual (controller, entity, or additional_representative)"
																	},
																	"requested_documents": {
																		"items": {
																			"enum": [
																				"articles_of_association",
																				"benefits_card",
																				"birth_certificate",
																				"canadian_citizenship",
																				"canadian_health_card",
																				"certificate_of_association",
																				"certificate_of_authority",
																				"certificate_of_citizenship",
																				"certificate_of_formation",
																				"certificate_of_incorporation",
																				"certificate_of_naturalization",
																				"certificate_of_organization",
																				"certified_copy_of_court_order",
																				"charity_license",
																				"credit_card_statement",
																				"current_bank_statement",
																				"current_lease_contract",
																				"current_local_tax_bill",
																				"current_utility_bill",
																				"dba_registration",
																				"divorce_decree",
																				"drivers_license",
																				"electoral_register_entry",
																				"employment_authorization_card",
																				"evidence_of_authority",
																				"evidence_of_corporate_registration",
																				"evidence_of_name_change",
																				"evidence_of_nonprofit_registration",
																				"firearms_certificate",
																				"foreign_passport",
																				"hud_statement",
																				"identity_card_northern_ireland",
																				"insurance_bill",
																				"insurance_card",
																				"insurance_declaration_page",
																				"irs_501c3_determination",
																				"irs_confirmation_of_tin",
																				"marriage_certificate",
																				"matricula_consular_card",
																				"military_orders",
																				"mortgage_closing_document",
																				"mortgage_statement",
																				"national_identity_card",
																				"order_of_creation",
																				"other_evidence_of_filings",
																				"other_government_issued_photo_id",
																				"other_supporting_docs",
																				"partnership_agreement",
																				"passport",
																				"paystub",
																				"permanent_resident_card",
																				"sentri_card",
																				"social_insurance_number_card",
																				"social_security_benefit_notice",
																				"social_security_card",
																				"tax_exemption_letter",
																				"trust_agreement",
																				"vehicle_registration"
																			],
																			"x-enumDescriptions": {
																				"articles_of_association": "",
																				"benefits_card": "",
																				"birth_certificate": "",
																				"canadian_citizenship": "",
																				"canadian_health_card": "",
																				"certificate_of_association": "",
																				"certificate_of_authority": "",
																				"certificate_of_citizenship": "",
																				"certificate_of_formation": "",
																				"certificate_of_incorporation": "",
																				"certificate_of_naturalization": "",
																				"certificate_of_organization": "",
																				"certified_copy_of_court_order": "",
																				"charity_license": "",
																				"credit_card_statement": "",
																				"current_bank_statement": "",
																				"current_lease_contract": "",
																				"current_local_tax_bill": "",
																				"current_utility_bill": "",
																				"dba_registration": "",
																				"divorce_decree": "",
																				"drivers_license": "",
																				"electoral_register_entry": "",
																				"employment_authorization_card": "",
																				"evidence_of_authority": "",
																				"evidence_of_corporate_registration": "",
																				"evidence_of_name_change": "",
																				"evidence_of_nonprofit_registration": "",
																				"firearms_certificate": "",
																				"foreign_passport": "",
																				"hud_statement": "",
																				"identity_card_northern_ireland": "",
																				"insurance_bill": "",
																				"insurance_card": "",
																				"insurance_declaration_page": "",
																				"irs_501c3_determination": "",
																				"irs_confirmation_of_tin": "",
																				"marriage_certificate": "",
																				"matricula_consular_card": "",
																				"military_orders": "",
																				"mortgage_closing_document": "",
																				"mortgage_statement": "",
																				"national_identity_card": "",
																				"order_of_creation": "",
																				"other_evidence_of_filings": "",
																				"other_government_issued_photo_id": "",
																				"other_supporting_docs": "",
																				"partnership_agreement": "",
																				"passport": "",
																				"paystub": "",
																				"permanent_resident_card": "",
																				"sentri_card": "",
																				"social_insurance_number_card": "",
																				"social_security_benefit_notice": "",
																				"social_security_card": "",
																				"tax_exemption_letter": "",
																				"trust_agreement": "",
																				"vehicle_registration": ""
																			},
																			"type": "string"
																		},
																		"type": "array",
																		"description": "Types of documents that would fulfill request."
																	}
																},
																"required": [
																	"path",
																	"requested_documents",
																	"message"
																]
															}
														},
														"required": [
															"issue_type",
															"target"
														],
														"type": "object",
														"description": "Returns an array of objects identifying why WePay is unable to verify an entity, controller, or additional representative. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type` and will be one of: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`."
													},
													"type": "array"
												},
												"documents": {
													"items": {
														"additionalProperties": false,
														"properties": {
															"create_time": {
																"$ref": "#/components/schemas/create_time"
															},
															"id": {
																"$ref": "#/components/schemas/id"
															},
															"owner": {
																"$ref": "#/components/schemas/shared_owner_response"
															},
															"path": {
																"type": "string",
																"nullable": true
															},
															"reject_reason": {
																"additionalProperties": false,
																"properties": {
																	"details": {
																		"items": {
																			"additionalProperties": false,
																			"properties": {
																				"detail_code": {
																					"enum": [
																						"illegible",
																						"corrupt_file",
																						"info_mismatch",
																						"doc_unsupported",
																						"incomplete"
																					],
																					"type": "string",
																					"nullable": true,
																					"x-enumDescriptions": {
																						"illegible": "Quality of the file or text in the file was such that the document content could not be read.",
																						"corrupt_file": "The file could not be used. The merchant must create a new file and try again.",
																						"info_mismatch": "The information in the document did not match the information on file for the merchant. The merchant must provide documents with information pertaining to the business, otherwise re-submit the data provided to WePay.",
																						"doc_unsupported": "The provided document does not satisfy the requirement from WePay.",
																						"incomplete": "The provided document does not completely satisfy the requirements. Additional documents may be requested."
																					}
																				},
																				"detail_message": {
																					"type": "string",
																					"nullable": true
																				}
																			},
																			"required": [
																				"detail_code",
																				"detail_message"
																			],
																			"type": "object"
																		},
																		"type": "array",
																		"uniqueItems": true
																	},
																	"reason_code": {
																		"enum": [
																			"failed_risk_review"
																		],
																		"type": "string",
																		"x-enumDescriptions": {
																			"failed_risk_review": "The provided document failed WePay risk review."
																		}
																	},
																	"reason_message": {
																		"type": "string"
																	}
																},
																"required": [
																	"reason_code",
																	"reason_message",
																	"details"
																],
																"type": "object",
																"nullable": true,
																"description": "Describes the reasons a document was rejected."
															},
															"resource": {
																"enum": [
																	"documents"
																],
																"x-enumDescriptions": {
																	"documents": ""
																},
																"type": "string"
															},
															"status": {
																"enum": [
																	"in_review",
																	"verified",
																	"rejected"
																],
																"x-enumDescriptions": {
																	"in_review": "The document has been received and is currently being reviewed by WePay. Once review is complete, the status will be updated.",
																	"verified": "WePay was able to verify the information in the document, and no further action is needed for this specific requirement.",
																	"rejected": "WePay was unable to verify the document, so the merchant must address the issues listed in the `reject_reason.detail_code` parameter."
																},
																"type": "string"
															},
															"type": {
																"enum": [
																	"articles_of_association",
																	"benefits_card",
																	"birth_certificate",
																	"canadian_citizenship",
																	"canadian_health_card",
																	"certificate_of_association",
																	"certificate_of_authority",
																	"certificate_of_citizenship",
																	"certificate_of_formation",
																	"certificate_of_incorporation",
																	"certificate_of_naturalization",
																	"certificate_of_organization",
																	"certified_copy_of_court_order",
																	"charity_license",
																	"credit_card_statement",
																	"current_bank_statement",
																	"current_lease_contract",
																	"current_local_tax_bill",
																	"current_utility_bill",
																	"dba_registration",
																	"divorce_decree",
																	"drivers_license",
																	"electoral_register_entry",
																	"employment_authorization_card",
																	"evidence_of_authority",
																	"evidence_of_corporate_registration",
																	"evidence_of_name_change",
																	"evidence_of_nonprofit_registration",
																	"firearms_certificate",
																	"foreign_passport",
																	"hud_statement",
																	"identity_card_northern_ireland",
																	"insurance_bill",
																	"insurance_card",
																	"insurance_declaration_page",
																	"irs_501c3_determination",
																	"irs_confirmation_of_tin",
																	"marriage_certificate",
																	"matricula_consular_card",
																	"military_orders",
																	"mortgage_closing_document",
																	"mortgage_statement",
																	"national_identity_card",
																	"order_of_creation",
																	"other_evidence_of_filings",
																	"other_government_issued_photo_id",
																	"other_supporting_docs",
																	"partnership_agreement",
																	"passport",
																	"paystub",
																	"permanent_resident_card",
																	"sentri_card",
																	"social_insurance_number_card",
																	"social_security_benefit_notice",
																	"social_security_card",
																	"tax_exemption_letter",
																	"trust_agreement",
																	"vehicle_registration"
																],
																"x-enumDescriptions": {
																	"articles_of_association": "",
																	"benefits_card": "",
																	"birth_certificate": "",
																	"canadian_citizenship": "",
																	"canadian_health_card": "",
																	"certificate_of_association": "",
																	"certificate_of_authority": "",
																	"certificate_of_citizenship": "",
																	"certificate_of_formation": "",
																	"certificate_of_incorporation": "",
																	"certificate_of_naturalization": "",
																	"certificate_of_organization": "",
																	"certified_copy_of_court_order": "",
																	"charity_license": "",
																	"credit_card_statement": "",
																	"current_bank_statement": "",
																	"current_lease_contract": "",
																	"current_local_tax_bill": "",
																	"current_utility_bill": "",
																	"dba_registration": "",
																	"divorce_decree": "",
																	"drivers_license": "",
																	"electoral_register_entry": "",
																	"employment_authorization_card": "",
																	"evidence_of_authority": "",
																	"evidence_of_corporate_registration": "",
																	"evidence_of_name_change": "",
																	"evidence_of_nonprofit_registration": "",
																	"firearms_certificate": "",
																	"foreign_passport": "",
																	"hud_statement": "",
																	"identity_card_northern_ireland": "",
																	"insurance_bill": "",
																	"insurance_card": "",
																	"insurance_declaration_page": "",
																	"irs_501c3_determination": "",
																	"irs_confirmation_of_tin": "",
																	"marriage_certificate": "",
																	"matricula_consular_card": "",
																	"military_orders": "",
																	"mortgage_closing_document": "",
																	"mortgage_statement": "",
																	"national_identity_card": "",
																	"order_of_creation": "",
																	"other_evidence_of_filings": "",
																	"other_government_issued_photo_id": "",
																	"other_supporting_docs": "",
																	"partnership_agreement": "",
																	"passport": "",
																	"paystub": "",
																	"permanent_resident_card": "",
																	"sentri_card": "",
																	"social_insurance_number_card": "",
																	"social_security_benefit_notice": "",
																	"social_security_card": "",
																	"tax_exemption_letter": "",
																	"trust_agreement": "",
																	"vehicle_registration": ""
																},
																"type": "string"
															}
														},
														"required": [
															"resource",
															"id",
															"path",
															"owner",
															"create_time",
															"type",
															"status",
															"reject_reason"
														],
														"type": "object"
													},
													"type": "array",
													"description": "The document IDs are returned via the document upload feature in the JavaScript library. These documents will be used for identity verification. Check out Document Upload for more details."
												}
											},
											"required": [
												"verified"
											],
											"type": "object",
											"description": "Personal information for additional beneficial owners of the legal entity. **Note:** You can pass `{}` to signify that this legal entity does not have any additional representatives."
										},
										"id": {
											"nullable": true,
											"type": "string",
											"description": "ID of the legal entity, generated by WePay when the legal entity is created."
										},
										"owner": {
											"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
										},
										"path": {
											"$ref": "#/components/schemas/path"
										},
										"resource": {
											"$ref": "#/components/schemas/resource-verifications"
										}
									},
									"required": [
										"resource",
										"id",
										"path",
										"owner",
										"controller",
										"additional_representatives",
										"entity_verification",
										"api_version"
									],
									"type": "object",
									"description": "Includes information to help WePay verify the identity of a legal entity."
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"operationId": "GET_legal_entities-id-verifications",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "is_expanded",
						"in": "query",
						"schema": {
							"default": true,
							"type": "boolean"
						}
					},
					{
						"name": "is_synchronous",
						"in": "query",
						"description": "Delay returning until the legal entity has been assessed for risk. **Note:** The default is false.",
						"schema": {
							"default": false,
							"type": "boolean"
						}
					}
				],
				"summary": "Get verification information",
				"description": "The GET /legal_entities/{id}/verifications call allows your platform to retrieve the information WePay requires to verify the identity of a legal entity. Onboarding a merchant requires the creation of a legal entity. A legal entity may be a business, individual, nonprofit, etc., and is completely owned by a single partner application. WePay collects information about the legal entity so we can properly underwrite them when provisioning a merchant account."
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the legal entity, generated by WePay when the legal entity is created."
				}
			]
		},
		"/notifications": {
			"get": {
				"tags": [
					"/notifications/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": "/notifications?page=0f3ef5b0-625d-4a80-9f5a-80bc0959fef7",
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"event_time": 1511307578,
											"id": "aceecf2c-e432-4aac-90a3-8f3b7fbb6420",
											"owner": {
												"id": "171845",
												"path": null,
												"resource": "applications"
											},
											"path": "/notifications/aceecf2c-e432-4aac-90a3-8f3b7fbb6420",
											"payload": {
												"amount": 4200,
												"auto_capture": true,
												"create_time": 1511307571,
												"currency": "",
												"custom_data": null,
												"failure_reason": null,
												"fee_amount": 0,
												"id": "00000000-0000-0000-0000-00000c42a66e",
												"owner": {
													"id": "40200612-e849-4172-8308-657cf3a0de27",
													"path": "/accounts/40200612-e849-4172-8308-657cf3a0de27",
													"resource": "accounts"
												},
												"path": "/payments/00000000-0000-0000-0000-00000c42a66e",
												"payment_method": {
													"id": "00000000-6363-0000-0000-0000052023f3",
													"path": "/payment_methods/00000000-6363-0000-0000-0000052023f3",
													"resource": "payment_methods"
												},
												"pending_reasons": null,
												"resource": "payments",
												"status": "completed",
												"txnr_app_fee": null,
												"txnr_merchant": null
											},
											"resource": "notifications",
											"topic": "payments.completed",
											"api_version": "3.0"
										},
										{
											"event_time": 1511307573,
											"id": "5fcfaa99-3193-482f-b3f4-4f0f4fe30d65",
											"owner": {
												"id": "171845",
												"path": null,
												"resource": "applications"
											},
											"path": "/notifications/5fcfaa99-3193-482f-b3f4-4f0f4fe30d65",
											"payload": {
												"amount": 4200,
												"auto_capture": true,
												"create_time": 1511307571,
												"currency": "",
												"custom_data": null,
												"failure_reason": null,
												"fee_amount": 0,
												"id": "00000000-0000-0000-0000-00000c42a66e",
												"owner": {
													"id": "40200612-e849-4172-8308-657cf3a0de27",
													"path": "/accounts/40200612-e849-4172-8308-657cf3a0de27",
													"resource": "accounts"
												},
												"path": "/payments/00000000-0000-0000-0000-00000c42a66e",
												"payment_method": {
													"id": "00000000-6363-0000-0000-0000052023f3",
													"path": "/payment_methods/00000000-6363-0000-0000-0000052023f3",
													"resource": "payment_methods"
												},
												"pending_reasons": null,
												"resource": "payments",
												"status": "completed",
												"txnr_app_fee": null,
												"txnr_merchant": null
											},
											"resource": "notifications",
											"topic": "payments.completed",
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"event_time": {
														"type": "integer",
														"format": "int64",
														"minimum": 0,
														"description": "Indicates when a notification event was triggered."
													},
													"id": {
														"$ref": "#/components/schemas/notifications_id"
													},
													"owner": {
														"$ref": "#/components/schemas/shared_owner_is_application_response"
													},
													"path": {
														"$ref": "#/components/schemas/path"
													},
													"payload": {
														"type": "object",
														"additionalProperties": true,
														"description": "Contains details of a notification's payload."
													},
													"resource": {
														"$ref": "#/components/schemas/resource-notifications"
													},
													"topic": {
														"type": "string",
														"description": "Topic of the notification event."
													},
													"api_version": {
														"$ref": "#/components/schemas/api_version"
													}
												},
												"required": [
													"id",
													"resource",
													"path",
													"owner",
													"topic",
													"event_time",
													"payload"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of notification results."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"results",
										"previous",
										"next"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The  GET /notifications call allows your platform to look up a collection of notifications. The notifications resource allows your platform to retrieve details on a specific notification or a collection of notifications. Your platform can utilize notifications to gain insight into WePay’s system, communicate with your users, monitor issues, etc.",
				"operationId": "GET_notifications",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "object_type",
						"in": "query",
						"description": "The scope type of a notification. Acceptable values are WePay API resources, related to the notification topic. For example ,`payments`, `payment_methods`, `accounts`, `legal_entities`, `refunds`, `disputes` etc.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "object_id",
						"in": "query",
						"description": "The scope ID of a notification, related to the object_type.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "event_time_start",
						"in": "query",
						"description": "Event time indicates when a notification event was triggered. TThis parameter will set the timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "event_time_end",
						"in": "query",
						"description": "Event time indicates when a notification event was triggered. This parameter will set the timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					}
				],
				"summary": "Get a collection of notifications"
			}
		},
		"/notifications/{id}": {
			"get": {
				"tags": [
					"/notifications/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"event_time": 1511307578,
									"id": "aceecf2c-e432-4aac-90a3-8f3b7fbb6420",
									"owner": {
										"id": "171845",
										"path": null,
										"resource": "applications"
									},
									"path": "/notifications/aceecf2c-e432-4aac-90a3-8f3b7fbb6420",
									"payload": {
										"amount": 4200,
										"auto_capture": true,
										"create_time": 1511307571,
										"currency": "",
										"custom_data": null,
										"failure_reason": null,
										"fee_amount": 0,
										"id": "00000000-0000-0000-0000-00000c42a66e",
										"owner": {
											"id": "40200612-e849-4172-8308-657cf3a0de27",
											"path": "/accounts/40200612-e849-4172-8308-657cf3a0de27",
											"resource": "accounts"
										},
										"path": "/payments/00000000-0000-0000-0000-00000c42a66e",
										"payment_method": {
											"id": "00000000-6363-0000-0000-0000052023f3",
											"path": "/payment_methods/00000000-6363-0000-0000-0000052023f3",
											"resource": "payment_methods"
										},
										"pending_reasons": null,
										"resource": "payments",
										"status": "completed",
										"txnr_app_fee": null,
										"txnr_merchant": null
									},
									"resource": "notifications",
									"topic": "payments.completed",
									"api_version": "3.0"
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"event_time": {
											"type": "integer",
											"format": "int64",
											"minimum": 0,
											"description": "Indicates when a notification event was triggered."
										},
										"id": {
											"$ref": "#/components/schemas/notifications_id"
										},
										"owner": {
											"$ref": "#/components/schemas/shared_owner_is_application_response"
										},
										"path": {
											"$ref": "#/components/schemas/path"
										},
										"payload": {
											"type": "object",
											"additionalProperties": true,
											"description": "Contains details of a notification's payload."
										},
										"resource": {
											"$ref": "#/components/schemas/resource-notifications"
										},
										"topic": {
											"type": "string",
											"description": "Topic of the notification event."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"id",
										"resource",
										"path",
										"owner",
										"topic",
										"event_time",
										"payload"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /notifications/{id} call allows your platform to look up a notification. The notifications resource allows your platform to retrieve details on a specific notification or a collection of notifications. Your platform can utilize notifications to gain insight into WePay’s system, communicate with your users, monitor issues, etc.",
				"operationId": "GET_notifications-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a notification"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the notification, generated by WePay when the notification is created."
				}
			]
		},
		"/notification_preferences": {
			"get": {
				"tags": [
					"/notification_preferences/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": null,
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"callback_uri": "https://example.com/disputes_created",
											"create_time": 1509407823974,
											"id": "9164a672-8128-4163-8f66-04a9172d2911",
											"owner": {
												"id": "74582",
												"path": null,
												"resource": "applications"
											},
											"path": "/notification_preferences/9164a672-8128-4163-8f66-04a9172d2911",
											"resource": "notification_preferences",
											"status": "active",
											"topic": "disputes.created",
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/notification_preferences-resp"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of notification preference objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"previous",
										"next",
										"results"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /notification_preferences call allows your platform to look up a collection of notification preferences. Notification preferences allow your platform to subscribe to notifications based on an event topic.",
				"operationId": "GET_notification_preferences",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "Type of notification preference",
						"schema": {
							"default": "notification",
							"enum": [
								"notification"
							],
							"x-enumDescriptions": {
								"notification": ""
							},
							"type": "string"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "Status of the notification. Possible values are: `active`, `unreachable`, `deleted`. **Note:** The default state is active.",
						"schema": {
							"default": "active",
							"enum": [
								"active",
								"deleted",
								"unreachable"
							],
							"x-enumDescriptions": {
								"active": "The notification preference is active and ready to be used.",
								"deleted": "The notification preference has already been deleted.",
								"unreachable": "The notification preference is unreachable. Please create a new one."
							},
							"type": "string"
						}
					},
					{
						"name": "topic",
						"in": "query",
						"description": "The event topic of the notification preference to search for.",
						"schema": {
							"enum": [
								"accounts.*",
								"accounts.capabilities.*",
								"accounts.capabilities.updated",
								"accounts.created",
								"accounts.deleted",
								"accounts.negative_balance",
								"accounts.updated",
								"adjustments.*",
								"adjustments.created",
								"adjustments.updated",
								"banking_applications.*",
								"banking_applications.created",
								"banking_applications.updated",
								"billing_statements.*",
								"billing_statements.charge_failed",
								"billing_statements.charge_succeeded",
								"billing_statements.created",
								"disputes.*",
								"disputes.created",
								"disputes.funds_reinstated",
								"disputes.funds_withdrawn",
								"disputes.resolved",
								"disputes.updated",
								"legal_entities.*",
								"legal_entities.created",
								"legal_entities.updated",
								"legal_entities.verifications.*",
								"legal_entities.verifications.updated",
								"payment_methods.*",
								"payment_methods.created",
								"payment_methods.deleted",
								"payment_methods.microdeposit_reminder",
								"payment_methods.microdeposit_sent",
								"payment_methods.microdeposit_verification_failed",
								"payment_methods.updated",
								"payment_methods.verified",
								"payments.*",
								"payments.canceled",
								"payments.completed",
								"payments.created",
								"payments.failed",
								"payments.in_review",
								"payments.updated",
								"payments.manual_review_passed",
								"payout_methods.*",
								"payout_methods.created",
								"payout_methods.deleted",
								"payout_methods.updated",
								"payout_methods.verified",
								"payout_methods.microdeposit_sent",
								"payout_methods.microdeposit_reminder",
								"payout_methods.microdeposit_verification_failed",
								"payouts.*",
								"payouts.completed",
								"payouts.created",
								"payouts.failed",
								"payouts.in_review",
								"payouts.updated",
								"recoveries.*",
								"recoveries.completed",
								"recoveries.created",
								"recoveries.failed",
								"recoveries.updated",
								"refunds.*",
								"refunds.completed",
								"refunds.created",
								"refunds.failed",
								"refunds.updated",
								"terminals.activated",
								"terminals.created",
								"terminals.deactivated",
								"terminals.deleted",
								"terminals.updated"
							],
							"x-enumDescriptions": {
								"accounts.*": "Get Notification Preferences for all accounts topics.",
								"accounts.capabilities.*": "Get a collection for all account capabilities topics",
								"accounts.capabilities.updated": "Fires when an upcoming or current issue occurs for any of any account's capabilities, or when a capability's `enabled` value changes.",
								"accounts.created": "Fires when an account is created.",
								"accounts.deleted": "Fires when an account is deleted.",
								"accounts.negative_balance": "Fires when an account's balance falls below $0.00.",
								"accounts.updated": "Fires when any value on an account changes.",
								"adjustments.*": "Get a collection for all adjustments topics.",
								"adjustments.created": "Fires when an adjustment is created.",
								"adjustments.updated": "Fires when any information on an adjustment is updated.",
								"banking_applications.*": "Get a collection for all banking applications topics.",
								"banking_applications.created": "Fires when a new banking application is created.",
								"banking_applications.updated": "Fires when any value on banking application changes.",
								"billing_statements.*": "Get a collection for all billing statements topics.",
								"billing_statements.charge_failed": "Fires if a merchant's payment for fees at the end of a billing cycle fails. Find more information in the [Merchant IC+ guide](/pricing/merchant-interchange-plus/).",
								"billing_statements.charge_succeeded": "Fires is a merchant's payment for fees at the end of a billing cycle is successful. Find more information in the [Merchant IC+ guide](/pricing/merchant-interchange-plus/).",
								"billing_statements.created": "Fires when a merchant's billing statement for the cycle is ready for consumption. Find more information in the [Merchant IC+ guide](/pricing/merchant-interchange-plus/).",
								"disputes.*": "Get a collection for all disputes topics.",
								"disputes.created": "Fires when a dispute is created.",
								"disputes.funds_reinstated": "Fires when the debit resulting from a dispute is reversed and credited back to the account.",
								"disputes.funds_withdrawn": "Fires when a dispute is created and confirms that the amount of the dispute has been debited from the account.",
								"disputes.resolved": "Fired when a dispute is resolved either for the merchant or for the payer.",
								"disputes.updated": "Fires when any information on a dispute is updated, like the status, document IDs, document status, etc.",
								"legal_entities.*": "Get a collection for all legal entities topics.",
								"legal_entities.created": "Fires when a legal entity is created.",
								"legal_entities.updated": "Fires when any information on a legal entity is updated.",
								"legal_entities.verifications.*": "Get a collection for all legal entity verifications topics.",
								"legal_entities.verifications.updated": "Fires when the `verified` value changes or when a current issue occurs on any of a legal entity's verifications.",
								"payment_methods.*": "Get a collection for all payment methods topics.",
								"payment_methods.created": "Fires when a payment method is created. Note that this does not indicate whether or not the payment method has been verified.",
								"payment_methods.deleted": "Fires when a payment method is deleted.",
								"payment_methods.microdeposit_reminder": "Fires when WePay sends a microdeposit reminder to the account holder of a bank account payment method.",
								"payment_methods.microdeposit_sent": "Fires when WePay sends microdeposits to the account holder of a bank account payment method.",
								"payment_methods.microdeposit_verification_failed": "Fires when WePay sends a microdeposit to the account holder of a bank account payment method that failed verification.",
								"payment_methods.updated": "Fires when any information on a payment method is updated.",
								"payment_methods.verified": "Fires when a payment method has been verified and can now be used to create payments.",
								"payments.*": "Get a collection for all payments topics.",
								"payments.canceled": "Fires when a payment it canceled as a result of calling the POST /payments/{id}/cancel endpoint.",
								"payments.completed": "Fires when a payment is finished processing and is in either the account's available balance or the account's reserved balance.",
								"payments.created": "Fires when a payment is created and begins processing.",
								"payments.failed": "Fires when a payment fails. Find out why by inspecting the `failure_reason` structure.",
								"payments.in_review": "Fires when WePay begins manually reviewing a payment. When WePay's review is complete *and the payment is set to automatically capture*, the status will update to either `completed` or `failed`. When the review is complete *and the payment is **not** set to automatically capture*, then the status will update to either `failed` or `pending`.",
								"payments.updated": "Fires when any information on a payment is updated, like the amount, capture at time, etc.",
								"payments.manual_review_passed": "Fires when payments in a 'pending' state delayed capture that are also pending a manual review by WePay successfully passes review. Upon receipt of this notification, the related payment can successfully be captured.",
								"payout_methods.*": "Get a collection for all payout methods topics.",
								"payout_methods.created": "Fires when a payout method is created. Note that this Notification itself does not mean that payouts will begin for the payout method; it must first be sent in an API request to the appropriate account.",
								"payout_methods.deleted": "Fires when a payout method API object's status updates to deleted.",
								"payout_methods.updated": "Fires when any information on a payout method is updated.",
								"payout_methods.verified": "Fires when a payout method is verified.",
								"payout_methods.microdeposit_sent": "Fires when WePay sends microdeposits to the account holder of a bank account payout method.",
								"payout_methods.microdeposit_reminder": "Fires when WePay sends a microdeposit reminder to the account holder of a bank account payout method.",
								"payout_methods.microdeposit_verification_failed": "Fires when WePay sends a microdeposit to the account holder of a bank account payout method that failed verification.",
								"payouts.*": "Get a collection for all payouts topics.",
								"payouts.completed": "Fires when WePay completes processing a payout. Note that this does not indicate that a merchant will be able to find the credit in their bank account, and the status can still update to failed if the bank rejects the credit..",
								"payouts.created": "Fires when a payout begins processing.",
								"payouts.failed": "Fires when a payout fails to process. Find more information in the `failure_reason` JSON structure.",
								"payouts.in_review": "Fires when WePay begins reviewing a payout. One the review is complete, either the `payouts.completed` or the `payouts.failed` Notification will fire.",
								"payouts.updated": "Fires when any information on a payout is updated.",
								"recoveries.*": "Get a collection for all recoveries topics.",
								"recoveries.completed": "Fires when WePay completes processing a recovery. Note that the status can still update to failed if the bank rejects the debit.",
								"recoveries.created": "Fires when a recovery begins processing.",
								"recoveries.failed": "Fires when a recovery fails. Find more information in the `failure_reason` JSON block.",
								"recoveries.updated": "Fires when any information on a recovery is updated.",
								"refunds.*": "Get a collection for all refunds topics.",
								"refunds.completed": "Fires when WePay completes processing a refund. Note that additional institutions are required to process a refund, so it's possible that a card or account holder may not see a refund credit on their statement immediately when a refund completes on WePay's end.",
								"refunds.created": "Fires when WePay begins processing a refund.",
								"refunds.failed": "Fires when a refund fails. Find more information in the `failure_reason` JSON block.",
								"refunds.updated": "Fires when any information on a refund is updated.",
								"terminals.activated": "Fires when a terminal's status becomes `active`.",
								"terminals.created": "Fires when a terminal is onboarded with the POST /terminals endpoint.",
								"terminals.deactivated": "Fires when a terminal's status becomes `inactive`.",
								"terminals.deleted": "Fires when a terminal is deleted.",
								"terminals.updated": "Fires when any information (such as terminal configurations) is updated on a terminal."
							},
							"type": "string"
						}
					},
					{
						"name": "callback_uri",
						"in": "query",
						"description": "A valid URL where notification webhooks are sent.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of notification preferences"
			},
			"post": {
				"tags": [
					"/notification_preferences/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"callback_uri": "https://example.com/payments",
									"create_time": 1509407823974,
									"id": "fee568cd-8ac6-40f3-9623-91aba2c5d11a",
									"owner": {
										"id": "74582",
										"path": null,
										"resource": "applications"
									},
									"path": "/notification_preferences/fee568cd-8ac6-40f3-9623-91aba2c5d11a",
									"resource": "notification_preferences",
									"status": "active",
									"topic": "payments.completed",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/notification_preferences-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /notification_preferences call allows your platform to create a new notification preference. Notification preferences allow your platform to subscribe to notifications based on an event topic.",
				"operationId": "POST_notification_preferences",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"callback_uri": "https://example.com/payments",
								"topic": "payments.completed"
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"callback_uri": {
										"$ref": "#/components/schemas/uri"
									},
									"topic": {
										"enum": [
											"accounts.capabilities.updated",
											"accounts.created",
											"accounts.deleted",
											"accounts.negative_balance",
											"accounts.updated",
											"adjustments.created",
											"adjustments.updated",
											"banking_applications.created",
											"banking_applications.updated",
											"billing_statements.charge_failed",
											"billing_statements.charge_succeeded",
											"billing_statements.created",
											"disputes.created",
											"disputes.funds_reinstated",
											"disputes.funds_withdrawn",
											"disputes.resolved",
											"disputes.updated",
											"legal_entities.created",
											"legal_entities.updated",
											"legal_entities.verifications.updated",
											"payment_methods.created",
											"payment_methods.deleted",
											"payment_methods.microdeposit_reminder",
											"payment_methods.microdeposit_sent",
											"payment_methods.microdeposit_verification_failed",
											"payment_methods.updated",
											"payment_methods.verified",
											"payments.canceled",
											"payments.completed",
											"payments.created",
											"payments.failed",
											"payments.in_review",
											"payments.updated",
											"payments.manual_review_passed",
											"payout_methods.created",
											"payout_methods.deleted",
											"payout_methods.updated",
											"payout_methods.verified",
											"payout_methods.microdeposit_sent",
											"payout_methods.microdeposit_reminder",
											"payout_methods.microdeposit_verification_failed",
											"payouts.completed",
											"payouts.created",
											"payouts.failed",
											"payouts.in_review",
											"payouts.updated",
											"recoveries.completed",
											"recoveries.created",
											"recoveries.failed",
											"recoveries.updated",
											"refunds.completed",
											"refunds.created",
											"refunds.failed",
											"refunds.updated",
											"terminals.activated",
											"terminals.created",
											"terminals.deactivated",
											"terminals.deleted",
											"terminals.updated"
										],
										"x-enumDescriptions": {
											"accounts.capabilities.updated": "Fires when an upcoming or current issue occurs for any of any account's capabilities, or when a capability's `enabled` value changes.",
											"accounts.created": "Fires when an account is created.",
											"accounts.deleted": "Fires when an account is deleted.",
											"accounts.negative_balance": "Fires when an account's balance falls below $0.00.",
											"accounts.updated": "Fires when any value on an account changes.",
											"adjustments.created": "Fires when an adjustment is created.",
											"adjustments.updated": "Fires when any information on an adjustment is updated.",
											"banking_applications.created": "Fires when a new banking application is created.",
											"banking_applications.updated": "Fires when any value on banking application changes.",
											"billing_statements.charge_failed": "Fires if a merchant's payment for fees at the end of a billing cycle fails. Find more information in the [Merchant IC+ guide](/pricing/merchant-interchange-plus/).",
											"billing_statements.charge_succeeded": "Fires is a merchant's payment for fees at the end of a billing cycle is successful. Find more information in the [Merchant IC+ guide](/pricing/merchant-interchange-plus/).",
											"billing_statements.created": "Fires when a merchant's billing statement for the cycle is ready for consumption. Find more information in the [Merchant IC+ guide](/pricing/merchant-interchange-plus/).",
											"disputes.created": "Fires when a dispute is created.",
											"disputes.funds_reinstated": "Fires when the debit resulting from a dispute is reversed and credited back to the account.",
											"disputes.funds_withdrawn": "Fires when a dispute is created and confirms that the amount of the dispute has been debited from the account.",
											"disputes.resolved": "Fired when a dispute is resolved either for the merchant or for the payer.",
											"disputes.updated": "Fires when any information on a dispute is updated, like the status, document IDs, document status, etc.",
											"legal_entities.created": "Fires when a legal entity is created.",
											"legal_entities.updated": "Fires when any information on a legal entity is updated.",
											"legal_entities.verifications.updated": "Fires when the `verified` value changes or when a current issue occurs on any of a legal entity's verifications.",
											"payment_methods.created": "Fires when a payment method is created. Note that this does not indicate whether or not the payment method has been verified.",
											"payment_methods.deleted": "Fires when a payment method is deleted.",
											"payment_methods.microdeposit_reminder": "Fires when WePay sends a microdeposit reminder to the account holder of a bank account payment method.",
											"payment_methods.microdeposit_sent": "Fires when WePay sends microdeposits to the account holder of a bank account payment method.",
											"payment_methods.microdeposit_verification_failed": "Fires when WePay sends a microdeposit to the account holder of a bank account payment method that failed verification.",
											"payment_methods.updated": "Fires when any information on a payment method is updated. This notification will also contain status updates if payment method verification fails.",
											"payment_methods.verified": "Fires when a payment method has been verified and can now be used to create payments.",
											"payments.canceled": "Fires when a payment it canceled as a result of calling the POST /payments/{id}/cancel endpoint.",
											"payments.completed": "Fires when a payment is finished processing and is in either the account's available balance or the account's reserved balance.",
											"payments.created": "Fires when a payment is created and begins processing.",
											"payments.failed": "Fires when a payment fails. Find out why by inspecting the `failure_reason` structure.",
											"payments.in_review": "Fires when WePay begins manually reviewing a payment. When WePay's review is complete *and the payment is set to automatically capture*, the status will update to either `completed` or `failed`. When the review is complete *and the payment is **not** set to automatically capture*, then the status will update to either `failed` or `pending`.",
											"payments.updated": "Fires when any information on a payment is updated, like the amount, capture at time, etc.",
											"payments.manual_review_passed": "Fires when payments in a 'pending' state delayed capture that are also pending a manual review by WePay successfully passes review. Upon receipt of this notification, the related payment can successfully be captured.",
											"payout_methods.created": "Fires when a payout method is created. Note that this Notification itself does not mean that payouts will begin for the payout method; it must first be sent in an API request to the appropriate account.",
											"payout_methods.deleted": "Fires when a payout method API object's status updates to deleted.",
											"payout_methods.updated": "Fires when any information on a payout method is updated.",
											"payout_methods.verified": "Fires when a payout method is verified.",
											"payout_methods.microdeposit_sent": "Fires when WePay sends microdeposits to the account holder of a bank account payout method.",
											"payout_methods.microdeposit_reminder": "Fires when WePay sends a microdeposit reminder to the account holder of a bank account payout method.",
											"payout_methods.microdeposit_verification_failed": "Fires when WePay sends a microdeposit to the account holder of a bank account payout method that failed verification.",
											"payouts.completed": "Fires when WePay completes processing a payout. Note that this does not indicate that a merchant will be able to find the credit in their bank account, and the status can still update to failed if the bank rejects the credit..",
											"payouts.created": "Fires when a payout begins processing.",
											"payouts.failed": "Fires when a payout fails to process. Find more information in the `failure_reason` JSON structure.",
											"payouts.in_review": "Fires when WePay begins reviewing a payout. One the review is complete, either the `payouts.completed` or the `payouts.failed` Notification will fire.",
											"payouts.updated": "Fires when any information on a payout is updated.",
											"recoveries.completed": "Fires when WePay completes processing a recovery. Note that the status can still update to failed if the bank rejects the debit.",
											"recoveries.created": "Fires when a recovery begins processing.",
											"recoveries.failed": "Fires when a recovery fails. Find more information in the `failure_reason` JSON block.",
											"recoveries.updated": "Fires when any information on a recovery is updated.",
											"refunds.completed": "Fires when WePay completes processing a refund. Note that additional institutions are required to process a refund, so it's possible that a card or account holder may not see a refund credit on their statement immediately when a refund completes on WePay's end.",
											"refunds.created": "Fires when WePay begins processing a refund.",
											"refunds.failed": "Fires when a refund fails. Find more information in the `failure_reason` JSON block.",
											"refunds.updated": "Fires when any information on a refund is updated.",
											"terminals.activated": "Fires when a terminal's status becomes `active`.",
											"terminals.created": "Fires when a terminal is onboarded with the POST /terminals endpoint.",
											"terminals.deactivated": "Fires when a terminal's status becomes `inactive`.",
											"terminals.deleted": "Fires when a terminal is deleted.",
											"terminals.updated": "Fires when any information (such as terminal configurations) is updated on a terminal."
										},
										"x-recommended_notifications_event_topics": {
											"clear": [
												"accounts.created",
												"accounts.capabilities.updated",
												"payouts.failed",
												"disputes.created",
												"disputes.resolved",
												"legal_entities.verifications.updated",
												"payments.completed",
												"payments.canceled",
												"payments.failed"
											],
											"link": [
												"accounts.created",
												"accounts.capabilities.updated",
												"payouts.failed",
												"adjustments.created",
												"disputes.created",
												"disputes.resolved",
												"payments.created",
												"payments.canceled",
												"payments.failed",
												"payment_methods.created",
												"payment_methods.deleted",
												"payment_methods.verified",
												"refunds.created",
												"refunds.completed",
												"refunds.failed"
											],
											"core": [],
											"core_payfac": [
												"legal_entities.*",
												"accounts.*"
											],
											"core_fls": [
												"accounts.capabilities.updated",
												"legal_entities.verifications.updated",
												"accounts.created",
												"accounts.updated",
												"legal_entities.created"
											]
										},
										"type": "string",
										"description": "The event topic the notification preference is subscribed to."
									}
								},
								"required": [
									"topic",
									"callback_uri"
								],
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create a notification preference"
			}
		},
		"/notification_preferences/{id}": {
			"get": {
				"tags": [
					"/notification_preferences/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"callback_uri": "https://example.com/disputes_created",
									"create_time": 1509407823974,
									"id": "9164a672-8128-4163-8f66-04a9172d2911",
									"owner": {
										"id": "74582",
										"path": null,
										"resource": "applications"
									},
									"path": "/notification_preferences/9164a672-8128-4163-8f66-04a9172d2911",
									"resource": "notification_preferences",
									"status": "active",
									"topic": "disputes.created",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/notification_preferences-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /notification_preferences/{id} call allows your platform to look up a single notification preference. Notification preferences allow your platform to subscribe to notifications based on an event topic.",
				"operationId": "GET_notification_preferences-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a notification preference"
			},
			"post": {
				"tags": [
					"/notification_preferences/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"callback_uri": "https://example.com/disputes_created",
									"create_time": 1509407823974,
									"id": "9164a672-8128-4163-8f66-04a9172d2911",
									"owner": {
										"id": "74582",
										"path": null,
										"resource": "applications"
									},
									"path": "/notification_preferences/9164a672-8128-4163-8f66-04a9172d2911",
									"resource": "notification_preferences",
									"status": "active",
									"topic": "disputes.created",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/notification_preferences-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /notification_preferences/{id} call allows your platform to update a notification preference. Notification preferences allow your platform to subscribe to notifications based on an event topic.",
				"operationId": "POST_notification_preferences-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"callback_uri": "https://example.com"
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"callback_uri": {
										"$ref": "#/components/schemas/uri"
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update a notification preference"
			},
			"delete": {
				"tags": [
					"/notification_preferences/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"callback_uri": "https://example.com/disputes_created",
									"create_time": 1509407823974,
									"id": "9164a672-8128-4163-8f66-04a9172d2911",
									"owner": {
										"id": "74582",
										"path": null,
										"resource": "applications"
									},
									"path": "/notification_preferences/9164a672-8128-4163-8f66-04a9172d2911",
									"resource": "notification_preferences",
									"status": "deleted",
									"topic": "disputes.created",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/notification_preferences-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, RESOURCE_PREVIOUSLY_DELETED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The DELETE /notification_preferences/{id} call allows your platform to delete a notification preference. Notification preferences allow your platform to subscribe to notifications based on an event topic.",
				"operationId": "DELETE_notification_preferences-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Delete a notification preference"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the notification preference, generated by WePay when the notification preference is created."
				}
			]
		},
		"/orders": {
			"post": {
				"tags": [
					"/orders/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"alternate_tax_amount": 35,
									"alternate_tax_id": "11",
									"buyer": {
										"id": "1490656130",
										"path": "/legal_entities/1490656130",
										"resource": "legal_entities"
									},
									"create_time": 1390656130,
									"customer_reference_number": "cust# 1234",
									"delivery_type": "point_of_sale",
									"discount_amount": 0,
									"duty_amount": 0,
									"freight_amount": 0,
									"grand_total_amount": 1000,
									"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"line_items": [
										{
											"commodity_code": "ABC123",
											"currency": "USD",
											"description": "Classic Iron Anvil",
											"discount_amount": 0,
											"discount_indicator": null,
											"gross_net_indicator": null,
											"item": {
												"create_time": 1390656130,
												"description": "Classic Iron Anvil",
												"id": "1",
												"owner": {
													"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"resource": "accounts"
												},
												"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
												"photos": [],
												"price": 490,
												"product_code": "XYZ321",
												"product_details": {
													"band": "nike"
												},
												"product_name": "Acme Anvil - 100 Lb",
												"reference_number": "abc_123456",
												"resource": "items",
												"shipping_options": [
													"regular",
													"expedited"
												],
												"state": "active",
												"terms": {
													"terms_text": "lorem ipsum...",
													"terms_uri": "https://example.com/terms_of_service"
												},
												"uri": "https://example.com/abc_123456",
												"weight": {
													"units": "pounds",
													"weight": 1
												}
											},
											"quantity": 1,
											"tax_amount": 5,
											"tax_rate": 1.99,
											"tax_type_applied": "VAT",
											"total_amount": 500,
											"unit_of_measure": "count",
											"unit_price": 490
										},
										{
											"commodity_code": "XYZ999",
											"currency": "USD",
											"description": "Classic Catapult",
											"discount_amount": 0,
											"discount_indicator": null,
											"gross_net_indicator": null,
											"item": {
												"create_time": 1390656130,
												"description": "Classic Catapult",
												"id": "2",
												"owner": {
													"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"resource": "accounts"
												},
												"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
												"photos": [
													"http://imgur.com/o4Qk0AF"
												],
												"price": 490,
												"product_code": "AAAXYZ321",
												"product_name": "Acme Catapult",
												"reference_number": "abc_654321",
												"resource": "items",
												"shipping_options": [
													"regular",
													"expedited"
												],
												"state": "active",
												"terms": {
													"terms_text": "lorem ipsum...",
													"terms_uri": "https://example.com/terms_of_service"
												},
												"uri": "https://example.com/abc_654321",
												"weight": {
													"units": "pounds",
													"weight": 1
												}
											},
											"quantity": 1,
											"tax_amount": 5,
											"tax_rate": 1.99,
											"tax_type_applied": "VAT",
											"total_amount": 500,
											"unit_of_measure": "count",
											"unit_price": 490
										}
									],
									"long_description": null,
									"notes": "urgent order",
									"owner": {
										"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"resource": "accounts"
									},
									"path": "/orders/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"reference_number": "invoice #54321",
									"resource": "orders",
									"service_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"ship_from_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"ship_to_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"shipping_status": {
										"actual_delivery_time": null,
										"carrier": "UPS",
										"expected_delivery_time": 1490656130,
										"shipping_time": 1390656130,
										"tracking_number": "1Z34567890",
										"tracking_uri": "https://example.com/ups/1Z34567890"
									},
									"short_description": "Donation to ABC campaign",
									"state": "active",
									"status": "paid",
									"tax_amount": 35,
									"type": "goods",
									"vat_amount": 5,
									"vat_rate": 1.99,
									"discount_program_name": "Everything is 50% off",
									"tip_amount": 0,
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/order-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /orders call allows your platform to create a new order. Orders identify both the merchant and payer, and describe items sold, shipment date, prices, delivery details, and payment terms.  ",
				"operationId": "POST_orders",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"account_id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
								"alternate_tax_amount": 35,
								"alternate_tax_id": "11",
								"buyer": {
									"legal_entity_id": "1490656130",
									"type": "legal_entity_id"
								},
								"customer_reference_number": "cust# 1234",
								"delivery_type": "point_of_sale",
								"discount_amount": 0,
								"duty_amount": 0,
								"freight_amount": 0,
								"grand_total_amount": 1000,
								"line_items": [
									{
										"commodity_code": "ABC123",
										"currency": "USD",
										"description": "Classic Iron Anvil",
										"discount_amount": 0,
										"discount_indicator": null,
										"gross_net_indicator": null,
										"item": {
											"account_id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
											"description": "Classic Iron Anvil",
											"photos": [],
											"price": 490,
											"product_code": "XYZ321",
											"product_details": {
												"band": "nike"
											},
											"product_name": "Acme Anvil - 100 Lb",
											"reference_number": "abc_123456",
											"shipping_options": [
												"regular",
												"expedited"
											],
											"terms": {
												"terms_text": "lorem ipsum...",
												"terms_uri": "https://example.com/terms_of_service"
											},
											"uri": "https://example.com/abc_123456",
											"weight": {
												"units": "pounds",
												"weight": 1
											}
										},
										"quantity": 1,
										"tax_amount": 5,
										"tax_rate": 1.99,
										"tax_type_applied": "VAT",
										"total_amount": 500,
										"unit_of_measure": "count",
										"unit_price": 490
									},
									{
										"commodity_code": "XYZ999",
										"currency": "USD",
										"description": "Classic Catapult",
										"discount_amount": 0,
										"discount_indicator": null,
										"gross_net_indicator": null,
										"item": {
											"account_id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
											"description": "Classic Catapult",
											"photos": [
												"http://imgur.com/o4Qk0AF"
											],
											"price": 490,
											"product_code": "AAAXYZ321",
											"product_name": "Acme Catapult",
											"reference_number": "abc_654321",
											"shipping_options": [
												"regular",
												"expedited"
											],
											"terms": {
												"terms_text": "lorem ipsum...",
												"terms_uri": "https://example.com/terms_of_service"
											},
											"uri": "https://example.com/abc_654321",
											"weight": {
												"units": "pounds",
												"weight": 1
											}
										},
										"quantity": 1,
										"tax_amount": 5,
										"tax_rate": 1.99,
										"tax_type_applied": "VAT",
										"total_amount": 500,
										"unit_of_measure": "count",
										"unit_price": 490
									}
								],
								"long_description": null,
								"notes": "urgent order",
								"rbits": [
									{
										"address": {
											"origin_address": {
												"city": "Sunnyvale",
												"country": "US",
												"line1": "20 Main Street",
												"postal_code": "94085",
												"region": "CA"
											}
										},
										"receive_time": 1367958263,
										"source": "partner_database",
										"type": "address"
									},
									{
										"auto_billing": {
											"autobill_setup_time": 1209600,
											"payment_frequency": "monthly",
											"payment_number": 1,
											"setup_by": "payer",
											"total_payments_scheduled": 5
										},
										"receive_time": 1367958263,
										"source": "user",
										"type": "auto_billing"
									}
								],
								"reference_number": "invoice #54321",
								"service_address": {
									"city": "San Francisco",
									"country": "US",
									"line1": "123 Fake Street",
									"postal_code": "94101",
									"region": "CA"
								},
								"ship_from_address": {
									"city": "San Francisco",
									"country": "US",
									"line1": "123 Fake Street",
									"postal_code": "94101",
									"region": "CA"
								},
								"ship_to_address": {
									"city": "San Francisco",
									"country": "US",
									"line1": "123 Fake Street",
									"postal_code": "94101",
									"region": "CA"
								},
								"shipping_status": {
									"actual_delivery_time": null,
									"carrier": "UPS",
									"expected_delivery_time": 1490656130,
									"shipping_time": 1390656130,
									"tracking_number": "1Z34567890",
									"tracking_uri": "https://example.com/ups/1Z34567890"
								},
								"short_description": "Donation to ABC campaign",
								"status": "paid",
								"tax_amount": 35,
								"type": "goods",
								"vat_amount": 5,
								"vat_rate": 1.99,
								"discount_program_name": "Everything is 50% off",
								"tip_amount": 0
							},
							"schema": {
								"$ref": "#/components/schemas/order-req"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create an order"
			},
			"get": {
				"tags": [
					"/orders/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": "/orders?page=AQQHAAEX8yf1HDkrXqO7R-wy2joNU6ooRNCyDb-sSbbvR-8J6jKeFgpqprcIsuEnBh4fqImpR2eYjKIgSCirw2mhEFR7m5AsSj1OkG9emNFWhXQvreOczuQU7UzZ",
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"alternate_tax_amount": 35,
											"alternate_tax_id": "11",
											"buyer": {
												"id": "1490656130",
												"path": "/legal_entities/1490656130",
												"resource": "legal_entities"
											},
											"create_time": 1390656130,
											"customer_reference_number": "cust# 1234",
											"delivery_type": "point_of_sale",
											"discount_amount": 0,
											"duty_amount": 0,
											"freight_amount": 0,
											"grand_total_amount": 1000,
											"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
											"line_items": [
												{
													"commodity_code": "ABC123",
													"currency": "USD",
													"description": "Classic Iron Anvil",
													"discount_amount": 0,
													"discount_indicator": null,
													"gross_net_indicator": null,
													"item": {
														"create_time": 1390656130,
														"description": "Classic Iron Anvil",
														"id": "1",
														"owner": {
															"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
															"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
															"resource": "accounts"
														},
														"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
														"photos": [],
														"price": 490,
														"product_code": "XYZ321",
														"product_details": {
															"band": "nike"
														},
														"product_name": "Acme Anvil - 100 Lb",
														"reference_number": "abc_123456",
														"resource": "items",
														"shipping_options": [
															"regular",
															"expedited"
														],
														"state": "active",
														"terms": {
															"terms_text": "lorem ipsum...",
															"terms_uri": "https://example.com/terms_of_service"
														},
														"uri": "https://example.com/abc_123456",
														"weight": {
															"units": "pounds",
															"weight": 1
														}
													},
													"quantity": 1,
													"tax_amount": 5,
													"tax_rate": 1.99,
													"tax_type_applied": "VAT",
													"total_amount": 500,
													"unit_of_measure": "count",
													"unit_price": 490
												},
												{
													"commodity_code": "XYZ999",
													"currency": "USD",
													"description": "Classic Catapult",
													"discount_amount": 0,
													"discount_indicator": null,
													"gross_net_indicator": null,
													"item": {
														"create_time": 1390656130,
														"description": "Classic Catapult",
														"id": "2",
														"owner": {
															"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
															"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
															"resource": "accounts"
														},
														"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
														"photos": [
															"http://imgur.com/o4Qk0AF"
														],
														"price": 490,
														"product_code": "AAAXYZ321",
														"product_name": "Acme Catapult",
														"reference_number": "abc_654321",
														"resource": "items",
														"shipping_options": [
															"regular",
															"expedited"
														],
														"state": "active",
														"terms": {
															"terms_text": "lorem ipsum...",
															"terms_uri": "https://example.com/terms_of_service"
														},
														"uri": "https://example.com/abc_654321",
														"weight": {
															"units": "pounds",
															"weight": 1
														}
													},
													"quantity": 1,
													"tax_amount": 5,
													"tax_rate": 1.99,
													"tax_type_applied": "VAT",
													"total_amount": 500,
													"unit_of_measure": "count",
													"unit_price": 490
												}
											],
											"long_description": null,
											"notes": "urgent order",
											"owner": {
												"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
												"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
												"resource": "accounts"
											},
											"path": "/orders/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
											"reference_number": "invoice #54321",
											"resource": "orders",
											"service_address": {
												"city": "San Francisco",
												"country": "US",
												"line1": "123 Fake Street",
												"postal_code": "94101",
												"region": "CA"
											},
											"ship_from_address": {
												"city": "San Francisco",
												"country": "US",
												"line1": "123 Fake Street",
												"postal_code": "94101",
												"region": "CA"
											},
											"ship_to_address": {
												"city": "San Francisco",
												"country": "US",
												"line1": "123 Fake Street",
												"postal_code": "94101",
												"region": "CA"
											},
											"shipping_status": {
												"actual_delivery_time": null,
												"carrier": "UPS",
												"expected_delivery_time": 1490656130,
												"shipping_time": 1390656130,
												"tracking_number": "1Z34567890",
												"tracking_uri": "https://example.com/ups/1Z34567890"
											},
											"short_description": "Donation to ABC campaign",
											"state": "active",
											"status": "paid",
											"tax_amount": 35,
											"type": "goods",
											"vat_amount": 5,
											"vat_rate": 1.99,
											"discount_program_name": "Everything is 50% off",
											"tip_amount": 0,
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. You can perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. You can perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/order-resp"
											},
											"type": "array",
											"description": "An array of order objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"results",
										"next",
										"previous"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /orders call allows your platform to look up a collection of orders. Orders identify both the merchant and payer, and describe items sold, shipment date, prices, delivery details, and payment terms.  ",
				"operationId": "GET_orders",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "reference_number",
						"in": "query",
						"description": "Return orders created with this reference number.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of orders"
			}
		},
		"/orders/{id}": {
			"get": {
				"tags": [
					"/orders/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"alternate_tax_amount": 35,
									"alternate_tax_id": "11",
									"buyer": {
										"id": "1490656130",
										"path": "/legal_entities/1490656130",
										"resource": "legal_entities"
									},
									"create_time": 1390656130,
									"customer_reference_number": "cust# 1234",
									"delivery_type": "point_of_sale",
									"discount_amount": 0,
									"duty_amount": 0,
									"freight_amount": 0,
									"grand_total_amount": 1000,
									"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"line_items": [
										{
											"commodity_code": "ABC123",
											"currency": "USD",
											"description": "Classic Iron Anvil",
											"discount_amount": 0,
											"discount_indicator": null,
											"gross_net_indicator": null,
											"item": {
												"create_time": 1390656130,
												"description": "Classic Iron Anvil",
												"id": "1",
												"owner": {
													"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"resource": "accounts"
												},
												"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
												"photos": [],
												"price": 490,
												"product_code": "XYZ321",
												"product_details": {
													"band": "nike"
												},
												"product_name": "Acme Anvil - 100 Lb",
												"reference_number": "abc_123456",
												"resource": "items",
												"shipping_options": [
													"regular",
													"expedited"
												],
												"state": "active",
												"terms": {
													"terms_text": "lorem ipsum...",
													"terms_uri": "https://example.com/terms_of_service"
												},
												"uri": "https://example.com/abc_123456",
												"weight": {
													"units": "pounds",
													"weight": 1
												}
											},
											"quantity": 1,
											"tax_amount": 5,
											"tax_rate": 1.99,
											"tax_type_applied": "VAT",
											"total_amount": 500,
											"unit_of_measure": "count",
											"unit_price": 490
										},
										{
											"commodity_code": "XYZ999",
											"currency": "USD",
											"description": "Classic Catapult",
											"discount_amount": 0,
											"discount_indicator": null,
											"gross_net_indicator": null,
											"item": {
												"create_time": 1390656130,
												"description": "Classic Catapult",
												"id": "2",
												"owner": {
													"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"resource": "accounts"
												},
												"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
												"photos": [
													"http://imgur.com/o4Qk0AF"
												],
												"price": 490,
												"product_code": "AAAXYZ321",
												"product_name": "Acme Catapult",
												"reference_number": "abc_654321",
												"resource": "items",
												"shipping_options": [
													"regular",
													"expedited"
												],
												"state": "active",
												"terms": {
													"terms_text": "lorem ipsum...",
													"terms_uri": "https://example.com/terms_of_service"
												},
												"uri": "https://example.com/abc_654321",
												"weight": {
													"units": "pounds",
													"weight": 1
												}
											},
											"quantity": 1,
											"tax_amount": 5,
											"tax_rate": 1.99,
											"tax_type_applied": "VAT",
											"total_amount": 500,
											"unit_of_measure": "count",
											"unit_price": 490
										}
									],
									"long_description": null,
									"notes": "urgent order",
									"owner": {
										"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"resource": "accounts"
									},
									"path": "/orders/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"reference_number": "invoice #54321",
									"resource": "orders",
									"service_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"ship_from_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"ship_to_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"shipping_status": {
										"actual_delivery_time": null,
										"carrier": "UPS",
										"expected_delivery_time": 1490656130,
										"shipping_time": 1390656130,
										"tracking_number": "1Z34567890",
										"tracking_uri": "https://example.com/ups/1Z34567890"
									},
									"short_description": "Donation to ABC campaign",
									"state": "active",
									"status": "paid",
									"tax_amount": 35,
									"type": "goods",
									"vat_amount": 5,
									"vat_rate": 1.99,
									"discount_program_name": "Everything is 50% off",
									"tip_amount": 0,
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/order-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /orders/{id} call allows your platform to look up a single order. Orders identify both the merchant and payer, and describe items sold, shipment date, prices, delivery details, and payment terms.  ",
				"operationId": "GET_orders-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get an order"
			},
			"delete": {
				"tags": [
					"/orders/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"alternate_tax_amount": 35,
									"alternate_tax_id": "11",
									"buyer": {
										"id": "1490656130",
										"path": "/legal_entities/1490656130",
										"resource": "legal_entities"
									},
									"create_time": 1390656130,
									"customer_reference_number": "cust# 1234",
									"delivery_type": "point_of_sale",
									"discount_amount": 0,
									"duty_amount": 0,
									"freight_amount": 0,
									"grand_total_amount": 1000,
									"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"line_items": [
										{
											"commodity_code": "ABC123",
											"currency": "USD",
											"description": "Classic Iron Anvil",
											"discount_amount": 0,
											"discount_indicator": null,
											"gross_net_indicator": null,
											"item": {
												"create_time": 1390656130,
												"description": "Classic Iron Anvil",
												"id": "1",
												"owner": {
													"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"resource": "accounts"
												},
												"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
												"photos": [],
												"price": 490,
												"product_code": "XYZ321",
												"product_details": {
													"band": "nike"
												},
												"product_name": "Acme Anvil - 100 Lb",
												"reference_number": "abc_123456",
												"resource": "items",
												"shipping_options": [
													"regular",
													"expedited"
												],
												"state": "deleted",
												"terms": {
													"terms_text": "lorem ipsum...",
													"terms_uri": "https://example.com/terms_of_service"
												},
												"uri": "https://example.com/abc_123456",
												"weight": {
													"units": "pounds",
													"weight": 1
												}
											},
											"quantity": 1,
											"tax_amount": 5,
											"tax_rate": 1.99,
											"tax_type_applied": "VAT",
											"total_amount": 500,
											"unit_of_measure": "count",
											"unit_price": 490
										},
										{
											"commodity_code": "XYZ999",
											"currency": "USD",
											"description": "Classic Catapult",
											"discount_amount": 0,
											"discount_indicator": null,
											"gross_net_indicator": null,
											"item": {
												"create_time": 1390656130,
												"description": "Classic Catapult",
												"id": "2",
												"owner": {
													"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"resource": "accounts"
												},
												"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
												"photos": [
													"http://imgur.com/o4Qk0AF"
												],
												"price": 490,
												"product_code": "AAAXYZ321",
												"product_name": "Acme Catapult",
												"reference_number": "abc_654321",
												"resource": "items",
												"shipping_options": [
													"regular",
													"expedited"
												],
												"state": "deleted",
												"terms": {
													"terms_text": "lorem ipsum...",
													"terms_uri": "https://example.com/terms_of_service"
												},
												"uri": "https://example.com/abc_654321",
												"weight": {
													"units": "pounds",
													"weight": 1
												}
											},
											"quantity": 1,
											"tax_amount": 5,
											"tax_rate": 1.99,
											"tax_type_applied": "VAT",
											"total_amount": 500,
											"unit_of_measure": "count",
											"unit_price": 490
										}
									],
									"long_description": null,
									"notes": "urgent order",
									"owner": {
										"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"resource": "accounts"
									},
									"path": "/orders/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"reference_number": "invoice #54321",
									"resource": "orders",
									"service_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"ship_from_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"ship_to_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"shipping_status": {
										"actual_delivery_time": null,
										"carrier": "UPS",
										"expected_delivery_time": 1490656130,
										"shipping_time": 1390656130,
										"tracking_number": "1Z34567890",
										"tracking_uri": "https://example.com/ups/1Z34567890"
									},
									"short_description": "Donation to ABC campaign",
									"state": "deleted",
									"status": "paid",
									"tax_amount": 35,
									"type": "goods",
									"vat_amount": 5,
									"vat_rate": 1.99,
									"discount_program_name": "Everything is 50% off",
									"tip_amount": 0,
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/order-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The DELETE /orders/{id} call allows your platform to delete an order. Orders identify both the merchant and payer, and describe items sold, shipment date, prices, delivery details, and payment terms.  ",
				"operationId": "DELETE_orders-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Delete an order"
			},
			"post": {
				"tags": [
					"/orders/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"alternate_tax_amount": 35,
									"alternate_tax_id": "11",
									"buyer": {
										"id": "1490656130",
										"path": "/legal_entities/1490656130",
										"resource": "legal_entities"
									},
									"create_time": 1390656130,
									"customer_reference_number": "cust# 1234",
									"delivery_type": "point_of_sale",
									"discount_amount": 0,
									"duty_amount": 0,
									"freight_amount": 0,
									"grand_total_amount": 1000,
									"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"line_items": [
										{
											"commodity_code": "ABC123",
											"currency": "USD",
											"description": "Classic Iron Anvil",
											"discount_amount": 0,
											"discount_indicator": null,
											"gross_net_indicator": null,
											"item": {
												"create_time": 1390656130,
												"description": "Classic Iron Anvil",
												"id": "1",
												"owner": {
													"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"resource": "accounts"
												},
												"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
												"photos": [],
												"price": 490,
												"product_code": "XYZ321",
												"product_details": {
													"band": "nike"
												},
												"product_name": "Acme Anvil - 100 Lb",
												"reference_number": "abc_123456",
												"resource": "items",
												"shipping_options": [
													"regular",
													"expedited"
												],
												"state": "active",
												"terms": {
													"terms_text": "lorem ipsum...",
													"terms_uri": "https://example.com/terms_of_service"
												},
												"uri": "https://example.com/abc_123456",
												"weight": {
													"units": "pounds",
													"weight": 1
												}
											},
											"quantity": 1,
											"tax_amount": 5,
											"tax_rate": 1.99,
											"tax_type_applied": "VAT",
											"total_amount": 500,
											"unit_of_measure": "count",
											"unit_price": 490
										},
										{
											"commodity_code": "XYZ999",
											"currency": "USD",
											"description": "Classic Catapult",
											"discount_amount": 0,
											"discount_indicator": null,
											"gross_net_indicator": null,
											"item": {
												"create_time": 1390656130,
												"description": "Classic Catapult",
												"id": "2",
												"owner": {
													"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
													"resource": "accounts"
												},
												"path": "/items/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
												"photos": [
													"http://imgur.com/o4Qk0AF"
												],
												"price": 490,
												"product_code": "AAAXYZ321",
												"product_name": "Acme Catapult",
												"reference_number": "abc_654321",
												"resource": "items",
												"shipping_options": [
													"regular",
													"expedited"
												],
												"state": "active",
												"terms": {
													"terms_text": "lorem ipsum...",
													"terms_uri": "https://example.com/terms_of_service"
												},
												"uri": "https://example.com/abc_654321",
												"weight": {
													"units": "pounds",
													"weight": 1
												}
											},
											"quantity": 1,
											"tax_amount": 5,
											"tax_rate": 1.99,
											"tax_type_applied": "VAT",
											"total_amount": 500,
											"unit_of_measure": "count",
											"unit_price": 490
										}
									],
									"long_description": null,
									"notes": "urgent order",
									"owner": {
										"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"resource": "accounts"
									},
									"path": "/orders/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"reference_number": "invoice #54321",
									"resource": "orders",
									"service_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"ship_from_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"ship_to_address": {
										"city": "San Francisco",
										"country": "US",
										"line1": "123 Fake Street",
										"postal_code": "94101",
										"region": "CA"
									},
									"shipping_status": {
										"actual_delivery_time": null,
										"carrier": "UPS",
										"expected_delivery_time": 1490656130,
										"shipping_time": 1390656130,
										"tracking_number": "1Z34567890",
										"tracking_uri": "https://example.com/ups/1Z34567890"
									},
									"short_description": "Donation to ABC campaign",
									"state": "active",
									"status": "paid",
									"tax_amount": 35,
									"type": "goods",
									"vat_amount": 5,
									"vat_rate": 1.99,
									"discount_program_name": "Everything is 50% off",
									"tip_amount": 0,
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/order-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /orders/{id} call allows your platform to update and add custom data an order. Orders identify both the merchant and payer, and describe items sold, shipment date, prices, delivery details, and payment terms.  ",
				"operationId": "POST_orders-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"account_id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
								"alternate_tax_amount": 35,
								"alternate_tax_id": "11",
								"buyer": {
									"legal_entity_id": "1490656130",
									"type": "legal_entity_id"
								},
								"customer_reference_number": "cust# 1234",
								"delivery_type": "point_of_sale",
								"discount_amount": 0,
								"duty_amount": 0,
								"freight_amount": 0,
								"grand_total_amount": 1000,
								"line_items": [
									{
										"commodity_code": "ABC123",
										"currency": "USD",
										"description": "Classic Iron Anvil",
										"discount_amount": 0,
										"discount_indicator": null,
										"gross_net_indicator": null,
										"item": {
											"account_id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
											"description": "Classic Iron Anvil",
											"photos": [],
											"price": 490,
											"product_code": "XYZ321",
											"product_details": {
												"band": "nike"
											},
											"product_name": "Acme Anvil - 100 Lb",
											"reference_number": "abc_123456",
											"shipping_options": [
												"regular",
												"expedited"
											],
											"terms": {
												"terms_text": "lorem ipsum...",
												"terms_uri": "https://example.com/terms_of_service"
											},
											"uri": "https://example.com/abc_123456",
											"weight": {
												"units": "pounds",
												"weight": 1
											}
										},
										"quantity": 1,
										"tax_amount": 5,
										"tax_rate": 1.99,
										"tax_type_applied": "VAT",
										"total_amount": 500,
										"unit_of_measure": "count",
										"unit_price": 490
									},
									{
										"commodity_code": "XYZ999",
										"currency": "USD",
										"description": "Classic Catapult",
										"discount_amount": 0,
										"discount_indicator": null,
										"gross_net_indicator": null,
										"item": {
											"account_id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
											"description": "Classic Catapult",
											"photos": [
												"http://imgur.com/o4Qk0AF"
											],
											"price": 490,
											"product_code": "AAAXYZ321",
											"product_name": "Acme Catapult",
											"reference_number": "abc_654321",
											"shipping_options": [
												"regular",
												"expedited"
											],
											"terms": {
												"terms_text": "lorem ipsum...",
												"terms_uri": "https://example.com/terms_of_service"
											},
											"uri": "https://example.com/abc_654321",
											"weight": {
												"units": "pounds",
												"weight": 1
											}
										},
										"quantity": 1,
										"tax_amount": 5,
										"tax_rate": 1.99,
										"tax_type_applied": "VAT",
										"total_amount": 500,
										"unit_of_measure": "count",
										"unit_price": 490
									}
								],
								"long_description": null,
								"notes": "urgent order",
								"rbits": [
									{
										"address": {
											"origin_address": {
												"city": "Sunnyvale",
												"country": "US",
												"line1": "20 Main Street",
												"postal_code": "94085",
												"region": "CA"
											}
										},
										"receive_time": 1367958263,
										"source": "partner_database",
										"type": "address"
									},
									{
										"auto_billing": {
											"autobill_setup_time": 1209600,
											"payment_frequency": "monthly",
											"payment_number": 1,
											"setup_by": "payer",
											"total_payments_scheduled": 5
										},
										"receive_time": 1367958263,
										"source": "user",
										"type": "auto_billing"
									}
								],
								"reference_number": "invoice #54321",
								"service_address": {
									"city": "San Francisco",
									"country": "US",
									"line1": "123 Fake Street",
									"postal_code": "94101",
									"region": "CA"
								},
								"ship_from_address": {
									"city": "San Francisco",
									"country": "US",
									"line1": "123 Fake Street",
									"postal_code": "94101",
									"region": "CA"
								},
								"ship_to_address": {
									"city": "San Francisco",
									"country": "US",
									"line1": "123 Fake Street",
									"postal_code": "94101",
									"region": "CA"
								},
								"shipping_status": {
									"actual_delivery_time": null,
									"carrier": "UPS",
									"expected_delivery_time": 1490656130,
									"shipping_time": 1390656130,
									"tracking_number": "1Z34567890",
									"tracking_uri": "https://example.com/ups/1Z34567890"
								},
								"short_description": "Donation to ABC campaign",
								"status": "paid",
								"tax_amount": 35,
								"type": "goods",
								"vat_amount": 5,
								"vat_rate": 1.99,
								"discount_program_name": "Everything is 50% off",
								"tip_amount": 0
							},
							"schema": {
								"$ref": "#/components/schemas/order-id-req"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update an order"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the order, generated by WePay when the order is created."
				}
			]
		},
		"/payments": {
			"post": {
				"tags": [
					"/payments/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.1": {
										"value": {
											"amount": 1000,
											"amount_refunded": 1000,
											"amount_disputed": 1000,
											"auto_capture": false,
											"capture_at": null,
											"create_time": 1510080179,
											"currency": "USD",
											"custom_data": null,
											"failure_reason": null,
											"fee_amount": 0,
											"fee_amount_refundable": 0,
											"id": "00000000-0000-0000-0000-0000767bf5cd",
											"order": null,
											"owner": {
												"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
												"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
												"resource": "accounts"
											},
											"path": "/payments/00000000-0000-0000-0000-0000767bf5cd",
											"payment_method": {
												"id": "00000000-6363-0000-0000-000008b93a6e",
												"path": "/payment_methods/00000000-6363-0000-0000-000008b93a6e",
												"resource": "payment_methods"
											},
											"pending_reasons": [
												{
													"details": [],
													"reason_code": "PENDING_CAPTURE",
													"reason_message": "Payment pending capture."
												}
											],
											"resource": "payments",
											"status": "pending",
											"authorization_code": "0224241",
											"txnr_app_fee": null,
											"txnr_merchant": null,
											"initiated_by": "customer",
											"api_version": "3.1",
											"reference_id": "d6a60610-3a7e-4b9d-b56f-9005b9cd18ac"
										}
									}
								},
								"schema": {
									"$ref": "#/components/schemas/payments-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, MERCHANT_ACCOUNT_CANNOT_ACCEPT_PAYMENTS, TRANSACTION_DECLINED, UNSUPPORTED_CURRENCY",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /payments call allows your platform to create a new payment. For platforms on blended rate pricing leveraging the Clear product, remember to appropriately [calculate](/clear/process-payments/#calculate-fees) fees. To try this request out in the console, update the following parameters with your own information: **App-Id**, **App-Token**, **Unique-Key**, **payment_method**.",
				"operationId": "POST_payments",
				"requestBody": {
					"content": {
						"application/json": {
							"examples": {
								"v3.1": {
									"value": {
										"account_id": "abc123",
										"amount": 1000,
										"auto_capture": true,
										"currency": "USD",
										"custom_data": {
											"my_key": "invoice #54321"
										},
										"fee_amount": 30,
										"payment_method": {
											"credit_card": {
												"auto_update": false,
												"card_holder": {
													"address": {
														"city": "Redwood City",
														"country": "US",
														"line1": "350 Convention Way",
														"postal_code": "94025",
														"region": "CA"
													},
													"email": "example@wepay.com",
													"holder_name": "John Snow"
												},
												"card_number": "5496198584584769",
												"cvv": "007",
												"expiration_month": 4,
												"expiration_year": 2030,
												"virtual_terminal_mode": "web",
												"card_on_file": true,
												"recurring": false
											},
											"custom_data": {
												"my_key": "invoice #54321"
											},
											"type": "credit_card"
										},
										"initiated_by": "customer",
										"reference_id": "dfeb052b-ae8c-4a69-b909-8d9ecdd7c742"
									}
								}
							},
							"schema": {
								"$ref": "#/components/schemas/payments-req-v3_1"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create a payment"
			},
			"get": {
				"tags": [
					"/payments/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.1": {
										"value": {
											"next": "/payments?page=QVFQNUFBRVhpWFpzUGwxdncxNXN5bFgxUWhOd2RkNjJjWjYvdXFkNTFwZFowYi9EM2hJS25IRVBpS1NybkwrSWRIZE9vd00xZjNsQ1Q4ZUlJTVJTd0VmVnVXd3VxK2N1MHJ3RUUrL0VFVXRneUFxTG41TW5lcUxxRGRtd2YvODlMbjdnamk2S21qSDBhRkVsYW1EMGZUalljVVFHUThjWTB2Rm1lbUdxd3R0WjVjZEFPejUyWU1sOGdTTXRWUT09",
											"previous": null,
											"api_version": "3.1",
											"results": [
												{
													"amount": 1000,
													"amount_refunded": 1000,
													"amount_disputed": 1000,
													"auto_capture": false,
													"capture_at": null,
													"create_time": 1510080179,
													"currency": "USD",
													"custom_data": null,
													"failure_reason": null,
													"fee_amount": 0,
													"fee_amount_refundable": 0,
													"id": "00000000-0000-0000-0000-0000767bf5cd",
													"order": null,
													"owner": {
														"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
														"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
														"resource": "accounts"
													},
													"path": "/payments/00000000-0000-0000-0000-0000767bf5cd",
													"payment_method": {
														"id": "00000000-6363-0000-0000-000008b93a6e",
														"path": "/payment_methods/00000000-6363-0000-0000-000008b93a6e",
														"resource": "payment_methods"
													},
													"pending_reasons": [
														{
															"details": [],
															"reason_code": "PENDING_CAPTURE",
															"reason_message": "Payment pending capture."
														}
													],
													"resource": "payments",
													"status": "pending",
													"authorization_code": "0224241",
													"txnr_app_fee": null,
													"txnr_merchant": null,
													"initiated_by": "none",
													"api_version": "3.1",
													"reference_id": "dfeb052b-ae8c-4a69-b909-8d9ecdd7c742"
												},
												{
													"amount": 1000,
													"amount_refunded": 1000,
													"amount_disputed": 1000,
													"auto_capture": false,
													"capture_at": null,
													"create_time": 1510079535,
													"currency": "USD",
													"custom_data": null,
													"failure_reason": null,
													"fee_amount": 0,
													"fee_amount_refundable": 0,
													"id": "00000000-0000-0000-0000-00006fa82d45",
													"order": {
														"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
														"path": "/orders/be2b42e5-b808-40ae-9bbe-3291ab493f57",
														"resource": "orders"
													},
													"owner": {
														"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
														"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
														"resource": "accounts"
													},
													"path": "/payments/00000000-0000-0000-0000-00006fa82d45",
													"payment_method": {
														"id": "00000000-6261-5553-0000-0000000001b8",
														"path": "/payment_methods/00000000-6261-5553-0000-0000000001b8",
														"resource": "payment_methods"
													},
													"pending_reasons": [
														{
															"details": [],
															"reason_code": "PROCESSING",
															"reason_message": "Payment is being processed."
														}
													],
													"resource": "payments",
													"status": "pending",
													"authorization_code": "0224241",
													"txnr_app_fee": null,
													"txnr_merchant": null,
													"initiated_by": "none",
													"api_version": "3.1",
													"reference_id": "d6a60610-3a7e-4b9d-b56f-9005b9cd18ac"
												}
											]
										}
									}
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true
										},
										"previous": {
											"type": "string",
											"nullable": true
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/payments-v3_1"
											},
											"type": "array"
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"previous",
										"next",
										"results"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /payments call allows your platform to look up a collection of payments.",
				"operationId": "GET_payments",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "minimum_amount",
						"in": "query",
						"description": "Define the minimum value of the `amount` value for returned Payments (inclusive).",
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "maximum_amount",
						"in": "query",
						"description": "Define the maximum value of the `amount` value for returned Payments (inclusive).",
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "owner_id",
						"in": "query",
						"schema": {
							"type": "string"
						},
						"description": "ID of the owner of the resource."
					},
					{
						"name": "payment_method_type",
						"in": "query",
						"description": "Type of the payment method used. Possible values include: `credit_card`, `payment_bank_ca`, `payment_bank_us`.",
						"schema": {
							"enum": [
								"credit_card",
								"payment_bank_us"
							],
							"x-enumDescriptions": {
								"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
								"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
								"payment_bank_ca": {
									"description": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
									"x-versions": [
										"v3.0.rc.2.2"
									]
								}
							},
							"type": "string"
						}
					},
					{
						"name": "payment_method_id",
						"in": "query",
						"schema": {
							"type": "string"
						},
						"description": "ID of the payment method used, generated by WePay when the payment method is created."
					},
					{
						"name": "status",
						"in": "query",
						"schema": {
							"enum": [
								"pending",
								"completed",
								"failed",
								"canceled"
							],
							"x-enumDescriptions": {
								"pending": "This payment is processing, but is not yet included in the account's available or reserve balance. Find more information in the `pending_reasons` structure.",
								"completed": "This payment has finished processing, and is now available in either the account's available or reserved balance. **Note:** A payment can have a completed status and simultaneously have a refund or dispute issued against it.",
								"failed": "This payment has failed to process, and cannot be made available to the merchant. Find more information in the `failure_reason` structure.",
								"canceled": "This payment was canceled. If the cancellation was inadvertent, a new payment will need to be created."
							},
							"type": "string"
						},
						"description": "Status of the payment. Possible values include: `pending`, `completed`, `failed`, `canceled`."
					},
					{
						"name": "reference_id",
						"in": "query",
						"description": "The reference_id to search for.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of payments"
			}
		},
		"/payments/{id}": {
			"get": {
				"tags": [
					"/payments/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 1000,
									"amount_refunded": 1000,
									"amount_disputed": 1000,
									"auto_capture": false,
									"capture_at": null,
									"create_time": 1510080179,
									"currency": "USD",
									"custom_data": null,
									"failure_reason": null,
									"fee_amount": 0,
									"fee_amount_refundable": 0,
									"id": "00000000-0000-0000-0000-0000767bf5cd",
									"order": null,
									"owner": {
										"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"resource": "accounts"
									},
									"path": "/payments/00000000-0000-0000-0000-0000767bf5cd",
									"payment_method": {
										"id": "00000000-6363-0000-0000-000008b93a6e",
										"path": "/payment_methods/00000000-6363-0000-0000-000008b93a6e",
										"resource": "payment_methods"
									},
									"pending_reasons": null,
									"resource": "payments",
									"status": "pending",
									"authorization_code": "0224241",
									"txnr_app_fee": null,
									"txnr_merchant": null,
									"initiated_by": "customer",
									"api_version": "3.1",
									"reference_id": "dfeb052b-ae8c-4a69-b909-8d9ecdd7c742"
								},
								"schema": {
									"$ref": "#/components/schemas/payments-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /payments/{id} call allows your platform to look up a single payment.",
				"operationId": "GET_payments-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a payment"
			},
			"post": {
				"tags": [
					"/payments/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 1000,
									"amount_refunded": 1000,
									"amount_disputed": 1000,
									"auto_capture": false,
									"capture_at": null,
									"create_time": 1510079535,
									"currency": "USD",
									"custom_data": {
										"invoice_id": "54321"
									},
									"failure_reason": null,
									"fee_amount": 0,
									"fee_amount_refundable": 0,
									"id": "00000000-0000-0000-0000-00006fa82d45",
									"order": null,
									"owner": {
										"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"resource": "accounts"
									},
									"path": "/payments/00000000-0000-0000-0000-00006fa82d45",
									"payment_method": {
										"id": "00000000-6261-5553-0000-0000000001b8",
										"path": "/payment_methods/00000000-6261-5553-0000-0000000001b8",
										"resource": "payment_methods"
									},
									"pending_reasons": [
										{
											"details": [],
											"reason_code": "PROCESSING",
											"reason_message": "Payment is being processed."
										}
									],
									"resource": "payments",
									"status": "pending",
									"authorization_code": "0224241",
									"txnr_app_fee": null,
									"txnr_merchant": null,
									"initiated_by": "none",
									"api_version": "3.1",
									"reference_id": "dfeb052b-ae8c-4a69-b909-8d9ecdd7c742"
								},
								"schema": {
									"$ref": "#/components/schemas/payments-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /payments/{id} call allows your platform to update and add custom data to a payment.",
				"operationId": "POST_payments-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"custom_data": {
									"Another Key": "some value",
									"a_reference_number": 4
								},
								"rbits": null,
								"reference_id": "dfeb052b-ae8c-4a69-b909-8d9ecdd7c742"
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"amounts": {
										"$ref": "#/components/schemas/payments_id_amounts_request"
									},
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									},
									"reference_id": {
										"$ref": "#/components/schemas/reference_id"
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update a payment"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/payments/{id}/cancel": {
			"post": {
				"tags": [
					"/payments/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 1000,
									"amount_refunded": 1000,
									"amount_disputed": 1000,
									"auto_capture": false,
									"capture_at": null,
									"create_time": 1510080179,
									"currency": "USD",
									"custom_data": null,
									"failure_reason": null,
									"fee_amount": 0,
									"fee_amount_refundable": 0,
									"id": "00000000-0000-0000-0000-0000767bf5cd",
									"order": null,
									"owner": {
										"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"resource": "accounts"
									},
									"path": "/payments/00000000-0000-0000-0000-0000767bf5cd",
									"payment_method": {
										"id": "00000000-6363-0000-0000-000008b93a6e",
										"path": "/payment_methods/00000000-6363-0000-0000-000008b93a6e",
										"resource": "payment_methods"
									},
									"pending_reasons": [
										{
											"details": [],
											"reason_code": "PENDING_CAPTURE",
											"reason_message": "Payment pending capture."
										}
									],
									"resource": "payments",
									"status": "canceled",
									"authorization_code": "0224241",
									"txnr_app_fee": null,
									"txnr_merchant": null,
									"initiated_by": "none",
									"api_version": "3.1",
									"reference_id": "d6a60610-3a7e-4b9d-b56f-9005b9cd18ac"
								},
								"schema": {
									"$ref": "#/components/schemas/payments-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, PAYMENT_CANNOT_BE_CANCELED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /payments/{id}/cancel call allows your platform to cancel a payment.",
				"operationId": "POST_payments-id-cancel",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"cancel_reason": "item(s) delayed - cannot fulfill order"
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"cancel_reason": {
										"type": "string",
										"description": "Your platform's reason for canceling a payment."
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									}
								},
								"required": [
									"cancel_reason"
								],
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Cancel a payment"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/payments/{id}/capture": {
			"post": {
				"tags": [
					"/payments/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 1000,
									"amount_refunded": 1000,
									"amount_disputed": 1000,
									"auto_capture": false,
									"capture_at": null,
									"create_time": 1510080179,
									"currency": "USD",
									"custom_data": {
										"foo": "bar"
									},
									"failure_reason": null,
									"fee_amount": 0,
									"fee_amount_refundable": 0,
									"id": "00000000-0000-0000-0000-0000767bf5cd",
									"order": null,
									"owner": {
										"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"resource": "accounts"
									},
									"path": "/payments/00000000-0000-0000-0000-0000767bf5cd",
									"payment_method": {
										"id": "00000000-6363-0000-0000-000008b93a6e",
										"path": "/payment_methods/00000000-6363-0000-0000-000008b93a6e",
										"resource": "payment_methods"
									},
									"pending_reasons": null,
									"resource": "payments",
									"status": "completed",
									"authorization_code": "0224241",
									"txnr_app_fee": null,
									"txnr_merchant": null,
									"initiated_by": "customer",
									"api_version": "3.1",
									"reference_id": "d6a60610-3a7e-4b9d-b56f-9005b9cd18ac"
								},
								"schema": {
									"$ref": "#/components/schemas/payments-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, PARAM_IS_MISSING, PARAM_VALUE_IS_TOO_SMALL_INCLUSIVE, FEE_EXCEEDS_PAYMENT_AMOUNT_THRESHOLD_PERCENTAGE",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /payments/{id}/capture call allows your platform to capture a payment (when `auto_capture` is set to false).",
				"operationId": "POST_payments-id-capture",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"amounts": {
									"amount": 1500,
									"currency": "USD",
									"fee_amount": 150
								},
								"custom_data": {
									"foo": "bar"
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"amounts": {
										"$ref": "#/components/schemas/payments_id_amounts_request"
									},
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									}
								},
								"type": "object"
							}
						}
					},
					"required": false
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Capture a payment"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/payment_methods": {
			"post": {
				"tags": [
					"/payment_methods/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.1": {
										"value": {
											"create_time": 1512429148,
											"credit_card": {
												"auto_update": false,
												"backing_display_name": null,
												"bin": "549619",
												"card_brand": "mastercard",
												"card_entry_type": "card_keyed",
												"card_holder": {
													"address": {
														"city": "",
														"country": "US",
														"line1": "",
														"line2": "",
														"postal_code": "94025",
														"region": ""
													},
													"email": "example@wepay.com",
													"holder_name": "John Snow",
													"phone": {
														"country_code": null,
														"phone_number": null,
														"type": null
													}
												},
												"display_name": "MasterCard xxxxxx4769",
												"expiration_month": 4,
												"expiration_year": 2020,
												"last_four": "4769",
												"virtual_terminal_mode": null,
												"card_on_file": false,
												"recurring": false,
												"cvv_provided": true
											},
											"custom_data": null,
											"id": "00000000-6363-0000-0000-0000cd225fe1",
											"owner": {
												"id": "171845",
												"path": null,
												"resource": "applications"
											},
											"path": "/payment_methods/00000000-6363-0000-0000-0000cd225fe1",
											"resource": "payment_methods",
											"status": "verified",
											"type": "credit_card",
											"api_version": "3.0"
										}
									}
								},
								"schema": {
									"$ref": "#/components/schemas/payment_method-resp-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, MERCHANT_ACCOUNT_CANNOT_ACCEPT_PAYMENTS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /payment_methods call allows your platform to create a payment method. Payment methods represent payment data like credit cards and bank accounts, and allow your platform to charge and accept money from a payer.",
				"operationId": "POST_payment_methods",
				"requestBody": {
					"content": {
						"application/json": {
							"examples": {
								"v3.1": {
									"value": {
										"credit_card": {
											"auto_update": false,
											"card_holder": {
												"address": {
													"country": "US",
													"postal_code": "94025"
												},
												"email": "example@wepay.com",
												"holder_name": "John Snow"
											},
											"card_number": "5496198584584769",
											"cvv": "007",
											"expiration_month": 4,
											"expiration_year": 2020,
											"trigger_verification": true,
											"virtual_terminal_mode": "mobile",
											"card_on_file": false,
											"recurring": false
										},
										"custom_data": {
											"my_key": "invoice #54321"
										},
										"type": "credit_card"
									}
								}
							},
							"schema": {
								"$ref": "#/components/schemas/payment_method-req-v3_1"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Client-IP",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create a payment method"
			},
			"get": {
				"tags": [
					"/payment_methods/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.1": {
										"value": {
											"next": null,
											"previous": null,
											"api_version": "3.0",
											"results": [
												{
													"create_time": 1512429187,
													"credit_card": {
														"auto_update": false,
														"backing_display_name": null,
														"bin": "400383",
														"card_brand": "visa",
														"card_entry_type": "card_keyed",
														"card_holder": {
															"address": {
																"city": "",
																"country": "US",
																"line1": "",
																"line2": "",
																"postal_code": "94040",
																"region": ""
															},
															"email": "bob@example.com",
															"holder_name": "Bob Belcher",
															"phone": {
																"country_code": null,
																"phone_number": null,
																"type": null
															}
														},
														"display_name": "Visa xxxxxx4018",
														"expiration_month": 10,
														"expiration_year": 2019,
														"last_four": "4018",
														"virtual_terminal_mode": null,
														"card_on_file": false,
														"recurring": false,
														"cvv_provided": true
													},
													"custom_data": null,
													"id": "00000000-6363-0000-0000-00003be52b59",
													"owner": {
														"id": "171845",
														"path": null,
														"resource": "applications"
													},
													"path": "/payment_methods/00000000-6363-0000-0000-00003be52b59",
													"resource": "payment_methods",
													"status": "verified",
													"type": "credit_card",
													"api_version": "3.0"
												}
											]
										}
									}
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/payment_method-resp-v3_1"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of payment method objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"previous",
										"next",
										"results"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /payment_methods call allows your platform to look up a collection of payment methods. Payment methods represent payment data like credit cards and bank accounts, and allow your platform to charge and accept money from a payer.",
				"operationId": "GET_payment_methods",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "card_brand",
						"in": "query",
						"description": "The brand of the card to look up. Possible values include: `amex`, `discover`, `mastercard`, `visa`.",
						"schema": {
							"enum": [
								"visa",
								"mastercard",
								"discover",
								"amex",
								"jcb",
								"diners"
							],
							"x-enumDescriptions": {
								"visa": "",
								"mastercard": "",
								"discover": "",
								"amex": "",
								"jcb": "",
								"diners": ""
							},
							"type": "string"
						}
					},
					{
						"name": "card_last_four",
						"in": "query",
						"description": "The last four digits of the card to look up.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "bank_routing_number",
						"in": "query",
						"description": "The routing number of the bank to look up.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "bank_last_four",
						"in": "query",
						"description": "The last four numbers of the bank account. **Note:** If you have verified your account via Plaid, this might be the last four numbers of your tokenized bank account number (TAN).",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "The type of payment_method that should be searched. Possible values include: `credit_card`, `payment_bank_us`. Required unless \"page\" is provided.",
						"schema": {
							"enum": [
								"credit_card",
								"payment_bank_us"
							],
							"x-enumDescriptions": {
								"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
								"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
								"payment_bank_ca": {
									"description": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
									"x-versions": [
										"v3.0.rc.2.2"
									]
								}
							},
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of payment methods"
			}
		},
		"/payment_methods/{id}": {
			"post": {
				"tags": [
					"/payment_methods/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1512429148,
									"credit_card": {
										"auto_update": false,
										"backing_display_name": null,
										"bin": "549619",
										"card_brand": "mastercard",
										"card_entry_type": "card_keyed",
										"card_holder": {
											"address": {
												"city": "",
												"country": "US",
												"line1": "",
												"line2": "",
												"postal_code": "94025",
												"region": ""
											},
											"email": "example@wepay.com",
											"holder_name": "John Snow",
											"phone": {
												"country_code": null,
												"phone_number": null,
												"type": null
											}
										},
										"display_name": "MasterCard xxxxxx4769",
										"expiration_month": 4,
										"expiration_year": 2020,
										"last_four": "4769",
										"virtual_terminal_mode": null,
										"card_on_file": false,
										"recurring": false,
										"cvv_provided": true
									},
									"custom_data": {
										"order_number": 696868
									},
									"id": "00000000-6363-0000-0000-0000cd225fe1",
									"owner": {
										"id": "171845",
										"path": null,
										"resource": "applications"
									},
									"path": "/payment_methods/00000000-6363-0000-0000-0000cd225fe1",
									"resource": "payment_methods",
									"status": "verified",
									"type": "credit_card",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/payment_method-resp-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /payment_methods/{id} call allows your platform to update and add custom data to an existing payment method. Payment methods represent payment data like credit cards and bank accounts, and allow your platform to charge and accept money from a payer.",
				"operationId": "POST_payment_methods-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"type": "payment_bank_us",
								"payment_bank_us": null,
								"custom_data": null
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"credit_card": {
										"additionalProperties": false,
										"properties": {
											"card_on_file": {
												"type": "boolean"
											},
											"recurring": {
												"type": "boolean"
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Credit card structure to be used for updating credit card information."
									},
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"payment_bank_us": {
										"additionalProperties": false,
										"type": "object",
										"nullable": true,
										"description": "Payment bank structure to be used for updating payment bank information. No field is allowed for update now."
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									},
									"type": {
										"enum": [
											"credit_card",
											"payment_bank_us",
											"payment_bank_ca"
										],
										"x-enumDescriptions": {
											"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
											"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
											"payment_bank_ca": {
												"description": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
												"x-versions": [
													"v3.0.rc.2.2"
												]
											}
										},
										"type": "string",
										"x-isOneOfKey": true
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update a payment method"
			},
			"get": {
				"tags": [
					"/payment_methods/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1512429148,
									"credit_card": {
										"auto_update": false,
										"backing_display_name": null,
										"bin": "549619",
										"card_brand": "mastercard",
										"card_entry_type": "card_keyed",
										"card_holder": {
											"address": {
												"city": "",
												"country": "US",
												"line1": "",
												"line2": "",
												"postal_code": "94025",
												"region": ""
											},
											"email": "example@wepay.com",
											"holder_name": "John Snow",
											"phone": {
												"country_code": null,
												"phone_number": null,
												"type": null
											}
										},
										"display_name": "MasterCard xxxxxx4769",
										"expiration_month": 4,
										"expiration_year": 2020,
										"last_four": "4769",
										"virtual_terminal_mode": null,
										"card_on_file": false,
										"recurring": false,
										"cvv_provided": true
									},
									"custom_data": null,
									"id": "00000000-6363-0000-0000-0000cd225fe1",
									"owner": {
										"id": "171845",
										"path": null,
										"resource": "applications"
									},
									"path": "/payment_methods/00000000-6363-0000-0000-0000cd225fe1",
									"resource": "payment_methods",
									"status": "verified",
									"type": "credit_card",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/payment_method-resp-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /payment_methods/{id} call allows your platform to look up a specific payment method. Payment methods represent payment data like credit cards and bank accounts, and allow your platform to charge and accept money from a payer.",
				"operationId": "GET_payment_methods-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a payment method"
			},
			"delete": {
				"tags": [
					"/payment_methods/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1512429148,
									"credit_card": {
										"auto_update": false,
										"backing_display_name": null,
										"bin": "549619",
										"card_brand": "mastercard",
										"card_entry_type": "card_keyed",
										"card_holder": {
											"address": {
												"city": "",
												"country": "US",
												"line1": "",
												"line2": "",
												"postal_code": "94025",
												"region": ""
											},
											"email": "example@wepay.com",
											"holder_name": "John Snow",
											"phone": {
												"country_code": null,
												"phone_number": null,
												"type": null
											}
										},
										"display_name": "MasterCard xxxxxx4769",
										"expiration_month": 4,
										"expiration_year": 2020,
										"last_four": "4769",
										"virtual_terminal_mode": null,
										"card_on_file": false,
										"recurring": false,
										"cvv_provided": true
									},
									"custom_data": null,
									"id": "00000000-6363-0000-0000-0000cd225fe1",
									"owner": {
										"id": "171845",
										"path": null,
										"resource": "applications"
									},
									"path": "/payment_methods/00000000-6363-0000-0000-0000cd225fe1",
									"resource": "payment_methods",
									"status": "deleted",
									"type": "credit_card",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/payment_method-resp-v3_1"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, PAYMENT_METHOD_CANNOT_BE_DELETED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The DELETE /payment_methods/{id} call allows your platform to delete a single payment method. Payment methods represent payment data like credit cards and bank accounts, and allow your platform to charge and accept money from a payer.",
				"operationId": "DELETE_payment_methods-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Delete a payment method"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the payment method, generated by WePay when the payment method is created."
				}
			]
		},
		"/payment_methods/{id}/verify_bank_deposits": {
			"post": {
				"tags": [
					"/payment_methods/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1512429148,
									"custom_data": null,
									"id": "00000000-6261-5553-0000-000000000dd9",
									"owner": {
										"id": "137137",
										"path": null,
										"resource": "applications"
									},
									"path": "/payment_methods/00000000-6261-5553-0000-000000000dd9",
									"payment_bank_us": {
										"account_holder": {
											"address": {
												"city": "",
												"country": "US",
												"line1": "",
												"line2": "",
												"postal_code": "94025",
												"region": ""
											},
											"email": "example@wepay.com",
											"holder_name": "John Snow",
											"phone": {
												"country_code": null,
												"phone_number": null,
												"type": null
											}
										},
										"account_type": "checking",
										"last_four": "6789"
									},
									"resource": "payment_methods",
									"status": "verified",
									"type": "payment_bank_us",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/payment_method-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, PAYMENT_METHOD_CANNOT_BE_VERIFIED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /payment_methods/{id}/verify_bank_deposits call allows your platform to verify a payment method. Payment methods represent payment data like credit cards and bank accounts, and allow your platform to charge and accept money from a payer.",
				"operationId": "POST_payment_methods-id-verify_bank_deposits",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"microdeposits": [
									10,
									55
								]
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"microdeposits": {
										"items": {
											"type": "integer"
										},
										"type": "array"
									}
								},
								"required": [
									"microdeposits"
								],
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Verify a payment method"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/payouts": {
			"get": {
				"tags": [
					"/payouts/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": "/payouts?page=QVFQNUFBRVhENUVGdEFOTk1CVzR4bHVsMnR2WGRJVkpVUVJtQTNvZXZlYVM2b1dDMGIvSXBDenEwTWlNRW9KbXpaTkJOVytaWjlHTEZNYVdPbU5Ka093MEhwSjcxZll4ZC9KM2dCWURlK29rS2pRZVZUNm43YzY0eUZJdkc5Q0dGd0RENSsyNE4rUFA1Wm5HUk15OXhrbFhhYnpEaklicVMxM1JrTmg1M1EvaEVZMEptdEdPZ01jcXhWM09QUT09",
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"amount": 941,
											"complete_time": 1510128604,
											"create_time": 1510128004,
											"currency": "USD",
											"custom_data": null,
											"failure_reason": null,
											"id": "00000000-0000-0000-0000-00000a51d642",
											"owner": {
												"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
												"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
												"resource": "accounts"
											},
											"path": "/payouts/00000000-0000-0000-0000-00000a51d642",
											"payout_method": {
												"id": "00000000-6261-5553-0000-000000000bf2",
												"path": "/payout_methods/00000000-6261-5553-0000-000000000bf2",
												"resource": "payout_methods"
											},
											"pending_reasons": null,
											"resource": "payouts",
											"status": "completed",
											"txnr_failure": null,
											"txnr_payout": {
												"id": "00000000-0000-0000-0000-000000013003",
												"path": "/transaction_records/00000000-0000-0000-0000-000000013003",
												"resource": "transaction_records"
											},
											"api_version": "3.0"
										},
										{
											"amount": 643,
											"complete_time": null,
											"create_time": 1510125026,
											"currency": "USD",
											"custom_data": null,
											"failure_reason": null,
											"id": "00000000-0000-0000-0000-00000d37a696",
											"owner": {
												"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
												"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
												"resource": "accounts"
											},
											"path": "/payouts/00000000-0000-0000-0000-00000d37a696",
											"payout_method": {
												"id": "00000000-6261-5553-0000-000000000ad1",
												"path": "/payout_methods/00000000-6261-5553-0000-000000000ad1",
												"resource": "payout_methods"
											},
											"pending_reasons": [
												{
													"details": null,
													"reason_code": "REVIEW",
													"reason_message": "Payout is under review."
												}
											],
											"resource": "payouts",
											"status": "pending",
											"txnr_failure": null,
											"txnr_payout": null,
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/payout"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of payout objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"results",
										"next",
										"previous"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /payouts call allows your platform to look up a collection of payouts. Payouts allow your merchants to receive their funds from your platform.",
				"operationId": "GET_payouts",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "Return elements owned by this resource instance.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "payout_method_type",
						"in": "query",
						"description": "Payout method used to receive payout.",
						"schema": {
							"enum": [
								"payout_bank_ca",
								"payout_bank_gb",
								"payout_bank_us",
								"paper_check"
							],
							"x-enumDescriptions": {
								"payout_bank_ca": "Bank account in Canada.",
								"payout_bank_gb": "Bank account in the UK (not currently supported).",
								"payout_bank_us": "Bank account in the US.",
								"paper_check": "Paper check delivered to an address in the US."
							},
							"type": "string"
						}
					},
					{
						"name": "payout_method_id",
						"in": "query",
						"description": "ID of the payout method used to receive payout.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "Status of the payout.",
						"schema": {
							"enum": [
								"pending",
								"completed",
								"failed"
							],
							"x-enumDescriptions": {
								"pending": "WePay is currently processing this payout. See the `pending_reasons` structure for additional information.",
								"completed": "WePay has finished processing this payout. **Note:** Other bank institutions must also process payouts to bank accounts before the merchant will see the deposit in their account.",
								"failed": "WePay failed to process this payout. See the `failure_reason` structure for additional information."
							},
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of payouts"
			}
		},
		"/payouts/{id}": {
			"post": {
				"tags": [
					"/payouts/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 941,
									"complete_time": 1510128604,
									"create_time": 1510128004,
									"currency": "USD",
									"custom_data": {
										"customer_id": "a65dbc451",
										"reference_number": 436
									},
									"failure_reason": null,
									"id": "00000000-0000-0000-0000-00000a51d642",
									"owner": {
										"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"resource": "accounts"
									},
									"path": "/payouts/00000000-0000-0000-0000-00000a51d642",
									"payout_method": {
										"id": "00000000-6261-5553-0000-000000000bf2",
										"path": "/payout_methods/00000000-6261-5553-0000-000000000bf2",
										"resource": "payout_methods"
									},
									"pending_reasons": null,
									"resource": "payouts",
									"status": "completed",
									"txnr_failure": null,
									"txnr_payout": {
										"id": "00000000-0000-0000-0000-000000013003",
										"path": "/transaction_records/00000000-0000-0000-0000-000000013003",
										"resource": "transaction_records"
									},
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/payout"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /payouts/{id} call allows your platform to update and add custom data to a payout. Payouts allow your merchants to receive their funds from your platform.",
				"operationId": "POST_payouts-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"custom_data": null
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update a payout"
			},
			"get": {
				"tags": [
					"/payouts/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 941,
									"complete_time": 1510128604,
									"create_time": 1510128004,
									"currency": "USD",
									"custom_data": null,
									"failure_reason": null,
									"id": "00000000-0000-0000-0000-00000a51d642",
									"owner": {
										"id": "be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"path": "/accounts/be2b42e5-b808-40ae-9bbe-3291ab493f57",
										"resource": "accounts"
									},
									"path": "/payouts/00000000-0000-0000-0000-00000a51d642",
									"payout_method": {
										"id": "00000000-6261-5553-0000-000000000bf2",
										"path": "/payout_methods/00000000-6261-5553-0000-000000000bf2",
										"resource": "payout_methods"
									},
									"pending_reasons": null,
									"resource": "payouts",
									"status": "completed",
									"txnr_failure": null,
									"txnr_payout": {
										"id": "00000000-0000-0000-0000-000000013003",
										"path": "/transaction_records/00000000-0000-0000-0000-000000013003",
										"resource": "transaction_records"
									},
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/payout"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /payouts/{id} call allows your platform to look up a single payout. Payouts allow your merchants to receive their funds from your platform.",
				"operationId": "GET_payouts-id",
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a payout"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the payout, generated by WePay when the payout is created."
				}
			]
		},
		"/payout_methods": {
			"post": {
				"tags": [
					"/payout_methods/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1480700534,
									"custom_data": null,
									"id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
									"nickname": "Foo Bar Bank",
									"owner": {
										"id": "3cd20b3c-4008-400b-b708-2b844ce7be84",
										"path": "/legal_entities/3cd20b3c-4008-400b-b708-2b844ce7be84",
										"resource": "legal_entities"
									},
									"path": "/payout_methods/0102b1c6-2bc7-448a-aa1d-076b1637547c",
									"payout_bank_us": {
										"account_type": "checking",
										"last_four": "4739"
									},
									"resource": "payout_methods",
									"status": "active",
									"type": "payout_bank_us",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/payout_method-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, MERCHANT_ACCOUNT_CANNOT_ACCEPT_PAYMENTS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /payout_methods call allows your platform to create a new payout method owned by a legal entity. Payout methods represent payout targets, such as bank accounts.",
				"operationId": "POST_payout_methods",
				"requestBody": {
					"content": {
						"application/json": {
							"examples": {
								"v3.1": {
									"value": {
										"custom_data": {
											"my_key": "invoice #54321"
										},
										"legal_entity_id": "42d2c2f1-5aeb-4929-944f-e220b4c9425b",
										"nickname": "bofa checking 6789",
										"payout_bank_us": {
											"account_number": "123456789",
											"account_type": "checking",
											"routing_number": "987654321"
										},
										"type": "payout_bank_us"
									}
								}
							},
							"schema": {
								"$ref": "#/components/schemas/payout_methods_create_data-v3_1"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Client-IP",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create a payout method"
			},
			"get": {
				"tags": [
					"/payout_methods/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": "/payout_methods?page=QVFQNUFBRVgzVDMrd3Rxd2RPYThkbFhtLzJUa08rMkU0djJnUHNpNk1HUlVhc2NoTWowUFFCaVNzajY5K1VLNFdSQ056Q1ZqL25qQXVZSDlLNVZXUnIvYVFOOTBCc2lSMWxOKzIrNzJxWXNWN1VhSHkvWllmcXF2NkNMZEphdXZYVlo3OHZtZkYzaVcwaEtpelRDbytUQjVDQ3lxUmxxSDVyaUJ4TUQwTGt1NTBwTW5qZlMvZmk1Q1paUDJJN1VPbDRpVjNxVWFDUTNZVi9aQTN3ZkJLYmtQOGpOMCtqeUJBOTNmQjcyKzczRHM1VkNHelJRMWRQLzNoNFJ0WWQxLw==",
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"create_time": 1480700534,
											"custom_data": null,
											"id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
											"nickname": "Foo Bar Bank",
											"owner": {
												"id": "3cd20b3c-4008-400b-b708-2b844ce7be84",
												"path": "/legal_entities/3cd20b3c-4008-400b-b708-2b844ce7be84",
												"resource": "legal_entities"
											},
											"path": "/payout_methods/0102b1c6-2bc7-448a-aa1d-076b1637547c",
											"payout_bank_us": {
												"account_type": "checking",
												"last_four": "6979"
											},
											"resource": "payout_methods",
											"status": "active",
											"type": "payout_bank_us",
											"api_version": "3.0"
										},
										{
											"create_time": 1480700534,
											"custom_data": null,
											"id": "3e32b1c6-2bc7-448a-aa1d-076b1637547c",
											"nickname": "Foo Bar Bank",
											"owner": {
												"id": "3cd20b3c-4008-400b-b708-2b844ce7be84",
												"path": "/legal_entities/3cd20b3c-4008-400b-b708-2b844ce7be84",
												"resource": "legal_entities"
											},
											"path": "/payout_methods/0102b1c6-2bc7-448a-aa1d-076b1637547c",
											"payout_bank_us": {
												"account_type": "checking",
												"last_four": "6889"
											},
											"resource": "payout_methods",
											"status": "active",
											"type": "payout_bank_us",
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/payout_method-resp"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of payout method objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"results",
										"next",
										"previous"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /payout_methods call allows your platform to look up a collection of payout methods. Payout methods represent payout targets, such as bank accounts.",
				"operationId": "GET_payout_methods",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "Return elements owned by this resource instance.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "The type of payout method to search for. Required unless \"page\" is provided",
						"schema": {
							"enum": [
								"payout_bank_ca",
								"payout_bank_gb",
								"payout_bank_us",
								"paper_check"
							],
							"x-enumDescriptions": {
								"payout_bank_ca": "Bank account in Canada.",
								"payout_bank_gb": "Bank account in the UK (not currently supported).",
								"payout_bank_us": "Bank account in the US.",
								"paper_check": "Paper check delivered to an address in the US."
							},
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of payout methods"
			}
		},
		"/payout_methods/{id}": {
			"post": {
				"tags": [
					"/payout_methods/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1480700534,
									"custom_data": {
										"Another Key": "some value",
										"a_reference_number": 4
									},
									"id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
									"nickname": "Foo Bar Bank",
									"owner": {
										"id": "42d2c2f1-5aeb-4929-944f-e220b4c9425b",
										"path": "/legal_entities/42d2c2f1-5aeb-4929-944f-e220b4c9425b",
										"resource": "legal_entities"
									},
									"path": "/payout_methods/0102b1c6-2bc7-448a-aa1d-076b1637547c",
									"payout_bank_us": {
										"account_type": "checking",
										"last_four": "6998"
									},
									"resource": "payout_methods",
									"status": "active",
									"type": "payout_bank_us",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/payout_method-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /payout_methods/{id}  call allows your platform to update and add custom data to a payout method. Payout methods represent payout targets, such as bank accounts.",
				"operationId": "POST_payout_methods-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"custom_data": null
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Client-IP",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update a payout method"
			},
			"get": {
				"tags": [
					"/payout_methods/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1480700534,
									"custom_data": null,
									"id": "0102b1c6-2bc7-448a-aa1d-076b1637547c",
									"nickname": "Foo Bar Bank",
									"owner": {
										"id": "42d2c2f1-5aeb-4929-944f-e220b4c9425b",
										"path": "/legal_entities/42d2c2f1-5aeb-4929-944f-e220b4c9425b",
										"resource": "legal_entities"
									},
									"path": "/payout_methods/0102b1c6-2bc7-448a-aa1d-076b1637547c",
									"payout_bank_us": {
										"account_type": "checking",
										"last_four": "6998"
									},
									"resource": "payout_methods",
									"status": "active",
									"type": "payout_bank_us",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/payout_method-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /payout_methods/{id} call allows your platform to look up a single payout method. Payout methods represent payout targets, such as bank accounts.",
				"operationId": "GET_payout_methods-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a payout method"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "The ID of the payout method, generated by WePay when the payout method is created."
				}
			]
		},
		"/rbits": {
			"post": {
				"tags": [
					"/rbits/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"address": {
										"origin_address": {
											"city": "Palo Alto",
											"country": "US",
											"line1": "380 Portage Avenue",
											"postal_code": "93036",
											"region": "CA"
										}
									},
									"create_time": 1390656130,
									"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"owner": {
										"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"resource": "accounts"
									},
									"path": "/rbits/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"receive_time": 1367958263,
									"resource": "rbits",
									"source": "guidestar",
									"state": "active",
									"type": "address",
									"api_version": "3.0"
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"create_time": {
											"type": "integer",
											"format": "int64",
											"minimum": 0,
											"description": "The time (in UNIX) when the rbit was created."
										},
										"id": {
											"$ref": "#/components/schemas/rbit_id"
										},
										"owner": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"description": "The ID of the [`associated_resource`](/api/latest/operation/POST_rbits/#!path=associated_resource/id&t=request) that your platform defined in the POST request to create this rBit."
												},
												"path": {
													"type": "string",
													"description": "Path of resource and resource ID."
												},
												"resource": {
													"$ref": "#/components/schemas/resource_types-rbit"
												}
											},
											"required": [
												"id",
												"resource",
												"path"
											],
											"type": "object",
											"description": "Details the owner resource and owner path."
										},
										"path": {
											"type": "string",
											"description": "Path of resource and resource ID."
										},
										"receive_time": {
											"type": "integer",
											"format": "int64",
											"minimum": 0,
											"description": "The time (in UNIX) when the data in this rbit was first obtained."
										},
										"resource": {
											"$ref": "#/components/schemas/resource-rbits"
										},
										"source": {
											"$ref": "#/components/schemas/rbit-source"
										},
										"state": {
											"enum": [
												"active",
												"deleted"
											],
											"type": "string",
											"description": "State of the rbit. Possible values include: `active`, `deleted`.",
											"x-enumDescriptions": {
												"active": "Identifies the rBit as current information pertinent to the account or transaction.",
												"deleted": "Identifies the rBit as removed or outdated information no longer relevant to the account or transaction."
											}
										},
										"type": {
											"$ref": "#/components/schemas/rbit-types-v3_1"
										},
										"address": {
											"$ref": "#/components/schemas/rbits_address"
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"auto_billing": {
											"$ref": "#/components/schemas/shared_auto_billing"
										},
										"business_description": {
											"$ref": "#/components/schemas/shared_business_description"
										},
										"business_name": {
											"$ref": "#/components/schemas/shared_business_name"
										},
										"external_account": {
											"$ref": "#/components/schemas/shared_external_account"
										},
										"fundraising_event": {
											"$ref": "#/components/schemas/shared_fundraising_event"
										},
										"fundraising_update": {
											"$ref": "#/components/schemas/shared_fundraising_update"
										},
										"industry_code": {
											"$ref": "#/components/schemas/shared_industry_code"
										},
										"mfa": {
											"$ref": "#/components/schemas/shared_mfa"
										},
										"partner_service": {
											"$ref": "#/components/schemas/shared_partner_service"
										},
										"person": {
											"$ref": "#/components/schemas/shared_person"
										},
										"phone": {
											"$ref": "#/components/schemas/shared_rbits_phone"
										},
										"project": {
											"$ref": "#/components/schemas/shared_project"
										},
										"revenue": {
											"$ref": "#/components/schemas/shared_revenue"
										},
										"transaction_details": {
											"$ref": "#/components/schemas/shared_transaction_details"
										},
										"website": {
											"$ref": "#/components/schemas/shared_website"
										}
									},
									"required": [
										"id",
										"path",
										"owner",
										"resource",
										"create_time",
										"receive_time",
										"type",
										"source",
										"state"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /rbits call allows your platform to create an rbit for a user, account, or transaction. The rbits resource provides a way to communicate risk-related account and transaction level information between an application and WePay. An rbit contains risk related information about your users, their accounts, and their transactions.",
				"operationId": "POST_rbits",
				"requestBody": {
					"content": {
						"application/json": {
							"examples": {
								"v3.0": {
									"value": {
										"address": {
											"origin_address": {
												"city": "Palo Alto",
												"country": "US",
												"line1": "380 Portage Avenue",
												"postal_code": "93036",
												"region": "CA"
											}
										},
										"associated_resource": {
											"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
											"resource": "accounts"
										},
										"receive_time": 1367958263,
										"source": "guidestar",
										"type": "address"
									}
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"associated_resource": {
										"properties": {
											"id": {
												"$ref": "#/components/schemas/id"
											},
											"resource": {
												"$ref": "#/components/schemas/resource_types-rbit"
											}
										},
										"required": [
											"id",
											"resource"
										],
										"type": "object",
										"description": "The resource associated with this rbit."
									},
									"receive_time": {
										"type": "integer",
										"format": "int64",
										"minimum": 0,
										"description": "The time (in UNIX) when the data in this rbit was first obtained."
									},
									"source": {
										"$ref": "#/components/schemas/rbit-source"
									},
									"type": {
										"$ref": "#/components/schemas/rbit-types-v3_1"
									},
									"address": {
										"$ref": "#/components/schemas/rbits_address"
									},
									"auto_billing": {
										"$ref": "#/components/schemas/shared_auto_billing"
									},
									"business_description": {
										"$ref": "#/components/schemas/shared_business_description"
									},
									"business_name": {
										"$ref": "#/components/schemas/shared_business_name"
									},
									"external_account": {
										"$ref": "#/components/schemas/shared_external_account"
									},
									"fundraising_event": {
										"$ref": "#/components/schemas/shared_fundraising_event"
									},
									"fundraising_update": {
										"$ref": "#/components/schemas/shared_fundraising_update"
									},
									"industry_code": {
										"$ref": "#/components/schemas/shared_industry_code"
									},
									"mfa": {
										"$ref": "#/components/schemas/shared_mfa"
									},
									"partner_service": {
										"$ref": "#/components/schemas/shared_partner_service"
									},
									"person": {
										"$ref": "#/components/schemas/shared_person"
									},
									"phone": {
										"$ref": "#/components/schemas/shared_rbits_phone"
									},
									"project": {
										"$ref": "#/components/schemas/shared_project"
									},
									"revenue": {
										"$ref": "#/components/schemas/shared_revenue"
									},
									"transaction_details": {
										"$ref": "#/components/schemas/shared_transaction_details"
									},
									"website": {
										"$ref": "#/components/schemas/shared_website"
									}
								},
								"required": [
									"associated_resource",
									"receive_time",
									"type",
									"source"
								],
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create an rbit"
			},
			"get": {
				"tags": [
					"/rbits/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": "/rbits?page=AQQHAAEX8yf1HDkrXqO7R-wy2joNU6ooRNCyDb-sSbbvR-8J6jKeFgpqprcIsuEnBh4fqImpR2eYjKIgSCirw2mhEFR7m5AsSj1OkG9emNFWhXQvreOczuQU7UzZ",
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"create_time": 1390656130,
											"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
											"owner": {
												"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
												"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
												"resource": "accounts"
											},
											"path": "/rbits/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
											"phone": {
												"country_code": "+1",
												"phone_number": "5556667777",
												"phone_type": "business"
											},
											"receive_time": 1367958263,
											"resource": "rbits",
											"source": "guidestar",
											"state": "active",
											"type": "phone",
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. You can perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. You can perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"create_time": {
														"type": "integer",
														"format": "int64",
														"minimum": 0,
														"description": "The time (in UNIX) when the rbit was created."
													},
													"id": {
														"$ref": "#/components/schemas/rbit_id"
													},
													"owner": {
														"additionalProperties": false,
														"properties": {
															"id": {
																"type": "string",
																"description": "The ID of the [`associated_resource`](/api/latest/operation/POST_rbits/#!path=associated_resource/id&t=request) that your platform defined in the POST request to create this rBit."
															},
															"path": {
																"type": "string",
																"description": "Path of resource and resource ID."
															},
															"resource": {
																"$ref": "#/components/schemas/resource_types-rbit"
															}
														},
														"required": [
															"id",
															"resource",
															"path"
														],
														"type": "object",
														"description": "Details the owner resource and owner path."
													},
													"path": {
														"type": "string",
														"description": "Path of resource and resource ID."
													},
													"receive_time": {
														"type": "integer",
														"format": "int64",
														"minimum": 0,
														"description": "The time (in UNIX) when the data in this rbit was first obtained."
													},
													"resource": {
														"$ref": "#/components/schemas/resource-rbits"
													},
													"source": {
														"$ref": "#/components/schemas/rbit-source"
													},
													"state": {
														"enum": [
															"active",
															"deleted"
														],
														"type": "string",
														"description": "State of the rbit. Possible values include: `active`, `deleted`.",
														"x-enumDescriptions": {
															"active": "Identifies the rBit as current information pertinent to the account or transaction.",
															"deleted": "Identifies the rBit as removed or outdated information no longer relevant to the account or transaction."
														}
													},
													"type": {
														"$ref": "#/components/schemas/rbit-types-v3_1"
													},
													"address": {
														"$ref": "#/components/schemas/rbits_address"
													},
													"api_version": {
														"$ref": "#/components/schemas/api_version"
													},
													"auto_billing": {
														"$ref": "#/components/schemas/shared_auto_billing"
													},
													"business_description": {
														"$ref": "#/components/schemas/shared_business_description"
													},
													"business_name": {
														"$ref": "#/components/schemas/shared_business_name"
													},
													"external_account": {
														"$ref": "#/components/schemas/shared_external_account"
													},
													"fundraising_event": {
														"$ref": "#/components/schemas/shared_fundraising_event"
													},
													"fundraising_update": {
														"$ref": "#/components/schemas/shared_fundraising_update"
													},
													"industry_code": {
														"$ref": "#/components/schemas/shared_industry_code"
													},
													"mfa": {
														"$ref": "#/components/schemas/shared_mfa"
													},
													"partner_service": {
														"$ref": "#/components/schemas/shared_partner_service"
													},
													"person": {
														"$ref": "#/components/schemas/shared_person"
													},
													"phone": {
														"$ref": "#/components/schemas/shared_rbits_phone"
													},
													"project": {
														"$ref": "#/components/schemas/shared_project"
													},
													"revenue": {
														"$ref": "#/components/schemas/shared_revenue"
													},
													"transaction_details": {
														"$ref": "#/components/schemas/shared_transaction_details"
													},
													"website": {
														"$ref": "#/components/schemas/shared_website"
													}
												},
												"required": [
													"id",
													"path",
													"owner",
													"resource",
													"create_time",
													"receive_time",
													"type",
													"source",
													"state"
												],
												"type": "object"
											},
											"type": "array",
											"description": "An array of rbit objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"results",
										"next",
										"previous"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /rbits call allows your platform to look up a collection of rbits. The rbits resource provides a way to communicate risk-related account and transaction level information between an application and WePay. An rbit contains risk related information about your users, their accounts, and their transactions.",
				"operationId": "GET_rbits",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "Return elements owned by this owner ID.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "owner_type",
						"in": "query",
						"description": "Return elements owned by a resource of this type. **Required** if owner_id is provided.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of rbits"
			}
		},
		"/rbits/{id}": {
			"get": {
				"tags": [
					"/rbits/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.0": {
										"value": {
											"address": {
												"origin_address": {
													"city": "Palo Alto",
													"country": "US",
													"line1": "380 Portage Avenue",
													"postal_code": "93036",
													"region": "CA"
												}
											},
											"create_time": 1390656130,
											"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
											"owner": {
												"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
												"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
												"resource": "accounts"
											},
											"path": "/rbits/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
											"receive_time": 1367958263,
											"resource": "rbits",
											"source": "guidestar",
											"state": "active",
											"type": "address",
											"api_version": "3.0"
										}
									}
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"create_time": {
											"type": "integer",
											"format": "int64",
											"minimum": 0,
											"description": "The time (in UNIX) when the rbit was created."
										},
										"id": {
											"$ref": "#/components/schemas/rbit_id"
										},
										"owner": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"description": "The ID of the [`associated_resource`](/api/latest/operation/POST_rbits/#!path=associated_resource/id&t=request) that your platform defined in the POST request to create this rBit."
												},
												"path": {
													"type": "string",
													"description": "Path of resource and resource ID."
												},
												"resource": {
													"$ref": "#/components/schemas/resource_types-rbit"
												}
											},
											"required": [
												"id",
												"resource",
												"path"
											],
											"type": "object",
											"description": "Details the owner resource and owner path."
										},
										"path": {
											"type": "string",
											"description": "Path of resource and resource ID."
										},
										"receive_time": {
											"type": "integer",
											"format": "int64",
											"minimum": 0,
											"description": "The time (in UNIX) when the data in this rbit was first obtained."
										},
										"resource": {
											"$ref": "#/components/schemas/resource-rbits"
										},
										"source": {
											"$ref": "#/components/schemas/rbit-source"
										},
										"state": {
											"enum": [
												"active",
												"deleted"
											],
											"type": "string",
											"description": "State of the rbit. Possible values include: `active`, `deleted`.",
											"x-enumDescriptions": {
												"active": "Identifies the rBit as current information pertinent to the account or transaction.",
												"deleted": "Identifies the rBit as removed or outdated information no longer relevant to the account or transaction."
											}
										},
										"type": {
											"$ref": "#/components/schemas/rbit-types-v3_1"
										},
										"address": {
											"$ref": "#/components/schemas/rbits_address"
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"auto_billing": {
											"$ref": "#/components/schemas/shared_auto_billing"
										},
										"business_description": {
											"$ref": "#/components/schemas/shared_business_description"
										},
										"business_name": {
											"$ref": "#/components/schemas/shared_business_name"
										},
										"external_account": {
											"$ref": "#/components/schemas/shared_external_account"
										},
										"fundraising_event": {
											"$ref": "#/components/schemas/shared_fundraising_event"
										},
										"fundraising_update": {
											"$ref": "#/components/schemas/shared_fundraising_update"
										},
										"industry_code": {
											"$ref": "#/components/schemas/shared_industry_code"
										},
										"mfa": {
											"$ref": "#/components/schemas/shared_mfa"
										},
										"partner_service": {
											"$ref": "#/components/schemas/shared_partner_service"
										},
										"person": {
											"$ref": "#/components/schemas/shared_person"
										},
										"phone": {
											"$ref": "#/components/schemas/shared_rbits_phone"
										},
										"project": {
											"$ref": "#/components/schemas/shared_project"
										},
										"revenue": {
											"$ref": "#/components/schemas/shared_revenue"
										},
										"transaction_details": {
											"$ref": "#/components/schemas/shared_transaction_details"
										},
										"website": {
											"$ref": "#/components/schemas/shared_website"
										}
									},
									"required": [
										"id",
										"path",
										"owner",
										"resource",
										"create_time",
										"receive_time",
										"type",
										"source",
										"state"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /rbits/{id} call allows your platform to look up a single rbit. The rbits resource provides a way to communicate risk-related account and transaction level information between an application and WePay. An rbit contains risk related information about your users, their accounts, and their transactions.",
				"operationId": "GET_rbits-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get an rbit"
			},
			"delete": {
				"tags": [
					"/rbits/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"address": {
										"origin_address": {
											"city": "Palo Alto",
											"country": "US",
											"line1": "380 Portage Avenue",
											"postal_code": "93036",
											"region": "CA"
										}
									},
									"create_time": 1390656130,
									"id": "f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"owner": {
										"id": "d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"path": "/accounts/d7608b20-fea5-4eb5-bd30-d3f58435e78b",
										"resource": "accounts"
									},
									"path": "/rbits/f48cd8e6-e802-4500-a0f9-3ab6228c6f23",
									"receive_time": 1367958263,
									"resource": "rbits",
									"source": "guidestar",
									"state": "active",
									"type": "address",
									"api_version": "3.0"
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"create_time": {
											"type": "integer",
											"format": "int64",
											"minimum": 0,
											"description": "The time (in UNIX) when the rbit was created."
										},
										"id": {
											"$ref": "#/components/schemas/rbit_id"
										},
										"owner": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"description": "The ID of the [`associated_resource`](/api/latest/operation/POST_rbits/#!path=associated_resource/id&t=request) that your platform defined in the POST request to create this rBit."
												},
												"path": {
													"type": "string",
													"description": "Path of resource and resource ID."
												},
												"resource": {
													"$ref": "#/components/schemas/resource_types-rbit"
												}
											},
											"required": [
												"id",
												"resource",
												"path"
											],
											"type": "object",
											"description": "Details the owner resource and owner path."
										},
										"path": {
											"type": "string",
											"description": "Path of resource and resource ID."
										},
										"receive_time": {
											"type": "integer",
											"format": "int64",
											"minimum": 0,
											"description": "The time (in UNIX) when the data in this rbit was first obtained."
										},
										"resource": {
											"$ref": "#/components/schemas/resource-rbits"
										},
										"source": {
											"$ref": "#/components/schemas/rbit-source"
										},
										"state": {
											"enum": [
												"active",
												"deleted"
											],
											"type": "string",
											"description": "State of the rbit. Possible values include: `active`, `deleted`.",
											"x-enumDescriptions": {
												"active": "Identifies the rBit as current information pertinent to the account or transaction.",
												"deleted": "Identifies the rBit as removed or outdated information no longer relevant to the account or transaction."
											}
										},
										"type": {
											"$ref": "#/components/schemas/rbit-types-v3_1"
										},
										"address": {
											"$ref": "#/components/schemas/rbits_address"
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"auto_billing": {
											"$ref": "#/components/schemas/shared_auto_billing"
										},
										"business_description": {
											"$ref": "#/components/schemas/shared_business_description"
										},
										"business_name": {
											"$ref": "#/components/schemas/shared_business_name"
										},
										"external_account": {
											"$ref": "#/components/schemas/shared_external_account"
										},
										"fundraising_event": {
											"$ref": "#/components/schemas/shared_fundraising_event"
										},
										"fundraising_update": {
											"$ref": "#/components/schemas/shared_fundraising_update"
										},
										"industry_code": {
											"$ref": "#/components/schemas/shared_industry_code"
										},
										"mfa": {
											"$ref": "#/components/schemas/shared_mfa"
										},
										"partner_service": {
											"$ref": "#/components/schemas/shared_partner_service"
										},
										"person": {
											"$ref": "#/components/schemas/shared_person"
										},
										"phone": {
											"$ref": "#/components/schemas/shared_rbits_phone"
										},
										"project": {
											"$ref": "#/components/schemas/shared_project"
										},
										"revenue": {
											"$ref": "#/components/schemas/shared_revenue"
										},
										"transaction_details": {
											"$ref": "#/components/schemas/shared_transaction_details"
										},
										"website": {
											"$ref": "#/components/schemas/shared_website"
										}
									},
									"required": [
										"id",
										"path",
										"owner",
										"resource",
										"create_time",
										"receive_time",
										"type",
										"source",
										"state"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The DELETE /rbits call allows you to delete an rbit. The rbits resource provides a way to communicate risk-related account and transaction level information between an application and WePay. An rbit contains risk related information about your users, their accounts, and their transactions.",
				"operationId": "DELETE_rbits-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Delete an rbit"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"description": "ID of the rbit, generated by WePay when the rbit is created.",
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/recoveries": {
			"get": {
				"tags": [
					"/recoveries/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": null,
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"amount": 1000,
											"complete_time": 1278889965,
											"create_time": 1278889543,
											"currency": "USD",
											"custom_data": null,
											"failure_reason": null,
											"id": "bb109170-f401-44b0-8a8b-7abfd27e9f30",
											"owner": {
												"id": "67a88c34-7188-45f2-be1f-6a4fdeb21d77",
												"path": "/accounts/67a88c34-7188-45f2-be1f-6a4fdeb21d77",
												"resource": "accounts"
											},
											"path": "/recoveries/bb109170-f401-44b0-8a8b-7abfd27e9f30",
											"payout_method": {
												"id": "00000000-5553-0000-0000-000000000054",
												"path": "/payout_methods/00000000-5553-0000-0000-000000000054",
												"resource": "payout_methods"
											},
											"pending_reasons": null,
											"resource": "recoveries",
											"status": "completed",
											"txnr_failure": null,
											"txnr_recovery": {
												"id": "af39bc0e-28ee-4b01-8049-7d04fc6a32c7",
												"path": "/transaction_records/af39bc0e-28ee-4b01-8049-7d04fc6a32c7",
												"resource": "transaction_records"
											},
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/recoveries"
											},
											"type": "array",
											"description": "An array of recovery objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"previous",
										"next",
										"results"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /recoveries call allows your platform to look up a collection of recoveries. If a merchant's account balance is negative, Recoveries automatically debit a merchant's Payout Method to bring the balance up to $0. Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `recoveries.created` Notification event topic in order to programmatically integrate new Recoveries that WePay attempts from the merchant's Payout Method.",
				"operationId": "GET_recoveries",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "Return elements owned by this resource instance.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "payout_method_type",
						"in": "query",
						"description": "Payout method used to recover funds.",
						"schema": {
							"enum": [
								"payout_bank_ca",
								"payout_bank_gb",
								"payout_bank_us",
								"paper_check"
							],
							"x-enumDescriptions": {
								"payout_bank_ca": "Bank account in Canada.",
								"payout_bank_gb": "Bank account in the UK (not currently supported).",
								"payout_bank_us": "Bank account in the US.",
								"paper_check": "Paper check delivered to an address in the US."
							},
							"type": "string"
						}
					},
					{
						"name": "payout_method_id",
						"in": "query",
						"description": "ID of the payout method used to recover funds.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "Status of the recovery.",
						"schema": {
							"enum": [
								"pending",
								"completed",
								"failed"
							],
							"x-enumDescriptions": {
								"pending": "WePay has started processing the recovery, but it is not yet available. Find more details in the `pending_reasons` structure.",
								"completed": "WePay has processed the recovery. Note that a recovery's status can change from `completed` to `failed` if the issuing bank rejects the debit.",
								"failed": "WePay could not process the recovery. Find more information in the `failure_reason` structure."
							},
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of recoveries"
			}
		},
		"/recoveries/{id}": {
			"get": {
				"tags": [
					"/recoveries/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 1000,
									"complete_time": 1278889965,
									"create_time": 1278889543,
									"currency": "USD",
									"custom_data": null,
									"failure_reason": null,
									"id": "bb109170-f401-44b0-8a8b-7abfd27e9f30",
									"owner": {
										"id": "67a88c34-7188-45f2-be1f-6a4fdeb21d77",
										"path": "/accounts/67a88c34-7188-45f2-be1f-6a4fdeb21d77",
										"resource": "accounts"
									},
									"path": "/recoveries/bb109170-f401-44b0-8a8b-7abfd27e9f30",
									"payout_method": {
										"id": "00000000-5553-0000-0000-000000000054",
										"path": "/payout_methods/00000000-5553-0000-0000-000000000054",
										"resource": "payout_methods"
									},
									"pending_reasons": null,
									"resource": "recoveries",
									"status": "completed",
									"txnr_failure": null,
									"txnr_recovery": {
										"id": "af39bc0e-28ee-4b01-8049-7d04fc6a32c7",
										"path": "/transaction_records/af39bc0e-28ee-4b01-8049-7d04fc6a32c7",
										"resource": "transaction_records"
									},
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/recoveries"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /recoveries/{id} call allows your platform to look up information on a single recovery. If a merchant's account balance is negative, Recoveries automatically debit a merchant's Payout Method to bring the balance up to $0. Be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `recoveries.created` Notification event topic in order to programmatically integrate new Recoveries that WePay attempts from the merchant's Payout Method.",
				"operationId": "GET_recoveries-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a recovery"
			},
			"post": {
				"tags": [
					"/recoveries/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amount": 1000,
									"complete_time": 1278889965,
									"create_time": 1278889543,
									"currency": "USD",
									"custom_data": {
										"receipt_number": 1258372
									},
									"failure_reason": null,
									"id": "bb109170-f401-44b0-8a8b-7abfd27e9f30",
									"owner": {
										"id": "67a88c34-7188-45f2-be1f-6a4fdeb21d77",
										"path": "/accounts/67a88c34-7188-45f2-be1f-6a4fdeb21d77",
										"resource": "accounts"
									},
									"path": "/recoveries/bb109170-f401-44b0-8a8b-7abfd27e9f30",
									"payout_method": {
										"id": "00000000-5553-0000-0000-000000000054",
										"path": "/payout_methods/00000000-5553-0000-0000-000000000054",
										"resource": "payout_methods"
									},
									"pending_reasons": null,
									"resource": "recoveries",
									"status": "completed",
									"txnr_failure": null,
									"txnr_recovery": {
										"id": "af39bc0e-28ee-4b01-8049-7d04fc6a32c7",
										"path": "/transaction_records/af39bc0e-28ee-4b01-8049-7d04fc6a32c7",
										"resource": "transaction_records"
									},
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/recoveries"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /recoveries/{id} call allows your platform to update and add custom data to a recovery. The recovery resource notifies your platform that WePay made a recovery attempt to a merchant’s bank account in order to bring their balance up to $0.",
				"operationId": "POST_recoveries-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"custom_data": {
									"receipt_number": 1258372
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update a recovery"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the recovery, generated by WePay when the recovery is created."
				}
			]
		},
		"/refunds": {
			"get": {
				"tags": [
					"/refunds/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": null,
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"amounts": {
												"total_amount": 100,
												"currency": "USD",
												"fee_refund_amount": 0
											},
											"create_time": 1509140695,
											"custom_data": null,
											"failure_reason": null,
											"id": "9b53d5fd-17b1-400c-b197-3204f4d6171c",
											"order": null,
											"owner": {
												"id": "40200612-e849-4172-8308-657cf3a0de27",
												"path": "/accounts/40200612-e849-4172-8308-657cf3a0de2",
												"resource": "accounts"
											},
											"path": "/refunds/9b53d5fd-17b1-400c-b197-3204f4d6171c",
											"payment": {
												"id": "a8ca756e-5a62-4c2a-80fd-9b82563d47cb",
												"path": "/payments/a8ca756e-5a62-4c2a-80fd-9b82563d47cb",
												"resource": "payments"
											},
											"payment_method": {
												"id": "00000000-6363-0000-0000-0000c27db2f3",
												"path": "/payment_methods/00000000-6363-0000-0000-0000c27db2f3",
												"resource": "payment_methods"
											},
											"pending_reasons": null,
											"refund_reason": "example refund reason",
											"resource": "refunds",
											"status": "completed",
											"txnr_app_fee_refund": null,
											"txnr_merchant_refund": {
												"id": "7c59ebf4-d6ae-4125-85f8-515b95725501",
												"path": "/transaction_records/7c59ebf4-d6ae-4125-85f8-515b95725501",
												"resource": "transaction_records"
											},
											"api_version": "3.0",
											"reference_id": "reference_id_0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/refund-resp"
											},
											"type": "array",
											"description": "An array of refund objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"previous",
										"next",
										"results"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /refunds call allows your platform to look up a collection of refunds. Refunds facilitate the return of money from the merchant to the payer.",
				"operationId": "GET_refunds",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "minimum_amount",
						"in": "query",
						"description": "Define the minimum value of the `amount` parameter you wish to see for returned Refunds (inclusive).",
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "maximum_amount",
						"in": "query",
						"description": "Define the maximum value of the `amount` parameter you wish to see for returned Refunds (inclusive).",
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "The ID of the owner of the resource.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "payment_method_type",
						"in": "query",
						"description": "The payment method type to filter by.",
						"schema": {
							"enum": [
								"credit_card",
								"payment_bank_us"
							],
							"x-enumDescriptions": {
								"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
								"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
								"payment_bank_ca": {
									"description": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
									"x-versions": [
										"v3.0.rc.2.2"
									]
								}
							},
							"type": "string"
						}
					},
					{
						"name": "payment_method_id",
						"in": "query",
						"description": "The payment method ID to filter by.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "The status of refunds to return.",
						"schema": {
							"enum": [
								"pending",
								"completed",
								"failed"
							],
							"x-enumDescriptions": {
								"pending": "",
								"completed": "",
								"failed": ""
							},
							"type": "string"
						}
					},
					{
						"name": "payment_id",
						"in": "query",
						"description": "The payment ID to filter by.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "reference_id",
						"in": "query",
						"description": "The reference_id to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "Pass the `payment_method` value to expand the response to include the payment method's `card_brand` and `last_four`.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of refunds"
			},
			"post": {
				"tags": [
					"/refunds/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amounts": {
										"total_amount": 100,
										"currency": "USD",
										"fee_refund_amount": 0
									},
									"create_time": 1509140695,
									"custom_data": null,
									"failure_reason": null,
									"id": "9b53d5fd-17b1-400c-b197-3204f4d6171c",
									"order": null,
									"owner": {
										"id": "40200612-e849-4172-8308-657cf3a0de27",
										"path": "/accounts/40200612-e849-4172-8308-657cf3a0de2",
										"resource": "accounts"
									},
									"path": "/refunds/9b53d5fd-17b1-400c-b197-3204f4d6171c",
									"payment": {
										"id": "a8ca756e-5a62-4c2a-80fd-9b82563d47cb",
										"path": "/payments/a8ca756e-5a62-4c2a-80fd-9b82563d47cb",
										"resource": "payments"
									},
									"payment_method": {
										"id": "00000000-6363-0000-0000-0000c27db2f3",
										"path": "/payment_methods/00000000-6363-0000-0000-0000c27db2f3",
										"resource": "payment_methods"
									},
									"pending_reasons": null,
									"refund_reason": "example refund reason",
									"resource": "refunds",
									"status": "completed",
									"txnr_app_fee_refund": null,
									"txnr_merchant_refund": {
										"id": "7c59ebf4-d6ae-4125-85f8-515b95725501",
										"path": "/transaction_records/7c59ebf4-d6ae-4125-85f8-515b95725501",
										"resource": "transaction_records"
									},
									"api_version": "3.0",
									"reference_id": "reference_id_0"
								},
								"schema": {
									"$ref": "#/components/schemas/refund-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, PAYMENT_CANNOT_BE_REFUNDED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /refunds call allows your platform to create a new refund. Refunds facilitate the return of money from the merchant to the payer. **Note:** A Payment must be created within the last 60 days **and** have a `status` of `complete` in order to refund it. If your platform has a custom refund limit, then use that number instead.",
				"operationId": "POST_refunds",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"amounts": {
									"total_amount": 300,
									"currency": "USD",
									"fee_refund_amount": 50
								},
								"order_id": "ordr-123-abc",
								"payment_id": "18752aba-25d0-4328-aac9-a0ba7216eb67",
								"refund_reason": "Item(s) returned",
								"reference_id": "reference_id_0"
							},
							"schema": {
								"$ref": "#/components/schemas/refunds_create_data"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create a refund"
			}
		},
		"/refunds/{id}": {
			"get": {
				"tags": [
					"/refunds/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amounts": {
										"total_amount": 100,
										"currency": "USD",
										"fee_refund_amount": 0
									},
									"create_time": 1509140695,
									"custom_data": null,
									"failure_reason": null,
									"id": "9b53d5fd-17b1-400c-b197-3204f4d6171c",
									"order": null,
									"owner": {
										"id": "40200612-e849-4172-8308-657cf3a0de27",
										"path": "/accounts/40200612-e849-4172-8308-657cf3a0de2",
										"resource": "accounts"
									},
									"path": "/refunds/9b53d5fd-17b1-400c-b197-3204f4d6171c",
									"payment": {
										"id": "a8ca756e-5a62-4c2a-80fd-9b82563d47cb",
										"path": "/payments/a8ca756e-5a62-4c2a-80fd-9b82563d47cb",
										"resource": "payments"
									},
									"payment_method": {
										"id": "00000000-6363-0000-0000-0000c27db2f3",
										"path": "/payment_methods/00000000-6363-0000-0000-0000c27db2f3",
										"resource": "payment_methods"
									},
									"pending_reasons": null,
									"refund_reason": "example refund reason",
									"resource": "refunds",
									"status": "completed",
									"txnr_app_fee_refund": null,
									"txnr_merchant_refund": {
										"id": "7c59ebf4-d6ae-4125-85f8-515b95725501",
										"path": "/transaction_records/7c59ebf4-d6ae-4125-85f8-515b95725501",
										"resource": "transaction_records"
									},
									"api_version": "3.0",
									"reference_id": "reference_id_0"
								},
								"schema": {
									"$ref": "#/components/schemas/refund-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /refunds/{id} call allows your platform to look up a single refund. Refunds facilitate the return of money from the merchant to the payer.",
				"operationId": "GET_refunds-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "Pass the `payment_method` value to expand the response to include the payment method's `card_brand` and `last_four`.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a refund"
			},
			"post": {
				"tags": [
					"/refunds/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"amounts": {
										"total_amount": 100,
										"currency": "USD",
										"fee_refund_amount": 0
									},
									"create_time": 1509140695,
									"custom_data": {
										"order_id": 34211134828443
									},
									"failure_reason": null,
									"id": "021f2604-ef1e-4254-959b-54babd066830",
									"order": null,
									"owner": {
										"id": "40200612-e849-4172-8308-657cf3a0de27",
										"path": "/accounts/40200612-e849-4172-8308-657cf3a0de27",
										"resource": "accounts"
									},
									"path": "/refunds/021f2604-ef1e-4254-959b-54babd066830",
									"payment": {
										"id": "18e72698-eb94-4418-bfff-e4280d55953b",
										"path": "/payments/18e72698-eb94-4418-bfff-e4280d55953b",
										"resource": "payments"
									},
									"payment_method": {
										"id": "00000000-6363-0000-0000-0000c27db2f3",
										"path": "/payment_methods/00000000-6363-0000-0000-0000c27db2f3",
										"resource": "payment_methods"
									},
									"pending_reasons": null,
									"refund_reason": "example refund reason",
									"resource": "refunds",
									"status": "completed",
									"txnr_app_fee_refund": null,
									"txnr_merchant_refund": {
										"id": "3afd82e3-714d-4c5d-a43b-6446ed6689cd",
										"path": "/transaction_records/3afd82e3-714d-4c5d-a43b-6446ed6689cd",
										"resource": "transaction_records"
									},
									"api_version": "3.0",
									"reference_id": "reference_id_0"
								},
								"schema": {
									"$ref": "#/components/schemas/refund-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /refunds/{id} call allows your platform to update and add custom data to a refund. Refunds facilitate the return of money from the merchant to the payer.",
				"operationId": "POST_refunds-id",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"custom_data": {
									"order_id": 34211134828443
								},
								"reference_id": "reference_id_0"
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"custom_data": {
										"$ref": "#/components/schemas/custom_data"
									},
									"rbits": {
										"$ref": "#/components/schemas/embedded-rbits"
									},
									"reference_id": {
										"$ref": "#/components/schemas/reference_id"
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Update a refund"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the refund, generated by WePay when the refund is created."
				}
			]
		},
		"/session_tokens": {
			"post": {
				"tags": [
					"/session_tokens/*"
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.1.mobile_session": {
										"value": {
											"id": "00000000-0000-0000-0000-0000260bb8c8",
											"session_token": "prod_MTA3X2U0NmQ1OTg5LWZlMDctNGNhOC1iMzQyLTdlNjI1ODBlYTlhYg",
											"expire_time": 1560544108,
											"path": "/session_tokens/00000000-0000-0000-0000-0000260bb8c8",
											"resource": "session_tokens",
											"owner": {
												"id": "eba1ce8e-8ba8-4503-8f3f-70a5df29bbdf",
												"path": "/accounts/eba1ce8e-8ba8-4503-8f3f-70a5df29bbdf",
												"resource": "accounts"
											},
											"create_time": 1560543108,
											"api_version": "3.0",
											"state": "active",
											"type": "mobile_session",
											"mobile_session": {
												"time_to_live": 86400,
												"account_id": "eba1ce8e-8ba8-4503-8f3f-70a5df29bbdf"
											}
										}
									},
									"v3.1.api_session": {
										"value": {
											"id": "00000000-0000-0000-0000-0000767bf5cd",
											"path": "session_tokens/00000000-0000-0000-0000-0000767bf5cd",
											"resource": "session_tokens",
											"type": "api_session",
											"session_token": "prod_MjQ4XzMwODMxNjFkLTk4M2EtNGUxZS1iOTc5LTZmZjExNzAwYjQ2MA",
											"owner": {
												"id": "153142",
												"path": null,
												"resource": "applications"
											},
											"api_session": {
												"scopes": [
													{
														"endpoint": "payments",
														"method": "POST"
													},
													{
														"endpoint": "payments",
														"method": "GET"
													},
													{
														"endpoint": "payment_methods",
														"method": "POST"
													}
												],
												"time_to_live": 1800
											},
											"state": "active",
											"api_version": "3.1",
											"create_time": 1604680674,
											"expire_time": 1604682474
										}
									}
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"create_time": {
											"$ref": "#/components/schemas/create_time"
										},
										"expire_time": {
											"type": "integer",
											"format": "int64",
											"minimum": 0,
											"description": "The UNIX timestamp in seconds that indicates when the session token will expire."
										},
										"id": {
											"$ref": "#/components/schemas/id"
										},
										"owner": {
											"$ref": "#/components/schemas/shared_owner_response"
										},
										"path": {
											"$ref": "#/components/schemas/path-nullable"
										},
										"resource": {
											"$ref": "#/components/schemas/resource-session_tokens"
										},
										"session_token": {
											"type": "string",
											"description": "When using mobile card readers, a string that should be passed to the WePay Card Present SDK during initialization and when refreshing a session."
										},
										"state": {
											"enum": [
												"active",
												"deleted"
											],
											"type": "string",
											"x-enumDescriptions": {
												"active": "The token was successfully generated and has not yet been deleted by your app with a DELETE request.",
												"deleted": "The session token was deleted by your app with a DELETE request."
											},
											"description": "Describes the state of session token. Can be either `active` or `deleted`."
										},
										"type": {
											"enum": [
												"mobile_session",
												"api_session"
											],
											"type": "string",
											"x-enumDescriptions": {
												"mobile_session": "Session token which associates a mobile card reader with a merchant account.",
												"api_session": "A session token created for the API use case (as opposed to Card Present use case)."
											},
											"description": "Describes the type of session token. Can be either `api_session` or `mobile_session`.",
											"x-isOneOfKey": true
										},
										"api_session": {
											"additionalProperties": false,
											"properties": {
												"scopes": {
													"items": {
														"additionalProperties": false,
														"properties": {
															"endpoint": {
																"type": "string",
																"enum": [
																	"accounts",
																	"accounts/{id}",
																	"accounts/{id}/capabilities",
																	"legal_entities",
																	"legal_entities/{id}",
																	"legal_entities/{id}/set_controller_password",
																	"legal_entities/{id}/verifications",
																	"payouts",
																	"payouts/{id}",
																	"payout_methods",
																	"payout_methods/{id}",
																	"adjustments",
																	"adjustments/{id}",
																	"disputes",
																	"disputes/{id}",
																	"disputes/{id}/concede",
																	"documents",
																	"recoveries",
																	"recoveries/{id}",
																	"transaction_records",
																	"transaction_records/{id}",
																	"billing_statements",
																	"billing_statements/{id}",
																	"billing_statements/{id}/fees_summary",
																	"billing_statements/{id}/transactions_summary",
																	"terminals",
																	"terminals/{id}",
																	"terminals/{id}/activate",
																	"terminals/{id}/deactivate",
																	"tokens",
																	"items",
																	"items/{id}",
																	"orders",
																	"orders/{id}",
																	"rbits",
																	"rbits/{id}",
																	"notifications",
																	"notifications/{id}",
																	"notification_preferences",
																	"notification_preferences/{id}",
																	"payments",
																	"payments/{id}",
																	"payments/{id}/cancel",
																	"payments/{id}/capture",
																	"payment_methods",
																	"payment_methods/{id}",
																	"payment_methods/{id}/verify_bank_deposits",
																	"refunds",
																	"refunds/{id}"
																],
																"x-enumDescriptions": {
																	"accounts": "",
																	"accounts/{id}": "",
																	"accounts/{id}/capabilities": "",
																	"legal_entities": "",
																	"legal_entities/{id}": "",
																	"legal_entities/{id}/set_controller_password": "",
																	"legal_entities/{id}/verifications": "",
																	"payouts": "",
																	"payouts/{id}": "",
																	"payout_methods": "",
																	"payout_methods/{id}": "",
																	"adjustments": "",
																	"adjustments/{id}": "",
																	"disputes": "",
																	"disputes/{id}": "",
																	"disputes/{id}/concede": "",
																	"documents": "The endpoint for uploading documents",
																	"recoveries": "",
																	"recoveries/{id}": "",
																	"transaction_records": "",
																	"transaction_records/{id}": "",
																	"billing_statements": "",
																	"billing_statements/{id}": "",
																	"billing_statements/{id}/fees_summary": "",
																	"billing_statements/{id}/transactions_summary": "",
																	"terminals": "",
																	"terminals/{id}": "",
																	"terminals/{id}/activate": "",
																	"terminals/{id}/deactivate": "",
																	"tokens": "",
																	"items": "",
																	"items/{id}": "",
																	"orders": "",
																	"orders/{id}": "",
																	"rbits": "",
																	"rbits/{id}": "",
																	"notifications": "",
																	"notifications/{id}": "",
																	"notification_preferences": "",
																	"notification_preferences/{id}": "",
																	"payments": "",
																	"payments/{id}": "",
																	"payments/{id}/cancel": "",
																	"payments/{id}/capture": "",
																	"payment_methods": "",
																	"payment_methods/{id}": "",
																	"payment_methods/{id}/verify_bank_deposits": "",
																	"refunds": "",
																	"refunds/{id}": ""
																},
																"description": "List of endpoints which the session token should allow access for."
															},
															"method": {
																"enum": [
																	"GET",
																	"POST",
																	"DELETE"
																],
																"type": "string",
																"x-enumDescriptions": {
																	"GET": "Specifies the GET HTTP Method",
																	"POST": "Specifies the POST HTTP Method",
																	"DELETE": "Specifies the DELETE HTTP Method"
																}
															}
														},
														"required": [
															"endpoint",
															"method"
														],
														"type": "object"
													},
													"type": "array"
												},
												"time_to_live": {
													"type": "integer",
													"nullable": false,
													"format": "int64",
													"minimum": 0,
													"maximum": 1800,
													"description": "The number of seconds to determine when the token will expire."
												}
											},
											"required": [
												"scopes"
											],
											"type": "object",
											"description": "A session token created for the API use case (as opposed to Card Present use case)."
										},
										"mobile_session": {
											"additionalProperties": false,
											"properties": {
												"account_id": {
													"$ref": "#/components/schemas/id"
												},
												"time_to_live": {
													"type": "integer",
													"nullable": false,
													"format": "int64",
													"minimum": 0,
													"maximum": 86400,
													"description": "The number of seconds to determine when the token will expire."
												}
											},
											"required": [
												"account_id",
												"time_to_live"
											],
											"type": "object"
										}
									},
									"required": [
										"id",
										"session_token",
										"expire_time",
										"path",
										"owner",
										"resource",
										"create_time",
										"api_version",
										"state",
										"type"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The POST /session_tokens request generates a session token which associates a mobile card reader with a merchant account.",
				"operationId": "POST_session_tokens",
				"requestBody": {
					"content": {
						"application/json": {
							"examples": {
								"v3.1.mobile_session": {
									"value": {
										"type": "mobile_session",
										"mobile_session": {
											"account_id": "c9536e75-fce8-44e0-94dd-9bc0cdd52d6c"
										}
									}
								},
								"v3.1.api_session": {
									"value": {
										"type": "api_session",
										"api_session": {
											"scopes": [
												{
													"endpoint": "documents",
													"method": "POST"
												}
											]
										}
									}
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"type": {
										"enum": [
											"mobile_session",
											"api_session"
										],
										"type": "string",
										"x-enumDescriptions": {
											"mobile_session": "Session token which associates a mobile card reader with a merchant account.",
											"api_session": "A session token created for the API use case (as opposed to Card Present use case)."
										},
										"description": "Describes the type of session token. Can be either `api_session` or `mobile_session`.",
										"x-isOneOfKey": true
									},
									"api_session": {
										"additionalProperties": false,
										"properties": {
											"scopes": {
												"items": {
													"additionalProperties": false,
													"properties": {
														"endpoint": {
															"type": "string",
															"enum": [
																"accounts",
																"accounts/{id}",
																"accounts/{id}/capabilities",
																"legal_entities",
																"legal_entities/{id}",
																"legal_entities/{id}/set_controller_password",
																"legal_entities/{id}/verifications",
																"payouts",
																"payouts/{id}",
																"payout_methods",
																"payout_methods/{id}",
																"adjustments",
																"adjustments/{id}",
																"disputes",
																"disputes/{id}",
																"disputes/{id}/concede",
																"documents",
																"recoveries",
																"recoveries/{id}",
																"transaction_records",
																"transaction_records/{id}",
																"billing_statements",
																"billing_statements/{id}",
																"billing_statements/{id}/fees_summary",
																"billing_statements/{id}/transactions_summary",
																"terminals",
																"terminals/{id}",
																"terminals/{id}/activate",
																"terminals/{id}/deactivate",
																"tokens",
																"items",
																"items/{id}",
																"orders",
																"orders/{id}",
																"rbits",
																"rbits/{id}",
																"notifications",
																"notifications/{id}",
																"notification_preferences",
																"notification_preferences/{id}",
																"payments",
																"payments/{id}",
																"payments/{id}/cancel",
																"payments/{id}/capture",
																"payment_methods",
																"payment_methods/{id}",
																"payment_methods/{id}/verify_bank_deposits",
																"refunds",
																"refunds/{id}"
															],
															"x-enumDescriptions": {
																"accounts": "",
																"accounts/{id}": "",
																"accounts/{id}/capabilities": "",
																"legal_entities": "",
																"legal_entities/{id}": "",
																"legal_entities/{id}/set_controller_password": "",
																"legal_entities/{id}/verifications": "",
																"payouts": "",
																"payouts/{id}": "",
																"payout_methods": "",
																"payout_methods/{id}": "",
																"adjustments": "",
																"adjustments/{id}": "",
																"disputes": "",
																"disputes/{id}": "",
																"disputes/{id}/concede": "",
																"documents": "The endpoint for uploading documents",
																"recoveries": "",
																"recoveries/{id}": "",
																"transaction_records": "",
																"transaction_records/{id}": "",
																"billing_statements": "",
																"billing_statements/{id}": "",
																"billing_statements/{id}/fees_summary": "",
																"billing_statements/{id}/transactions_summary": "",
																"terminals": "",
																"terminals/{id}": "",
																"terminals/{id}/activate": "",
																"terminals/{id}/deactivate": "",
																"tokens": "",
																"items": "",
																"items/{id}": "",
																"orders": "",
																"orders/{id}": "",
																"rbits": "",
																"rbits/{id}": "",
																"notifications": "",
																"notifications/{id}": "",
																"notification_preferences": "",
																"notification_preferences/{id}": "",
																"payments": "",
																"payments/{id}": "",
																"payments/{id}/cancel": "",
																"payments/{id}/capture": "",
																"payment_methods": "",
																"payment_methods/{id}": "",
																"payment_methods/{id}/verify_bank_deposits": "",
																"refunds": "",
																"refunds/{id}": ""
															},
															"description": "List of endpoints which the session token should allow access for."
														},
														"method": {
															"enum": [
																"GET",
																"POST",
																"DELETE"
															],
															"type": "string",
															"x-enumDescriptions": {
																"GET": "Specifies the GET HTTP Method",
																"POST": "Specifies the POST HTTP Method",
																"DELETE": "Specifies the DELETE HTTP Method"
															}
														}
													},
													"required": [
														"endpoint",
														"method"
													],
													"type": "object"
												},
												"type": "array"
											},
											"time_to_live": {
												"type": "integer",
												"nullable": false,
												"format": "int64",
												"minimum": 0,
												"maximum": 1800,
												"description": "The number of seconds to determine when the token will expire."
											}
										},
										"required": [
											"scopes"
										],
										"type": "object",
										"description": "A session token created for the API use case (as opposed to Card Present use case)."
									},
									"mobile_session": {
										"additionalProperties": false,
										"properties": {
											"account_id": {
												"$ref": "#/components/schemas/id"
											}
										},
										"required": [
											"account_id"
										],
										"type": "object"
									}
								},
								"required": [
									"type"
								],
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Client-IP",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Create a session token"
			},
			"get": {
				"tags": [
					"/session_tokens/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.1.mobile_session": {
										"value": {
											"previous": null,
											"next": "/session_tokens?page=eyJ0eXBlIjogbnVsbCwgImFjY291bnRfaWQiOiBudWxsLCAiY3JlYXRlX3RpbWVfc3RhcnQiOiAiMTk3MC0wMS0wMSAwMDowMDowMCIsICJjcmVhdGVfdGltZV9lbmQiOiAiMjAyMS0wNC0yMyAxNzozMDoxNS4xMDkxNDQiLCAic3RhdGUiOiBudWxsLCAicGFnZSI6IDIsICJwYWdlX3NpemUiOiAxMH0",
											"results": [
												{
													"id": "614cc73c-9eda-41e1-a5b2-807e4a905775",
													"path": "/session_tokens/614cc73c-9eda-41e1-a5b2-807e4a905775",
													"resource": "session_tokens",
													"type": "mobile_session",
													"owner": {
														"id": "64a7b013-0e9b-4e30-abff-60e909984c43",
														"resource": "accounts",
														"path": "/accounts/64a7b013-0e9b-4e30-abff-60e909984c43"
													},
													"state": "active",
													"api_version": "3.0",
													"create_time": 1619198505,
													"expire_time": 1619284905,
													"session_token": "stg_MTA0X2Y3NjM4OTAxLWFiNGUtNDA4OC1hYTQyLWM3YjE5YzllYWExNA",
													"mobile_session": {
														"time_to_live": 86400,
														"account_id": "64a7b013-0e9b-4e30-abff-60e909984c43"
													}
												},
												{
													"id": "849325b7-15c8-4651-8e31-c1faf02e8beb",
													"path": "/session_tokens/849325b7-15c8-4651-8e31-c1faf02e8beb",
													"resource": "session_tokens",
													"type": "mobile_session",
													"owner": {
														"id": "ebd7890d-a2a1-4cac-9030-d9e0ffd3c33b",
														"resource": "accounts",
														"path": "/accounts/ebd7890d-a2a1-4cac-9030-d9e0ffd3c33b"
													},
													"state": "active",
													"api_version": "3.0",
													"create_time": 1619196329,
													"expire_time": 1619282729,
													"session_token": "stg_MTAzXzY5YjhkYmNlLTlmMGUtNDQ3ZS05MTUxLWMwOGIwMWM5ZGNlNg",
													"mobile_session": {
														"time_to_live": 86400,
														"account_id": "ebd7890d-a2a1-4cac-9030-d9e0ffd3c33b"
													}
												},
												{
													"id": "85c3dce9-8d17-4cc5-bb53-1cca2301f801",
													"path": "/session_tokens/85c3dce9-8d17-4cc5-bb53-1cca2301f801",
													"resource": "session_tokens",
													"type": "mobile_session",
													"owner": {
														"id": "074544b1-0bb2-4989-9e27-773063ba1bbf",
														"resource": "accounts",
														"path": "/accounts/074544b1-0bb2-4989-9e27-773063ba1bbf"
													},
													"state": "active",
													"api_version": "3.0",
													"create_time": 1619196314,
													"expire_time": 1619282714,
													"session_token": "stg_MTAyX2RjN2Q0NTJkLTk0YTctNGZhOC05NDViLWVlMjdmZDI0MDM2Mg",
													"mobile_session": {
														"time_to_live": 86400,
														"account_id": "074544b1-0bb2-4989-9e27-773063ba1bbf"
													}
												},
												{
													"id": "1f60cd21-703b-440d-b469-9b6791ece86b",
													"path": "/session_tokens/1f60cd21-703b-440d-b469-9b6791ece86b",
													"resource": "session_tokens",
													"type": "mobile_session",
													"owner": {
														"id": "f62dce34-9f09-4442-a3d5-ffde5217a72e",
														"resource": "accounts",
														"path": "/accounts/f62dce34-9f09-4442-a3d5-ffde5217a72e"
													},
													"state": "active",
													"api_version": "3.0",
													"create_time": 1619184586,
													"expire_time": 1619270986,
													"session_token": "stg_MTAxX2QzYmY2ZWQzLTBhNzMtNDY4My04NTE2LWRkMTkxNjE5OGJmMg",
													"mobile_session": {
														"time_to_live": 86400,
														"account_id": "f62dce34-9f09-4442-a3d5-ffde5217a72e"
													}
												},
												{
													"id": "fc02e9a6-c081-42a2-8470-a335e022ea09",
													"path": "/session_tokens/fc02e9a6-c081-42a2-8470-a335e022ea09",
													"resource": "session_tokens",
													"type": "mobile_session",
													"owner": {
														"id": "4c8e5932-5606-4fb3-aeb3-c6abffdccf83",
														"resource": "accounts",
														"path": "/accounts/4c8e5932-5606-4fb3-aeb3-c6abffdccf83"
													},
													"state": "active",
													"api_version": "3.0",
													"create_time": 1619137135,
													"expire_time": 1619223535,
													"session_token": "stg_MTAwX2MzZWRhYWVjLWZjNTEtNGQ2OS1hNGVjLTBjZmZlYmMyMjZhZg",
													"mobile_session": {
														"time_to_live": 86400,
														"account_id": "4c8e5932-5606-4fb3-aeb3-c6abffdccf83"
													}
												},
												{
													"id": "8ea519af-c993-49ca-8b3e-cbc94b2e5d6b",
													"path": "/session_tokens/8ea519af-c993-49ca-8b3e-cbc94b2e5d6b",
													"resource": "session_tokens",
													"type": "mobile_session",
													"owner": {
														"id": "8fd3f37c-9369-463e-be66-d206a04e9b9b",
														"resource": "accounts",
														"path": "/accounts/8fd3f37c-9369-463e-be66-d206a04e9b9b"
													},
													"state": "deleted",
													"api_version": "3.0",
													"create_time": 1619135026,
													"expire_time": 1619221426,
													"session_token": "stg_OTdfYzhhZDM0YjgtNGRhOC00YzQ4LTk4NGItNzUxNzUxNDViYTZk",
													"mobile_session": {
														"time_to_live": 86400,
														"account_id": "8fd3f37c-9369-463e-be66-d206a04e9b9b"
													}
												},
												{
													"id": "d0180caf-94ea-4e76-b18c-f25478ab4285",
													"path": "/session_tokens/d0180caf-94ea-4e76-b18c-f25478ab4285",
													"resource": "session_tokens",
													"type": "mobile_session",
													"owner": {
														"id": "1a106081-8dd9-417a-bb2f-98e3e78a4d08",
														"resource": "accounts",
														"path": "/accounts/1a106081-8dd9-417a-bb2f-98e3e78a4d08"
													},
													"state": "active",
													"api_version": "3.0",
													"create_time": 1619135006,
													"expire_time": 1619221406,
													"session_token": "stg_OTZfZDI3MWY3NGItNDgxOS00ZGVkLTljZWMtMzUzOWEzMmQzMDY3",
													"mobile_session": {
														"time_to_live": 86400,
														"account_id": "1a106081-8dd9-417a-bb2f-98e3e78a4d08"
													}
												},
												{
													"id": "91171091-08f7-4543-a489-b9e8d40df638",
													"path": "/session_tokens/91171091-08f7-4543-a489-b9e8d40df638",
													"resource": "session_tokens",
													"type": "mobile_session",
													"owner": {
														"id": "b5fe9ef2-3736-41ec-a0f1-17b6bf6dbc85",
														"resource": "accounts",
														"path": "/accounts/b5fe9ef2-3736-41ec-a0f1-17b6bf6dbc85"
													},
													"state": "active",
													"api_version": "3.0",
													"create_time": 1619133705,
													"expire_time": 1619220105,
													"session_token": "stg_OTVfOWVhMWFmMTEtNTZkZC00MWRmLTk0OGItNjQyMzliZjA3MzNk",
													"mobile_session": {
														"time_to_live": 86400,
														"account_id": "b5fe9ef2-3736-41ec-a0f1-17b6bf6dbc85"
													}
												}
											],
											"api_version": "3.0"
										}
									},
									"v3.1.api_session": {
										"value": {
											"previous": "/session_tokens?page=eyJ0eXBlIjogIm1vYmlsZV9zZXNzaW9uIiwgImFjY291bnRfaWQiOiBudWxsLCAiY3JlYXRlX3RpbWVfZW5kIjogMTYxNDkxNjA0MCwgImNyZWF0ZV90aW1lX3N0YXJ0IjogMCwgInN0YXR1cyI6IG51bGwsICJwYWdlIjogMSwgInBhZ2Vfc2l6ZSI6IDF9",
											"next": "/session_tokens?page=eyJ0eXBlIjogIm1vYmlsZV9zZXNzaW9uIiwgImFjY291bnRfaWQiOiBudWxsLCAiY3JlYXRlX3RpbWVfZW5kIjogMTYxNDkxNjA0MCwgImNyZWF0ZV90aW1lX3N0YXJ0IjogMCwgInN0YXR1cyI6IG51bGwsICJwYWdlIjogMSwgInBhZ2Vfc2l6ZSI6IDF9",
											"results": [
												{
													"id": "dc29846d-8f70-4de1-a147-1f25a2cff99e",
													"path": "/session_tokens/dc29846d-8f70-4de1-a147-1f25a2cff99e",
													"resource": "session_tokens",
													"type": "api_session",
													"owner": {
														"id": "153142",
														"resource": "applications",
														"path": null
													},
													"state": "active",
													"api_version": "3.1",
													"create_time": 1615273497,
													"expire_time": 1615275297,
													"session_token": "prod_Njk0XzQ0MThjMGY3LTFmNTYtNDFiZS05ZDA1LTI1ZWVkMDM2NDI0OQ",
													"api_session": {
														"time_to_live": 1800,
														"scopes": [
															{
																"method": "POST",
																"endpoint": "payments"
															},
															{
																"method": "GET",
																"endpoint": "payments"
															},
															{
																"method": "POST",
																"endpoint": "payment_methods"
															}
														]
													}
												},
												{
													"id": "a62c6e59-9d71-4ab2-ace7-ac8a93129a89",
													"path": "/session_tokens/a62c6e59-9d71-4ab2-ace7-ac8a93129a89",
													"resource": "session_tokens",
													"type": "api_session",
													"owner": {
														"id": "153142",
														"resource": "applications",
														"path": null
													},
													"state": "active",
													"api_version": "3.1",
													"create_time": 1615273495,
													"expire_time": 1615275295,
													"session_token": "prod_NjkzX2JmMmM2YjdhLThiN2UtNDVlYi05OWRhLTFmYWYyODY4NzU0Mw",
													"api_session": {
														"time_to_live": 1800,
														"scopes": [
															{
																"method": "POST",
																"endpoint": "payments"
															},
															{
																"method": "GET",
																"endpoint": "payments"
															},
															{
																"method": "POST",
																"endpoint": "payment_methods"
															}
														]
													}
												},
												{
													"id": "1499cef0-c1c8-4643-b691-f277cfd52439",
													"path": "/session_tokens/1499cef0-c1c8-4643-b691-f277cfd52439",
													"resource": "session_tokens",
													"type": "api_session",
													"owner": {
														"id": "153142",
														"resource": "applications",
														"path": null
													},
													"state": "active",
													"api_version": "3.1",
													"create_time": 1615273493,
													"expire_time": 1615275293,
													"session_token": "prod_NjkyXzYzZTFlNGJjLWZlMWUtNGJjZi05ZWNjLTcyOWZiM2U3ZDI0Zg",
													"api_session": {
														"time_to_live": 1800,
														"scopes": [
															{
																"method": "POST",
																"endpoint": "payments"
															},
															{
																"method": "GET",
																"endpoint": "payments"
															},
															{
																"method": "POST",
																"endpoint": "payment_methods"
															}
														]
													}
												},
												{
													"id": "934a0f37-fb5e-4286-a692-5f15d4487d8f",
													"path": "/session_tokens/934a0f37-fb5e-4286-a692-5f15d4487d8f",
													"resource": "session_tokens",
													"type": "api_session",
													"owner": {
														"id": "153142",
														"resource": "applications",
														"path": null
													},
													"state": "active",
													"api_version": "3.1",
													"create_time": 1615273490,
													"expire_time": 1615275290,
													"session_token": "prod_NjkxXzQ5MTQ2NDdjLTQ2MDktNDFiOS1hMWJjLWY1ZjE1Nzk2YWNmNA",
													"api_session": {
														"time_to_live": 1800,
														"scopes": [
															{
																"method": "POST",
																"endpoint": "payments"
															},
															{
																"method": "GET",
																"endpoint": "payments"
															},
															{
																"method": "POST",
																"endpoint": "payment_methods"
															}
														]
													}
												}
											],
											"api_version": "3.1"
										}
									}
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path to fetch the next page of results with an HTTP GET request. Adjust the number of results returned per page with the `page_size` query parameter."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path to fetch the previous page of results with an HTTP GET request. Adjust the number of results returned per page with the `page_size` query parameter."
										},
										"results": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"api_version": {
														"$ref": "#/components/schemas/api_version"
													},
													"create_time": {
														"$ref": "#/components/schemas/create_time"
													},
													"expire_time": {
														"type": "integer",
														"format": "int64",
														"minimum": 0,
														"description": "The UNIX timestamp in seconds that indicates when the session token will expire."
													},
													"id": {
														"$ref": "#/components/schemas/id"
													},
													"owner": {
														"$ref": "#/components/schemas/shared_owner_response"
													},
													"path": {
														"$ref": "#/components/schemas/path-nullable"
													},
													"resource": {
														"$ref": "#/components/schemas/resource-session_tokens"
													},
													"session_token": {
														"type": "string",
														"description": "When using mobile card readers, a string that should be passed to the WePay Card Present SDK during initialization and when refreshing a session."
													},
													"state": {
														"enum": [
															"active",
															"deleted"
														],
														"type": "string",
														"x-enumDescriptions": {
															"active": "The token was successfully generated and has not yet been deleted by your app with a DELETE request.",
															"deleted": "The session token was deleted by your app with a DELETE request."
														},
														"description": "Describes the state of session token. Can be either `active` or `deleted`."
													},
													"type": {
														"enum": [
															"mobile_session",
															"api_session"
														],
														"type": "string",
														"x-enumDescriptions": {
															"mobile_session": "Session token which associates a mobile card reader with a merchant account.",
															"api_session": "A session token created for the API use case (as opposed to Card Present use case)."
														},
														"description": "Describes the type of session token. Can be either `api_session` or `mobile_session`.",
														"x-isOneOfKey": true
													},
													"api_session": {
														"additionalProperties": false,
														"properties": {
															"scopes": {
																"items": {
																	"additionalProperties": false,
																	"properties": {
																		"endpoint": {
																			"type": "string",
																			"enum": [
																				"accounts",
																				"accounts/{id}",
																				"accounts/{id}/capabilities",
																				"legal_entities",
																				"legal_entities/{id}",
																				"legal_entities/{id}/set_controller_password",
																				"legal_entities/{id}/verifications",
																				"payouts",
																				"payouts/{id}",
																				"payout_methods",
																				"payout_methods/{id}",
																				"adjustments",
																				"adjustments/{id}",
																				"disputes",
																				"disputes/{id}",
																				"disputes/{id}/concede",
																				"documents",
																				"recoveries",
																				"recoveries/{id}",
																				"transaction_records",
																				"transaction_records/{id}",
																				"billing_statements",
																				"billing_statements/{id}",
																				"billing_statements/{id}/fees_summary",
																				"billing_statements/{id}/transactions_summary",
																				"terminals",
																				"terminals/{id}",
																				"terminals/{id}/activate",
																				"terminals/{id}/deactivate",
																				"tokens",
																				"items",
																				"items/{id}",
																				"orders",
																				"orders/{id}",
																				"rbits",
																				"rbits/{id}",
																				"notifications",
																				"notifications/{id}",
																				"notification_preferences",
																				"notification_preferences/{id}",
																				"payments",
																				"payments/{id}",
																				"payments/{id}/cancel",
																				"payments/{id}/capture",
																				"payment_methods",
																				"payment_methods/{id}",
																				"payment_methods/{id}/verify_bank_deposits",
																				"refunds",
																				"refunds/{id}"
																			],
																			"x-enumDescriptions": {
																				"accounts": "",
																				"accounts/{id}": "",
																				"accounts/{id}/capabilities": "",
																				"legal_entities": "",
																				"legal_entities/{id}": "",
																				"legal_entities/{id}/set_controller_password": "",
																				"legal_entities/{id}/verifications": "",
																				"payouts": "",
																				"payouts/{id}": "",
																				"payout_methods": "",
																				"payout_methods/{id}": "",
																				"adjustments": "",
																				"adjustments/{id}": "",
																				"disputes": "",
																				"disputes/{id}": "",
																				"disputes/{id}/concede": "",
																				"documents": "The endpoint for uploading documents",
																				"recoveries": "",
																				"recoveries/{id}": "",
																				"transaction_records": "",
																				"transaction_records/{id}": "",
																				"billing_statements": "",
																				"billing_statements/{id}": "",
																				"billing_statements/{id}/fees_summary": "",
																				"billing_statements/{id}/transactions_summary": "",
																				"terminals": "",
																				"terminals/{id}": "",
																				"terminals/{id}/activate": "",
																				"terminals/{id}/deactivate": "",
																				"tokens": "",
																				"items": "",
																				"items/{id}": "",
																				"orders": "",
																				"orders/{id}": "",
																				"rbits": "",
																				"rbits/{id}": "",
																				"notifications": "",
																				"notifications/{id}": "",
																				"notification_preferences": "",
																				"notification_preferences/{id}": "",
																				"payments": "",
																				"payments/{id}": "",
																				"payments/{id}/cancel": "",
																				"payments/{id}/capture": "",
																				"payment_methods": "",
																				"payment_methods/{id}": "",
																				"payment_methods/{id}/verify_bank_deposits": "",
																				"refunds": "",
																				"refunds/{id}": ""
																			},
																			"description": "List of endpoints which the session token should allow access for."
																		},
																		"method": {
																			"enum": [
																				"GET",
																				"POST",
																				"DELETE"
																			],
																			"type": "string",
																			"x-enumDescriptions": {
																				"GET": "Specifies the GET HTTP Method",
																				"POST": "Specifies the POST HTTP Method",
																				"DELETE": "Specifies the DELETE HTTP Method"
																			}
																		}
																	},
																	"required": [
																		"endpoint",
																		"method"
																	],
																	"type": "object"
																},
																"type": "array"
															},
															"time_to_live": {
																"type": "integer",
																"nullable": false,
																"format": "int64",
																"minimum": 0,
																"maximum": 1800,
																"description": "The number of seconds to determine when the token will expire."
															}
														},
														"required": [
															"scopes"
														],
														"type": "object",
														"description": "A session token created for the API use case (as opposed to Card Present use case)."
													},
													"mobile_session": {
														"additionalProperties": false,
														"properties": {
															"account_id": {
																"$ref": "#/components/schemas/id"
															},
															"time_to_live": {
																"type": "integer",
																"nullable": false,
																"format": "int64",
																"minimum": 0,
																"maximum": 86400,
																"description": "The number of seconds to determine when the token will expire."
															}
														},
														"required": [
															"account_id",
															"time_to_live"
														],
														"type": "object"
													}
												},
												"required": [
													"id",
													"session_token",
													"expire_time",
													"path",
													"owner",
													"resource",
													"create_time",
													"api_version",
													"state",
													"type"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of session token objects matching your GET request parameters."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"results",
										"next",
										"previous"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"503": {
						"description": "SERVICE_TEMPORARILY_UNAVAILABLE",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Client-IP",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 50.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp (in UNIX seconds) for the start of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp (in UNIX seconds) for the end of the search window.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "Describes the type of session token. Can be either `api_session` or `mobile_session`.",
						"schema": {
							"enum": [
								"mobile_session",
								"api_session"
							],
							"type": "string",
							"x-enumDescriptions": {
								"mobile_session": "Session token which associates a mobile card reader with a merchant account.",
								"api_session": "A session token created for the API use case (as opposed to Card Present use case)."
							},
							"description": "Describes the type of session token. Can be either `api_session` or `mobile_session`.",
							"x-isOneOfKey": true
						}
					},
					{
						"name": "account_id",
						"in": "query",
						"schema": {
							"$ref": "#/components/schemas/id"
						}
					},
					{
						"name": "state",
						"in": "query",
						"description": "Describes the state of session token. Can be either `active` or `deleted`.",
						"schema": {
							"enum": [
								"active",
								"deleted"
							],
							"type": "string",
							"x-enumDescriptions": {
								"active": "The token was successfully generated and has not yet been deleted by your app with a DELETE request.",
								"deleted": "The session token was deleted by your app with a DELETE request."
							},
							"description": "Describes the state of session token. Can be either `active` or `deleted`."
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Use the value from `next_page` or `previous_page` from the response to a previous GET rerquest with multiple pages of results. The value is a page ID to paginate results. Adjust the number of results per page with the `page_size` query parameter.",
						"schema": {
							"type": "string"
						}
					}
				],
				"operationId": "GET_session_tokens",
				"description": "The GET /session_tokens request call allows your platform to look up a collection of session tokens created by your app.",
				"summary": "Get a session token collection"
			}
		},
		"/session_tokens/{id}": {
			"get": {
				"tags": [
					"/session_tokens/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.1.mobile_session": {
										"value": {
											"id": "c0e72785-195f-4a96-86b1-171a7a60da13",
											"path": "/session_tokens/c0e72785-195f-4a96-86b1-171a7a60da13",
											"resource": "session_tokens",
											"type": "mobile_session",
											"owner": {
												"id": "4cf8bab9-271f-4008-8a3d-aeccc127ad67",
												"resource": "accounts",
												"path": "/accounts/4cf8bab9-271f-4008-8a3d-aeccc127ad67"
											},
											"state": "active",
											"api_version": "3.0",
											"create_time": 1619042611,
											"expire_time": 1619129011,
											"session_token": "prod_NTFfOTFmMDY3ZjctYmFjOC00NDA4LThhNGItNzMyNjk3NzRmMWJl",
											"mobile_session": {
												"time_to_live": 86400,
												"account_id": "4cf8bab9-271f-4008-8a3d-aeccc127ad67"
											}
										}
									},
									"v3.1.api_session": {
										"value": {
											"id": "00000000-0000-0000-0000-0000767bf5cd",
											"path": "session_tokens/00000000-0000-0000-0000-0000767bf5cd",
											"resource": "session_tokens",
											"type": "api_session",
											"session_token": "prod_MjQ4XzMwODMxNjFkLTk4M2EtNGUxZS1iOTc5LTZmZjExNzAwYjQ2MA",
											"owner": {
												"id": "153142",
												"path": null,
												"resource": "applications"
											},
											"api_session": {
												"scopes": [
													{
														"endpoint": "payments",
														"method": "POST"
													},
													{
														"endpoint": "payments",
														"method": "GET"
													},
													{
														"endpoint": "payment_methods",
														"method": "POST"
													}
												],
												"time_to_live": 1800
											},
											"state": "active",
											"api_version": "3.1",
											"create_time": 1604680674,
											"expire_time": 1604682474
										}
									}
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"create_time": {
											"$ref": "#/components/schemas/create_time"
										},
										"expire_time": {
											"type": "integer",
											"format": "int64",
											"minimum": 0,
											"description": "The UNIX timestamp in seconds that indicates when the session token will expire."
										},
										"id": {
											"$ref": "#/components/schemas/id"
										},
										"owner": {
											"$ref": "#/components/schemas/shared_owner_response"
										},
										"path": {
											"$ref": "#/components/schemas/path-nullable"
										},
										"resource": {
											"$ref": "#/components/schemas/resource-session_tokens"
										},
										"session_token": {
											"type": "string",
											"description": "When using mobile card readers, a string that should be passed to the WePay Card Present SDK during initialization and when refreshing a session."
										},
										"state": {
											"enum": [
												"active",
												"deleted"
											],
											"type": "string",
											"x-enumDescriptions": {
												"active": "The token was successfully generated and has not yet been deleted by your app with a DELETE request.",
												"deleted": "The session token was deleted by your app with a DELETE request."
											},
											"description": "Describes the state of session token. Can be either `active` or `deleted`."
										},
										"type": {
											"enum": [
												"mobile_session",
												"api_session"
											],
											"type": "string",
											"x-enumDescriptions": {
												"mobile_session": "Session token which associates a mobile card reader with a merchant account.",
												"api_session": "A session token created for the API use case (as opposed to Card Present use case)."
											},
											"description": "Describes the type of session token. Can be either `api_session` or `mobile_session`.",
											"x-isOneOfKey": true
										},
										"api_session": {
											"additionalProperties": false,
											"properties": {
												"scopes": {
													"items": {
														"additionalProperties": false,
														"properties": {
															"endpoint": {
																"type": "string",
																"enum": [
																	"accounts",
																	"accounts/{id}",
																	"accounts/{id}/capabilities",
																	"legal_entities",
																	"legal_entities/{id}",
																	"legal_entities/{id}/set_controller_password",
																	"legal_entities/{id}/verifications",
																	"payouts",
																	"payouts/{id}",
																	"payout_methods",
																	"payout_methods/{id}",
																	"adjustments",
																	"adjustments/{id}",
																	"disputes",
																	"disputes/{id}",
																	"disputes/{id}/concede",
																	"documents",
																	"recoveries",
																	"recoveries/{id}",
																	"transaction_records",
																	"transaction_records/{id}",
																	"billing_statements",
																	"billing_statements/{id}",
																	"billing_statements/{id}/fees_summary",
																	"billing_statements/{id}/transactions_summary",
																	"terminals",
																	"terminals/{id}",
																	"terminals/{id}/activate",
																	"terminals/{id}/deactivate",
																	"tokens",
																	"items",
																	"items/{id}",
																	"orders",
																	"orders/{id}",
																	"rbits",
																	"rbits/{id}",
																	"notifications",
																	"notifications/{id}",
																	"notification_preferences",
																	"notification_preferences/{id}",
																	"payments",
																	"payments/{id}",
																	"payments/{id}/cancel",
																	"payments/{id}/capture",
																	"payment_methods",
																	"payment_methods/{id}",
																	"payment_methods/{id}/verify_bank_deposits",
																	"refunds",
																	"refunds/{id}"
																],
																"x-enumDescriptions": {
																	"accounts": "",
																	"accounts/{id}": "",
																	"accounts/{id}/capabilities": "",
																	"legal_entities": "",
																	"legal_entities/{id}": "",
																	"legal_entities/{id}/set_controller_password": "",
																	"legal_entities/{id}/verifications": "",
																	"payouts": "",
																	"payouts/{id}": "",
																	"payout_methods": "",
																	"payout_methods/{id}": "",
																	"adjustments": "",
																	"adjustments/{id}": "",
																	"disputes": "",
																	"disputes/{id}": "",
																	"disputes/{id}/concede": "",
																	"documents": "The endpoint for uploading documents",
																	"recoveries": "",
																	"recoveries/{id}": "",
																	"transaction_records": "",
																	"transaction_records/{id}": "",
																	"billing_statements": "",
																	"billing_statements/{id}": "",
																	"billing_statements/{id}/fees_summary": "",
																	"billing_statements/{id}/transactions_summary": "",
																	"terminals": "",
																	"terminals/{id}": "",
																	"terminals/{id}/activate": "",
																	"terminals/{id}/deactivate": "",
																	"tokens": "",
																	"items": "",
																	"items/{id}": "",
																	"orders": "",
																	"orders/{id}": "",
																	"rbits": "",
																	"rbits/{id}": "",
																	"notifications": "",
																	"notifications/{id}": "",
																	"notification_preferences": "",
																	"notification_preferences/{id}": "",
																	"payments": "",
																	"payments/{id}": "",
																	"payments/{id}/cancel": "",
																	"payments/{id}/capture": "",
																	"payment_methods": "",
																	"payment_methods/{id}": "",
																	"payment_methods/{id}/verify_bank_deposits": "",
																	"refunds": "",
																	"refunds/{id}": ""
																},
																"description": "List of endpoints which the session token should allow access for."
															},
															"method": {
																"enum": [
																	"GET",
																	"POST",
																	"DELETE"
																],
																"type": "string",
																"x-enumDescriptions": {
																	"GET": "Specifies the GET HTTP Method",
																	"POST": "Specifies the POST HTTP Method",
																	"DELETE": "Specifies the DELETE HTTP Method"
																}
															}
														},
														"required": [
															"endpoint",
															"method"
														],
														"type": "object"
													},
													"type": "array"
												},
												"time_to_live": {
													"type": "integer",
													"nullable": false,
													"format": "int64",
													"minimum": 0,
													"maximum": 1800,
													"description": "The number of seconds to determine when the token will expire."
												}
											},
											"required": [
												"scopes"
											],
											"type": "object",
											"description": "A session token created for the API use case (as opposed to Card Present use case)."
										},
										"mobile_session": {
											"additionalProperties": false,
											"properties": {
												"account_id": {
													"$ref": "#/components/schemas/id"
												},
												"time_to_live": {
													"type": "integer",
													"nullable": false,
													"format": "int64",
													"minimum": 0,
													"maximum": 86400,
													"description": "The number of seconds to determine when the token will expire."
												}
											},
											"required": [
												"account_id",
												"time_to_live"
											],
											"type": "object"
										}
									},
									"required": [
										"id",
										"session_token",
										"expire_time",
										"path",
										"owner",
										"resource",
										"create_time",
										"api_version",
										"state",
										"type"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "Lookup a specific API or Mobile Card Reader session token.",
				"operationId": "GET_session_tokens-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Client-IP",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a session token"
			},
			"delete": {
				"tags": [
					"/session_tokens/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"examples": {
									"v3.1.mobile_session": {
										"value": {
											"id": "c0e72785-195f-4a96-86b1-171a7a60da13",
											"path": "/session_tokens/c0e72785-195f-4a96-86b1-171a7a60da13",
											"resource": "session_tokens",
											"type": "mobile_session",
											"owner": {
												"id": "4cf8bab9-271f-4008-8a3d-aeccc127ad67",
												"resource": "accounts",
												"path": "/accounts/4cf8bab9-271f-4008-8a3d-aeccc127ad67"
											},
											"state": "deleted",
											"api_version": "3.0",
											"create_time": 1619042611,
											"expire_time": 1619129011,
											"session_token": "prod_NTFfOTFmMDY3ZjctYmFjOC00NDA4LThhNGItNzMyNjk3NzRmMWJl",
											"mobile_session": {
												"time_to_live": 86400,
												"account_id": "4cf8bab9-271f-4008-8a3d-aeccc127ad67"
											}
										}
									},
									"v3.1.api_session": {
										"value": {
											"id": "bffbe81a-1613-44f6-b7da-3396bbf0ea57",
											"path": "/session_tokens/bffbe81a-1613-44f6-b7da-3396bbf0ea57",
											"resource": "session_tokens",
											"type": "api_session",
											"owner": {
												"id": "153142",
												"resource": "applications",
												"path": null
											},
											"state": "deleted",
											"api_version": "3.1",
											"create_time": 1675978777,
											"expire_time": 1675980577,
											"session_token": "prod_MTE3Nl9iOGMwZDVmNi0zMjhhLTQ5NjctYWZhNy1hZjk4ZDNiMWI3ZmU",
											"api_session": {
												"time_to_live": 1800,
												"scopes": [
													{
														"method": "POST",
														"endpoint": "documents"
													}
												]
											}
										}
									}
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										},
										"create_time": {
											"$ref": "#/components/schemas/create_time"
										},
										"expire_time": {
											"type": "integer",
											"format": "int64",
											"minimum": 0,
											"description": "The UNIX timestamp in seconds that indicates when the session token will expire."
										},
										"id": {
											"$ref": "#/components/schemas/id"
										},
										"owner": {
											"$ref": "#/components/schemas/shared_owner_response"
										},
										"path": {
											"$ref": "#/components/schemas/path-nullable"
										},
										"resource": {
											"$ref": "#/components/schemas/resource-session_tokens"
										},
										"session_token": {
											"type": "string",
											"description": "When using mobile card readers, a string that should be passed to the WePay Card Present SDK during initialization and when refreshing a session."
										},
										"state": {
											"enum": [
												"active",
												"deleted"
											],
											"type": "string",
											"x-enumDescriptions": {
												"active": "The token was successfully generated and has not yet been deleted by your app with a DELETE request.",
												"deleted": "The session token was deleted by your app with a DELETE request."
											},
											"description": "Describes the state of session token. Can be either `active` or `deleted`."
										},
										"type": {
											"enum": [
												"mobile_session",
												"api_session"
											],
											"type": "string",
											"x-enumDescriptions": {
												"mobile_session": "Session token which associates a mobile card reader with a merchant account.",
												"api_session": "A session token created for the API use case (as opposed to Card Present use case)."
											},
											"description": "Describes the type of session token. Can be either `api_session` or `mobile_session`.",
											"x-isOneOfKey": true
										},
										"api_session": {
											"additionalProperties": false,
											"properties": {
												"scopes": {
													"items": {
														"additionalProperties": false,
														"properties": {
															"endpoint": {
																"type": "string",
																"enum": [
																	"accounts",
																	"accounts/{id}",
																	"accounts/{id}/capabilities",
																	"legal_entities",
																	"legal_entities/{id}",
																	"legal_entities/{id}/set_controller_password",
																	"legal_entities/{id}/verifications",
																	"payouts",
																	"payouts/{id}",
																	"payout_methods",
																	"payout_methods/{id}",
																	"adjustments",
																	"adjustments/{id}",
																	"disputes",
																	"disputes/{id}",
																	"disputes/{id}/concede",
																	"documents",
																	"recoveries",
																	"recoveries/{id}",
																	"transaction_records",
																	"transaction_records/{id}",
																	"billing_statements",
																	"billing_statements/{id}",
																	"billing_statements/{id}/fees_summary",
																	"billing_statements/{id}/transactions_summary",
																	"terminals",
																	"terminals/{id}",
																	"terminals/{id}/activate",
																	"terminals/{id}/deactivate",
																	"tokens",
																	"items",
																	"items/{id}",
																	"orders",
																	"orders/{id}",
																	"rbits",
																	"rbits/{id}",
																	"notifications",
																	"notifications/{id}",
																	"notification_preferences",
																	"notification_preferences/{id}",
																	"payments",
																	"payments/{id}",
																	"payments/{id}/cancel",
																	"payments/{id}/capture",
																	"payment_methods",
																	"payment_methods/{id}",
																	"payment_methods/{id}/verify_bank_deposits",
																	"refunds",
																	"refunds/{id}"
																],
																"x-enumDescriptions": {
																	"accounts": "",
																	"accounts/{id}": "",
																	"accounts/{id}/capabilities": "",
																	"legal_entities": "",
																	"legal_entities/{id}": "",
																	"legal_entities/{id}/set_controller_password": "",
																	"legal_entities/{id}/verifications": "",
																	"payouts": "",
																	"payouts/{id}": "",
																	"payout_methods": "",
																	"payout_methods/{id}": "",
																	"adjustments": "",
																	"adjustments/{id}": "",
																	"disputes": "",
																	"disputes/{id}": "",
																	"disputes/{id}/concede": "",
																	"documents": "The endpoint for uploading documents",
																	"recoveries": "",
																	"recoveries/{id}": "",
																	"transaction_records": "",
																	"transaction_records/{id}": "",
																	"billing_statements": "",
																	"billing_statements/{id}": "",
																	"billing_statements/{id}/fees_summary": "",
																	"billing_statements/{id}/transactions_summary": "",
																	"terminals": "",
																	"terminals/{id}": "",
																	"terminals/{id}/activate": "",
																	"terminals/{id}/deactivate": "",
																	"tokens": "",
																	"items": "",
																	"items/{id}": "",
																	"orders": "",
																	"orders/{id}": "",
																	"rbits": "",
																	"rbits/{id}": "",
																	"notifications": "",
																	"notifications/{id}": "",
																	"notification_preferences": "",
																	"notification_preferences/{id}": "",
																	"payments": "",
																	"payments/{id}": "",
																	"payments/{id}/cancel": "",
																	"payments/{id}/capture": "",
																	"payment_methods": "",
																	"payment_methods/{id}": "",
																	"payment_methods/{id}/verify_bank_deposits": "",
																	"refunds": "",
																	"refunds/{id}": ""
																},
																"description": "List of endpoints which the session token should allow access for."
															},
															"method": {
																"enum": [
																	"GET",
																	"POST",
																	"DELETE"
																],
																"type": "string",
																"x-enumDescriptions": {
																	"GET": "Specifies the GET HTTP Method",
																	"POST": "Specifies the POST HTTP Method",
																	"DELETE": "Specifies the DELETE HTTP Method"
																}
															}
														},
														"required": [
															"endpoint",
															"method"
														],
														"type": "object"
													},
													"type": "array"
												},
												"time_to_live": {
													"type": "integer",
													"nullable": false,
													"format": "int64",
													"minimum": 0,
													"maximum": 1800,
													"description": "The number of seconds to determine when the token will expire."
												}
											},
											"required": [
												"scopes"
											],
											"type": "object",
											"description": "A session token created for the API use case (as opposed to Card Present use case)."
										},
										"mobile_session": {
											"additionalProperties": false,
											"properties": {
												"account_id": {
													"$ref": "#/components/schemas/id"
												},
												"time_to_live": {
													"type": "integer",
													"nullable": false,
													"format": "int64",
													"minimum": 0,
													"maximum": 86400,
													"description": "The number of seconds to determine when the token will expire."
												}
											},
											"required": [
												"account_id",
												"time_to_live"
											],
											"type": "object"
										}
									},
									"required": [
										"id",
										"session_token",
										"expire_time",
										"path",
										"owner",
										"resource",
										"create_time",
										"api_version",
										"state",
										"type"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The DELETE /session_tokens/{id} call allows your platform to delete a single session token.",
				"operationId": "DELETE_session_tokens-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "WePay-Risk-Token",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "Client-IP",
						"in": "header",
						"required": false,
						"description": "This header is **required** when tokenizing Payment Methods, Legal Entities, and Payout Methods **when the [tokenization JS library](/sdks-and-libraries/helper-js/) is not being used.** ",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Delete a session token"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					},
					"description": "ID of the session token, generated by WePay when the session token is created."
				}
			]
		},
		"/terminals": {
			"post": {
				"tags": [
					"/terminals/*"
				],
				"responses": {
					"201": {
						"description": "A successful terminals creation response.",
						"content": {
							"application/json": {
								"example": {
									"id": "eaf1ef26-ea2d-4be3-b990-ec2c410b54de",
									"resource": "terminals",
									"path": "/terminals/eaf1ef26-ea2d-4be3-b990-ec2c410b54de",
									"owner": {
										"id": "0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
										"path": "/accounts/0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
										"resource": "accounts"
									},
									"api_version": "3.0",
									"status": "active",
									"serial_number": "FA00332-1000138",
									"model": "verifone_p400",
									"reference_id": "abc12345",
									"last_call_home": 1549570307,
									"terminal_application_version": "1.27.311",
									"terminal_configuration": {
										"name": "Front Desk",
										"receipt_header_merchant_name": "Joe's Coffee",
										"maintenance_window": {
											"start": 0,
											"duration": 1
										},
										"manual_entry_configuration": {
											"avs_prompt_enabled": true,
											"cvd_prompt_enabled": true
										},
										"address": {
											"city": "Redwood City",
											"country": "US",
											"line1": "250 Convention Way",
											"line2": "Suite 200",
											"postal_code": "94063",
											"region": "CA"
										},
										"timezone": "US/Pacific",
										"currency": "USD",
										"supported_card_brands": [
											"visa",
											"american_express",
											"discover",
											"mastercard",
											"diners_club",
											"jcb"
										],
										"credit_debit_preference": "prompt",
										"sim_card_id": "5aad45c2-d128-466a-aae3-d42fef57e2f7",
										"tip": {
											"mode": "prompt_on_terminal",
											"terminal_display": {
												"amount_guide_type": "percentage_guide",
												"percentage_guide": {
													"show_amount": false,
													"percentage_low": 15,
													"percentage_medium": 18,
													"percentage_high": 20
												}
											}
										},
										"signature_required": true,
										"contactless_payments": {
											"enabled": true,
											"credit_debit_preference": "credit"
										},
										"quick_chip": {
											"enabled": true
										},
										"deferred_authorization": {
											"enabled": true,
											"international_enabled": true,
											"max_transaction_count": 20,
											"max_total_amount": 250000,
											"max_transaction_amount": 12500,
											"supported_card_entry_modes": [
												"chip",
												"contactless"
											]
										}
									},
									"gateway_id": "AB00004D3Z"
								},
								"schema": {
									"$ref": "#/components/schemas/terminal-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS, ACCOUNT_CANNOT_CREATE_TERMINALS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "Onboard a Point-of-Sale terminal into the WePay system. A Terminal resource allows you to control the configuration and lifecycle of a physical terminal. You can only have one non-deleted instance of a terminals resource per physical terminal, which is uniquely identified by the model and serial number. **NOTE:** the `currency` parameter for Terminals **only supports `USD`**.",
				"operationId": "POST_terminals",
				"summary": "Onboard a terminal",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"account_id": "0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
								"serial_number": "FA00332-1000138",
								"model": "verifone_p400",
								"reference_id": "abc12345",
								"terminal_configuration": {
									"name": "Front Desk",
									"receipt_header_merchant_name": "Joe's Coffee",
									"maintenance_window": {
										"start": 0,
										"duration": 1
									},
									"manual_entry_configuration": {
										"avs_prompt_enabled": true,
										"cvd_prompt_enabled": true
									},
									"address": {
										"city": "Redwood City",
										"country": "US",
										"line1": "250 Convention Way",
										"line2": "Suite 200",
										"postal_code": "94063",
										"region": "CA"
									},
									"timezone": "US/Pacific",
									"currency": "USD",
									"supported_card_brands": [
										"visa",
										"american_express",
										"discover",
										"mastercard",
										"diners_club",
										"jcb"
									],
									"tip": {
										"mode": "prompt_on_terminal",
										"terminal_display": {
											"amount_guide_type": "percentage_guide",
											"percentage_guide": {
												"show_amount": false,
												"percentage_low": 15,
												"percentage_medium": 18,
												"percentage_high": 20
											}
										}
									},
									"signature_required": true,
									"contactless_payments": {
										"enabled": true,
										"credit_debit_preference": "credit"
									},
									"quick_chip": {
										"enabled": true
									},
									"deferred_authorization": {
										"enabled": true,
										"international_enabled": true,
										"max_transaction_count": 20,
										"max_total_amount": 250000,
										"max_transaction_amount": 12500,
										"supported_card_entry_modes": [
											"chip",
											"contactless"
										]
									}
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"account_id": {
										"$ref": "#/components/schemas/id"
									},
									"model": {
										"type": "string",
										"description": "The model of the physical terminal. **Note:** Models `ingenico_lane3000` and `xac_at170r` are currently only usable in the stage environment. If you are interested in using these models, please reach out to your integration team or account manager at WePay.",
										"enum": [
											"verifone_p400",
											"verifone_v400m",
											"ingenico_lane3000",
											"xac_at170r"
										],
										"x-enumDescriptions": {
											"verifone_p400": "This terminal is a [VeriFone P400](/card-present/procure-terminals/#verifone-p400).",
											"verifone_v400m": "This terminal is a [VeriFone V400m](/card-present/procure-terminals/#verifone-v400m).",
											"ingenico_lane3000": "This terminal is a an Ingenico Lane 3000. **Note:** This model is not generally available.",
											"xac_at170r": "This terminal is a an XAC AT170R, used in WePay's [Smart POS](/card-present/procure-smartpos/#xac-at170r) solution."
										}
									},
									"serial_number": {
										"type": "string",
										"description": "The serial number of the physical terminal.",
										"minLength": 1,
										"maxLength": 32,
										"pattern": "^[a-zA-Z0-9-]+$",
										"example": "FA00332-1000138"
									},
									"terminal_configuration": {
										"additionalProperties": false,
										"properties": {
											"contactless_payments": {
												"$ref": "#/components/schemas/contactless_payments-req"
											},
											"currency": {
												"$ref": "#/components/schemas/usd-currency"
											},
											"quick_chip": {
												"$ref": "#/components/schemas/terminals_quick_chip"
											},
											"signature_required": {
												"type": "boolean",
												"description": "Whether or not this terminal requires signature verification from payers."
											},
											"supported_card_brands": {
												"$ref": "#/components/schemas/terminals-supported_card_brands"
											},
											"timezone": {
												"type": "string",
												"description": "Timezone of the terminal'",
												"enum": [
													"Africa/Abidjan",
													"Africa/Accra",
													"Africa/Addis_Ababa",
													"Africa/Algiers",
													"Africa/Asmara",
													"Africa/Asmera",
													"Africa/Bamako",
													"Africa/Bangui",
													"Africa/Banjul",
													"Africa/Bissau",
													"Africa/Blantyre",
													"Africa/Brazzaville",
													"Africa/Bujumbura",
													"Africa/Cairo",
													"Africa/Casablanca",
													"Africa/Ceuta",
													"Africa/Conakry",
													"Africa/Dakar",
													"Africa/Dar_es_Salaam",
													"Africa/Djibouti",
													"Africa/Douala",
													"Africa/El_Aaiun",
													"Africa/Freetown",
													"Africa/Gaborone",
													"Africa/Harare",
													"Africa/Johannesburg",
													"Africa/Juba",
													"Africa/Kampala",
													"Africa/Khartoum",
													"Africa/Kigali",
													"Africa/Kinshasa",
													"Africa/Lagos",
													"Africa/Libreville",
													"Africa/Lome",
													"Africa/Luanda",
													"Africa/Lubumbashi",
													"Africa/Lusaka",
													"Africa/Malabo",
													"Africa/Maputo",
													"Africa/Maseru",
													"Africa/Mbabane",
													"Africa/Mogadishu",
													"Africa/Monrovia",
													"Africa/Nairobi",
													"Africa/Ndjamena",
													"Africa/Niamey",
													"Africa/Nouakchott",
													"Africa/Ouagadougou",
													"Africa/Porto-Novo",
													"Africa/Sao_Tome",
													"Africa/Timbuktu",
													"Africa/Tripoli",
													"Africa/Tunis",
													"Africa/Windhoek",
													"America/Adak",
													"America/Anchorage",
													"America/Anguilla",
													"America/Antigua",
													"America/Araguaina",
													"America/Argentina/Buenos_Aires",
													"America/Argentina/Catamarca",
													"America/Argentina/ComodRivadavia",
													"America/Argentina/Cordoba",
													"America/Argentina/Jujuy",
													"America/Argentina/La_Rioja",
													"America/Argentina/Mendoza",
													"America/Argentina/Rio_Gallegos",
													"America/Argentina/Salta",
													"America/Argentina/San_Juan",
													"America/Argentina/San_Luis",
													"America/Argentina/Tucuman",
													"America/Argentina/Ushuaia",
													"America/Aruba",
													"America/Asuncion",
													"America/Atikokan",
													"America/Atka",
													"America/Bahia",
													"America/Bahia_Banderas",
													"America/Barbados",
													"America/Belem",
													"America/Belize",
													"America/Blanc-Sablon",
													"America/Boa_Vista",
													"America/Bogota",
													"America/Boise",
													"America/Buenos_Aires",
													"America/Cambridge_Bay",
													"America/Campo_Grande",
													"America/Cancun",
													"America/Caracas",
													"America/Catamarca",
													"America/Cayenne",
													"America/Cayman",
													"America/Chicago",
													"America/Chihuahua",
													"America/Coral_Harbour",
													"America/Cordoba",
													"America/Costa_Rica",
													"America/Creston",
													"America/Cuiaba",
													"America/Curacao",
													"America/Danmarkshavn",
													"America/Dawson",
													"America/Dawson_Creek",
													"America/Denver",
													"America/Detroit",
													"America/Dominica",
													"America/Edmonton",
													"America/Eirunepe",
													"America/El_Salvador",
													"America/Ensenada",
													"America/Fort_Nelson",
													"America/Fort_Wayne",
													"America/Fortaleza",
													"America/Glace_Bay",
													"America/Godthab",
													"America/Goose_Bay",
													"America/Grand_Turk",
													"America/Grenada",
													"America/Guadeloupe",
													"America/Guatemala",
													"America/Guayaquil",
													"America/Guyana",
													"America/Halifax",
													"America/Havana",
													"America/Hermosillo",
													"America/Indiana/Indianapolis",
													"America/Indiana/Knox",
													"America/Indiana/Marengo",
													"America/Indiana/Petersburg",
													"America/Indiana/Tell_City",
													"America/Indiana/Vevay",
													"America/Indiana/Vincennes",
													"America/Indiana/Winamac",
													"America/Indianapolis",
													"America/Inuvik",
													"America/Iqaluit",
													"America/Jamaica",
													"America/Jujuy",
													"America/Juneau",
													"America/Kentucky/Louisville",
													"America/Kentucky/Monticello",
													"America/Knox_IN",
													"America/Kralendijk",
													"America/La_Paz",
													"America/Lima",
													"America/Los_Angeles",
													"America/Louisville",
													"America/Lower_Princes",
													"America/Maceio",
													"America/Managua",
													"America/Manaus",
													"America/Marigot",
													"America/Martinique",
													"America/Matamoros",
													"America/Mazatlan",
													"America/Mendoza",
													"America/Menominee",
													"America/Merida",
													"America/Metlakatla",
													"America/Mexico_City",
													"America/Miquelon",
													"America/Moncton",
													"America/Monterrey",
													"America/Montevideo",
													"America/Montreal",
													"America/Montserrat",
													"America/Nassau",
													"America/New_York",
													"America/Nipigon",
													"America/Nome",
													"America/Noronha",
													"America/North_Dakota/Beulah",
													"America/North_Dakota/Center",
													"America/North_Dakota/New_Salem",
													"America/Ojinaga",
													"America/Panama",
													"America/Pangnirtung",
													"America/Paramaribo",
													"America/Phoenix",
													"America/Port-au-Prince",
													"America/Port_of_Spain",
													"America/Porto_Acre",
													"America/Porto_Velho",
													"America/Puerto_Rico",
													"America/Punta_Arenas",
													"America/Rainy_River",
													"America/Rankin_Inlet",
													"America/Recife",
													"America/Regina",
													"America/Resolute",
													"America/Rio_Branco",
													"America/Rosario",
													"America/Santa_Isabel",
													"America/Santarem",
													"America/Santiago",
													"America/Santo_Domingo",
													"America/Sao_Paulo",
													"America/Scoresbysund",
													"America/Shiprock",
													"America/Sitka",
													"America/St_Barthelemy",
													"America/St_Johns",
													"America/St_Kitts",
													"America/St_Lucia",
													"America/St_Thomas",
													"America/St_Vincent",
													"America/Swift_Current",
													"America/Tegucigalpa",
													"America/Thule",
													"America/Thunder_Bay",
													"America/Tijuana",
													"America/Toronto",
													"America/Tortola",
													"America/Vancouver",
													"America/Virgin",
													"America/Whitehorse",
													"America/Winnipeg",
													"America/Yakutat",
													"America/Yellowknife",
													"Antarctica/Casey",
													"Antarctica/Davis",
													"Antarctica/DumontDUrville",
													"Antarctica/Macquarie",
													"Antarctica/Mawson",
													"Antarctica/McMurdo",
													"Antarctica/Palmer",
													"Antarctica/Rothera",
													"Antarctica/South_Pole",
													"Antarctica/Syowa",
													"Antarctica/Troll",
													"Antarctica/Vostok",
													"Arctic/Longyearbyen",
													"Asia/Aden",
													"Asia/Almaty",
													"Asia/Amman",
													"Asia/Anadyr",
													"Asia/Aqtau",
													"Asia/Aqtobe",
													"Asia/Ashgabat",
													"Asia/Ashkhabad",
													"Asia/Atyrau",
													"Asia/Baghdad",
													"Asia/Bahrain",
													"Asia/Baku",
													"Asia/Bangkok",
													"Asia/Barnaul",
													"Asia/Beirut",
													"Asia/Bishkek",
													"Asia/Brunei",
													"Asia/Calcutta",
													"Asia/Chita",
													"Asia/Choibalsan",
													"Asia/Chongqing",
													"Asia/Chungking",
													"Asia/Colombo",
													"Asia/Dacca",
													"Asia/Damascus",
													"Asia/Dhaka",
													"Asia/Dili",
													"Asia/Dubai",
													"Asia/Dushanbe",
													"Asia/Famagusta",
													"Asia/Gaza",
													"Asia/Harbin",
													"Asia/Hebron",
													"Asia/Ho_Chi_Minh",
													"Asia/Hong_Kong",
													"Asia/Hovd",
													"Asia/Irkutsk",
													"Asia/Istanbul",
													"Asia/Jakarta",
													"Asia/Jayapura",
													"Asia/Jerusalem",
													"Asia/Kabul",
													"Asia/Kamchatka",
													"Asia/Karachi",
													"Asia/Kashgar",
													"Asia/Kathmandu",
													"Asia/Katmandu",
													"Asia/Khandyga",
													"Asia/Kolkata",
													"Asia/Krasnoyarsk",
													"Asia/Kuala_Lumpur",
													"Asia/Kuching",
													"Asia/Kuwait",
													"Asia/Macao",
													"Asia/Macau",
													"Asia/Magadan",
													"Asia/Makassar",
													"Asia/Manila",
													"Asia/Muscat",
													"Asia/Nicosia",
													"Asia/Novokuznetsk",
													"Asia/Novosibirsk",
													"Asia/Omsk",
													"Asia/Oral",
													"Asia/Phnom_Penh",
													"Asia/Pontianak",
													"Asia/Pyongyang",
													"Asia/Qatar",
													"Asia/Qostanay",
													"Asia/Qyzylorda",
													"Asia/Rangoon",
													"Asia/Riyadh",
													"Asia/Saigon",
													"Asia/Sakhalin",
													"Asia/Samarkand",
													"Asia/Seoul",
													"Asia/Shanghai",
													"Asia/Singapore",
													"Asia/Srednekolymsk",
													"Asia/Taipei",
													"Asia/Tashkent",
													"Asia/Tbilisi",
													"Asia/Tehran",
													"Asia/Tel_Aviv",
													"Asia/Thimbu",
													"Asia/Thimphu",
													"Asia/Tokyo",
													"Asia/Tomsk",
													"Asia/Ujung_Pandang",
													"Asia/Ulaanbaatar",
													"Asia/Ulan_Bator",
													"Asia/Urumqi",
													"Asia/Ust-Nera",
													"Asia/Vientiane",
													"Asia/Vladivostok",
													"Asia/Yakutsk",
													"Asia/Yangon",
													"Asia/Yekaterinburg",
													"Asia/Yerevan",
													"Atlantic/Azores",
													"Atlantic/Bermuda",
													"Atlantic/Canary",
													"Atlantic/Cape_Verde",
													"Atlantic/Faeroe",
													"Atlantic/Faroe",
													"Atlantic/Jan_Mayen",
													"Atlantic/Madeira",
													"Atlantic/Reykjavik",
													"Atlantic/South_Georgia",
													"Atlantic/St_Helena",
													"Atlantic/Stanley",
													"Australia/Adelaide",
													"Australia/Brisbane",
													"Australia/Broken_Hill",
													"Australia/Canberra",
													"Australia/Currie",
													"Australia/Darwin",
													"Australia/Eucla",
													"Australia/Hobart",
													"Australia/Lindeman",
													"Australia/Lord_Howe",
													"Australia/Melbourne",
													"Australia/Perth",
													"Australia/Sydney",
													"Australia/Yancowinna",
													"Etc/GMT",
													"Etc/GMT+0",
													"Etc/GMT+1",
													"Etc/GMT+10",
													"Etc/GMT+11",
													"Etc/GMT+12",
													"Etc/GMT+2",
													"Etc/GMT+3",
													"Etc/GMT+4",
													"Etc/GMT+5",
													"Etc/GMT+6",
													"Etc/GMT+7",
													"Etc/GMT+8",
													"Etc/GMT+9",
													"Etc/GMT-0",
													"Etc/GMT-1",
													"Etc/GMT-10",
													"Etc/GMT-11",
													"Etc/GMT-12",
													"Etc/GMT-13",
													"Etc/GMT-14",
													"Etc/GMT-2",
													"Etc/GMT-3",
													"Etc/GMT-4",
													"Etc/GMT-5",
													"Etc/GMT-6",
													"Etc/GMT-7",
													"Etc/GMT-8",
													"Etc/GMT-9",
													"Etc/GMT0",
													"Etc/UTC",
													"Europe/Amsterdam",
													"Europe/Andorra",
													"Europe/Astrakhan",
													"Europe/Athens",
													"Europe/Belfast",
													"Europe/Belgrade",
													"Europe/Berlin",
													"Europe/Bratislava",
													"Europe/Brussels",
													"Europe/Bucharest",
													"Europe/Budapest",
													"Europe/Busingen",
													"Europe/Chisinau",
													"Europe/Copenhagen",
													"Europe/Dublin",
													"Europe/Gibraltar",
													"Europe/Guernsey",
													"Europe/Helsinki",
													"Europe/Isle_of_Man",
													"Europe/Istanbul",
													"Europe/Jersey",
													"Europe/Kaliningrad",
													"Europe/Kiev",
													"Europe/Kirov",
													"Europe/Lisbon",
													"Europe/Ljubljana",
													"Europe/London",
													"Europe/Luxembourg",
													"Europe/Madrid",
													"Europe/Malta",
													"Europe/Mariehamn",
													"Europe/Minsk",
													"Europe/Monaco",
													"Europe/Moscow",
													"Europe/Nicosia",
													"Europe/Oslo",
													"Europe/Paris",
													"Europe/Podgorica",
													"Europe/Prague",
													"Europe/Riga",
													"Europe/Rome",
													"Europe/Samara",
													"Europe/San_Marino",
													"Europe/Sarajevo",
													"Europe/Saratov",
													"Europe/Simferopol",
													"Europe/Skopje",
													"Europe/Sofia",
													"Europe/Stockholm",
													"Europe/Tallinn",
													"Europe/Tirane",
													"Europe/Tiraspol",
													"Europe/Ulyanovsk",
													"Europe/Uzhgorod",
													"Europe/Vaduz",
													"Europe/Vatican",
													"Europe/Vienna",
													"Europe/Vilnius",
													"Europe/Volgograd",
													"Europe/Warsaw",
													"Europe/Zagreb",
													"Europe/Zaporozhye",
													"Europe/Zurich",
													"GMT",
													"Indian/Antananarivo",
													"Indian/Chagos",
													"Indian/Christmas",
													"Indian/Cocos",
													"Indian/Comoro",
													"Indian/Kerguelen",
													"Indian/Mahe",
													"Indian/Maldives",
													"Indian/Mauritius",
													"Indian/Mayotte",
													"Indian/Reunion",
													"Pacific/Apia",
													"Pacific/Auckland",
													"Pacific/Bougainville",
													"Pacific/Chatham",
													"Pacific/Chuuk",
													"Pacific/Easter",
													"Pacific/Efate",
													"Pacific/Enderbury",
													"Pacific/Fakaofo",
													"Pacific/Fiji",
													"Pacific/Funafuti",
													"Pacific/Galapagos",
													"Pacific/Gambier",
													"Pacific/Guadalcanal",
													"Pacific/Guam",
													"Pacific/Honolulu",
													"Pacific/Johnston",
													"Pacific/Kiritimati",
													"Pacific/Kosrae",
													"Pacific/Kwajalein",
													"Pacific/Majuro",
													"Pacific/Marquesas",
													"Pacific/Midway",
													"Pacific/Nauru",
													"Pacific/Niue",
													"Pacific/Norfolk",
													"Pacific/Noumea",
													"Pacific/Pago_Pago",
													"Pacific/Palau",
													"Pacific/Pitcairn",
													"Pacific/Pohnpei",
													"Pacific/Ponape",
													"Pacific/Port_Moresby",
													"Pacific/Rarotonga",
													"Pacific/Saipan",
													"Pacific/Samoa",
													"Pacific/Tahiti",
													"Pacific/Tarawa",
													"Pacific/Tongatapu",
													"Pacific/Truk",
													"Pacific/Wake",
													"Pacific/Wallis",
													"Pacific/Yap",
													"US/Alaska",
													"US/Aleutian",
													"US/Arizona",
													"US/Central",
													"US/East-Indiana",
													"US/Eastern",
													"US/Hawaii",
													"US/Indiana-Starke",
													"US/Michigan",
													"US/Mountain",
													"US/Pacific",
													"US/Pacific-New",
													"US/Samoa",
													"UTC"
												],
												"x-enumDescriptions": {
													"Africa/Abidjan": "",
													"Africa/Accra": "",
													"Africa/Addis_Ababa": "",
													"Africa/Algiers": "",
													"Africa/Asmara": "",
													"Africa/Asmera": "",
													"Africa/Bamako": "",
													"Africa/Bangui": "",
													"Africa/Banjul": "",
													"Africa/Bissau": "",
													"Africa/Blantyre": "",
													"Africa/Brazzaville": "",
													"Africa/Bujumbura": "",
													"Africa/Cairo": "",
													"Africa/Casablanca": "",
													"Africa/Ceuta": "",
													"Africa/Conakry": "",
													"Africa/Dakar": "",
													"Africa/Dar_es_Salaam": "",
													"Africa/Djibouti": "",
													"Africa/Douala": "",
													"Africa/El_Aaiun": "",
													"Africa/Freetown": "",
													"Africa/Gaborone": "",
													"Africa/Harare": "",
													"Africa/Johannesburg": "",
													"Africa/Juba": "",
													"Africa/Kampala": "",
													"Africa/Khartoum": "",
													"Africa/Kigali": "",
													"Africa/Kinshasa": "",
													"Africa/Lagos": "",
													"Africa/Libreville": "",
													"Africa/Lome": "",
													"Africa/Luanda": "",
													"Africa/Lubumbashi": "",
													"Africa/Lusaka": "",
													"Africa/Malabo": "",
													"Africa/Maputo": "",
													"Africa/Maseru": "",
													"Africa/Mbabane": "",
													"Africa/Mogadishu": "",
													"Africa/Monrovia": "",
													"Africa/Nairobi": "",
													"Africa/Ndjamena": "",
													"Africa/Niamey": "",
													"Africa/Nouakchott": "",
													"Africa/Ouagadougou": "",
													"Africa/Porto-Novo": "",
													"Africa/Sao_Tome": "",
													"Africa/Timbuktu": "",
													"Africa/Tripoli": "",
													"Africa/Tunis": "",
													"Africa/Windhoek": "",
													"America/Adak": "",
													"America/Anchorage": "",
													"America/Anguilla": "",
													"America/Antigua": "",
													"America/Araguaina": "",
													"America/Argentina/Buenos_Aires": "",
													"America/Argentina/Catamarca": "",
													"America/Argentina/ComodRivadavia": "",
													"America/Argentina/Cordoba": "",
													"America/Argentina/Jujuy": "",
													"America/Argentina/La_Rioja": "",
													"America/Argentina/Mendoza": "",
													"America/Argentina/Rio_Gallegos": "",
													"America/Argentina/Salta": "",
													"America/Argentina/San_Juan": "",
													"America/Argentina/San_Luis": "",
													"America/Argentina/Tucuman": "",
													"America/Argentina/Ushuaia": "",
													"America/Aruba": "",
													"America/Asuncion": "",
													"America/Atikokan": "",
													"America/Atka": "",
													"America/Bahia": "",
													"America/Bahia_Banderas": "",
													"America/Barbados": "",
													"America/Belem": "",
													"America/Belize": "",
													"America/Blanc-Sablon": "",
													"America/Boa_Vista": "",
													"America/Bogota": "",
													"America/Boise": "",
													"America/Buenos_Aires": "",
													"America/Cambridge_Bay": "",
													"America/Campo_Grande": "",
													"America/Cancun": "",
													"America/Caracas": "",
													"America/Catamarca": "",
													"America/Cayenne": "",
													"America/Cayman": "",
													"America/Chicago": "",
													"America/Chihuahua": "",
													"America/Coral_Harbour": "",
													"America/Cordoba": "",
													"America/Costa_Rica": "",
													"America/Creston": "",
													"America/Cuiaba": "",
													"America/Curacao": "",
													"America/Danmarkshavn": "",
													"America/Dawson": "",
													"America/Dawson_Creek": "",
													"America/Denver": "",
													"America/Detroit": "",
													"America/Dominica": "",
													"America/Edmonton": "",
													"America/Eirunepe": "",
													"America/El_Salvador": "",
													"America/Ensenada": "",
													"America/Fort_Nelson": "",
													"America/Fort_Wayne": "",
													"America/Fortaleza": "",
													"America/Glace_Bay": "",
													"America/Godthab": "",
													"America/Goose_Bay": "",
													"America/Grand_Turk": "",
													"America/Grenada": "",
													"America/Guadeloupe": "",
													"America/Guatemala": "",
													"America/Guayaquil": "",
													"America/Guyana": "",
													"America/Halifax": "",
													"America/Havana": "",
													"America/Hermosillo": "",
													"America/Indiana/Indianapolis": "",
													"America/Indiana/Knox": "",
													"America/Indiana/Marengo": "",
													"America/Indiana/Petersburg": "",
													"America/Indiana/Tell_City": "",
													"America/Indiana/Vevay": "",
													"America/Indiana/Vincennes": "",
													"America/Indiana/Winamac": "",
													"America/Indianapolis": "",
													"America/Inuvik": "",
													"America/Iqaluit": "",
													"America/Jamaica": "",
													"America/Jujuy": "",
													"America/Juneau": "",
													"America/Kentucky/Louisville": "",
													"America/Kentucky/Monticello": "",
													"America/Knox_IN": "",
													"America/Kralendijk": "",
													"America/La_Paz": "",
													"America/Lima": "",
													"America/Los_Angeles": "",
													"America/Louisville": "",
													"America/Lower_Princes": "",
													"America/Maceio": "",
													"America/Managua": "",
													"America/Manaus": "",
													"America/Marigot": "",
													"America/Martinique": "",
													"America/Matamoros": "",
													"America/Mazatlan": "",
													"America/Mendoza": "",
													"America/Menominee": "",
													"America/Merida": "",
													"America/Metlakatla": "",
													"America/Mexico_City": "",
													"America/Miquelon": "",
													"America/Moncton": "",
													"America/Monterrey": "",
													"America/Montevideo": "",
													"America/Montreal": "",
													"America/Montserrat": "",
													"America/Nassau": "",
													"America/New_York": "",
													"America/Nipigon": "",
													"America/Nome": "",
													"America/Noronha": "",
													"America/North_Dakota/Beulah": "",
													"America/North_Dakota/Center": "",
													"America/North_Dakota/New_Salem": "",
													"America/Ojinaga": "",
													"America/Panama": "",
													"America/Pangnirtung": "",
													"America/Paramaribo": "",
													"America/Phoenix": "",
													"America/Port-au-Prince": "",
													"America/Port_of_Spain": "",
													"America/Porto_Acre": "",
													"America/Porto_Velho": "",
													"America/Puerto_Rico": "",
													"America/Punta_Arenas": "",
													"America/Rainy_River": "",
													"America/Rankin_Inlet": "",
													"America/Recife": "",
													"America/Regina": "",
													"America/Resolute": "",
													"America/Rio_Branco": "",
													"America/Rosario": "",
													"America/Santa_Isabel": "",
													"America/Santarem": "",
													"America/Santiago": "",
													"America/Santo_Domingo": "",
													"America/Sao_Paulo": "",
													"America/Scoresbysund": "",
													"America/Shiprock": "",
													"America/Sitka": "",
													"America/St_Barthelemy": "",
													"America/St_Johns": "",
													"America/St_Kitts": "",
													"America/St_Lucia": "",
													"America/St_Thomas": "",
													"America/St_Vincent": "",
													"America/Swift_Current": "",
													"America/Tegucigalpa": "",
													"America/Thule": "",
													"America/Thunder_Bay": "",
													"America/Tijuana": "",
													"America/Toronto": "",
													"America/Tortola": "",
													"America/Vancouver": "",
													"America/Virgin": "",
													"America/Whitehorse": "",
													"America/Winnipeg": "",
													"America/Yakutat": "",
													"America/Yellowknife": "",
													"Antarctica/Casey": "",
													"Antarctica/Davis": "",
													"Antarctica/DumontDUrville": "",
													"Antarctica/Macquarie": "",
													"Antarctica/Mawson": "",
													"Antarctica/McMurdo": "",
													"Antarctica/Palmer": "",
													"Antarctica/Rothera": "",
													"Antarctica/South_Pole": "",
													"Antarctica/Syowa": "",
													"Antarctica/Troll": "",
													"Antarctica/Vostok": "",
													"Arctic/Longyearbyen": "",
													"Asia/Aden": "",
													"Asia/Almaty": "",
													"Asia/Amman": "",
													"Asia/Anadyr": "",
													"Asia/Aqtau": "",
													"Asia/Aqtobe": "",
													"Asia/Ashgabat": "",
													"Asia/Ashkhabad": "",
													"Asia/Atyrau": "",
													"Asia/Baghdad": "",
													"Asia/Bahrain": "",
													"Asia/Baku": "",
													"Asia/Bangkok": "",
													"Asia/Barnaul": "",
													"Asia/Beirut": "",
													"Asia/Bishkek": "",
													"Asia/Brunei": "",
													"Asia/Calcutta": "",
													"Asia/Chita": "",
													"Asia/Choibalsan": "",
													"Asia/Chongqing": "",
													"Asia/Chungking": "",
													"Asia/Colombo": "",
													"Asia/Dacca": "",
													"Asia/Damascus": "",
													"Asia/Dhaka": "",
													"Asia/Dili": "",
													"Asia/Dubai": "",
													"Asia/Dushanbe": "",
													"Asia/Famagusta": "",
													"Asia/Gaza": "",
													"Asia/Harbin": "",
													"Asia/Hebron": "",
													"Asia/Ho_Chi_Minh": "",
													"Asia/Hong_Kong": "",
													"Asia/Hovd": "",
													"Asia/Irkutsk": "",
													"Asia/Istanbul": "",
													"Asia/Jakarta": "",
													"Asia/Jayapura": "",
													"Asia/Jerusalem": "",
													"Asia/Kabul": "",
													"Asia/Kamchatka": "",
													"Asia/Karachi": "",
													"Asia/Kashgar": "",
													"Asia/Kathmandu": "",
													"Asia/Katmandu": "",
													"Asia/Khandyga": "",
													"Asia/Kolkata": "",
													"Asia/Krasnoyarsk": "",
													"Asia/Kuala_Lumpur": "",
													"Asia/Kuching": "",
													"Asia/Kuwait": "",
													"Asia/Macao": "",
													"Asia/Macau": "",
													"Asia/Magadan": "",
													"Asia/Makassar": "",
													"Asia/Manila": "",
													"Asia/Muscat": "",
													"Asia/Nicosia": "",
													"Asia/Novokuznetsk": "",
													"Asia/Novosibirsk": "",
													"Asia/Omsk": "",
													"Asia/Oral": "",
													"Asia/Phnom_Penh": "",
													"Asia/Pontianak": "",
													"Asia/Pyongyang": "",
													"Asia/Qatar": "",
													"Asia/Qostanay": "",
													"Asia/Qyzylorda": "",
													"Asia/Rangoon": "",
													"Asia/Riyadh": "",
													"Asia/Saigon": "",
													"Asia/Sakhalin": "",
													"Asia/Samarkand": "",
													"Asia/Seoul": "",
													"Asia/Shanghai": "",
													"Asia/Singapore": "",
													"Asia/Srednekolymsk": "",
													"Asia/Taipei": "",
													"Asia/Tashkent": "",
													"Asia/Tbilisi": "",
													"Asia/Tehran": "",
													"Asia/Tel_Aviv": "",
													"Asia/Thimbu": "",
													"Asia/Thimphu": "",
													"Asia/Tokyo": "",
													"Asia/Tomsk": "",
													"Asia/Ujung_Pandang": "",
													"Asia/Ulaanbaatar": "",
													"Asia/Ulan_Bator": "",
													"Asia/Urumqi": "",
													"Asia/Ust-Nera": "",
													"Asia/Vientiane": "",
													"Asia/Vladivostok": "",
													"Asia/Yakutsk": "",
													"Asia/Yangon": "",
													"Asia/Yekaterinburg": "",
													"Asia/Yerevan": "",
													"Atlantic/Azores": "",
													"Atlantic/Bermuda": "",
													"Atlantic/Canary": "",
													"Atlantic/Cape_Verde": "",
													"Atlantic/Faeroe": "",
													"Atlantic/Faroe": "",
													"Atlantic/Jan_Mayen": "",
													"Atlantic/Madeira": "",
													"Atlantic/Reykjavik": "",
													"Atlantic/South_Georgia": "",
													"Atlantic/St_Helena": "",
													"Atlantic/Stanley": "",
													"Australia/Adelaide": "",
													"Australia/Brisbane": "",
													"Australia/Broken_Hill": "",
													"Australia/Canberra": "",
													"Australia/Currie": "",
													"Australia/Darwin": "",
													"Australia/Eucla": "",
													"Australia/Hobart": "",
													"Australia/Lindeman": "",
													"Australia/Lord_Howe": "",
													"Australia/Melbourne": "",
													"Australia/Perth": "",
													"Australia/Sydney": "",
													"Australia/Yancowinna": "",
													"Etc/GMT": "",
													"Etc/GMT+0": "",
													"Etc/GMT+1": "",
													"Etc/GMT+10": "",
													"Etc/GMT+11": "",
													"Etc/GMT+12": "",
													"Etc/GMT+2": "",
													"Etc/GMT+3": "",
													"Etc/GMT+4": "",
													"Etc/GMT+5": "",
													"Etc/GMT+6": "",
													"Etc/GMT+7": "",
													"Etc/GMT+8": "",
													"Etc/GMT+9": "",
													"Etc/GMT-0": "",
													"Etc/GMT-1": "",
													"Etc/GMT-10": "",
													"Etc/GMT-11": "",
													"Etc/GMT-12": "",
													"Etc/GMT-13": "",
													"Etc/GMT-14": "",
													"Etc/GMT-2": "",
													"Etc/GMT-3": "",
													"Etc/GMT-4": "",
													"Etc/GMT-5": "",
													"Etc/GMT-6": "",
													"Etc/GMT-7": "",
													"Etc/GMT-8": "",
													"Etc/GMT-9": "",
													"Etc/GMT0": "",
													"Etc/UTC": "",
													"Europe/Amsterdam": "",
													"Europe/Andorra": "",
													"Europe/Astrakhan": "",
													"Europe/Athens": "",
													"Europe/Belfast": "",
													"Europe/Belgrade": "",
													"Europe/Berlin": "",
													"Europe/Bratislava": "",
													"Europe/Brussels": "",
													"Europe/Bucharest": "",
													"Europe/Budapest": "",
													"Europe/Busingen": "",
													"Europe/Chisinau": "",
													"Europe/Copenhagen": "",
													"Europe/Dublin": "",
													"Europe/Gibraltar": "",
													"Europe/Guernsey": "",
													"Europe/Helsinki": "",
													"Europe/Isle_of_Man": "",
													"Europe/Istanbul": "",
													"Europe/Jersey": "",
													"Europe/Kaliningrad": "",
													"Europe/Kiev": "",
													"Europe/Kirov": "",
													"Europe/Lisbon": "",
													"Europe/Ljubljana": "",
													"Europe/London": "",
													"Europe/Luxembourg": "",
													"Europe/Madrid": "",
													"Europe/Malta": "",
													"Europe/Mariehamn": "",
													"Europe/Minsk": "",
													"Europe/Monaco": "",
													"Europe/Moscow": "",
													"Europe/Nicosia": "",
													"Europe/Oslo": "",
													"Europe/Paris": "",
													"Europe/Podgorica": "",
													"Europe/Prague": "",
													"Europe/Riga": "",
													"Europe/Rome": "",
													"Europe/Samara": "",
													"Europe/San_Marino": "",
													"Europe/Sarajevo": "",
													"Europe/Saratov": "",
													"Europe/Simferopol": "",
													"Europe/Skopje": "",
													"Europe/Sofia": "",
													"Europe/Stockholm": "",
													"Europe/Tallinn": "",
													"Europe/Tirane": "",
													"Europe/Tiraspol": "",
													"Europe/Ulyanovsk": "",
													"Europe/Uzhgorod": "",
													"Europe/Vaduz": "",
													"Europe/Vatican": "",
													"Europe/Vienna": "",
													"Europe/Vilnius": "",
													"Europe/Volgograd": "",
													"Europe/Warsaw": "",
													"Europe/Zagreb": "",
													"Europe/Zaporozhye": "",
													"Europe/Zurich": "",
													"GMT": "",
													"Indian/Antananarivo": "",
													"Indian/Chagos": "",
													"Indian/Christmas": "",
													"Indian/Cocos": "",
													"Indian/Comoro": "",
													"Indian/Kerguelen": "",
													"Indian/Mahe": "",
													"Indian/Maldives": "",
													"Indian/Mauritius": "",
													"Indian/Mayotte": "",
													"Indian/Reunion": "",
													"Pacific/Apia": "",
													"Pacific/Auckland": "",
													"Pacific/Bougainville": "",
													"Pacific/Chatham": "",
													"Pacific/Chuuk": "",
													"Pacific/Easter": "",
													"Pacific/Efate": "",
													"Pacific/Enderbury": "",
													"Pacific/Fakaofo": "",
													"Pacific/Fiji": "",
													"Pacific/Funafuti": "",
													"Pacific/Galapagos": "",
													"Pacific/Gambier": "",
													"Pacific/Guadalcanal": "",
													"Pacific/Guam": "",
													"Pacific/Honolulu": "",
													"Pacific/Johnston": "",
													"Pacific/Kiritimati": "",
													"Pacific/Kosrae": "",
													"Pacific/Kwajalein": "",
													"Pacific/Majuro": "",
													"Pacific/Marquesas": "",
													"Pacific/Midway": "",
													"Pacific/Nauru": "",
													"Pacific/Niue": "",
													"Pacific/Norfolk": "",
													"Pacific/Noumea": "",
													"Pacific/Pago_Pago": "",
													"Pacific/Palau": "",
													"Pacific/Pitcairn": "",
													"Pacific/Pohnpei": "",
													"Pacific/Ponape": "",
													"Pacific/Port_Moresby": "",
													"Pacific/Rarotonga": "",
													"Pacific/Saipan": "",
													"Pacific/Samoa": "",
													"Pacific/Tahiti": "",
													"Pacific/Tarawa": "",
													"Pacific/Tongatapu": "",
													"Pacific/Truk": "",
													"Pacific/Wake": "",
													"Pacific/Wallis": "",
													"Pacific/Yap": "",
													"US/Alaska": "",
													"US/Aleutian": "",
													"US/Arizona": "",
													"US/Central": "",
													"US/East-Indiana": "",
													"US/Eastern": "",
													"US/Hawaii": "",
													"US/Indiana-Starke": "",
													"US/Michigan": "",
													"US/Mountain": "",
													"US/Pacific": "",
													"US/Pacific-New": "",
													"US/Samoa": "",
													"UTC": ""
												}
											},
											"tip": {
												"$ref": "#/components/schemas/terminals_tip"
											},
											"address": {
												"$ref": "#/components/schemas/terminals_address_request"
											},
											"credit_debit_preference": {
												"type": "string",
												"enum": [
													"credit",
													"debit",
													"prompt"
												],
												"default": "prompt",
												"description": "Determines how the terminal should prefer credit vs debit when a card is dipped. `credit` indicates credit is the preferred application selection, whereas `debit` would prefer the debit application. `prompt` will perform the EMV default behavior, which is to prompt if multiple applications exist.",
												"x-enumDescriptions": {
													"credit": "If a card allows credit and debit transactions, automatically process the authorization as credit.",
													"debit": "If a card allows credit and debit transactions, automatically process the authorization as debit.",
													"prompt": "If a card allows credit and debit transactions, prompt the user to make a selection on the terminal."
												}
											},
											"deferred_authorization": {
												"$ref": "#/components/schemas/terminals_deferred_authorization"
											},
											"maintenance_window": {
												"type": "object",
												"description": "Configuration settings for the maintenance window of the physical terminal. Omitting the maintenance window field will result in the use of default values for the field's start and duration.",
												"additionalProperties": false,
												"properties": {
													"duration": {
														"type": "integer",
														"description": "The duration of the maintenance window in hours.",
														"minimum": 1,
														"maximum": 24,
														"default": 4
													},
													"start": {
														"type": "integer",
														"description": "The hour of the day that the maintenance window begins.",
														"minimum": 0,
														"maximum": 23,
														"default": 2
													}
												},
												"required": [
													"start",
													"duration"
												]
											},
											"manual_entry_configuration": {
												"$ref": "#/components/schemas/terminals_manual_entry_configuration"
											},
											"name": {
												"type": "string",
												"description": "The human readable name used to help identify the physical terminal.",
												"example": "Front Desk",
												"maxLength": 255,
												"nullable": true
											},
											"receipt_header_merchant_name": {
												"maxLength": 32,
												"minLength": 1,
												"type": "string",
												"nullable": true,
												"description": "Specify the merchant name to print on receipts. If left null, the account `name` will be used on receipts. **Note:** strings longer than 24 characters will wrap to two lines on receipts printed from Terminals with a built-in printer."
											},
											"sim_card_id": {
												"type": "string",
												"example": "5aad45c2-d128-466a-aae3-d42fef57e2f7",
												"description": "The identifier of the SIM card installed in the terminal. Nullable if terminal does not have a SIM card.",
												"nullable": true,
												"minLength": 1
											}
										},
										"type": "object",
										"required": [
											"currency",
											"supported_card_brands",
											"tip",
											"signature_required",
											"contactless_payments",
											"quick_chip",
											"timezone"
										]
									},
									"reference_id": {
										"type": "string",
										"description": "A reference ID that can be used to identify the terminals resource in WePay's system. Searching capabilities are supported on this field.",
										"minLength": 1,
										"maxLength": 255,
										"nullable": true
									}
								},
								"type": "object",
								"required": [
									"account_id",
									"serial_number",
									"model",
									"terminal_configuration"
								]
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					}
				]
			},
			"get": {
				"tags": [
					"/terminals/*"
				],
				"responses": {
					"200": {
						"description": "A successful collection lookup response.",
						"content": {
							"application/json": {
								"example": {
									"next": "/terminals?page=AQQHAAEX8yf1HDkrXqO7R-wy2joNU6ooRNCyDb-sSbbvR-8J6jKeFgpqprcIsuEnBh4fqImpR2eYjKIgSCirw2mhEFR7m5AsSj1OkG9emN",
									"previous": null,
									"results": [
										{
											"id": "eaf1ef26-ea2d-4be3-b990-ec2c410b54de",
											"resource": "terminals",
											"path": "/terminals/eaf1ef26-ea2d-4be3-b990-ec2c410b54de",
											"owner": {
												"id": "0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
												"path": "/accounts/0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
												"resource": "accounts"
											},
											"api_version": "3.0",
											"status": "active",
											"serial_number": "FA00332-1000138",
											"model": "verifone_p400",
											"reference_id": "abc12345",
											"last_call_home": 1549570307,
											"terminal_application_version": "1.27.311",
											"terminal_configuration": {
												"name": "Front Desk",
												"receipt_header_merchant_name": "Joe's Coffee",
												"maintenance_window": {
													"start": 0,
													"duration": 1
												},
												"manual_entry_configuration": {
													"avs_prompt_enabled": true,
													"cvd_prompt_enabled": true
												},
												"address": {
													"city": "Redwood City",
													"country": "US",
													"line1": "250 Convention Way",
													"line2": "Suite 200",
													"postal_code": "94063",
													"region": "CA"
												},
												"timezone": "US/Pacific",
												"currency": "USD",
												"supported_card_brands": [
													"visa",
													"american_express",
													"discover",
													"mastercard",
													"diners_club",
													"jcb"
												],
												"credit_debit_preference": "prompt",
												"sim_card_id": "5aad45c2-d128-466a-aae3-d42fef57e2f7",
												"tip": {
													"mode": "prompt_on_terminal",
													"terminal_display": {
														"amount_guide_type": "percentage_guide",
														"percentage_guide": {
															"show_amount": false,
															"percentage_low": 15,
															"percentage_medium": 18,
															"percentage_high": 20
														}
													}
												},
												"signature_required": true,
												"contactless_payments": {
													"enabled": true,
													"credit_debit_preference": "credit"
												},
												"quick_chip": {
													"enabled": true
												},
												"deferred_authorization": {
													"enabled": true,
													"international_enabled": true,
													"max_transaction_count": 20,
													"max_total_amount": 250000,
													"max_transaction_amount": 12500,
													"supported_card_entry_modes": [
														"chip",
														"contactless"
													]
												}
											},
											"gateway_id": "AB00004D3Z"
										}
									],
									"api_version": "3.0"
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"api_version": {
											"type": "string",
											"example": "3.0"
										},
										"next": {
											"type": "string",
											"nullable": true,
											"example": "/terminals?page=AQQHAAEX8yf1HDkrXqO7R-wy2joNU6ooRNCyDb-sSbbvR-8J6jKeFgpqprcIsuEnBh4fqImpR2eYjKIgSCirw2mhEFR7m5AsSj1OkG9emN"
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"example": null
										},
										"results": {
											"type": "array",
											"uniqueItems": true,
											"items": {
												"$ref": "#/components/schemas/terminal-resp"
											}
										}
									},
									"type": "object",
									"required": [
										"next",
										"previous",
										"results",
										"api_version"
									]
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "Look up a collection of terminals, filtered by the optional specified parameters. **Note:** By default, the response *will not* include deleted terminals, while it *will* include deactivated terminals.",
				"operationId": "GET_terminals",
				"summary": "Get a collection of terminals",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements starting from this page. If specified, no other query parameters can be specified.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Maximum number of items per page of results.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 50,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The create time epoch timestamp (in seconds) for the start of the search window, inclusive.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The create time epoch timestamp (in seconds) for the end of the search window, inclusive.",
						"schema": {
							"type": "integer",
							"format": "int64",
							"minimum": 0
						}
					},
					{
						"name": "account_id",
						"in": "query",
						"schema": {
							"$ref": "#/components/schemas/id"
						}
					},
					{
						"name": "reference_id",
						"in": "query",
						"description": "Filter search window by elements that match the reference ID.",
						"schema": {
							"type": "string",
							"description": "A reference ID that can be used to identify the terminals resource in WePay's system. Searching capabilities are supported on this field.",
							"minLength": 1,
							"maxLength": 255,
							"nullable": true
						}
					},
					{
						"name": "model",
						"in": "query",
						"description": "Filter search window by elements that match the model.",
						"schema": {
							"type": "string",
							"description": "The model of the physical terminal. **Note:** Models `ingenico_lane3000` and `xac_at170r` are currently only usable in the stage environment. If you are interested in using these models, please reach out to your integration team or account manager at WePay.",
							"enum": [
								"verifone_p400",
								"verifone_v400m",
								"ingenico_lane3000",
								"xac_at170r"
							],
							"x-enumDescriptions": {
								"verifone_p400": "This terminal is a [VeriFone P400](/card-present/procure-terminals/#verifone-p400).",
								"verifone_v400m": "This terminal is a [VeriFone V400m](/card-present/procure-terminals/#verifone-v400m).",
								"ingenico_lane3000": "This terminal is a an Ingenico Lane 3000. **Note:** This model is not generally available.",
								"xac_at170r": "This terminal is a an XAC AT170R, used in WePay's [Smart POS](/card-present/procure-smartpos/#xac-at170r) solution."
							}
						}
					},
					{
						"name": "serial_number",
						"in": "query",
						"description": "Filter search window by elements that match the serial_number.",
						"schema": {
							"type": "string",
							"description": "The serial number of the physical terminal.",
							"minLength": 1,
							"maxLength": 32,
							"pattern": "^[a-zA-Z0-9-]+$",
							"example": "FA00332-1000138"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "Filter search window by elements that match the status list.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/terminals_status"
							}
						}
					},
					{
						"name": "gateway_id",
						"in": "query",
						"description": "Filter search window by elements that match the gateway_id.",
						"schema": {
							"maxLength": 255,
							"minLength": 1,
							"type": "string",
							"description": "Unique identifier of the terminal used by our payment gateway"
						}
					}
				]
			}
		},
		"/terminals/{id}": {
			"post": {
				"tags": [
					"/terminals/*"
				],
				"responses": {
					"200": {
						"description": "A successful terminal modification response.",
						"content": {
							"application/json": {
								"example": {
									"id": "eaf1ef26-ea2d-4be3-b990-ec2c410b54de",
									"resource": "terminals",
									"path": "/terminals/eaf1ef26-ea2d-4be3-b990-ec2c410b54de",
									"owner": {
										"id": "0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
										"path": "/accounts/0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
										"resource": "accounts"
									},
									"api_version": "3.0",
									"status": "active",
									"serial_number": "FA00332-1000138",
									"model": "verifone_p400",
									"reference_id": "abc12345",
									"last_call_home": 1549570307,
									"terminal_application_version": "1.27.311",
									"terminal_configuration": {
										"name": "Front Desk",
										"receipt_header_merchant_name": null,
										"maintenance_window": {
											"start": 0,
											"duration": 1
										},
										"manual_entry_configuration": {
											"avs_prompt_enabled": true,
											"cvd_prompt_enabled": true
										},
										"address": {
											"city": "Redwood City",
											"country": "US",
											"line1": "250 Convention Way",
											"line2": "Suite 200",
											"postal_code": "94063",
											"region": "CA"
										},
										"timezone": "US/Pacific",
										"currency": "USD",
										"supported_card_brands": [
											"visa",
											"american_express",
											"discover",
											"mastercard",
											"diners_club",
											"jcb"
										],
										"credit_debit_preference": "prompt",
										"sim_card_id": "5aad45c2-d128-466a-aae3-d42fef57e2f7",
										"tip": {
											"mode": "prompt_on_terminal",
											"terminal_display": {
												"amount_guide_type": "percentage_guide",
												"percentage_guide": {
													"show_amount": false,
													"percentage_low": 15,
													"percentage_medium": 18,
													"percentage_high": 20
												}
											}
										},
										"signature_required": true,
										"contactless_payments": {
											"enabled": true,
											"credit_debit_preference": "credit"
										},
										"quick_chip": {
											"enabled": true
										},
										"deferred_authorization": {
											"enabled": true,
											"international_enabled": true,
											"max_transaction_count": 20,
											"max_total_amount": 250000,
											"max_transaction_amount": 12500,
											"supported_card_entry_modes": [
												"chip",
												"contactless"
											]
										}
									},
									"gateway_id": "AB00004D3Z"
								},
								"schema": {
									"$ref": "#/components/schemas/terminal-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "Modify a terminal's configuration. Note that changes in configuration will only be reflected on your physical terminal when it has performed an online update. You cannot modify the configuration of an inactive or deleted terminal. **NOTE:** the `currency` parameter for Terminals **only supports `USD`**.",
				"operationId": "POST_terminals-id",
				"summary": "Update a terminal",
				"requestBody": {
					"content": {
						"application/json": {
							"example": {
								"reference_id": "abc12345",
								"terminal_configuration": {
									"contactless_payments": {
										"enabled": true,
										"credit_debit_preference": "credit"
									}
								}
							},
							"schema": {
								"additionalProperties": false,
								"properties": {
									"reference_id": {
										"type": "string",
										"description": "A reference ID that can be used to identify the terminals resource in WePay's system. Searching capabilities are supported on this field.",
										"minLength": 1,
										"maxLength": 255,
										"nullable": true
									},
									"terminal_configuration": {
										"additionalProperties": false,
										"properties": {
											"address": {
												"$ref": "#/components/schemas/terminals_address_request"
											},
											"contactless_payments": {
												"$ref": "#/components/schemas/contactless_payments-req"
											},
											"credit_debit_preference": {
												"type": "string",
												"enum": [
													"credit",
													"debit",
													"prompt"
												],
												"default": "prompt",
												"description": "Determines how the terminal should prefer credit vs debit when a card is dipped. `credit` indicates credit is the preferred application selection, whereas `debit` would prefer the debit application. `prompt` will perform the EMV default behavior, which is to prompt if multiple applications exist.",
												"x-enumDescriptions": {
													"credit": "If a card allows credit and debit transactions, automatically process the authorization as credit.",
													"debit": "If a card allows credit and debit transactions, automatically process the authorization as debit.",
													"prompt": "If a card allows credit and debit transactions, prompt the user to make a selection on the terminal."
												}
											},
											"currency": {
												"$ref": "#/components/schemas/usd-currency"
											},
											"deferred_authorization": {
												"$ref": "#/components/schemas/terminals_deferred_authorization"
											},
											"maintenance_window": {
												"type": "object",
												"description": "Configuration settings for the maintenance window of the physical terminal. Omitting the maintenance window field will result in the use of default values for the field's start and duration.",
												"additionalProperties": false,
												"properties": {
													"duration": {
														"type": "integer",
														"description": "The duration of the maintenance window in hours.",
														"minimum": 1,
														"maximum": 24,
														"default": 4
													},
													"start": {
														"type": "integer",
														"description": "The hour of the day that the maintenance window begins.",
														"minimum": 0,
														"maximum": 23,
														"default": 2
													}
												},
												"required": [
													"start",
													"duration"
												]
											},
											"manual_entry_configuration": {
												"$ref": "#/components/schemas/terminals_manual_entry_configuration"
											},
											"name": {
												"type": "string",
												"description": "The human readable name used to help identify the physical terminal.",
												"example": "Front Desk",
												"maxLength": 255,
												"nullable": true
											},
											"quick_chip": {
												"$ref": "#/components/schemas/terminals_quick_chip"
											},
											"receipt_header_merchant_name": {
												"maxLength": 32,
												"minLength": 1,
												"type": "string",
												"nullable": true,
												"description": "Specify the merchant name to print on receipts. If left null, the account `name` will be used on receipts. **Note:** strings longer than 24 characters will wrap to two lines on receipts printed from Terminals with a built-in printer."
											},
											"signature_required": {
												"type": "boolean",
												"description": "Whether or not this terminal requires signature verification from payers."
											},
											"sim_card_id": {
												"type": "string",
												"example": "5aad45c2-d128-466a-aae3-d42fef57e2f7",
												"description": "The identifier of the SIM card installed in the terminal. Nullable if terminal does not have a SIM card.",
												"nullable": true,
												"minLength": 1
											},
											"supported_card_brands": {
												"$ref": "#/components/schemas/terminals-supported_card_brands"
											},
											"timezone": {
												"type": "string",
												"description": "Timezone of the terminal'",
												"enum": [
													"Africa/Abidjan",
													"Africa/Accra",
													"Africa/Addis_Ababa",
													"Africa/Algiers",
													"Africa/Asmara",
													"Africa/Asmera",
													"Africa/Bamako",
													"Africa/Bangui",
													"Africa/Banjul",
													"Africa/Bissau",
													"Africa/Blantyre",
													"Africa/Brazzaville",
													"Africa/Bujumbura",
													"Africa/Cairo",
													"Africa/Casablanca",
													"Africa/Ceuta",
													"Africa/Conakry",
													"Africa/Dakar",
													"Africa/Dar_es_Salaam",
													"Africa/Djibouti",
													"Africa/Douala",
													"Africa/El_Aaiun",
													"Africa/Freetown",
													"Africa/Gaborone",
													"Africa/Harare",
													"Africa/Johannesburg",
													"Africa/Juba",
													"Africa/Kampala",
													"Africa/Khartoum",
													"Africa/Kigali",
													"Africa/Kinshasa",
													"Africa/Lagos",
													"Africa/Libreville",
													"Africa/Lome",
													"Africa/Luanda",
													"Africa/Lubumbashi",
													"Africa/Lusaka",
													"Africa/Malabo",
													"Africa/Maputo",
													"Africa/Maseru",
													"Africa/Mbabane",
													"Africa/Mogadishu",
													"Africa/Monrovia",
													"Africa/Nairobi",
													"Africa/Ndjamena",
													"Africa/Niamey",
													"Africa/Nouakchott",
													"Africa/Ouagadougou",
													"Africa/Porto-Novo",
													"Africa/Sao_Tome",
													"Africa/Timbuktu",
													"Africa/Tripoli",
													"Africa/Tunis",
													"Africa/Windhoek",
													"America/Adak",
													"America/Anchorage",
													"America/Anguilla",
													"America/Antigua",
													"America/Araguaina",
													"America/Argentina/Buenos_Aires",
													"America/Argentina/Catamarca",
													"America/Argentina/ComodRivadavia",
													"America/Argentina/Cordoba",
													"America/Argentina/Jujuy",
													"America/Argentina/La_Rioja",
													"America/Argentina/Mendoza",
													"America/Argentina/Rio_Gallegos",
													"America/Argentina/Salta",
													"America/Argentina/San_Juan",
													"America/Argentina/San_Luis",
													"America/Argentina/Tucuman",
													"America/Argentina/Ushuaia",
													"America/Aruba",
													"America/Asuncion",
													"America/Atikokan",
													"America/Atka",
													"America/Bahia",
													"America/Bahia_Banderas",
													"America/Barbados",
													"America/Belem",
													"America/Belize",
													"America/Blanc-Sablon",
													"America/Boa_Vista",
													"America/Bogota",
													"America/Boise",
													"America/Buenos_Aires",
													"America/Cambridge_Bay",
													"America/Campo_Grande",
													"America/Cancun",
													"America/Caracas",
													"America/Catamarca",
													"America/Cayenne",
													"America/Cayman",
													"America/Chicago",
													"America/Chihuahua",
													"America/Coral_Harbour",
													"America/Cordoba",
													"America/Costa_Rica",
													"America/Creston",
													"America/Cuiaba",
													"America/Curacao",
													"America/Danmarkshavn",
													"America/Dawson",
													"America/Dawson_Creek",
													"America/Denver",
													"America/Detroit",
													"America/Dominica",
													"America/Edmonton",
													"America/Eirunepe",
													"America/El_Salvador",
													"America/Ensenada",
													"America/Fort_Nelson",
													"America/Fort_Wayne",
													"America/Fortaleza",
													"America/Glace_Bay",
													"America/Godthab",
													"America/Goose_Bay",
													"America/Grand_Turk",
													"America/Grenada",
													"America/Guadeloupe",
													"America/Guatemala",
													"America/Guayaquil",
													"America/Guyana",
													"America/Halifax",
													"America/Havana",
													"America/Hermosillo",
													"America/Indiana/Indianapolis",
													"America/Indiana/Knox",
													"America/Indiana/Marengo",
													"America/Indiana/Petersburg",
													"America/Indiana/Tell_City",
													"America/Indiana/Vevay",
													"America/Indiana/Vincennes",
													"America/Indiana/Winamac",
													"America/Indianapolis",
													"America/Inuvik",
													"America/Iqaluit",
													"America/Jamaica",
													"America/Jujuy",
													"America/Juneau",
													"America/Kentucky/Louisville",
													"America/Kentucky/Monticello",
													"America/Knox_IN",
													"America/Kralendijk",
													"America/La_Paz",
													"America/Lima",
													"America/Los_Angeles",
													"America/Louisville",
													"America/Lower_Princes",
													"America/Maceio",
													"America/Managua",
													"America/Manaus",
													"America/Marigot",
													"America/Martinique",
													"America/Matamoros",
													"America/Mazatlan",
													"America/Mendoza",
													"America/Menominee",
													"America/Merida",
													"America/Metlakatla",
													"America/Mexico_City",
													"America/Miquelon",
													"America/Moncton",
													"America/Monterrey",
													"America/Montevideo",
													"America/Montreal",
													"America/Montserrat",
													"America/Nassau",
													"America/New_York",
													"America/Nipigon",
													"America/Nome",
													"America/Noronha",
													"America/North_Dakota/Beulah",
													"America/North_Dakota/Center",
													"America/North_Dakota/New_Salem",
													"America/Ojinaga",
													"America/Panama",
													"America/Pangnirtung",
													"America/Paramaribo",
													"America/Phoenix",
													"America/Port-au-Prince",
													"America/Port_of_Spain",
													"America/Porto_Acre",
													"America/Porto_Velho",
													"America/Puerto_Rico",
													"America/Punta_Arenas",
													"America/Rainy_River",
													"America/Rankin_Inlet",
													"America/Recife",
													"America/Regina",
													"America/Resolute",
													"America/Rio_Branco",
													"America/Rosario",
													"America/Santa_Isabel",
													"America/Santarem",
													"America/Santiago",
													"America/Santo_Domingo",
													"America/Sao_Paulo",
													"America/Scoresbysund",
													"America/Shiprock",
													"America/Sitka",
													"America/St_Barthelemy",
													"America/St_Johns",
													"America/St_Kitts",
													"America/St_Lucia",
													"America/St_Thomas",
													"America/St_Vincent",
													"America/Swift_Current",
													"America/Tegucigalpa",
													"America/Thule",
													"America/Thunder_Bay",
													"America/Tijuana",
													"America/Toronto",
													"America/Tortola",
													"America/Vancouver",
													"America/Virgin",
													"America/Whitehorse",
													"America/Winnipeg",
													"America/Yakutat",
													"America/Yellowknife",
													"Antarctica/Casey",
													"Antarctica/Davis",
													"Antarctica/DumontDUrville",
													"Antarctica/Macquarie",
													"Antarctica/Mawson",
													"Antarctica/McMurdo",
													"Antarctica/Palmer",
													"Antarctica/Rothera",
													"Antarctica/South_Pole",
													"Antarctica/Syowa",
													"Antarctica/Troll",
													"Antarctica/Vostok",
													"Arctic/Longyearbyen",
													"Asia/Aden",
													"Asia/Almaty",
													"Asia/Amman",
													"Asia/Anadyr",
													"Asia/Aqtau",
													"Asia/Aqtobe",
													"Asia/Ashgabat",
													"Asia/Ashkhabad",
													"Asia/Atyrau",
													"Asia/Baghdad",
													"Asia/Bahrain",
													"Asia/Baku",
													"Asia/Bangkok",
													"Asia/Barnaul",
													"Asia/Beirut",
													"Asia/Bishkek",
													"Asia/Brunei",
													"Asia/Calcutta",
													"Asia/Chita",
													"Asia/Choibalsan",
													"Asia/Chongqing",
													"Asia/Chungking",
													"Asia/Colombo",
													"Asia/Dacca",
													"Asia/Damascus",
													"Asia/Dhaka",
													"Asia/Dili",
													"Asia/Dubai",
													"Asia/Dushanbe",
													"Asia/Famagusta",
													"Asia/Gaza",
													"Asia/Harbin",
													"Asia/Hebron",
													"Asia/Ho_Chi_Minh",
													"Asia/Hong_Kong",
													"Asia/Hovd",
													"Asia/Irkutsk",
													"Asia/Istanbul",
													"Asia/Jakarta",
													"Asia/Jayapura",
													"Asia/Jerusalem",
													"Asia/Kabul",
													"Asia/Kamchatka",
													"Asia/Karachi",
													"Asia/Kashgar",
													"Asia/Kathmandu",
													"Asia/Katmandu",
													"Asia/Khandyga",
													"Asia/Kolkata",
													"Asia/Krasnoyarsk",
													"Asia/Kuala_Lumpur",
													"Asia/Kuching",
													"Asia/Kuwait",
													"Asia/Macao",
													"Asia/Macau",
													"Asia/Magadan",
													"Asia/Makassar",
													"Asia/Manila",
													"Asia/Muscat",
													"Asia/Nicosia",
													"Asia/Novokuznetsk",
													"Asia/Novosibirsk",
													"Asia/Omsk",
													"Asia/Oral",
													"Asia/Phnom_Penh",
													"Asia/Pontianak",
													"Asia/Pyongyang",
													"Asia/Qatar",
													"Asia/Qostanay",
													"Asia/Qyzylorda",
													"Asia/Rangoon",
													"Asia/Riyadh",
													"Asia/Saigon",
													"Asia/Sakhalin",
													"Asia/Samarkand",
													"Asia/Seoul",
													"Asia/Shanghai",
													"Asia/Singapore",
													"Asia/Srednekolymsk",
													"Asia/Taipei",
													"Asia/Tashkent",
													"Asia/Tbilisi",
													"Asia/Tehran",
													"Asia/Tel_Aviv",
													"Asia/Thimbu",
													"Asia/Thimphu",
													"Asia/Tokyo",
													"Asia/Tomsk",
													"Asia/Ujung_Pandang",
													"Asia/Ulaanbaatar",
													"Asia/Ulan_Bator",
													"Asia/Urumqi",
													"Asia/Ust-Nera",
													"Asia/Vientiane",
													"Asia/Vladivostok",
													"Asia/Yakutsk",
													"Asia/Yangon",
													"Asia/Yekaterinburg",
													"Asia/Yerevan",
													"Atlantic/Azores",
													"Atlantic/Bermuda",
													"Atlantic/Canary",
													"Atlantic/Cape_Verde",
													"Atlantic/Faeroe",
													"Atlantic/Faroe",
													"Atlantic/Jan_Mayen",
													"Atlantic/Madeira",
													"Atlantic/Reykjavik",
													"Atlantic/South_Georgia",
													"Atlantic/St_Helena",
													"Atlantic/Stanley",
													"Australia/Adelaide",
													"Australia/Brisbane",
													"Australia/Broken_Hill",
													"Australia/Canberra",
													"Australia/Currie",
													"Australia/Darwin",
													"Australia/Eucla",
													"Australia/Hobart",
													"Australia/Lindeman",
													"Australia/Lord_Howe",
													"Australia/Melbourne",
													"Australia/Perth",
													"Australia/Sydney",
													"Australia/Yancowinna",
													"Etc/GMT",
													"Etc/GMT+0",
													"Etc/GMT+1",
													"Etc/GMT+10",
													"Etc/GMT+11",
													"Etc/GMT+12",
													"Etc/GMT+2",
													"Etc/GMT+3",
													"Etc/GMT+4",
													"Etc/GMT+5",
													"Etc/GMT+6",
													"Etc/GMT+7",
													"Etc/GMT+8",
													"Etc/GMT+9",
													"Etc/GMT-0",
													"Etc/GMT-1",
													"Etc/GMT-10",
													"Etc/GMT-11",
													"Etc/GMT-12",
													"Etc/GMT-13",
													"Etc/GMT-14",
													"Etc/GMT-2",
													"Etc/GMT-3",
													"Etc/GMT-4",
													"Etc/GMT-5",
													"Etc/GMT-6",
													"Etc/GMT-7",
													"Etc/GMT-8",
													"Etc/GMT-9",
													"Etc/GMT0",
													"Etc/UTC",
													"Europe/Amsterdam",
													"Europe/Andorra",
													"Europe/Astrakhan",
													"Europe/Athens",
													"Europe/Belfast",
													"Europe/Belgrade",
													"Europe/Berlin",
													"Europe/Bratislava",
													"Europe/Brussels",
													"Europe/Bucharest",
													"Europe/Budapest",
													"Europe/Busingen",
													"Europe/Chisinau",
													"Europe/Copenhagen",
													"Europe/Dublin",
													"Europe/Gibraltar",
													"Europe/Guernsey",
													"Europe/Helsinki",
													"Europe/Isle_of_Man",
													"Europe/Istanbul",
													"Europe/Jersey",
													"Europe/Kaliningrad",
													"Europe/Kiev",
													"Europe/Kirov",
													"Europe/Lisbon",
													"Europe/Ljubljana",
													"Europe/London",
													"Europe/Luxembourg",
													"Europe/Madrid",
													"Europe/Malta",
													"Europe/Mariehamn",
													"Europe/Minsk",
													"Europe/Monaco",
													"Europe/Moscow",
													"Europe/Nicosia",
													"Europe/Oslo",
													"Europe/Paris",
													"Europe/Podgorica",
													"Europe/Prague",
													"Europe/Riga",
													"Europe/Rome",
													"Europe/Samara",
													"Europe/San_Marino",
													"Europe/Sarajevo",
													"Europe/Saratov",
													"Europe/Simferopol",
													"Europe/Skopje",
													"Europe/Sofia",
													"Europe/Stockholm",
													"Europe/Tallinn",
													"Europe/Tirane",
													"Europe/Tiraspol",
													"Europe/Ulyanovsk",
													"Europe/Uzhgorod",
													"Europe/Vaduz",
													"Europe/Vatican",
													"Europe/Vienna",
													"Europe/Vilnius",
													"Europe/Volgograd",
													"Europe/Warsaw",
													"Europe/Zagreb",
													"Europe/Zaporozhye",
													"Europe/Zurich",
													"GMT",
													"Indian/Antananarivo",
													"Indian/Chagos",
													"Indian/Christmas",
													"Indian/Cocos",
													"Indian/Comoro",
													"Indian/Kerguelen",
													"Indian/Mahe",
													"Indian/Maldives",
													"Indian/Mauritius",
													"Indian/Mayotte",
													"Indian/Reunion",
													"Pacific/Apia",
													"Pacific/Auckland",
													"Pacific/Bougainville",
													"Pacific/Chatham",
													"Pacific/Chuuk",
													"Pacific/Easter",
													"Pacific/Efate",
													"Pacific/Enderbury",
													"Pacific/Fakaofo",
													"Pacific/Fiji",
													"Pacific/Funafuti",
													"Pacific/Galapagos",
													"Pacific/Gambier",
													"Pacific/Guadalcanal",
													"Pacific/Guam",
													"Pacific/Honolulu",
													"Pacific/Johnston",
													"Pacific/Kiritimati",
													"Pacific/Kosrae",
													"Pacific/Kwajalein",
													"Pacific/Majuro",
													"Pacific/Marquesas",
													"Pacific/Midway",
													"Pacific/Nauru",
													"Pacific/Niue",
													"Pacific/Norfolk",
													"Pacific/Noumea",
													"Pacific/Pago_Pago",
													"Pacific/Palau",
													"Pacific/Pitcairn",
													"Pacific/Pohnpei",
													"Pacific/Ponape",
													"Pacific/Port_Moresby",
													"Pacific/Rarotonga",
													"Pacific/Saipan",
													"Pacific/Samoa",
													"Pacific/Tahiti",
													"Pacific/Tarawa",
													"Pacific/Tongatapu",
													"Pacific/Truk",
													"Pacific/Wake",
													"Pacific/Wallis",
													"Pacific/Yap",
													"US/Alaska",
													"US/Aleutian",
													"US/Arizona",
													"US/Central",
													"US/East-Indiana",
													"US/Eastern",
													"US/Hawaii",
													"US/Indiana-Starke",
													"US/Michigan",
													"US/Mountain",
													"US/Pacific",
													"US/Pacific-New",
													"US/Samoa",
													"UTC"
												],
												"x-enumDescriptions": {
													"Africa/Abidjan": "",
													"Africa/Accra": "",
													"Africa/Addis_Ababa": "",
													"Africa/Algiers": "",
													"Africa/Asmara": "",
													"Africa/Asmera": "",
													"Africa/Bamako": "",
													"Africa/Bangui": "",
													"Africa/Banjul": "",
													"Africa/Bissau": "",
													"Africa/Blantyre": "",
													"Africa/Brazzaville": "",
													"Africa/Bujumbura": "",
													"Africa/Cairo": "",
													"Africa/Casablanca": "",
													"Africa/Ceuta": "",
													"Africa/Conakry": "",
													"Africa/Dakar": "",
													"Africa/Dar_es_Salaam": "",
													"Africa/Djibouti": "",
													"Africa/Douala": "",
													"Africa/El_Aaiun": "",
													"Africa/Freetown": "",
													"Africa/Gaborone": "",
													"Africa/Harare": "",
													"Africa/Johannesburg": "",
													"Africa/Juba": "",
													"Africa/Kampala": "",
													"Africa/Khartoum": "",
													"Africa/Kigali": "",
													"Africa/Kinshasa": "",
													"Africa/Lagos": "",
													"Africa/Libreville": "",
													"Africa/Lome": "",
													"Africa/Luanda": "",
													"Africa/Lubumbashi": "",
													"Africa/Lusaka": "",
													"Africa/Malabo": "",
													"Africa/Maputo": "",
													"Africa/Maseru": "",
													"Africa/Mbabane": "",
													"Africa/Mogadishu": "",
													"Africa/Monrovia": "",
													"Africa/Nairobi": "",
													"Africa/Ndjamena": "",
													"Africa/Niamey": "",
													"Africa/Nouakchott": "",
													"Africa/Ouagadougou": "",
													"Africa/Porto-Novo": "",
													"Africa/Sao_Tome": "",
													"Africa/Timbuktu": "",
													"Africa/Tripoli": "",
													"Africa/Tunis": "",
													"Africa/Windhoek": "",
													"America/Adak": "",
													"America/Anchorage": "",
													"America/Anguilla": "",
													"America/Antigua": "",
													"America/Araguaina": "",
													"America/Argentina/Buenos_Aires": "",
													"America/Argentina/Catamarca": "",
													"America/Argentina/ComodRivadavia": "",
													"America/Argentina/Cordoba": "",
													"America/Argentina/Jujuy": "",
													"America/Argentina/La_Rioja": "",
													"America/Argentina/Mendoza": "",
													"America/Argentina/Rio_Gallegos": "",
													"America/Argentina/Salta": "",
													"America/Argentina/San_Juan": "",
													"America/Argentina/San_Luis": "",
													"America/Argentina/Tucuman": "",
													"America/Argentina/Ushuaia": "",
													"America/Aruba": "",
													"America/Asuncion": "",
													"America/Atikokan": "",
													"America/Atka": "",
													"America/Bahia": "",
													"America/Bahia_Banderas": "",
													"America/Barbados": "",
													"America/Belem": "",
													"America/Belize": "",
													"America/Blanc-Sablon": "",
													"America/Boa_Vista": "",
													"America/Bogota": "",
													"America/Boise": "",
													"America/Buenos_Aires": "",
													"America/Cambridge_Bay": "",
													"America/Campo_Grande": "",
													"America/Cancun": "",
													"America/Caracas": "",
													"America/Catamarca": "",
													"America/Cayenne": "",
													"America/Cayman": "",
													"America/Chicago": "",
													"America/Chihuahua": "",
													"America/Coral_Harbour": "",
													"America/Cordoba": "",
													"America/Costa_Rica": "",
													"America/Creston": "",
													"America/Cuiaba": "",
													"America/Curacao": "",
													"America/Danmarkshavn": "",
													"America/Dawson": "",
													"America/Dawson_Creek": "",
													"America/Denver": "",
													"America/Detroit": "",
													"America/Dominica": "",
													"America/Edmonton": "",
													"America/Eirunepe": "",
													"America/El_Salvador": "",
													"America/Ensenada": "",
													"America/Fort_Nelson": "",
													"America/Fort_Wayne": "",
													"America/Fortaleza": "",
													"America/Glace_Bay": "",
													"America/Godthab": "",
													"America/Goose_Bay": "",
													"America/Grand_Turk": "",
													"America/Grenada": "",
													"America/Guadeloupe": "",
													"America/Guatemala": "",
													"America/Guayaquil": "",
													"America/Guyana": "",
													"America/Halifax": "",
													"America/Havana": "",
													"America/Hermosillo": "",
													"America/Indiana/Indianapolis": "",
													"America/Indiana/Knox": "",
													"America/Indiana/Marengo": "",
													"America/Indiana/Petersburg": "",
													"America/Indiana/Tell_City": "",
													"America/Indiana/Vevay": "",
													"America/Indiana/Vincennes": "",
													"America/Indiana/Winamac": "",
													"America/Indianapolis": "",
													"America/Inuvik": "",
													"America/Iqaluit": "",
													"America/Jamaica": "",
													"America/Jujuy": "",
													"America/Juneau": "",
													"America/Kentucky/Louisville": "",
													"America/Kentucky/Monticello": "",
													"America/Knox_IN": "",
													"America/Kralendijk": "",
													"America/La_Paz": "",
													"America/Lima": "",
													"America/Los_Angeles": "",
													"America/Louisville": "",
													"America/Lower_Princes": "",
													"America/Maceio": "",
													"America/Managua": "",
													"America/Manaus": "",
													"America/Marigot": "",
													"America/Martinique": "",
													"America/Matamoros": "",
													"America/Mazatlan": "",
													"America/Mendoza": "",
													"America/Menominee": "",
													"America/Merida": "",
													"America/Metlakatla": "",
													"America/Mexico_City": "",
													"America/Miquelon": "",
													"America/Moncton": "",
													"America/Monterrey": "",
													"America/Montevideo": "",
													"America/Montreal": "",
													"America/Montserrat": "",
													"America/Nassau": "",
													"America/New_York": "",
													"America/Nipigon": "",
													"America/Nome": "",
													"America/Noronha": "",
													"America/North_Dakota/Beulah": "",
													"America/North_Dakota/Center": "",
													"America/North_Dakota/New_Salem": "",
													"America/Ojinaga": "",
													"America/Panama": "",
													"America/Pangnirtung": "",
													"America/Paramaribo": "",
													"America/Phoenix": "",
													"America/Port-au-Prince": "",
													"America/Port_of_Spain": "",
													"America/Porto_Acre": "",
													"America/Porto_Velho": "",
													"America/Puerto_Rico": "",
													"America/Punta_Arenas": "",
													"America/Rainy_River": "",
													"America/Rankin_Inlet": "",
													"America/Recife": "",
													"America/Regina": "",
													"America/Resolute": "",
													"America/Rio_Branco": "",
													"America/Rosario": "",
													"America/Santa_Isabel": "",
													"America/Santarem": "",
													"America/Santiago": "",
													"America/Santo_Domingo": "",
													"America/Sao_Paulo": "",
													"America/Scoresbysund": "",
													"America/Shiprock": "",
													"America/Sitka": "",
													"America/St_Barthelemy": "",
													"America/St_Johns": "",
													"America/St_Kitts": "",
													"America/St_Lucia": "",
													"America/St_Thomas": "",
													"America/St_Vincent": "",
													"America/Swift_Current": "",
													"America/Tegucigalpa": "",
													"America/Thule": "",
													"America/Thunder_Bay": "",
													"America/Tijuana": "",
													"America/Toronto": "",
													"America/Tortola": "",
													"America/Vancouver": "",
													"America/Virgin": "",
													"America/Whitehorse": "",
													"America/Winnipeg": "",
													"America/Yakutat": "",
													"America/Yellowknife": "",
													"Antarctica/Casey": "",
													"Antarctica/Davis": "",
													"Antarctica/DumontDUrville": "",
													"Antarctica/Macquarie": "",
													"Antarctica/Mawson": "",
													"Antarctica/McMurdo": "",
													"Antarctica/Palmer": "",
													"Antarctica/Rothera": "",
													"Antarctica/South_Pole": "",
													"Antarctica/Syowa": "",
													"Antarctica/Troll": "",
													"Antarctica/Vostok": "",
													"Arctic/Longyearbyen": "",
													"Asia/Aden": "",
													"Asia/Almaty": "",
													"Asia/Amman": "",
													"Asia/Anadyr": "",
													"Asia/Aqtau": "",
													"Asia/Aqtobe": "",
													"Asia/Ashgabat": "",
													"Asia/Ashkhabad": "",
													"Asia/Atyrau": "",
													"Asia/Baghdad": "",
													"Asia/Bahrain": "",
													"Asia/Baku": "",
													"Asia/Bangkok": "",
													"Asia/Barnaul": "",
													"Asia/Beirut": "",
													"Asia/Bishkek": "",
													"Asia/Brunei": "",
													"Asia/Calcutta": "",
													"Asia/Chita": "",
													"Asia/Choibalsan": "",
													"Asia/Chongqing": "",
													"Asia/Chungking": "",
													"Asia/Colombo": "",
													"Asia/Dacca": "",
													"Asia/Damascus": "",
													"Asia/Dhaka": "",
													"Asia/Dili": "",
													"Asia/Dubai": "",
													"Asia/Dushanbe": "",
													"Asia/Famagusta": "",
													"Asia/Gaza": "",
													"Asia/Harbin": "",
													"Asia/Hebron": "",
													"Asia/Ho_Chi_Minh": "",
													"Asia/Hong_Kong": "",
													"Asia/Hovd": "",
													"Asia/Irkutsk": "",
													"Asia/Istanbul": "",
													"Asia/Jakarta": "",
													"Asia/Jayapura": "",
													"Asia/Jerusalem": "",
													"Asia/Kabul": "",
													"Asia/Kamchatka": "",
													"Asia/Karachi": "",
													"Asia/Kashgar": "",
													"Asia/Kathmandu": "",
													"Asia/Katmandu": "",
													"Asia/Khandyga": "",
													"Asia/Kolkata": "",
													"Asia/Krasnoyarsk": "",
													"Asia/Kuala_Lumpur": "",
													"Asia/Kuching": "",
													"Asia/Kuwait": "",
													"Asia/Macao": "",
													"Asia/Macau": "",
													"Asia/Magadan": "",
													"Asia/Makassar": "",
													"Asia/Manila": "",
													"Asia/Muscat": "",
													"Asia/Nicosia": "",
													"Asia/Novokuznetsk": "",
													"Asia/Novosibirsk": "",
													"Asia/Omsk": "",
													"Asia/Oral": "",
													"Asia/Phnom_Penh": "",
													"Asia/Pontianak": "",
													"Asia/Pyongyang": "",
													"Asia/Qatar": "",
													"Asia/Qostanay": "",
													"Asia/Qyzylorda": "",
													"Asia/Rangoon": "",
													"Asia/Riyadh": "",
													"Asia/Saigon": "",
													"Asia/Sakhalin": "",
													"Asia/Samarkand": "",
													"Asia/Seoul": "",
													"Asia/Shanghai": "",
													"Asia/Singapore": "",
													"Asia/Srednekolymsk": "",
													"Asia/Taipei": "",
													"Asia/Tashkent": "",
													"Asia/Tbilisi": "",
													"Asia/Tehran": "",
													"Asia/Tel_Aviv": "",
													"Asia/Thimbu": "",
													"Asia/Thimphu": "",
													"Asia/Tokyo": "",
													"Asia/Tomsk": "",
													"Asia/Ujung_Pandang": "",
													"Asia/Ulaanbaatar": "",
													"Asia/Ulan_Bator": "",
													"Asia/Urumqi": "",
													"Asia/Ust-Nera": "",
													"Asia/Vientiane": "",
													"Asia/Vladivostok": "",
													"Asia/Yakutsk": "",
													"Asia/Yangon": "",
													"Asia/Yekaterinburg": "",
													"Asia/Yerevan": "",
													"Atlantic/Azores": "",
													"Atlantic/Bermuda": "",
													"Atlantic/Canary": "",
													"Atlantic/Cape_Verde": "",
													"Atlantic/Faeroe": "",
													"Atlantic/Faroe": "",
													"Atlantic/Jan_Mayen": "",
													"Atlantic/Madeira": "",
													"Atlantic/Reykjavik": "",
													"Atlantic/South_Georgia": "",
													"Atlantic/St_Helena": "",
													"Atlantic/Stanley": "",
													"Australia/Adelaide": "",
													"Australia/Brisbane": "",
													"Australia/Broken_Hill": "",
													"Australia/Canberra": "",
													"Australia/Currie": "",
													"Australia/Darwin": "",
													"Australia/Eucla": "",
													"Australia/Hobart": "",
													"Australia/Lindeman": "",
													"Australia/Lord_Howe": "",
													"Australia/Melbourne": "",
													"Australia/Perth": "",
													"Australia/Sydney": "",
													"Australia/Yancowinna": "",
													"Etc/GMT": "",
													"Etc/GMT+0": "",
													"Etc/GMT+1": "",
													"Etc/GMT+10": "",
													"Etc/GMT+11": "",
													"Etc/GMT+12": "",
													"Etc/GMT+2": "",
													"Etc/GMT+3": "",
													"Etc/GMT+4": "",
													"Etc/GMT+5": "",
													"Etc/GMT+6": "",
													"Etc/GMT+7": "",
													"Etc/GMT+8": "",
													"Etc/GMT+9": "",
													"Etc/GMT-0": "",
													"Etc/GMT-1": "",
													"Etc/GMT-10": "",
													"Etc/GMT-11": "",
													"Etc/GMT-12": "",
													"Etc/GMT-13": "",
													"Etc/GMT-14": "",
													"Etc/GMT-2": "",
													"Etc/GMT-3": "",
													"Etc/GMT-4": "",
													"Etc/GMT-5": "",
													"Etc/GMT-6": "",
													"Etc/GMT-7": "",
													"Etc/GMT-8": "",
													"Etc/GMT-9": "",
													"Etc/GMT0": "",
													"Etc/UTC": "",
													"Europe/Amsterdam": "",
													"Europe/Andorra": "",
													"Europe/Astrakhan": "",
													"Europe/Athens": "",
													"Europe/Belfast": "",
													"Europe/Belgrade": "",
													"Europe/Berlin": "",
													"Europe/Bratislava": "",
													"Europe/Brussels": "",
													"Europe/Bucharest": "",
													"Europe/Budapest": "",
													"Europe/Busingen": "",
													"Europe/Chisinau": "",
													"Europe/Copenhagen": "",
													"Europe/Dublin": "",
													"Europe/Gibraltar": "",
													"Europe/Guernsey": "",
													"Europe/Helsinki": "",
													"Europe/Isle_of_Man": "",
													"Europe/Istanbul": "",
													"Europe/Jersey": "",
													"Europe/Kaliningrad": "",
													"Europe/Kiev": "",
													"Europe/Kirov": "",
													"Europe/Lisbon": "",
													"Europe/Ljubljana": "",
													"Europe/London": "",
													"Europe/Luxembourg": "",
													"Europe/Madrid": "",
													"Europe/Malta": "",
													"Europe/Mariehamn": "",
													"Europe/Minsk": "",
													"Europe/Monaco": "",
													"Europe/Moscow": "",
													"Europe/Nicosia": "",
													"Europe/Oslo": "",
													"Europe/Paris": "",
													"Europe/Podgorica": "",
													"Europe/Prague": "",
													"Europe/Riga": "",
													"Europe/Rome": "",
													"Europe/Samara": "",
													"Europe/San_Marino": "",
													"Europe/Sarajevo": "",
													"Europe/Saratov": "",
													"Europe/Simferopol": "",
													"Europe/Skopje": "",
													"Europe/Sofia": "",
													"Europe/Stockholm": "",
													"Europe/Tallinn": "",
													"Europe/Tirane": "",
													"Europe/Tiraspol": "",
													"Europe/Ulyanovsk": "",
													"Europe/Uzhgorod": "",
													"Europe/Vaduz": "",
													"Europe/Vatican": "",
													"Europe/Vienna": "",
													"Europe/Vilnius": "",
													"Europe/Volgograd": "",
													"Europe/Warsaw": "",
													"Europe/Zagreb": "",
													"Europe/Zaporozhye": "",
													"Europe/Zurich": "",
													"GMT": "",
													"Indian/Antananarivo": "",
													"Indian/Chagos": "",
													"Indian/Christmas": "",
													"Indian/Cocos": "",
													"Indian/Comoro": "",
													"Indian/Kerguelen": "",
													"Indian/Mahe": "",
													"Indian/Maldives": "",
													"Indian/Mauritius": "",
													"Indian/Mayotte": "",
													"Indian/Reunion": "",
													"Pacific/Apia": "",
													"Pacific/Auckland": "",
													"Pacific/Bougainville": "",
													"Pacific/Chatham": "",
													"Pacific/Chuuk": "",
													"Pacific/Easter": "",
													"Pacific/Efate": "",
													"Pacific/Enderbury": "",
													"Pacific/Fakaofo": "",
													"Pacific/Fiji": "",
													"Pacific/Funafuti": "",
													"Pacific/Galapagos": "",
													"Pacific/Gambier": "",
													"Pacific/Guadalcanal": "",
													"Pacific/Guam": "",
													"Pacific/Honolulu": "",
													"Pacific/Johnston": "",
													"Pacific/Kiritimati": "",
													"Pacific/Kosrae": "",
													"Pacific/Kwajalein": "",
													"Pacific/Majuro": "",
													"Pacific/Marquesas": "",
													"Pacific/Midway": "",
													"Pacific/Nauru": "",
													"Pacific/Niue": "",
													"Pacific/Norfolk": "",
													"Pacific/Noumea": "",
													"Pacific/Pago_Pago": "",
													"Pacific/Palau": "",
													"Pacific/Pitcairn": "",
													"Pacific/Pohnpei": "",
													"Pacific/Ponape": "",
													"Pacific/Port_Moresby": "",
													"Pacific/Rarotonga": "",
													"Pacific/Saipan": "",
													"Pacific/Samoa": "",
													"Pacific/Tahiti": "",
													"Pacific/Tarawa": "",
													"Pacific/Tongatapu": "",
													"Pacific/Truk": "",
													"Pacific/Wake": "",
													"Pacific/Wallis": "",
													"Pacific/Yap": "",
													"US/Alaska": "",
													"US/Aleutian": "",
													"US/Arizona": "",
													"US/Central": "",
													"US/East-Indiana": "",
													"US/Eastern": "",
													"US/Hawaii": "",
													"US/Indiana-Starke": "",
													"US/Michigan": "",
													"US/Mountain": "",
													"US/Pacific": "",
													"US/Pacific-New": "",
													"US/Samoa": "",
													"UTC": ""
												}
											},
											"tip": {
												"$ref": "#/components/schemas/terminals_tip"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						}
					},
					"required": true
				},
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"schema": {
							"pattern": "application/json",
							"type": "string"
						},
						"example": "application/json"
					}
				]
			},
			"get": {
				"tags": [
					"/terminals/*"
				],
				"responses": {
					"200": {
						"description": "A successful terminal lookup response.",
						"content": {
							"application/json": {
								"example": {
									"id": "eaf1ef26-ea2d-4be3-b990-ec2c410b54de",
									"resource": "terminals",
									"path": "/terminals/eaf1ef26-ea2d-4be3-b990-ec2c410b54de",
									"owner": {
										"id": "0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
										"path": "/accounts/0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
										"resource": "accounts"
									},
									"api_version": "3.0",
									"status": "active",
									"serial_number": "FA00332-1000138",
									"model": "verifone_p400",
									"reference_id": "abc12345",
									"last_call_home": 1549570307,
									"terminal_application_version": "1.27.311",
									"terminal_configuration": {
										"name": "Front Desk",
										"receipt_header_merchant_name": "Joe's Coffee",
										"maintenance_window": {
											"start": 0,
											"duration": 1
										},
										"manual_entry_configuration": {
											"avs_prompt_enabled": true,
											"cvd_prompt_enabled": true
										},
										"address": {
											"city": "Redwood City",
											"country": "US",
											"line1": "250 Convention Way",
											"line2": "Suite 200",
											"postal_code": "94063",
											"region": "CA"
										},
										"timezone": "US/Pacific",
										"currency": "USD",
										"supported_card_brands": [
											"visa",
											"american_express",
											"discover",
											"mastercard",
											"diners_club",
											"jcb"
										],
										"credit_debit_preference": "prompt",
										"sim_card_id": "5aad45c2-d128-466a-aae3-d42fef57e2f7",
										"tip": {
											"mode": "prompt_on_terminal",
											"terminal_display": {
												"amount_guide_type": "percentage_guide",
												"percentage_guide": {
													"show_amount": false,
													"percentage_low": 15,
													"percentage_medium": 18,
													"percentage_high": 20
												}
											}
										},
										"signature_required": true,
										"contactless_payments": {
											"enabled": true,
											"credit_debit_preference": "credit"
										},
										"quick_chip": {
											"enabled": true
										},
										"deferred_authorization": {
											"enabled": true,
											"international_enabled": true,
											"max_transaction_count": 20,
											"max_total_amount": 250000,
											"max_transaction_amount": 12500,
											"supported_card_entry_modes": [
												"chip",
												"contactless"
											]
										}
									},
									"gateway_id": "AB00004D3Z"
								},
								"schema": {
									"$ref": "#/components/schemas/terminal-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "Look up a terminal to see its current status and configuration.",
				"operationId": "GET_terminals-id",
				"summary": "Look up a terminal",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					}
				]
			},
			"delete": {
				"tags": [
					"/terminals/*"
				],
				"responses": {
					"200": {
						"description": "A successful deletion response.",
						"content": {
							"application/json": {
								"example": {
									"id": "eaf1ef26-ea2d-4be3-b990-ec2c410b54de",
									"resource": "terminals",
									"path": "/terminals/eaf1ef26-ea2d-4be3-b990-ec2c410b54de",
									"owner": {
										"id": "0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
										"path": "/accounts/0ef0dcd6-a2c6-49c4-9051-bbbe5c6c36e2",
										"resource": "accounts"
									},
									"api_version": "3.0",
									"status": "deleted",
									"serial_number": "FA00332-1000138",
									"model": "verifone_p400",
									"reference_id": "abc12345",
									"last_call_home": 1549570307,
									"terminal_application_version": "1.27.311",
									"terminal_configuration": {
										"name": "Front Desk",
										"receipt_header_merchant_name": "Joe's Coffee",
										"maintenance_window": {
											"start": 0,
											"duration": 1
										},
										"manual_entry_configuration": {
											"avs_prompt_enabled": true,
											"cvd_prompt_enabled": true
										},
										"address": {
											"city": "Redwood City",
											"country": "US",
											"line1": "250 Convention Way",
											"line2": "Suite 200",
											"postal_code": "94063",
											"region": "CA"
										},
										"timezone": "US/Pacific",
										"currency": "USD",
										"supported_card_brands": [
											"visa",
											"american_express",
											"discover",
											"mastercard",
											"diners_club",
											"jcb"
										],
										"credit_debit_preference": "prompt",
										"sim_card_id": "5aad45c2-d128-466a-aae3-d42fef57e2f7",
										"tip": {
											"mode": "prompt_on_terminal",
											"terminal_display": {
												"amount_guide_type": "percentage_guide",
												"percentage_guide": {
													"show_amount": false,
													"percentage_low": 15,
													"percentage_medium": 18,
													"percentage_high": 20
												}
											}
										},
										"signature_required": true,
										"contactless_payments": {
											"enabled": true,
											"credit_debit_preference": "credit"
										},
										"quick_chip": {
											"enabled": true
										},
										"deferred_authorization": {
											"enabled": true,
											"international_enabled": true,
											"max_transaction_count": 20,
											"max_total_amount": 250000,
											"max_transaction_amount": 12500,
											"supported_card_entry_modes": [
												"chip",
												"contactless"
											]
										}
									},
									"gateway_id": "AB00004D3Z"
								},
								"schema": {
									"$ref": "#/components/schemas/terminal-resp"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "Deletes the terminal from the system, marking it as deleted. The physical terminal represented by this API record will not be able to process payments until it is onboarded again.",
				"operationId": "DELETE_terminals-id",
				"summary": "Delete a terminal",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					}
				]
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		},
		"/transaction_records": {
			"get": {
				"tags": [
					"/transaction_records/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"next": null,
									"previous": null,
									"api_version": "3.0",
									"results": [
										{
											"create_time": 1510080181,
											"currency": "USD",
											"fee_amount": 59,
											"gross_amount": 2000,
											"id": "00000000-0000-0000-0000-000000013003",
											"net_amount": 1941,
											"owner": {
												"id": "00000000-0000-0000-0000-0000767bf5cd",
												"path": "/payments/00000000-0000-0000-0000-0000767bf5cd",
												"resource": "payments",
												"custom_data": null
											},
											"path": "/transaction_records/00000000-0000-0000-0000-000000013003",
											"resource": "transaction_records",
											"type": "merchant_payment",
											"api_version": "3.0"
										},
										{
											"create_time": 1510170113,
											"currency": "USD",
											"fee_amount": 40,
											"gross_amount": 1000,
											"id": "00000000-0000-0000-0000-0000000134cb",
											"net_amount": 960,
											"owner": {
												"id": "00000000-0000-0000-0000-000042702825",
												"path": "/payments/00000000-0000-0000-0000-000042702825",
												"resource": "payments",
												"custom_data": {
													"a": 1
												}
											},
											"path": "/transaction_records/00000000-0000-0000-0000-0000000134cb",
											"resource": "transaction_records",
											"type": "merchant_payment",
											"api_version": "3.0"
										},
										{
											"create_time": 1510171435,
											"currency": "USD",
											"fee_amount": 32,
											"gross_amount": 800,
											"id": "00000000-0000-0000-0000-0000000134d4",
											"net_amount": 768,
											"owner": {
												"id": "00000000-0000-0000-0000-000054714d76",
												"path": "/payments/00000000-0000-0000-0000-000054714d76",
												"resource": "payments",
												"custom_data": null
											},
											"path": "/transaction_records/00000000-0000-0000-0000-0000000134d4",
											"resource": "transaction_records",
											"type": "merchant_payment",
											"api_version": "3.0"
										},
										{
											"create_time": 1510172479,
											"currency": "USD",
											"fee_amount": 20,
											"gross_amount": 500,
											"id": "00000000-0000-0000-0000-0000000134d7",
											"net_amount": 480,
											"owner": {
												"id": "00000000-0000-0000-0000-00005e1c8d72",
												"path": "/payments/00000000-0000-0000-0000-00005e1c8d72",
												"resource": "payments",
												"custom_data": null
											},
											"path": "/transaction_records/00000000-0000-0000-0000-0000000134d7",
											"resource": "transaction_records",
											"type": "merchant_payment",
											"api_version": "3.0"
										},
										{
											"create_time": 1510182803,
											"currency": "USD",
											"fee_amount": 25,
											"gross_amount": 750,
											"id": "00000000-0000-0000-0000-0000000134e9",
											"net_amount": 725,
											"owner": {
												"id": "00000000-0000-0000-0000-00005c72c565",
												"path": "/payments/00000000-0000-0000-0000-00005c72c565",
												"resource": "payments",
												"custom_data": null
											},
											"path": "/transaction_records/00000000-0000-0000-0000-0000000134e9",
											"resource": "transaction_records",
											"type": "merchant_payment",
											"api_version": "3.0"
										}
									]
								},
								"schema": {
									"additionalProperties": false,
									"properties": {
										"next": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the next page of results. Perform an HTTP GET to obtain the next page."
										},
										"previous": {
											"type": "string",
											"nullable": true,
											"description": "An opaque path for the previous page of results. Perform an HTTP GET to obtain the previous page."
										},
										"results": {
											"items": {
												"$ref": "#/components/schemas/transaction_record"
											},
											"type": "array",
											"uniqueItems": true,
											"description": "An array of transaction record objects."
										},
										"api_version": {
											"$ref": "#/components/schemas/api_version"
										}
									},
									"required": [
										"results",
										"next",
										"previous"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /transaction_records call allows your platform to look up a collection of transaction records. Transactions records represent one entry (e.g. payout) and the impact to an account’s balance. **Note:** Generating transaction records may not complete for up to 6 hours. Learn how to generate Transaction and Reconciliation reports [here](/docs/cookbooks/reporting).",
				"operationId": "GET_transaction_records",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return elements from this page. If specified, then do not provide any other query parameters.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page_size",
						"in": "query",
						"description": "Return no more than this many elements per page. If not specified, `page_size` defaults to 10. Maximum value allowed is 500.",
						"schema": {
							"default": 10,
							"minimum": 1,
							"maximum": 500,
							"type": "integer"
						}
					},
					{
						"name": "create_time_start",
						"in": "query",
						"description": "The timestamp for the start of the search window. **Default:** current time -7 days if not provided. **Note:** The time interval between `create_time_start` and `create_time_end` cannot exceed 35 days.",
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int64"
						}
					},
					{
						"name": "create_time_end",
						"in": "query",
						"description": "The timestamp for the end of the search window. **Default:** current time if not provided. **Note:** The time interval between `create_time_start` and `create_time_end` cannot exceed 35 days.",
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int64"
						}
					},
					{
						"name": "account_id",
						"in": "query",
						"description": "Return all transaction records for resources owned by an account. Resources include: adjustments, disputes, payments, payouts, recoveries, and refunds.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "payout_id",
						"in": "query",
						"description": "Transaction records for all resources contributing to this payout ID. **create_time_start** and **create_time_end** are not required and a default is not set for them when this parameter is provided in the request.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a collection of transaction records"
			}
		},
		"/transaction_records/{id}": {
			"get": {
				"tags": [
					"/transaction_records/*"
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"example": {
									"create_time": 1510080181,
									"currency": "USD",
									"fee_amount": 59,
									"gross_amount": 2000,
									"id": "00000000-0000-0000-0000-000000013003",
									"net_amount": 1941,
									"owner": {
										"id": "00000000-0000-0000-0000-0000767bf5cd",
										"path": "/payments/00000000-0000-0000-0000-0000767bf5cd",
										"resource": "payments",
										"custom_data": null
									},
									"path": "/transaction_records/00000000-0000-0000-0000-000000013003",
									"resource": "transaction_records",
									"type": "merchant_payment",
									"api_version": "3.0"
								},
								"schema": {
									"$ref": "#/components/schemas/transaction_record"
								}
							}
						}
					},
					"400": {
						"description": "INVALID_PARAMS",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"403": {
						"description": "NOT_AUTHORIZED",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					},
					"500": {
						"description": "UNEXPECTED_ERROR",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/error_multiple_targets"
								}
							}
						}
					}
				},
				"description": "The GET /transaction_records/{id} call allows your platform to look up a single transaction record. Transactions records represent one entry (e.g. payout) and the impact to an account’s balance. **Note:** Generating transaction records may not complete for up to 6 hours. Learn how to generate Transaction and Reconciliation reports [here](/docs/cookbooks/reporting).",
				"operationId": "GET_transaction_records-id",
				"parameters": [
					{
						"name": "Api-Version",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "3.0"
					},
					{
						"name": "Unique-Key",
						"in": "header",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Get a transaction record"
			},
			"parameters": [
				{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255
					}
				}
			]
		}
	},
	"components": {
		"schemas": {
			"create_time": {
				"type": "integer",
				"format": "int64",
				"minimum": 0,
				"x-label": "create_time",
				"description": "The UNIX timestamp for when the object was created."
			},
			"id": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"x-label": "id",
				"description": "ID of the object or resource."
			},
			"shared_owner_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The legal entity ID associated with verification document."
					},
					"path": {
						"type": "string",
						"nullable": true,
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"type": "string",
						"description": "Helps organize information by identifying the resource type of the object data."
					}
				},
				"required": [
					"resource",
					"id",
					"path"
				],
				"type": "object",
				"x-label": "shared_owner_response",
				"description": "Details the owner resource and owner path associated with the document."
			},
			"amex_seller_id": {
				"type": "string",
				"minLength": 1,
				"maxLength": 255,
				"description": "Seller id assigned by by American Express.",
				"x-label": "amex_seller_id"
			},
			"amex_seller_number": {
				"type": "integer",
				"format": "int64",
				"minimum": 0,
				"description": "Service Establishment Number (a.k.a. SE Number) is a unique ten-digit number assigned by American Express to a merchant that accepts American Express cards.",
				"x-label": "amex_seller_number"
			},
			"opt_into_marketing": {
				"type": "boolean",
				"description": "A form of permission marketing in which there is a formal opt-in process for receiving follow-up communication, offers, etc.",
				"x-label": "opt_into_marketing"
			},
			"accounts_tier": {
				"additionalProperties": false,
				"properties": {
					"fixed_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"maximum": 5000,
						"description": "The fixed fee amount.",
						"example": 50
					},
					"max_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The maximum value of total fee amount.",
						"example": 1000
					},
					"min_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The minimum value of total fee amount.",
						"example": 100
					},
					"upper_threshold_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The value of upper threshold.",
						"example": 999999999
					},
					"variable_fee_bps": {
						"type": "integer",
						"minimum": 0,
						"maximum": 500,
						"description": "The basis points to calculate variable fee amount.",
						"example": 500
					}
				},
				"type": "object",
				"x-label": "accounts_tier",
				"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
				"required": [
					"upper_threshold_amount",
					"max_fee_amount",
					"min_fee_amount",
					"fixed_fee_amount",
					"variable_fee_bps"
				],
				"nullable": true
			},
			"accounts_opt_blue_response": {
				"additionalProperties": false,
				"properties": {
					"amex_seller_id": {
						"$ref": "#/components/schemas/amex_seller_id"
					},
					"amex_seller_number": {
						"$ref": "#/components/schemas/amex_seller_number"
					},
					"opt_into_marketing": {
						"$ref": "#/components/schemas/opt_into_marketing"
					}
				},
				"type": "object",
				"nullable": true,
				"description": "OptBlue is a payment processing option that allows smaller businesses to accept American Express credit cards.",
				"x-label": "accounts_opt_blue_response"
			},
			"accounts_amex_countries_US_response": {
				"additionalProperties": false,
				"properties": {
					"opt_blue": {
						"$ref": "#/components/schemas/accounts_opt_blue_response"
					}
				},
				"required": [
					"opt_blue"
				],
				"type": "object",
				"x-label": "accounts_amex_countries_US_response"
			},
			"accounts_opted_out_methods_countries_CA": {
				"additionalProperties": false,
				"properties": {
					"debit_cards": {
						"type": "boolean"
					}
				},
				"type": "object",
				"x-label": "accounts_opted_out_methods_countries_CA"
			},
			"accounts_other_fees": {
				"additionalProperties": false,
				"properties": {
					"debit_failure_fee": {
						"type": "integer",
						"nullable": true,
						"minimum": 0,
						"description": "Charge merchants a fee when IC+ fees cannot be debited from their balance or linked payout method."
					}
				},
				"type": "object",
				"x-label": "accounts_other_fees",
				"description": "Describe any one-off fees charged to the merchant by your platform."
			},
			"accounts_CAD_blended": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					}
				},
				"type": "object",
				"x-label": "accounts_CAD_blended",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"accounts_blended": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					}
				},
				"type": "object",
				"x-label": "accounts_blended",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"country_code": {
				"enum": [
					"AA",
					"AD",
					"AE",
					"AF",
					"AG",
					"AI",
					"AL",
					"AM",
					"AO",
					"AP",
					"AQ",
					"AR",
					"AS",
					"AT",
					"AU",
					"AW",
					"AX",
					"AZ",
					"BA",
					"BB",
					"BD",
					"BE",
					"BF",
					"BG",
					"BH",
					"BI",
					"BJ",
					"BL",
					"BM",
					"BN",
					"BO",
					"BQ",
					"BR",
					"BS",
					"BT",
					"BV",
					"BW",
					"BY",
					"BZ",
					"CA",
					"CC",
					"CD",
					"CF",
					"CG",
					"CH",
					"CI",
					"CK",
					"CL",
					"CM",
					"CN",
					"CO",
					"CR",
					"CU",
					"CV",
					"CW",
					"CX",
					"CY",
					"CZ",
					"DE",
					"DJ",
					"DK",
					"DM",
					"DO",
					"DZ",
					"EC",
					"EE",
					"EG",
					"EH",
					"ER",
					"ES",
					"ET",
					"FI",
					"FJ",
					"FK",
					"FM",
					"FO",
					"FR",
					"GA",
					"GB",
					"GD",
					"GE",
					"GF",
					"GG",
					"GH",
					"GI",
					"GL",
					"GM",
					"GN",
					"GP",
					"GQ",
					"GR",
					"GS",
					"GT",
					"GU",
					"GW",
					"GY",
					"HK",
					"HM",
					"HN",
					"HR",
					"HT",
					"HU",
					"ID",
					"IE",
					"IL",
					"IM",
					"IN",
					"IO",
					"IQ",
					"IR",
					"IS",
					"IT",
					"JE",
					"JM",
					"JO",
					"JP",
					"KE",
					"KG",
					"KH",
					"KI",
					"KM",
					"KN",
					"KP",
					"KR",
					"KW",
					"KY",
					"KZ",
					"LA",
					"LB",
					"LC",
					"LI",
					"LK",
					"LR",
					"LS",
					"LT",
					"LU",
					"LV",
					"LY",
					"MA",
					"MC",
					"MD",
					"ME",
					"MF",
					"MG",
					"MH",
					"MK",
					"ML",
					"MM",
					"MN",
					"MO",
					"MP",
					"MQ",
					"MR",
					"MS",
					"MT",
					"MU",
					"MV",
					"MW",
					"MX",
					"MY",
					"MZ",
					"NA",
					"NC",
					"NE",
					"NF",
					"NG",
					"NI",
					"NL",
					"NO",
					"NP",
					"NR",
					"NU",
					"NZ",
					"OM",
					"PA",
					"PE",
					"PF",
					"PG",
					"PH",
					"PK",
					"PL",
					"PM",
					"PN",
					"PR",
					"PS",
					"PT",
					"PW",
					"PY",
					"QA",
					"RE",
					"RO",
					"RS",
					"RU",
					"RW",
					"SA",
					"SB",
					"SC",
					"SD",
					"SE",
					"SG",
					"SH",
					"SI",
					"SJ",
					"SK",
					"SL",
					"SM",
					"SN",
					"SO",
					"SR",
					"SS",
					"ST",
					"SV",
					"SX",
					"SY",
					"SZ",
					"TC",
					"TD",
					"TF",
					"TG",
					"TH",
					"TJ",
					"TK",
					"TL",
					"TM",
					"TN",
					"TO",
					"TR",
					"TT",
					"TV",
					"TW",
					"TZ",
					"UA",
					"UG",
					"UM",
					"US",
					"UY",
					"UZ",
					"VA",
					"VC",
					"VE",
					"VG",
					"VI",
					"VN",
					"VU",
					"WF",
					"WS",
					"XX",
					"YE",
					"YT",
					"ZA",
					"ZM",
					"ZW"
				],
				"type": "string",
				"x-label": "country_code",
				"x-enumDescriptions": {
					"AA": "",
					"AD": "Andorra",
					"AE": "United Arab Emirates",
					"AF": "Afghanistan",
					"AG": "Antigua and Barbuda",
					"AI": "Anguilla",
					"AL": "Albania",
					"AM": "Armenia",
					"AO": "Angola",
					"AP": "",
					"AQ": "Antarctica",
					"AR": "Argentina",
					"AS": "American Samoa",
					"AT": "Austria",
					"AU": "Australia",
					"AW": "Aruba",
					"AX": "Åland Islands",
					"AZ": "Azerbaijan",
					"BA": "Bosnia and Herzegovina",
					"BB": "Barbados",
					"BD": "Bangladesh",
					"BE": "Belgium",
					"BF": "Burkina Faso",
					"BG": "Bulgaria",
					"BH": "Bahrain",
					"BI": "Burundi",
					"BJ": "Benin",
					"BL": "Saint Barthélemy",
					"BM": "Bermuda",
					"BN": "Brunei Darussalam",
					"BO": "Bolivia",
					"BQ": "Bonaire, Sint Eustatius and Saba",
					"BR": "Brazil",
					"BS": "Bahamas",
					"BT": "Bhutan",
					"BV": "Bouvet Island",
					"BW": "Botswana",
					"BY": "Belarus",
					"BZ": "Belize",
					"CA": "Canada",
					"CC": "Cocos (Keeling) Islands",
					"CD": "Congo, the Democratic Republic of the",
					"CF": "Central African Republic",
					"CG": "Congo",
					"CH": "Switzerland",
					"CI": "Côte d'Ivoire",
					"CK": "Cook Islands",
					"CL": "Chile",
					"CM": "Cameroon",
					"CN": "China",
					"CO": "Colombia",
					"CR": "Costa Rica",
					"CU": "Cuba",
					"CV": "Cape Verde",
					"CW": "Curaçao",
					"CX": "Christmas Island",
					"CY": "Cyprus",
					"CZ": "Czech Republic",
					"DE": "Germany",
					"DJ": "Djibouti",
					"DK": "Denmark",
					"DM": "Dominica",
					"DO": "Dominican Republic",
					"DZ": "Algeria",
					"EC": "Ecuador",
					"EE": "Estonia",
					"EG": "Egypt",
					"EH": "Western Sahara",
					"ER": "Eritrea",
					"ES": "Spain",
					"ET": "Ethiopia",
					"FI": "Finland",
					"FJ": "Fiji",
					"FK": "Falkland Islands (Malvinas)",
					"FM": "Micronesia, Federated States of",
					"FO": "Faroe Islands",
					"FR": "France",
					"GA": "Gabon",
					"GB": "United Kingdom",
					"GD": "Grenada",
					"GE": "Georgia",
					"GF": "French Guiana",
					"GG": "Guernsey",
					"GH": "Ghana",
					"GI": "Gibraltar",
					"GL": "Greenland",
					"GM": "Gambia",
					"GN": "Guinea",
					"GP": "Guadeloupe",
					"GQ": "Equatorial Guinea",
					"GR": "Greece",
					"GS": "South Georgia and the South Sandwich Islands",
					"GT": "Guatemala",
					"GU": "Guam",
					"GW": "Guinea-Bissau",
					"GY": "Guyana",
					"HK": "Hong Kong",
					"HM": "Heard Island and McDonald Islands",
					"HN": "Honduras",
					"HR": "Croatia",
					"HT": "Haiti",
					"HU": "Hungary",
					"ID": "Indonesia",
					"IE": "Ireland",
					"IL": "Israel",
					"IM": "Isle of Man",
					"IN": "India",
					"IO": "British Indian Ocean Territory",
					"IQ": "Iraq",
					"IR": "Iran, Islamic Republic of",
					"IS": "Iceland",
					"IT": "Italy",
					"JE": "Jersey",
					"JM": "Jamaica",
					"JO": "Jordan",
					"JP": "Japan",
					"KE": "Kenya",
					"KG": "Kyrgyzstan",
					"KH": "Cambodia",
					"KI": "Kiribati",
					"KM": "Comoros",
					"KN": "Saint Kitts and Nevis",
					"KP": "Korea, Democratic People's Republic of",
					"KR": "Korea, Republic of",
					"KW": "Kuwait",
					"KY": "Cayman Islands",
					"KZ": "Kazakhstan",
					"LA": "Lao People's Democratic Republic",
					"LB": "Lebanon",
					"LC": "Saint Lucia",
					"LI": "Liechtenstein",
					"LK": "Sri Lanka",
					"LR": "Liberia",
					"LS": "Lesotho",
					"LT": "Lithuania",
					"LU": "Luxembourg",
					"LV": "Latvia",
					"LY": "Libyan Arab Jamahiriya",
					"MA": "Morocco",
					"MC": "Monaco",
					"MD": "Moldova, Republic of",
					"ME": "Montenegro",
					"MF": "Saint Martin (French part)",
					"MG": "Madagascar",
					"MH": "Marshall Islands",
					"MK": "Macedonia, the Former Yugoslav Republic of",
					"ML": "Mali",
					"MM": "Myanmar",
					"MN": "Mongolia",
					"MO": "Macao",
					"MP": "Northern Mariana Islands",
					"MQ": "Martinique",
					"MR": "Mauritania",
					"MS": "Montserrat",
					"MT": "Malta",
					"MU": "Mauritius",
					"MV": "Maldives",
					"MW": "Malawi",
					"MX": "Mexico",
					"MY": "Malaysia",
					"MZ": "Mozambique",
					"NA": "Namibia",
					"NC": "New Caledonia",
					"NE": "Niger",
					"NF": "Norfolk Island",
					"NG": "Nigeria",
					"NI": "Nicaragua",
					"NL": "Netherlands",
					"NO": "Norway",
					"NP": "Nepal",
					"NR": "Nauru",
					"NU": "Niue",
					"NZ": "New Zealand",
					"OM": "Oman",
					"PA": "Panama",
					"PE": "Peru",
					"PF": "French Polynesia",
					"PG": "Papua New Guinea",
					"PH": "Philippines",
					"PK": "Pakistan",
					"PL": "Poland",
					"PM": "Saint Pierre and Miquelon",
					"PN": "Pitcairn",
					"PR": "Puerto Rico",
					"PS": "Palestinian Territory, Occupied",
					"PT": "Portugal",
					"PW": "Palau",
					"PY": "Paraguay",
					"QA": "Qatar",
					"RE": "Réunion",
					"RO": "Romania",
					"RS": "Serbia",
					"RU": "Russian Federation",
					"RW": "Rwanda",
					"SA": "Saudi Arabia",
					"SB": "Solomon Islands",
					"SC": "Seychelles",
					"SD": "Sudan",
					"SE": "Sweden",
					"SG": "Singapore",
					"SH": "Saint Helena",
					"SI": "Slovenia",
					"SJ": "Svalbard and Jan Mayen",
					"SK": "Slovakia",
					"SL": "Sierra Leone",
					"SM": "San Marino",
					"SN": "Senegal",
					"SO": "Somalia",
					"SR": "Suriname",
					"SS": "South Sudan",
					"ST": "Sao Tome and Principe",
					"SV": "El Salvador",
					"SX": "Sint Maarten (Dutch part)",
					"SY": "Syrian Arab Republic",
					"SZ": "Swaziland",
					"TC": "Turks and Caicos Islands",
					"TD": "Chad",
					"TF": "French Southern Territories",
					"TG": "Togo",
					"TH": "Thailand",
					"TJ": "Tajikistan",
					"TK": "Tokelau",
					"TL": "Timor-Leste",
					"TM": "Turkmenistan",
					"TN": "Tunisia",
					"TO": "Tonga",
					"TR": "Turkey",
					"TT": "Trinidad and Tobago",
					"TV": "Tuvalu",
					"TW": "Taiwan, Province of China",
					"TZ": "Tanzania, United Republic of",
					"UA": "Ukraine",
					"UG": "Uganda",
					"UM": "United States Minor Outlying Islands",
					"US": "United States",
					"UY": "Uruguay",
					"UZ": "Uzbekistan",
					"VA": "Holy See (Vatican City State)",
					"VC": "Saint Vincent and the Grenadines",
					"VE": "Venezuela",
					"VG": "Virgin Islands, British",
					"VI": "Virgin Islands, U.S.",
					"VN": "Vietnam",
					"VU": "Vanuatu",
					"WF": "Wallis and Futuna",
					"WS": "Samoa",
					"XX": "Custom code WePay uses for Crimea",
					"YE": "Yemen",
					"YT": "Mayotte",
					"ZA": "South Africa",
					"ZM": "Zambia",
					"ZW": "Zimbabwe"
				}
			},
			"legal_entities_personal_country_info_CA_response": {
				"additionalProperties": false,
				"properties": {
					"social_insurance_number_is_present": {
						"type": "boolean",
						"description": "Indicates if a social insurance number is present. When the boolean values is `true`, it means that the social insurance number has been provided already. When the values is `false`, it means that the social insurance number has not been provided yet."
					}
				},
				"type": "object",
				"x-label": "legal_entities_personal_country_info_CA_response",
				"description": "Legal entity country information associated with Canada."
			},
			"legal_entities_personal_country_info_GB_response": {
				"additionalProperties": false,
				"properties": {},
				"type": "object",
				"x-label": "legal_entities_personal_country_info_GB_response",
				"description": "Legal entity country information associated with Great Britain."
			},
			"legal_entities_personal_country_info_US_response": {
				"additionalProperties": false,
				"properties": {
					"social_security_number_is_present": {
						"type": "boolean"
					},
					"social_security_number_last_four_is_present": {
						"type": "boolean"
					}
				},
				"type": "object",
				"x-label": "legal_entities_personal_country_info_US_response",
				"description": "Legal entity country information associated with the United States."
			},
			"beneficial_owner_reference_id": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"nullable": true,
				"x-label": "beneficial_owner_reference_id",
				"description": "A custom reference ID set by the platform to help track and map controllers and additional representatives of a legal entity.",
				"example": "1234"
			},
			"accounts_balances_currency_response": {
				"additionalProperties": false,
				"properties": {
					"balance": {
						"type": "integer",
						"description": "A sum of payments, in the given currency, currently available for the next payout. Possible values include: `USD`, `CAD`."
					},
					"incoming_pending": {
						"type": "integer",
						"description": "The payment amount received from the payer to be processed or reviewed by WePay."
					},
					"outgoing_pending": {
						"type": "integer",
						"description": "The payout balance being processed or reviewed by WePay."
					},
					"reserve": {
						"type": "integer",
						"description": "Reserved USD balance."
					}
				},
				"type": "object",
				"x-label": "accounts_balances_currency_response"
			},
			"accounts_amex_countries_response": {
				"type": "object",
				"properties": {
					"US": {
						"$ref": "#/components/schemas/accounts_amex_countries_US_response"
					}
				},
				"x-label": "accounts_amex_countries_response"
			},
			"accounts_opted_out_methods_countries": {
				"additionalProperties": false,
				"properties": {
					"CA": {
						"$ref": "#/components/schemas/accounts_opted_out_methods_countries_CA"
					}
				},
				"type": "object",
				"x-label": "accounts_opted_out_methods_countries"
			},
			"accounts_payout_currency_response": {
				"additionalProperties": false,
				"properties": {
					"payout_method_id": {
						"maxLength": 255,
						"type": "string",
						"description": "ID of the payout method associated with the USD payout."
					},
					"period": {
						"enum": [
							"daily",
							"weekly",
							"monthly"
						],
						"x-enumDescriptions": {
							"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
							"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
							"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
						},
						"type": "string",
						"description": "Describes the how often a USD payout will occur."
					},
					"next_payout_time": {
						"type": "integer",
						"nullable": true,
						"description": "Describes when the next USD payout will occur."
					}
				},
				"required": [
					"payout_method_id",
					"period"
				],
				"type": "object",
				"nullable": true,
				"x-label": "accounts_payout_currency_response",
				"description": "Payout currency details."
			},
			"pricing_by_currency-create-CAD_unversioned": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							},
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							},
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					},
					"equipment_fees": {
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"unit_amount": {
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										},
										"period": {
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"unit_amount": {
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										},
										"period": {
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"blended": {
						"$ref": "#/components/schemas/accounts_CAD_blended"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-create-CAD_unversioned"
			},
			"pricing_by_currency-create-GBP": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-create-GBP"
			},
			"pricing_by_currency-create-USD": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-create-USD"
			},
			"legal_entities_address": {
				"additionalProperties": false,
				"properties": {
					"city": {
						"maxLength": 30,
						"type": "string",
						"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"line1": {
						"maxLength": 60,
						"type": "string",
						"pattern": "(?=.*\\d)(?=.*[A-Za-z])^\\d.*$|^[NSEWnsew]\\d.*$",
						"description": "Address of the Legal Entity. Must not be a PO Box and must begin with a number."
					},
					"postal_code": {
						"maxLength": 14,
						"type": "string",
						"description": "Postal code associated with the address."
					},
					"region": {
						"maxLength": 30,
						"type": "string",
						"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
					},
					"line2": {
						"maxLength": 60,
						"type": "string",
						"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					}
				},
				"required": [
					"line1",
					"city",
					"postal_code",
					"region",
					"country"
				],
				"type": "object",
				"nullable": true,
				"x-isAddress": true,
				"x-label": "legal_entities_address",
				"description": "Address of the legal entity, controller, or additional representatives. When representing the entity's address, send the entity's address of operation. When representing the controller or additional representative send the individual's residential address."
			},
			"email-nullable": {
				"maxLength": 254,
				"pattern": "^([^,:;=@\"'\\\\\\s()\\[\\]]+)+@([a-zA-Z-0-9-]+\\.)+[a-zA-Z]{2,}$",
				"type": "string",
				"nullable": true,
				"x-label": "email-nullable",
				"description": "Email associated with the person. Note that each domain label (parts that are separated by dots) must not exceed 63 characters."
			},
			"shared_full_name": {
				"additionalProperties": false,
				"properties": {
					"first": {
						"maxLength": 30,
						"minLength": 2,
						"type": "string",
						"description": "First name."
					},
					"last": {
						"maxLength": 30,
						"minLength": 2,
						"type": "string",
						"description": "Last name."
					},
					"middle": {
						"maxLength": 30,
						"type": "string",
						"description": "Middle name."
					},
					"prefix": {
						"maxLength": 20,
						"type": "string",
						"description": "Prefix of the name."
					},
					"suffix": {
						"maxLength": 20,
						"type": "string",
						"description": "Suffix of the name."
					}
				},
				"required": [
					"first",
					"last"
				],
				"type": "object",
				"nullable": true,
				"x-label": "shared_full_name"
			},
			"phone-legal_entities-nullable": {
				"additionalProperties": false,
				"properties": {
					"country_code": {
						"pattern": "^\\+?[0-9]{1,3}$",
						"type": "string",
						"nullable": true,
						"description": "Country code associated with the legal entity."
					},
					"phone_number": {
						"pattern": "^[0-9]{7,14}$",
						"type": "string",
						"nullable": true,
						"description": "Phone number associated with the legal entity."
					}
				},
				"required": [
					"country_code",
					"phone_number"
				],
				"type": "object",
				"nullable": true,
				"x-label": "phone-legal_entities-nullable"
			},
			"enterprise_customer_id": {
				"type": "string",
				"pattern": "^\\d{1,20}$",
				"nullable": true,
				"maxLength": 20,
				"minLength": 1,
				"x-label": "enterprise_customer_id",
				"x-permission": {
					"type": "can_be_used",
					"phase": "post_token_expansion",
					"partner_config_key_path": "api.v3.legal_entities.external_resources.enterprise_customer_enabled",
					"feature_name": "enterprise customer id"
				},
				"description": "The **Chase** ID of the enterprise customer to use as the external resource for legal entity data. **Note:** This parameter requires permission from WePay to use.",
				"example": "123456"
			},
			"pns_mid-nullable": {
				"type": "integer",
				"x-label": "pns_mid-nullable",
				"nullable": true,
				"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/pns_mid-nullable/description"
			},
			"resource-legal_entities": {
				"enum": [
					"legal_entities"
				],
				"x-enumDescriptions": {
					"legal_entities": ""
				},
				"type": "string",
				"x-label": "resource-legal_entities",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"accounts_amex_response": {
				"additionalProperties": false,
				"properties": {
					"countries": {
						"$ref": "#/components/schemas/accounts_amex_countries_response"
					}
				},
				"required": [
					"countries"
				],
				"type": "object",
				"x-label": "accounts_amex_response",
				"description": "American Express payment processing options."
			},
			"accounts_opted_out_methods": {
				"additionalProperties": false,
				"properties": {
					"countries": {
						"$ref": "#/components/schemas/accounts_opted_out_methods_countries"
					}
				},
				"type": "object",
				"x-label": "accounts_opted_out_methods"
			},
			"shared_entity_country_info_CA": {
				"additionalProperties": false,
				"properties": {
					"business_number": {
						"type": "string",
						"nullable": true,
						"description": "[Provincial business number](/clear/options/kyc-and-cip-certification/#canadian-business-number-patterns) associated with the legal entity. We are no longer accepting federal business registration numbers."
					},
					"legal_form": {
						"enum": [
							"individual",
							"sole_proprietor",
							"limited_liability_company",
							"partnership",
							"corporation",
							"nonprofit_corporation",
							"unincorporated_association",
							"personal_trust",
							"statutory_trust",
							"government_agency"
						],
						"x-enumDescriptions": {
							"individual": "**NOT CURRENTLY SUPPORTED**",
							"sole_proprietor": "Merchant is the sole owner of an unincorporated business.",
							"limited_liability_company": "Business is registered with the government as a Limited Liability Company.",
							"partnership": "Business is registered with the government as a partnership and is formed under a partnership agreement.",
							"corporation": "Business is incorporated.",
							"nonprofit_corporation": "Nonprofit is incorporated.",
							"unincorporated_association": "Nonprofit is not incorporated",
							"personal_trust": "**NOT CURRENTLY SUPPORTED**",
							"statutory_trust": "**NOT CURRENTLY SUPPORTED**",
							"government_agency": "**NOT CURRENTLY SUPPORTED**"
						},
						"type": "string",
						"nullable": true,
						"description": "Possible values include: `charity`, `individual`, `limited_liability_partnership`, `partnership`, `private_limited_company`, `public_limited_company`, `sole_proprietor`."
					}
				},
				"type": "object",
				"x-label": "shared_entity_country_info_CA",
				"description": "Legal entity country information associated with Canada."
			},
			"shared_entity_country_info_GB": {
				"additionalProperties": false,
				"properties": {
					"company_registration_number": {
						"pattern": "^[A-Z0-9]{2}\\d{6}$",
						"type": "string",
						"nullable": true
					},
					"legal_form": {
						"enum": [
							"individual",
							"sole_trader",
							"partnership",
							"charity",
							"limited_liability_partnership",
							"private_limited_company",
							"public_limited_company"
						],
						"type": "string",
						"nullable": true,
						"x-enumDescriptions": {
							"individual": "An individual without any kind of business or entity filings. **Note:** This legal form is generally unsupported and is being deprecated.",
							"sole_trader": "",
							"partnership": "Business is registered with the government as a partnership and is formed under a partnership agreement.",
							"charity": "",
							"limited_liability_partnership": "",
							"private_limited_company": "Business is registered with the government as a Limited Liability Company.",
							"public_limited_company": ""
						}
					}
				},
				"type": "object",
				"x-label": "shared_entity_country_info_GB",
				"description": "Legal entity country information associated with Great Britain."
			},
			"shared_entity_country_info_US": {
				"additionalProperties": false,
				"properties": {
					"employer_identification_number": {
						"pattern": "^\\d{9}$",
						"type": "string",
						"nullable": true
					},
					"legal_form": {
						"enum": [
							"individual",
							"sole_proprietor",
							"limited_liability_company",
							"partnership",
							"corporation",
							"nonprofit_corporation",
							"unincorporated_association",
							"personal_trust",
							"statutory_trust",
							"government_agency",
							"government_entity"
						],
						"x-enumDescriptions": {
							"individual": "**NOT CURRENTLY SUPPORTED**",
							"sole_proprietor": "Merchant is the sole owner of an unincorporated business and must be given a choice to enter an EIN with the SSN4 or no EIN with their SSN9 during Merchant onboarding.",
							"limited_liability_company": "Business is registered with the government as a Limited Liability Company.",
							"partnership": "Business is registered with the government as a partnership and is formed under a partnership agreement.",
							"corporation": "Business is incorporated.",
							"nonprofit_corporation": "Nonprofit is incorporated.",
							"unincorporated_association": "Nonprofit is not incorporated",
							"personal_trust": "**NOT CURRENTLY SUPPORTED**",
							"statutory_trust": "**NOT CURRENTLY SUPPORTED**",
							"government_agency": "**NOT CURRENTLY SUPPORTED**",
							"government_entity": "Merchant is acting on behalf of a government entity."
						},
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "shared_entity_country_info_US",
				"description": "Legal entity country information associated with the United States."
			},
			"country_code-nullable": {
				"enum": [
					"AA",
					"AD",
					"AE",
					"AF",
					"AG",
					"AI",
					"AL",
					"AM",
					"AO",
					"AP",
					"AQ",
					"AR",
					"AS",
					"AT",
					"AU",
					"AW",
					"AX",
					"AZ",
					"BA",
					"BB",
					"BD",
					"BE",
					"BF",
					"BG",
					"BH",
					"BI",
					"BJ",
					"BL",
					"BM",
					"BN",
					"BO",
					"BQ",
					"BR",
					"BS",
					"BT",
					"BV",
					"BW",
					"BY",
					"BZ",
					"CA",
					"CC",
					"CD",
					"CF",
					"CG",
					"CH",
					"CI",
					"CK",
					"CL",
					"CM",
					"CN",
					"CO",
					"CR",
					"CU",
					"CV",
					"CW",
					"CX",
					"CY",
					"CZ",
					"DE",
					"DJ",
					"DK",
					"DM",
					"DO",
					"DZ",
					"EC",
					"EE",
					"EG",
					"EH",
					"ER",
					"ES",
					"ET",
					"FI",
					"FJ",
					"FK",
					"FM",
					"FO",
					"FR",
					"GA",
					"GB",
					"GD",
					"GE",
					"GF",
					"GG",
					"GH",
					"GI",
					"GL",
					"GM",
					"GN",
					"GP",
					"GQ",
					"GR",
					"GS",
					"GT",
					"GU",
					"GW",
					"GY",
					"HK",
					"HM",
					"HN",
					"HR",
					"HT",
					"HU",
					"ID",
					"IE",
					"IL",
					"IM",
					"IN",
					"IO",
					"IQ",
					"IR",
					"IS",
					"IT",
					"JE",
					"JM",
					"JO",
					"JP",
					"KE",
					"KG",
					"KH",
					"KI",
					"KM",
					"KN",
					"KP",
					"KR",
					"KW",
					"KY",
					"KZ",
					"LA",
					"LB",
					"LC",
					"LI",
					"LK",
					"LR",
					"LS",
					"LT",
					"LU",
					"LV",
					"LY",
					"MA",
					"MC",
					"MD",
					"ME",
					"MF",
					"MG",
					"MH",
					"MK",
					"ML",
					"MM",
					"MN",
					"MO",
					"MP",
					"MQ",
					"MR",
					"MS",
					"MT",
					"MU",
					"MV",
					"MW",
					"MX",
					"MY",
					"MZ",
					"NA",
					"NC",
					"NE",
					"NF",
					"NG",
					"NI",
					"NL",
					"NO",
					"NP",
					"NR",
					"NU",
					"NZ",
					"OM",
					"PA",
					"PE",
					"PF",
					"PG",
					"PH",
					"PK",
					"PL",
					"PM",
					"PN",
					"PR",
					"PS",
					"PT",
					"PW",
					"PY",
					"QA",
					"RE",
					"RO",
					"RS",
					"RU",
					"RW",
					"SA",
					"SB",
					"SC",
					"SD",
					"SE",
					"SG",
					"SH",
					"SI",
					"SJ",
					"SK",
					"SL",
					"SM",
					"SN",
					"SO",
					"SR",
					"SS",
					"ST",
					"SV",
					"SX",
					"SY",
					"SZ",
					"TC",
					"TD",
					"TF",
					"TG",
					"TH",
					"TJ",
					"TK",
					"TL",
					"TM",
					"TN",
					"TO",
					"TR",
					"TT",
					"TV",
					"TW",
					"TZ",
					"UA",
					"UG",
					"UM",
					"US",
					"UY",
					"UZ",
					"VA",
					"VC",
					"VE",
					"VG",
					"VI",
					"VN",
					"VU",
					"WF",
					"WS",
					"XX",
					"YE",
					"YT",
					"ZA",
					"ZM",
					"ZW"
				],
				"type": "string",
				"nullable": true,
				"x-label": "country_code-nullable",
				"x-enumDescriptions": {
					"AA": "",
					"AD": "Andorra",
					"AE": "United Arab Emirates",
					"AF": "Afghanistan",
					"AG": "Antigua and Barbuda",
					"AI": "Anguilla",
					"AL": "Albania",
					"AM": "Armenia",
					"AO": "Angola",
					"AP": "",
					"AQ": "Antarctica",
					"AR": "Argentina",
					"AS": "American Samoa",
					"AT": "Austria",
					"AU": "Australia",
					"AW": "Aruba",
					"AX": "Åland Islands",
					"AZ": "Azerbaijan",
					"BA": "Bosnia and Herzegovina",
					"BB": "Barbados",
					"BD": "Bangladesh",
					"BE": "Belgium",
					"BF": "Burkina Faso",
					"BG": "Bulgaria",
					"BH": "Bahrain",
					"BI": "Burundi",
					"BJ": "Benin",
					"BL": "Saint Barthélemy",
					"BM": "Bermuda",
					"BN": "Brunei Darussalam",
					"BO": "Bolivia",
					"BQ": "Bonaire, Sint Eustatius and Saba",
					"BR": "Brazil",
					"BS": "Bahamas",
					"BT": "Bhutan",
					"BV": "Bouvet Island",
					"BW": "Botswana",
					"BY": "Belarus",
					"BZ": "Belize",
					"CA": "Canada",
					"CC": "Cocos (Keeling) Islands",
					"CD": "Congo, the Democratic Republic of the",
					"CF": "Central African Republic",
					"CG": "Congo",
					"CH": "Switzerland",
					"CI": "Côte d'Ivoire",
					"CK": "Cook Islands",
					"CL": "Chile",
					"CM": "Cameroon",
					"CN": "China",
					"CO": "Colombia",
					"CR": "Costa Rica",
					"CU": "Cuba",
					"CV": "Cape Verde",
					"CW": "Curaçao",
					"CX": "Christmas Island",
					"CY": "Cyprus",
					"CZ": "Czech Republic",
					"DE": "Germany",
					"DJ": "Djibouti",
					"DK": "Denmark",
					"DM": "Dominica",
					"DO": "Dominican Republic",
					"DZ": "Algeria",
					"EC": "Ecuador",
					"EE": "Estonia",
					"EG": "Egypt",
					"EH": "Western Sahara",
					"ER": "Eritrea",
					"ES": "Spain",
					"ET": "Ethiopia",
					"FI": "Finland",
					"FJ": "Fiji",
					"FK": "Falkland Islands (Malvinas)",
					"FM": "Micronesia, Federated States of",
					"FO": "Faroe Islands",
					"FR": "France",
					"GA": "Gabon",
					"GB": "United Kingdom",
					"GD": "Grenada",
					"GE": "Georgia",
					"GF": "French Guiana",
					"GG": "Guernsey",
					"GH": "Ghana",
					"GI": "Gibraltar",
					"GL": "Greenland",
					"GM": "Gambia",
					"GN": "Guinea",
					"GP": "Guadeloupe",
					"GQ": "Equatorial Guinea",
					"GR": "Greece",
					"GS": "South Georgia and the South Sandwich Islands",
					"GT": "Guatemala",
					"GU": "Guam",
					"GW": "Guinea-Bissau",
					"GY": "Guyana",
					"HK": "Hong Kong",
					"HM": "Heard Island and McDonald Islands",
					"HN": "Honduras",
					"HR": "Croatia",
					"HT": "Haiti",
					"HU": "Hungary",
					"ID": "Indonesia",
					"IE": "Ireland",
					"IL": "Israel",
					"IM": "Isle of Man",
					"IN": "India",
					"IO": "British Indian Ocean Territory",
					"IQ": "Iraq",
					"IR": "Iran, Islamic Republic of",
					"IS": "Iceland",
					"IT": "Italy",
					"JE": "Jersey",
					"JM": "Jamaica",
					"JO": "Jordan",
					"JP": "Japan",
					"KE": "Kenya",
					"KG": "Kyrgyzstan",
					"KH": "Cambodia",
					"KI": "Kiribati",
					"KM": "Comoros",
					"KN": "Saint Kitts and Nevis",
					"KP": "Korea, Democratic People's Republic of",
					"KR": "Korea, Republic of",
					"KW": "Kuwait",
					"KY": "Cayman Islands",
					"KZ": "Kazakhstan",
					"LA": "Lao People's Democratic Republic",
					"LB": "Lebanon",
					"LC": "Saint Lucia",
					"LI": "Liechtenstein",
					"LK": "Sri Lanka",
					"LR": "Liberia",
					"LS": "Lesotho",
					"LT": "Lithuania",
					"LU": "Luxembourg",
					"LV": "Latvia",
					"LY": "Libyan Arab Jamahiriya",
					"MA": "Morocco",
					"MC": "Monaco",
					"MD": "Moldova, Republic of",
					"ME": "Montenegro",
					"MF": "Saint Martin (French part)",
					"MG": "Madagascar",
					"MH": "Marshall Islands",
					"MK": "Macedonia, the Former Yugoslav Republic of",
					"ML": "Mali",
					"MM": "Myanmar",
					"MN": "Mongolia",
					"MO": "Macao",
					"MP": "Northern Mariana Islands",
					"MQ": "Martinique",
					"MR": "Mauritania",
					"MS": "Montserrat",
					"MT": "Malta",
					"MU": "Mauritius",
					"MV": "Maldives",
					"MW": "Malawi",
					"MX": "Mexico",
					"MY": "Malaysia",
					"MZ": "Mozambique",
					"NA": "Namibia",
					"NC": "New Caledonia",
					"NE": "Niger",
					"NF": "Norfolk Island",
					"NG": "Nigeria",
					"NI": "Nicaragua",
					"NL": "Netherlands",
					"NO": "Norway",
					"NP": "Nepal",
					"NR": "Nauru",
					"NU": "Niue",
					"NZ": "New Zealand",
					"OM": "Oman",
					"PA": "Panama",
					"PE": "Peru",
					"PF": "French Polynesia",
					"PG": "Papua New Guinea",
					"PH": "Philippines",
					"PK": "Pakistan",
					"PL": "Poland",
					"PM": "Saint Pierre and Miquelon",
					"PN": "Pitcairn",
					"PR": "Puerto Rico",
					"PS": "Palestinian Territory, Occupied",
					"PT": "Portugal",
					"PW": "Palau",
					"PY": "Paraguay",
					"QA": "Qatar",
					"RE": "Réunion",
					"RO": "Romania",
					"RS": "Serbia",
					"RU": "Russian Federation",
					"RW": "Rwanda",
					"SA": "Saudi Arabia",
					"SB": "Solomon Islands",
					"SC": "Seychelles",
					"SD": "Sudan",
					"SE": "Sweden",
					"SG": "Singapore",
					"SH": "Saint Helena",
					"SI": "Slovenia",
					"SJ": "Svalbard and Jan Mayen",
					"SK": "Slovakia",
					"SL": "Sierra Leone",
					"SM": "San Marino",
					"SN": "Senegal",
					"SO": "Somalia",
					"SR": "Suriname",
					"SS": "South Sudan",
					"ST": "Sao Tome and Principe",
					"SV": "El Salvador",
					"SX": "Sint Maarten (Dutch part)",
					"SY": "Syrian Arab Republic",
					"SZ": "Swaziland",
					"TC": "Turks and Caicos Islands",
					"TD": "Chad",
					"TF": "French Southern Territories",
					"TG": "Togo",
					"TH": "Thailand",
					"TJ": "Tajikistan",
					"TK": "Tokelau",
					"TL": "Timor-Leste",
					"TM": "Turkmenistan",
					"TN": "Tunisia",
					"TO": "Tonga",
					"TR": "Turkey",
					"TT": "Trinidad and Tobago",
					"TV": "Tuvalu",
					"TW": "Taiwan, Province of China",
					"TZ": "Tanzania, United Republic of",
					"UA": "Ukraine",
					"UG": "Uganda",
					"UM": "United States Minor Outlying Islands",
					"US": "United States",
					"UY": "Uruguay",
					"UZ": "Uzbekistan",
					"VA": "Holy See (Vatican City State)",
					"VC": "Saint Vincent and the Grenadines",
					"VE": "Venezuela",
					"VG": "Virgin Islands, British",
					"VI": "Virgin Islands, U.S.",
					"VN": "Vietnam",
					"VU": "Vanuatu",
					"WF": "Wallis and Futuna",
					"WS": "Samoa",
					"XX": "Custom code WePay uses for Crimea",
					"YE": "Yemen",
					"YT": "Mayotte",
					"ZA": "South Africa",
					"ZM": "Zambia",
					"ZW": "Zimbabwe"
				}
			},
			"legal_entities_id_verifications_controller_response": {
				"additionalProperties": false,
				"properties": {
					"personal_verification": {
						"additionalProperties": false,
						"properties": {
							"verified": {
								"type": "boolean",
								"description": "Indicates if the personal verification details of the controller have been verified."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"additional_documents_required",
												"errant_fields",
												"identity_verification",
												"in_review",
												"risk_outreach"
											],
											"x-enumDescriptions": {
												"additional_documents_required": "**Note:** This is the default value for additional information during merchant verification, but can be replaced by `identity_verification` by working with your integration team. This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [Example notification](https://gist.github.com/wehub/edcae2ecefbd76df9e3b3e6a97a954cf).",
												"errant_fields": "This value describes missing or invalid onboarding information.",
												"identity_verification": "**Note:** Work with your integration team to enable this value, which would then replace `additional_documents_required` and enhance the end user experience. The preferred method is `identity_verification`, so please work with your integration team to get this enabled to replace the `additional_documents_required` value. WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives.",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete.",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant."
											},
											"type": "string",
											"description": "Indicates the reason(s) the current issue has appeared."
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object",
											"description": "Indicates the resource associated with the current issue."
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array",
											"description": "Indicates if additional documentation is required for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, then any and all required documentation will be presented in this array."
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"includes_dba",
														"does_not_match_provided_doc",
														"does_not_match_government_sources",
														"invalid_url"
													],
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"includes_dba": "Business Legal Name should not include Doing Business As (DBA).",
														"does_not_match_provided_doc": "The value of the target does not match provided documentation.",
														"does_not_match_government_sources": "The value of the target does not match government sources.",
														"invalid_url": "WePay cannot verify the URL. The merchant should double check their website URL and submit it again."
													},
													"type": "string"
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array",
											"description": "Indicates if verification information is under review (if any) for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, and `in_review` is `true`, then this array will contain the path of the item(s) under review."
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object",
									"description": "Returns an array of objects identifying why WePay is unable to verify an entity, controller, or additional representative. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type` and will be one of: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`."
								},
								"type": "array"
							},
							"documents": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"create_time": {
											"$ref": "#/components/schemas/create_time"
										},
										"id": {
											"$ref": "#/components/schemas/id"
										},
										"owner": {
											"$ref": "#/components/schemas/shared_owner_response"
										},
										"path": {
											"type": "string",
											"nullable": true
										},
										"reject_reason": {
											"additionalProperties": false,
											"properties": {
												"details": {
													"items": {
														"additionalProperties": false,
														"properties": {
															"detail_code": {
																"enum": [
																	"illegible",
																	"corrupt_file",
																	"info_mismatch",
																	"doc_unsupported",
																	"incomplete"
																],
																"type": "string",
																"nullable": true,
																"x-enumDescriptions": {
																	"illegible": "Quality of the file or text in the file was such that the document content could not be read.",
																	"corrupt_file": "The file could not be used. The merchant must create a new file and try again.",
																	"info_mismatch": "The information in the document did not match the information on file for the merchant. The merchant must provide documents with information pertaining to the business, otherwise re-submit the data provided to WePay.",
																	"doc_unsupported": "The provided document does not satisfy the requirement from WePay.",
																	"incomplete": "The provided document does not completely satisfy the requirements. Additional documents may be requested."
																}
															},
															"detail_message": {
																"type": "string",
																"nullable": true
															}
														},
														"required": [
															"detail_code",
															"detail_message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"reason_code": {
													"enum": [
														"failed_risk_review"
													],
													"type": "string",
													"x-enumDescriptions": {
														"failed_risk_review": "The provided document failed WePay risk review."
													}
												},
												"reason_message": {
													"type": "string"
												}
											},
											"required": [
												"reason_code",
												"reason_message",
												"details"
											],
											"type": "object",
											"nullable": true,
											"description": "Describes the reasons a document was rejected."
										},
										"resource": {
											"enum": [
												"documents"
											],
											"x-enumDescriptions": {
												"documents": ""
											},
											"type": "string"
										},
										"status": {
											"enum": [
												"in_review",
												"verified",
												"rejected"
											],
											"x-enumDescriptions": {
												"in_review": "The document has been received and is currently being reviewed by WePay. Once review is complete, the status will be updated.",
												"verified": "WePay was able to verify the information in the document, and no further action is needed for this specific requirement.",
												"rejected": "WePay was unable to verify the document, so the merchant must address the issues listed in the `reject_reason.detail_code` parameter."
											},
											"type": "string"
										},
										"type": {
											"enum": [
												"articles_of_association",
												"benefits_card",
												"birth_certificate",
												"canadian_citizenship",
												"canadian_health_card",
												"certificate_of_association",
												"certificate_of_authority",
												"certificate_of_citizenship",
												"certificate_of_formation",
												"certificate_of_incorporation",
												"certificate_of_naturalization",
												"certificate_of_organization",
												"certified_copy_of_court_order",
												"charity_license",
												"credit_card_statement",
												"current_bank_statement",
												"current_lease_contract",
												"current_local_tax_bill",
												"current_utility_bill",
												"dba_registration",
												"divorce_decree",
												"drivers_license",
												"electoral_register_entry",
												"employment_authorization_card",
												"evidence_of_authority",
												"evidence_of_corporate_registration",
												"evidence_of_name_change",
												"evidence_of_nonprofit_registration",
												"firearms_certificate",
												"foreign_passport",
												"hud_statement",
												"identity_card_northern_ireland",
												"insurance_bill",
												"insurance_card",
												"insurance_declaration_page",
												"irs_501c3_determination",
												"irs_confirmation_of_tin",
												"marriage_certificate",
												"matricula_consular_card",
												"military_orders",
												"mortgage_closing_document",
												"mortgage_statement",
												"national_identity_card",
												"order_of_creation",
												"other_evidence_of_filings",
												"other_government_issued_photo_id",
												"other_supporting_docs",
												"partnership_agreement",
												"passport",
												"paystub",
												"permanent_resident_card",
												"sentri_card",
												"social_insurance_number_card",
												"social_security_benefit_notice",
												"social_security_card",
												"tax_exemption_letter",
												"trust_agreement",
												"vehicle_registration"
											],
											"x-enumDescriptions": {
												"articles_of_association": "",
												"benefits_card": "",
												"birth_certificate": "",
												"canadian_citizenship": "",
												"canadian_health_card": "",
												"certificate_of_association": "",
												"certificate_of_authority": "",
												"certificate_of_citizenship": "",
												"certificate_of_formation": "",
												"certificate_of_incorporation": "",
												"certificate_of_naturalization": "",
												"certificate_of_organization": "",
												"certified_copy_of_court_order": "",
												"charity_license": "",
												"credit_card_statement": "",
												"current_bank_statement": "",
												"current_lease_contract": "",
												"current_local_tax_bill": "",
												"current_utility_bill": "",
												"dba_registration": "",
												"divorce_decree": "",
												"drivers_license": "",
												"electoral_register_entry": "",
												"employment_authorization_card": "",
												"evidence_of_authority": "",
												"evidence_of_corporate_registration": "",
												"evidence_of_name_change": "",
												"evidence_of_nonprofit_registration": "",
												"firearms_certificate": "",
												"foreign_passport": "",
												"hud_statement": "",
												"identity_card_northern_ireland": "",
												"insurance_bill": "",
												"insurance_card": "",
												"insurance_declaration_page": "",
												"irs_501c3_determination": "",
												"irs_confirmation_of_tin": "",
												"marriage_certificate": "",
												"matricula_consular_card": "",
												"military_orders": "",
												"mortgage_closing_document": "",
												"mortgage_statement": "",
												"national_identity_card": "",
												"order_of_creation": "",
												"other_evidence_of_filings": "",
												"other_government_issued_photo_id": "",
												"other_supporting_docs": "",
												"partnership_agreement": "",
												"passport": "",
												"paystub": "",
												"permanent_resident_card": "",
												"sentri_card": "",
												"social_insurance_number_card": "",
												"social_security_benefit_notice": "",
												"social_security_card": "",
												"tax_exemption_letter": "",
												"trust_agreement": "",
												"vehicle_registration": ""
											},
											"type": "string"
										}
									},
									"required": [
										"resource",
										"id",
										"path",
										"owner",
										"create_time",
										"type",
										"status",
										"reject_reason"
									],
									"type": "object"
								},
								"type": "array",
								"description": "The document IDs are returned via the document upload feature in the JavaScript library. These documents will be used for identity verification. Check out Document Upload for more details."
							}
						},
						"required": [
							"verified"
						],
						"type": "object",
						"description": "Personal information for additional beneficial owners of the legal entity. **Note:** You can pass `{}` to signify that this legal entity does not have any additional representatives."
					},
					"reference_id": {
						"$ref": "#/components/schemas/beneficial_owner_reference_id"
					}
				},
				"required": [
					"personal_verification"
				],
				"type": "object",
				"x-label": "legal_entities_id_verifications_controller_response",
				"description": "Personal details of the controller.  *Note:* A controller is an individual with significant responsibility to control or manage a legal entity. Examples of controllers include, but are not limited to, a Chief Executive Officer, Chief Financial Officer, Chief Operating Officer, Managing Member, General Partner, President, Vice President, or Treasurer, or any other individual who regularly performs similar functions as part of a control prong."
			},
			"shared_owner_is_legal_entity_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The application ID assigned to your platform in the Partner Center. If for the beneficiary field, then the ID of the beneficial owner."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-legal_entities"
					}
				},
				"required": [
					"resource",
					"id",
					"path"
				],
				"type": "object",
				"x-label": "shared_owner_is_legal_entity_response",
				"description": "Details the owner resource and owner path."
			},
			"accounts_incoming_payments_response": {
				"additionalProperties": false,
				"properties": {
					"accepted_methods": {
						"items": {
							"maxLength": 255,
							"type": "string"
						},
						"type": "array",
						"uniqueItems": true,
						"description": "An array of accepted payment methods. Possible values include: `american_express`, `discover`, `diners_club`, `jcb`, `mastercard`, `payment_bank`, `visa`."
					},
					"amex": {
						"$ref": "#/components/schemas/accounts_amex_response"
					},
					"opted_out_methods": {
						"$ref": "#/components/schemas/accounts_opted_out_methods"
					}
				},
				"required": [
					"accepted_methods"
				],
				"type": "object",
				"x-label": "accounts_incoming_payments_response",
				"description": "Identify the payment methods this merchant will accept, and describe this merchant's relationship with card association."
			},
			"accounts_payout_response": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/accounts_payout_currency_response"
							},
							"GBP": {
								"$ref": "#/components/schemas/accounts_payout_currency_response"
							},
							"USD": {
								"$ref": "#/components/schemas/accounts_payout_currency_response"
							}
						},
						"type": "object"
					},
					"default_currency": {
						"enum": [
							"USD",
							"CAD",
							"GBP"
						],
						"x-enumDescriptions": {
							"USD": "Indicate that this account's default payout should be in US dollars.",
							"CAD": "Indicate that this account's default payout should be in Canadian dollars.",
							"GBP": "Indicate that this account's default payout should be in Great British pounds. **Note:** Not currently supported."
						},
						"type": "string"
					}
				},
				"type": "object",
				"x-label": "accounts_payout_response",
				"description": "Details the merchant’s payout method."
			},
			"pricing-create_unversioned": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/pricing_by_currency-create-CAD_unversioned"
							},
							"GBP": {
								"$ref": "#/components/schemas/pricing_by_currency-create-GBP"
							},
							"USD": {
								"$ref": "#/components/schemas/pricing_by_currency-create-USD"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "pricing-create_unversioned",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"transaction_division_mid-nullable_unversioned": {
				"type": "integer",
				"x-label": "transaction_division_mid-nullable_unversioned",
				"nullable": true,
				"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_division_mid-nullable/description"
			},
			"uri-nullable": {
				"maxLength": 2063,
				"pattern": "^https?://.+$",
				"type": "string",
				"nullable": true,
				"x-label": "uri-nullable",
				"description": "Primary URL of the legal entity. "
			},
			"currency": {
				"enum": [
					"USD",
					"CAD",
					"GBP"
				],
				"type": "string",
				"x-label": "currency",
				"description": "ISO 4217 currency code. Possible values include: `CAD` & `USD`. **Note:** as of today, `currency` supports a single value.",
				"example": "USD",
				"x-enumDescriptions": {
					"USD": "United States Dollar",
					"CAD": "Canadian Dollar",
					"GBP": "Great Britain Pound"
				}
			},
			"accounts_id": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"x-label": "accounts_id",
				"description": "ID of the merchant account, generated by WePay when the account is created."
			},
			"uri": {
				"maxLength": 2063,
				"pattern": "^https?://.+$",
				"type": "string",
				"x-label": "uri",
				"description": "A valid, publicly available URL that works as an endpoint for HTTPS requests. This cannot be a local host. If for notification preferences, must be HTTPS."
			},
			"accounts_accepted_method_of_payments_transaction_type": {
				"additionalProperties": false,
				"properties": {
					"credit": {
						"type": "boolean",
						"default": true
					},
					"debit": {
						"type": "boolean",
						"default": true
					}
				},
				"type": "object",
				"x-label": "accounts_accepted_method_of_payments_transaction_type"
			},
			"shared_modules_used": {
				"additionalProperties": false,
				"properties": {
					"service_name": {
						"maxLength": 1024,
						"type": "string"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"service_monthly_cost": {
						"type": "integer"
					}
				},
				"required": [
					"service_name"
				],
				"type": "object",
				"x-label": "shared_modules_used"
			},
			"accounts_payout_purpose_type": {
				"additionalProperties": false,
				"properties": {
					"payout_method_id": {
						"maxLength": 255,
						"type": "string",
						"description": "ID of the payout method associated with the USD payout."
					},
					"period": {
						"enum": [
							"daily",
							"weekly",
							"monthly"
						],
						"type": "string",
						"x-enumDescriptions": {
							"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
							"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
							"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
						},
						"description": "Describes the how often a USD payout will occur."
					}
				},
				"required": [
					"payout_method_id",
					"period"
				],
				"type": "object",
				"nullable": true,
				"description": "Payout currency details.",
				"x-label": "accounts_payout_purpose_type"
			},
			"accounts_accepted_method_of_payments_card_present": {
				"additionalProperties": false,
				"properties": {
					"contact": {
						"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
					},
					"contactless": {
						"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
					}
				},
				"type": "object",
				"x-label": "accounts_accepted_method_of_payments_card_present"
			},
			"shared_personal_country_info_CA_request": {
				"additionalProperties": false,
				"properties": {
					"social_insurance_number": {
						"pattern": "^\\d{3}[ -]?\\d{3}[ -]?\\d{3}$",
						"type": "string",
						"nullable": true,
						"description": "Social insurance number."
					}
				},
				"type": "object",
				"x-label": "shared_personal_country_info_CA_request"
			},
			"shared_personal_country_info_GB_request": {
				"additionalProperties": false,
				"properties": {},
				"type": "object",
				"x-label": "shared_personal_country_info_GB_request"
			},
			"shared_personal_country_info_US_request": {
				"additionalProperties": false,
				"properties": {
					"social_security_number": {
						"pattern": "^\\d{3}[ -]?\\d{2}[ -]?\\d{4}$",
						"type": "string",
						"nullable": true
					},
					"social_security_number_last_four": {
						"pattern": "^\\d{4}$",
						"type": "string",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "shared_personal_country_info_US_request"
			},
			"address-rbits": {
				"additionalProperties": false,
				"properties": {
					"postal_code": {
						"maxLength": 14,
						"type": "string",
						"description": "Postal code associated with the address."
					},
					"city": {
						"maxLength": 30,
						"type": "string",
						"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"line1": {
						"maxLength": 60,
						"type": "string",
						"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"line2": {
						"maxLength": 60,
						"type": "string",
						"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"region": {
						"maxLength": 30,
						"type": "string",
						"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
					}
				},
				"required": [
					"postal_code"
				],
				"type": "object",
				"x-label": "address-rbits"
			},
			"resource-accounts": {
				"enum": [
					"accounts"
				],
				"x-enumDescriptions": {
					"accounts": ""
				},
				"type": "string",
				"x-label": "resource-accounts",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"accounts_accepted_method_of_payments_american_express": {
				"additionalProperties": false,
				"properties": {
					"card_not_present": {
						"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
					},
					"card_present": {
						"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
					},
					"configurations": {
						"additionalProperties": false,
						"properties": {
							"se_number": {
								"type": "string",
								"maxLength": 10,
								"minLength": 10
							},
							"transaction_code": {
								"enum": [
									"conveyed"
								],
								"x-enumDescriptions": {
									"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
								},
								"type": "string"
							},
							"seller_id": {
								"type": "string"
							}
						},
						"required": [
							"transaction_code",
							"se_number"
						],
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "accounts_accepted_method_of_payments_american_express"
			},
			"accounts_accepted_method_of_payments_interac": {
				"additionalProperties": false,
				"properties": {
					"card_present": {
						"additionalProperties": false,
						"properties": {
							"contact": {
								"additionalProperties": false,
								"properties": {
									"debit": {
										"type": "boolean",
										"default": true
									}
								},
								"type": "object"
							},
							"contactless": {
								"additionalProperties": false,
								"properties": {
									"debit": {
										"type": "boolean",
										"default": true,
										"description": "The contactless payment functionality of Interac® Debit is also called Interac Flash."
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "accounts_accepted_method_of_payments_interac"
			},
			"accounts_id_tier_request": {
				"additionalProperties": false,
				"properties": {
					"fixed_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"maximum": 5000,
						"description": "The fixed fee amount.",
						"example": 50
					},
					"max_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The maximum value of total fee amount.",
						"example": 1000
					},
					"min_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The minimum value of total fee amount.",
						"example": 100
					},
					"upper_threshold_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The value of upper threshold.",
						"example": 999999999
					},
					"variable_fee_bps": {
						"type": "integer",
						"minimum": 0,
						"maximum": 500,
						"description": "The basis points to calculate variable fee amount.",
						"example": 500
					}
				},
				"type": "object",
				"x-label": "accounts_id_tier_request",
				"description": "The tier pricing model to collect platform fees when the payment method is a payment bank."
			},
			"shared_traded_exchange_request": {
				"type": "object",
				"properties": {
					"symbol": {
						"maxLength": 5,
						"type": "string",
						"description": "Ticker symbol of the publicly traded company."
					}
				},
				"x-label": "shared_traded_exchange_request"
			},
			"rbit-source": {
				"enum": [
					"user",
					"guidestar",
					"experian_precise_id",
					"experian_biz_id",
					"experian_biz_iq",
					"equifax",
					"spokeo",
					"whitepages",
					"irs_tin_check",
					"partner_database",
					"partner_employee",
					"generic_website"
				],
				"x-enumDescriptions": {
					"user": "Indicates that the information in this rBit was submitted directly by the user (merchant or payer).",
					"guidestar": "Indicates that the information in this rBit was collected by the partner from GuideStar.",
					"experian_precise_id": "Indicates that the information in this rBit was collected by the partner using Experian Precise ID.",
					"experian_biz_id": "Indicates that the information in this rBit was collected by the partner using Experian BizID.",
					"experian_biz_iq": "Indicates that the information in this rBit was collected by the partner using Experian BizIQ.",
					"equifax": "Indicates that the information in this rBit was collected by the partner using Equifax.",
					"spokeo": "Indicates that the information in this rBit was collected by the prrtner using Spokeo.",
					"whitepages": "Indicates that the information in this rBit was collected by the partner using Whitepages.",
					"irs_tin_check": "Indicates that the information in this rBit was collected by the partner by checking the merchant's TIN with the IRS.",
					"partner_database": "Indicates that the information in this rBit originates from data already existing in the partner's database.",
					"partner_employee": "Indicates that the information in this rBit was provided by an employee of the partner.",
					"generic_website": "Indicates that the information in this rBit was collected by the platform from a generic, publicly available website."
				},
				"type": "string",
				"x-label": "rbit-source"
			},
			"rbit-types": {
				"enum": [
					"address",
					"auto_billing",
					"business_description",
					"business_name",
					"external_account",
					"fundraising_event",
					"fundraising_update",
					"industry_code",
					"partner_service",
					"person",
					"phone",
					"transaction_details",
					"mfa",
					"project",
					"revenue",
					"website"
				],
				"x-enumDescriptions": {
					"address": "Send this enum value when the rBit is describing an address related to the merchant or transaction.",
					"auto_billing": "Send this enum value when the rBit is describing auto billing related to a transaction.",
					"business_description": "Send this enum value when the rBit is the business description related to the merchant.",
					"business_name": "Send this enum value when the rBit is the business name related to the merchant.",
					"external_account": "Send this enum value when the rBit is describing an external account associated with to the merchant or payer.",
					"fundraising_event": "Send this enum value when the rBit is providing information about a fundraising event.",
					"fundraising_update": "Send this enum value when the rBit is providing an update about a fundraising campaign or event.",
					"industry_code": "Send this enum value when the rBit is providing an industry code for the merchant.",
					"partner_service": "Send this enum value when the rBit is describing a transaction related to services provided by the partner to end users.",
					"person": "Send this enum value when the rBit is describing a person related to the merchant or transaction.",
					"phone": "Send this enum value when the rBit is describing a phone number related to the merchant or transaction.",
					"transaction_details": "Send this enum value when the rBit is providing details about the transaction.",
					"mfa": "Send this enum value when the rBit is providing information about an end user's MFA status.",
					"project": "Information about a project that an invoice or transaction is related to.",
					"revenue": "Information about revenue.",
					"website": "The URI to the campaign/website for the associated object."
				},
				"type": "string",
				"x-isOneOfKey": true,
				"x-label": "rbit-types",
				"description": "The type of rBit. Use `type` to define how the rBit will be used."
			},
			"rbits_address": {
				"properties": {
					"origin_address": {
						"$ref": "#/components/schemas/address-rbits"
					},
					"address_type": {
						"enum": [
							"incorporation",
							"headquarters",
							"satellite",
							"mail_forwarding",
							"home"
						],
						"x-enumDescriptions": {
							"incorporation": "Identifies the address as that of an incorporation.",
							"headquarters": "Identifies the address as the headquarters of the merchant or client.",
							"satellite": "Identifies the address as a satellite office of the merchant or client.",
							"mail_forwarding": "Identifies the address as the mail-forwarding address of the merchant or client.",
							"home": "Identifies the address as the home address of the merchant or client."
						},
						"type": "string"
					},
					"normalized_address": {
						"$ref": "#/components/schemas/address-rbits"
					},
					"normalized_address_status": {
						"maxLength": 255,
						"type": "string"
					},
					"normalized_source": {
						"maxLength": 255,
						"type": "string"
					}
				},
				"required": [
					"origin_address"
				],
				"type": "object",
				"x-label": "rbits_address",
				"description": "A mailing address associated with a user or account."
			},
			"shared_auto_billing": {
				"additionalProperties": false,
				"properties": {
					"autobill_setup_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The UNIX timestamp when the auto-bill was first set up or last updated by the user."
					},
					"payment_frequency": {
						"maxLength": 32,
						"type": "string",
						"description": "Describes the frequency of auto-billed payments. Possible values include: `annually`, `monthly`, `quarterly`, `weekly`. **Alternately**, you can specify the number of weeks/ months / years as follows: `1d`, `2d`, `3d`, etc; `1w`, `2w`, `3w`, etc; `1m`, `2m`, `3m`, etc; `1y`, `2y`, `3y`, etc."
					},
					"payment_number": {
						"type": "integer",
						"description": "If this is the first payment of an `auto-billing` series of payments, then set the value here to `2`."
					},
					"setup_by": {
						"enum": [
							"payer",
							"merchant"
						],
						"x-enumDescriptions": {
							"payer": "The payer set up and authorized auto-billing.",
							"merchant": "The merchant set up and authorized auto-billing."
						},
						"type": "string",
						"description": "The party who set up auto-billing. Possible values include: `payer`: the payer set up and authorized auto-billing; `merchant`: the merchant set up auto-billing on the payer's behalf."
					},
					"total_payments_scheduled": {
						"type": "integer",
						"description": "The number of payments that are scheduled to be auto-billed. For example total_payments_scheduled = 3. If there is no scheduled end to the auto-billed payments, then pass null."
					}
				},
				"type": "object",
				"x-label": "shared_auto_billing",
				"description": "The user's card is charged automatically every month."
			},
			"shared_business_description": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"maxLength": 50000,
						"type": "string",
						"description": "Text description of the business."
					},
					"number_of_employees": {
						"minimum": 1,
						"type": "integer",
						"description": "The number of employees employed by the business."
					},
					"sales_tax_liability_flag": {
						"type": "boolean",
						"description": "Possible values include: `true`: indicates that this merchant collects sales tax for each transaction; `false`: indicates that this merchant does not collect sales tax for each transaction."
					}
				},
				"required": [
					"description"
				],
				"type": "object",
				"x-label": "shared_business_description",
				"description": "Text description of the business."
			},
			"shared_business_name": {
				"additionalProperties": false,
				"properties": {
					"name": {
						"maxLength": 255,
						"type": "string",
						"description": "The full name of the business."
					},
					"name_type": {
						"enum": [
							"legal",
							"dba"
						],
						"x-enumDescriptions": {
							"legal": "Indicates that the name sent is the legal name as it appears in IRS filings and other licencing.",
							"dba": "Indicates that the name sent is the commonly known name for a business."
						},
						"type": "string",
						"description": "Possible values include: `legal`: the legal name of the company; `dba`: The \"Also Known As\" or \"Doing Business As\" name of the company."
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"x-label": "shared_business_name",
				"description": "The full name of the business."
			},
			"shared_external_account": {
				"additionalProperties": false,
				"properties": {
					"account_type": {
						"maxLength": 255,
						"type": "string",
						"description": "Name of the provider of the account. If this is an account controlled by your platform, skip this parameter and set the `is_partner_account` parameter to `true`."
					},
					"is_partner_account": {
						"type": "boolean",
						"description": "Possible values: `false`: the external account is not controlled by your platform; `true`: the external account is controlled by your platform."
					},
					"connections": {
						"type": "integer",
						"description": "The number of friends (Facebook) or connections (LinkedIn) the user has."
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The timestamp (in UNIX) when external account was created."
					},
					"feedback_average_score": {
						"type": "number",
						"description": "Average feedback score for this user normalized between 0.0 (worst) and 1.0 (best). (Applies to star rating feedback systems.)"
					},
					"feedback_score_percent_positive": {
						"type": "number",
						"description": "Percentage of feedback which is positive. (Applies to positive/negative scoring systems.)"
					},
					"feedback_scores_provided": {
						"type": "integer",
						"description": "Number of times this user has received feedback."
					},
					"followers": {
						"type": "integer",
						"description": "The user's number of followers (Twitter) or members in their circles (Google+)."
					},
					"following": {
						"type": "integer",
						"description": "The number of people the user is following (Twitter) or has in their circles (Google+)."
					},
					"modify_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The timestamp (in UNIX) when external account was modified."
					},
					"uri": {
						"$ref": "#/components/schemas/uri"
					},
					"user_id": {
						"maxLength": 255,
						"type": "string",
						"description": "The user's ID of the external account."
					}
				},
				"required": [
					"is_partner_account",
					"account_type"
				],
				"type": "object",
				"x-label": "shared_external_account",
				"description": "The user’s external accounts"
			},
			"shared_fundraising_event": {
				"additionalProperties": false,
				"properties": {
					"name": {
						"maxLength": 255,
						"type": "string",
						"description": "Name of the fundraising event."
					},
					"campaign_category": {
						"maxLength": 255,
						"type": "string"
					},
					"campaign_team": {
						"maxLength": 255,
						"type": "string"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"description": {
						"maxLength": 64000,
						"type": "string"
					},
					"event_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) of when the event starts."
					},
					"fundraising_goal": {
						"type": "integer",
						"description": "The fundraising goal established by the event organizers."
					},
					"giving_deadline": {
						"type": "integer",
						"description": "The time (in UNIX) of the deadline when donations will no longer be accepted."
					},
					"photo_uris": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/uri"
						}
					},
					"uri": {
						"$ref": "#/components/schemas/uri"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"x-label": "shared_fundraising_event",
				"description": "Information about an event related to a donation transaction or donation account."
			},
			"shared_fundraising_update": {
				"additionalProperties": false,
				"properties": {
					"campaign_page_update": {
						"maxLength": 10000,
						"type": "string"
					},
					"campaign_title_update": {
						"maxLength": 255,
						"type": "string"
					}
				},
				"type": "object",
				"x-label": "shared_fundraising_update"
			},
			"shared_industry_code": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"maxLength": 32,
						"type": "string"
					},
					"code_type": {
						"enum": [
							"merchant_category_code",
							"standard_industry_code",
							"north_american_industry_classification_system"
						],
						"x-enumDescriptions": {
							"merchant_category_code": "Indicates that the code sent is an [MCC](/clear/options/mccs/).",
							"standard_industry_code": "Indicates that the code sent is a [Standard Industry Code](https://en.wikipedia.org/wiki/Standard_Industrial_Classification).",
							"north_american_industry_classification_system": "Indicates that the code sent is from the [North American Industry Classification System](https://en.wikipedia.org/wiki/North_American_Industry_Classification_System)."
						},
						"type": "string"
					},
					"industry_detail": {
						"maxLength": 1024,
						"type": "string"
					}
				},
				"required": [
					"code_type",
					"code"
				],
				"type": "object",
				"x-label": "shared_industry_code",
				"description": "A code from one of several sources that indicates the industry associated with the business."
			},
			"shared_mfa": {
				"additionalProperties": false,
				"properties": {
					"associated_phone": {
						"type": "object",
						"properties": {
							"country_code": {
								"pattern": "^\\+?[0-9]{1,3}$",
								"type": "string",
								"nullable": true,
								"description": "Country code associated with the legal entity."
							},
							"phone_number": {
								"pattern": "^[0-9]{7,14}$",
								"type": "string",
								"nullable": true,
								"description": "Phone number associated with the legal entity."
							}
						},
						"additionalProperties": false
					},
					"mfa_action": {
						"enum": [
							"activated",
							"disabled",
							"updated"
						],
						"x-enumDescriptions": {
							"activated": "Indicates that MFA has been set up for this user.",
							"disabled": "Indicates that MFA has been disabled for this user.",
							"updated": "Indicates that MFA has been updated for this user."
						},
						"type": "string"
					}
				},
				"required": [
					"mfa_action",
					"associated_phone"
				],
				"type": "object",
				"x-label": "shared_mfa"
			},
			"shared_partner_service": {
				"additionalProperties": false,
				"properties": {
					"service_name": {
						"maxLength": 1024,
						"type": "string"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"modules_used": {
						"items": {
							"$ref": "#/components/schemas/shared_modules_used"
						},
						"type": "array"
					},
					"service_monthly_cost": {
						"type": "integer"
					}
				},
				"required": [
					"service_name"
				],
				"type": "object",
				"x-label": "shared_partner_service",
				"description": "This describes one type of service or product the user signed up for on the partner site. This should be passed as a related rbit of the `external_account` rbit that contains partner site information."
			},
			"shared_person": {
				"additionalProperties": false,
				"properties": {
					"name": {
						"additionalProperties": false,
						"properties": {
							"first": {
								"maxLength": 30,
								"minLength": 2,
								"type": "string",
								"description": "First name."
							},
							"last": {
								"maxLength": 30,
								"minLength": 2,
								"type": "string",
								"description": "Last name."
							}
						},
						"required": [
							"first",
							"last"
						],
						"type": "object"
					},
					"date_of_birth": {
						"additionalProperties": false,
						"properties": {
							"day": {
								"maximum": 31,
								"minimum": 1,
								"type": "integer",
								"description": "Day of birth."
							},
							"month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "Month of birth."
							},
							"year": {
								"minimum": 1900,
								"type": "integer",
								"description": "Year of birth."
							}
						},
						"required": [
							"year",
							"month",
							"day"
						],
						"type": "object",
						"nullable": true,
						"x-isDate": true,
						"description": "Date of birth details."
					},
					"role": {
						"enum": [
							"employee",
							"fundraiser",
							"fundraising_team_captain",
							"other_third_party"
						],
						"x-enumDescriptions": {
							"employee": "Identifies the person the rBit contains information about as an employee of the merchant.",
							"fundraiser": "Identifies the person the rBit contains information about as a fundraiser for the merchant.",
							"fundraising_team_captain": "Identifies the person the rBit contains information about as a fundraising team captain for the merchant.",
							"other_third_party": "Identifies the person the rBit contains information about as some third party related to the merchant or payer."
						},
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"x-label": "shared_person",
				"description": "Information about a person associated with a user or account."
			},
			"shared_rbits_phone": {
				"properties": {
					"country_code": {
						"pattern": "^\\+?[0-9]{1,3}$",
						"type": "string",
						"description": "Country code associated with the legal entity."
					},
					"phone_number": {
						"pattern": "^[0-9]{7,14}$",
						"type": "string",
						"description": "Phone number associated with the legal entity."
					},
					"phone_type": {
						"enum": [
							"mobile",
							"personal",
							"business"
						],
						"x-enumDescriptions": {
							"mobile": "Indicates that the phone number is for a mobile device.",
							"personal": "Indicates that the phone number is for a personal device.",
							"business": "Indicates that the phone number is for a business device."
						},
						"type": "string"
					}
				},
				"required": [
					"country_code",
					"phone_number"
				],
				"type": "object",
				"x-label": "shared_rbits_phone",
				"description": "A phone number associated with a user or account."
			},
			"shared_project": {
				"additionalProperties": false,
				"properties": {
					"name": {
						"type": "string",
						"maxLength": 255,
						"description": "Name of the project. This should match the project_name property, if provided, in the receipt_line_item structure."
					},
					"billing_method": {
						"enum": [
							"hourly_staff_rate",
							"hourly_task_rate",
							"hourly_project_rate",
							"flat_project_amount"
						],
						"type": "string",
						"x-enumDescriptions": {
							"hourly_staff_rate": "hourly staff rate.",
							"hourly_task_rate": "hourly task rate.",
							"hourly_project_rate": "hourly project rate.",
							"flat_project_amount": "flat project amount."
						},
						"description": "Standard values include: hourly_staff_rate, hourly_task_rate, hourly_project_rate and flat_project_amount."
					},
					"completion_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The Unix epoch time (in seconds) when the project is scheduled to complete."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"description": {
						"type": "string",
						"maxLength": 255,
						"description": "Project description."
					},
					"flat_estimate_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "Estimated total cost of the project."
					},
					"hourly_estimate": {
						"type": "integer",
						"minimum": 0,
						"description": "Estimated hours needed to complete the project."
					},
					"uri": {
						"$ref": "#/components/schemas/uri"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"x-label": "shared_project",
				"description": "Information about a project that an invoice or transaction is related to.",
				"example": {
					"project": {
						"name": "Example",
						"description": "Example description",
						"completion_time": 1567958263,
						"billing_method": "hourly_staff_rate",
						"hourly_estimate": 100,
						"flat_estimate_amount": 101,
						"currency": "USD",
						"uri": "http://Example.com"
					}
				}
			},
			"shared_revenue": {
				"additionalProperties": false,
				"properties": {
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"end_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "End time of the revenue measurement period (i.e. for CY2013 revenue, end-time would be 1/1/2014 00:00)."
					},
					"revenue_amount": {
						"type": "integer",
						"description": "Revenue amount in cents for the specified time-frame, segment, and currency. Amount in the lowest denomination. For example, $1.00 is represented as 100."
					},
					"start_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "Start time of the revenue measurement period (i.e. for CY2013 revenue, start-time would be 1/1/2013 00:00)."
					},
					"revenue_fraction": {
						"enum": [
							"all",
							"partial"
						],
						"type": "string",
						"x-enumDescriptions": {
							"all": "total revenue of the entire business.",
							"partial": "one segment of the revenue (for example, revenue from just one channel)."
						},
						"description": "Two possible values: all: total revenue of the entire business. partial: one segment of the revenue (for example, revenue from just one channel)."
					}
				},
				"required": [
					"revenue_amount",
					"start_time",
					"end_time",
					"currency"
				],
				"type": "object",
				"x-label": "shared_revenue",
				"description": "revenue information.",
				"example": {
					"revenue": {
						"revenue_amount": 1001,
						"start_time": 1567958263,
						"end_time": 1569958263,
						"currency": "USD"
					}
				}
			},
			"shared_transaction_details": {
				"additionalProperties": false,
				"properties": {
					"discount": {
						"maxLength": 2083,
						"type": "string"
					},
					"itemized_receipt": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"amount": {
									"type": "number"
								},
								"description": {
									"maxLength": 1024,
									"type": "string"
								},
								"item_price": {
									"type": "integer"
								},
								"quantity": {
									"type": "number"
								},
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"project_name": {
									"maxLength": 1024,
									"type": "string"
								},
								"service_billing_method": {
									"enum": [
										"free_form_entry",
										"timed_billing_at_staff_rate",
										"timed_billing_at_task_rate",
										"timed_billing_at_project_rate",
										"hourly_billing_at_staff_rate",
										"hourly_billing_at_task_rate",
										"hourly_billing_at_project_rate",
										"flat_project_amount"
									],
									"x-enumDescriptions": {
										"free_form_entry": "Indicates that services are being paid for via some generic form (i.e. none of the other listed service billing methods).",
										"timed_billing_at_staff_rate": "Indicates that the total amount of a transaction was calculated by the amount of time worked at the agreed upon price per person.",
										"timed_billing_at_task_rate": "Indicates that the total amount of a transaction was calculated by the amount of time worked at the agreed upon price per task.",
										"timed_billing_at_project_rate": "Indicates that the total amount of a transaction was calculated by the amount of time worked at the agreed upon price per project.",
										"hourly_billing_at_staff_rate": "Indicates that the total amount of a transaction was calculated by the number of hours worked and the hourly rate of each worker.",
										"hourly_billing_at_task_rate": "Indicates that the total amount of a transaction was calculated by the number of hours and the hourly rate of each task.",
										"hourly_billing_at_project_rate": "Indicates that the total amount of a transaction was calculated by the number of hours and the hourly rate of the project.",
										"flat_project_amount": "Indicates that the total amount of a transaction was agreed upon as a flat amount for a given project."
									},
									"type": "string"
								}
							},
							"required": [
								"description",
								"item_price",
								"quantity",
								"amount"
							],
							"type": "object"
						},
						"type": "array"
					},
					"note": {
						"maxLength": 2083,
						"type": "string"
					},
					"purchase_order_id": {
						"maxLength": 2083,
						"type": "string"
					},
					"receipt_uri": {
						"$ref": "#/components/schemas/uri"
					},
					"service_address": {
						"$ref": "#/components/schemas/address-rbits"
					},
					"shipping_address": {
						"$ref": "#/components/schemas/address-rbits"
					},
					"shipping_info": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"actual_delivery_time": {
									"type": "integer",
									"format": "int64",
									"minimum": 0
								},
								"carrier": {
									"maxLength": 255,
									"type": "string"
								},
								"expected_delivery_time": {
									"type": "integer",
									"format": "int64",
									"minimum": 0
								},
								"shipping_time": {
									"type": "integer",
									"format": "int64",
									"minimum": 0
								},
								"tracking_number": {
									"maxLength": 255,
									"type": "string"
								},
								"tracking_url": {
									"$ref": "#/components/schemas/uri"
								}
							},
							"type": "object"
						},
						"type": "array"
					},
					"terms_text": {
						"maxLength": 2083,
						"type": "string"
					},
					"terms_uri": {
						"$ref": "#/components/schemas/uri"
					}
				},
				"type": "object",
				"x-label": "shared_transaction_details",
				"description": "Information regarding a specific transaction."
			},
			"shared_website": {
				"additionalProperties": false,
				"properties": {
					"uri": {
						"$ref": "#/components/schemas/uri"
					}
				},
				"required": [
					"uri"
				],
				"type": "object",
				"x-label": "shared_website",
				"description": "The URI to the campaign/website for the associated object.",
				"example": {
					"website": {
						"uri": "https://www.aaa.com"
					}
				}
			},
			"shared_holder_address_response": {
				"additionalProperties": false,
				"properties": {
					"city": {
						"maxLength": 30,
						"type": "string",
						"nullable": true,
						"description": "City associated with the address."
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"line1": {
						"maxLength": 60,
						"type": "string",
						"nullable": true,
						"description": "First line of the address."
					},
					"line2": {
						"maxLength": 60,
						"type": "string",
						"nullable": true,
						"description": "Second line of the address."
					},
					"postal_code": {
						"maxLength": 14,
						"type": "string",
						"description": "Postal code associated with the address."
					},
					"region": {
						"maxLength": 30,
						"type": "string",
						"nullable": true,
						"description": "Region associated with the address."
					}
				},
				"required": [
					"line1",
					"line2",
					"city",
					"region",
					"postal_code",
					"country"
				],
				"type": "object",
				"x-label": "shared_holder_address_response",
				"description": "Address associated with the person."
			},
			"reports_account_holder": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"type": "string",
						"description": "Email associated with the person. Note that each domain label (parts that are separated by dots) must not exceed 63 characters."
					},
					"holder_name": {
						"type": "string",
						"description": "Name of the person as it appears on the credit card or bank account statement."
					}
				},
				"required": [
					"email",
					"holder_name"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_account_holder",
				"description": "Personal details of the person who owns the credit card or the bank account."
			},
			"reports_card_holder": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"type": "string",
						"description": "Email associated with the person. Note that each domain label (parts that are separated by dots) must not exceed 63 characters."
					},
					"holder_name": {
						"type": "string",
						"description": "Name of the person as it appears on the credit card or bank account statement."
					}
				},
				"required": [
					"email",
					"holder_name"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_card_holder",
				"description": "Personal details of the person who owns the credit card or the bank account."
			},
			"shared_item_owner_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The merchant account ID."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					}
				},
				"required": [
					"id",
					"resource",
					"path"
				],
				"type": "object",
				"x-label": "shared_item_owner_response",
				"description": "Details the owner resource and owner path."
			},
			"resource-items": {
				"enum": [
					"items"
				],
				"x-enumDescriptions": {
					"items": ""
				},
				"type": "string",
				"x-label": "resource-items",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"shared_terms": {
				"additionalProperties": false,
				"properties": {
					"terms_text": {
						"type": "string"
					},
					"terms_uri": {
						"$ref": "#/components/schemas/uri"
					}
				},
				"type": "object",
				"x-label": "shared_terms",
				"description": "Terms associated with the transaction."
			},
			"shared_weight": {
				"additionalProperties": false,
				"properties": {
					"units": {
						"enum": [
							"kilograms",
							"pounds"
						],
						"type": "string",
						"x-enumDescriptions": {
							"kilograms": "The item weight is in kilograms.",
							"pounds": "The item weight is in pounds."
						}
					},
					"weight": {
						"type": "number",
						"description": "Weight of the item."
					}
				},
				"required": [
					"weight",
					"units"
				],
				"type": "object",
				"nullable": true,
				"x-label": "shared_weight"
			},
			"accounts_opt_blue_request": {
				"additionalProperties": false,
				"properties": {
					"opt_into_marketing": {
						"$ref": "#/components/schemas/opt_into_marketing"
					}
				},
				"x-label": "accounts_opt_blue_request",
				"type": "object",
				"nullable": true,
				"x-permission": {
					"type": "can_be_used",
					"phase": "post_token_expansion",
					"partner_config_key_path": "merchant_settings.allow_merchant_switch_to_opt_blue",
					"feature_name": "amex opt_blue"
				},
				"required": [
					"opt_into_marketing"
				],
				"description": "OptBlue is a payment processing option that allows smaller businesses to accept American Express credit cards."
			},
			"v3.0.rc.1.1-accounts_payout_currency_response": {
				"additionalProperties": false,
				"properties": {
					"payout_method_id": {
						"maxLength": 255,
						"type": "string",
						"description": "ID of the payout method associated with the USD payout."
					},
					"period": {
						"enum": [
							"daily",
							"weekly",
							"monthly"
						],
						"x-enumDescriptions": {
							"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
							"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
							"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
						},
						"type": "string",
						"description": "Describes the how often a USD payout will occur."
					},
					"next_payout_time": {
						"type": "integer",
						"nullable": true,
						"description": "Describes when the next USD payout will occur."
					},
					"payout_purpose": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"adjustment_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"fees_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"refunds_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"sales_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"payout_method_id",
					"period"
				],
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.1.1-accounts_payout_currency_response",
				"description": "Payout currency details."
			},
			"pricing_by_currency-resp-CAD": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_CAD_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-resp-CAD"
			},
			"pricing_by_currency-resp-GBP": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-resp-GBP"
			},
			"pricing_by_currency-resp-USD": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-resp-USD"
			},
			"accounts_accepted_method_of_payments_countries_CA": {
				"additionalProperties": false,
				"properties": {
					"american_express": {
						"$ref": "#/components/schemas/accounts_accepted_method_of_payments_american_express"
					},
					"apple_pay": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"type": "boolean",
								"default": true
							},
							"card_present": {
								"type": "boolean",
								"default": true
							}
						},
						"type": "object"
					},
					"diners_club": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"discover": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"electronic_check": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"type": "boolean",
								"default": true
							},
							"configurations": {
								"additionalProperties": false,
								"properties": {
									"company_name": {
										"type": "string",
										"maxLength": 16,
										"minLength": 1
									},
									"description": {
										"type": "string",
										"maxLength": 10,
										"minLength": 1
									}
								},
								"type": "object",
								"required": [
									"company_name",
									"description"
								]
							}
						},
						"type": "object"
					},
					"google_pay": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"type": "boolean",
								"default": true
							},
							"card_present": {
								"type": "boolean",
								"default": true
							}
						},
						"type": "object"
					},
					"interac": {
						"$ref": "#/components/schemas/accounts_accepted_method_of_payments_interac"
					},
					"jcb": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"master_card": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"visa": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "accounts_accepted_method_of_payments_countries_CA"
			},
			"accounts_accepted_method_of_payments_countries_US": {
				"additionalProperties": false,
				"properties": {
					"accel": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"american_express": {
						"$ref": "#/components/schemas/accounts_accepted_method_of_payments_american_express"
					},
					"diners_club": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"discover": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"electronic_check": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"type": "boolean",
								"default": true
							},
							"configurations": {
								"additionalProperties": false,
								"properties": {
									"company_name": {
										"type": "string",
										"maxLength": 16,
										"minLength": 1
									},
									"description": {
										"type": "string",
										"maxLength": 10,
										"minLength": 1
									}
								},
								"type": "object",
								"required": [
									"company_name",
									"description"
								]
							}
						},
						"type": "object"
					},
					"jcb": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"master_card": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"nyce": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"pulse": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"star": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					},
					"visa": {
						"additionalProperties": false,
						"properties": {
							"card_not_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_transaction_type"
							},
							"card_present": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_card_present"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "accounts_accepted_method_of_payments_countries_US"
			},
			"legal_entities_traded_exchange_response": {
				"type": "object",
				"properties": {
					"country": {
						"enum": [
							"US"
						],
						"x-enumDescriptions": {
							"US": "Publicly traded companies are currently supported in the United States."
						},
						"type": "string",
						"description": "Country where the stock market is operational."
					},
					"name": {
						"type": "string",
						"description": "Full name of the stock market where the company is traded."
					},
					"symbol": {
						"maxLength": 5,
						"type": "string",
						"description": "Ticker symbol of the publicly traded company."
					}
				},
				"required": [
					"symbol",
					"name",
					"country"
				],
				"x-label": "legal_entities_traded_exchange_response"
			},
			"legal_entities_affiliation": {
				"additionalProperties": false,
				"properties": {
					"association_types": {
						"additionalProperties": false,
						"properties": {
							"contractual_obligation": {
								"type": "boolean",
								"default": false,
								"description": "Set to `true` if the beneficiary and the affiliate have contractual obligations to one another."
							},
							"donor": {
								"type": "boolean",
								"default": false,
								"description": "Set to `true` if the affiliate donates to the beneficiary."
							},
							"funding_recipient": {
								"type": "boolean",
								"default": false,
								"description": "Set to `true` if the affiliate receives funding from the beneficiary."
							},
							"other": {
								"type": "string",
								"maxLength": 255,
								"minLength": 1,
								"nullable": true,
								"description": "Describe the association between the affiliate and beneficiary with a string if none in this list are applicable."
							},
							"parent_organization": {
								"type": "boolean",
								"default": false,
								"description": "Set to `true` if the affiliate is the parent organization of the beneficiary."
							},
							"program_affiliation": {
								"type": "boolean",
								"default": false,
								"description": "Set to `true` if the affiliate and beneficiary collaborate on a program together."
							},
							"resource_delivery_provider": {
								"type": "boolean",
								"default": false,
								"description": "Set to `true` if the affiliate delivers resources to the beneficiary."
							},
							"transfer_retention_or_expenditure": {
								"type": "boolean",
								"default": false,
								"description": "Set to `true` if the affiliate and beneficiary sell or give away resources to each other."
							}
						},
						"type": "object",
						"nullable": false,
						"description": "Describe the relationship between significant beneficiaries and the affiliation."
					},
					"countries": {
						"type": "array",
						"minItems": 1,
						"uniqueItems": true,
						"items": {
							"$ref": "#/components/schemas/country_code"
						}
					},
					"name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string"
					}
				},
				"required": [
					"name",
					"countries",
					"association_types"
				],
				"type": "object",
				"nullable": true,
				"x-label": "legal_entities_affiliation",
				"description": "Information about a single affiliation of significant beneficiaries."
			},
			"shared_representative_request": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"date_of_birth": {
						"additionalProperties": false,
						"properties": {
							"day": {
								"maximum": 31,
								"minimum": 1,
								"type": "integer",
								"description": "Day of birth."
							},
							"month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "Month of birth."
							},
							"year": {
								"minimum": 1900,
								"type": "integer",
								"description": "Year of birth."
							}
						},
						"required": [
							"year",
							"month",
							"day"
						],
						"type": "object",
						"nullable": true,
						"x-isDate": true,
						"description": "Date of birth details."
					},
					"email": {
						"$ref": "#/components/schemas/email-nullable"
					},
					"email_is_verified": {
						"type": "boolean"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"is_auxiliary_controller": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative is a auxiliary controller for the legal entity."
					},
					"is_beneficial_owner": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative or controller is a beneficial owner for the legal entity."
					},
					"job_title": {
						"maxLength": 64,
						"minLength": 2,
						"type": "string",
						"nullable": true,
						"description": "The job title of the controller."
					},
					"name": {
						"$ref": "#/components/schemas/shared_full_name"
					},
					"personal_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_personal_country_info_CA_request"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_personal_country_info_GB_request"
							},
							"US": {
								"$ref": "#/components/schemas/shared_personal_country_info_US_request"
							}
						},
						"type": "object"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"reference_id": {
						"$ref": "#/components/schemas/beneficial_owner_reference_id"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "shared_representative_request",
				"description": "Personal details of the additional representative."
			},
			"shared_traded_exchanges_request": {
				"additionalProperties": false,
				"properties": {
					"AMEX": {
						"$ref": "#/components/schemas/shared_traded_exchange_request"
					},
					"NASDAQ": {
						"$ref": "#/components/schemas/shared_traded_exchange_request"
					},
					"NYSE": {
						"$ref": "#/components/schemas/shared_traded_exchange_request"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "shared_traded_exchanges_request",
				"description": "Describes all the markets where the company is publicly traded."
			},
			"holder-resp": {
				"additionalProperties": false,
				"properties": {
					"holder_name": {
						"maxLength": 134,
						"minLength": 2,
						"type": "string",
						"description": "Name of the person as it appears on the credit card or bank account statement."
					},
					"address": {
						"$ref": "#/components/schemas/shared_holder_address_response"
					},
					"email": {
						"$ref": "#/components/schemas/email-nullable"
					},
					"phone": {
						"additionalProperties": false,
						"properties": {
							"country_code": {
								"pattern": "^\\+?[0-9]{1,3}$",
								"type": "string",
								"nullable": true,
								"description": "Country code associated with the legal entity."
							},
							"phone_number": {
								"pattern": "^[0-9]{7,14}$",
								"type": "string",
								"nullable": true,
								"description": "Phone number associated with the legal entity."
							},
							"type": {
								"enum": [
									"mobile",
									"personal",
									"business"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the phone number is for a mobile device.",
									"personal": "Indicates that the phone number is for a personal device.",
									"business": "Indicates that the phone number is for a business device."
								},
								"nullable": true,
								"type": "string"
							}
						},
						"required": [
							"country_code",
							"phone_number",
							"type"
						],
						"type": "object",
						"description": "Standard international phone structure."
					}
				},
				"required": [
					"holder_name"
				],
				"type": "object",
				"x-label": "holder-resp",
				"description": "Personal details of the person who owns the credit card or the bank account."
			},
			"reports_payout_bank": {
				"additionalProperties": false,
				"properties": {
					"account_holder": {
						"$ref": "#/components/schemas/reports_account_holder"
					},
					"bank_name": {
						"type": "string",
						"description": "The name of the payout bank."
					},
					"last_four": {
						"type": "string",
						"description": "The last four digits of the payout bank account."
					}
				},
				"required": [
					"bank_name",
					"account_holder",
					"last_four"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_payout_bank",
				"description": "Contains details relevant to the payout bank."
			},
			"reports_credit_card": {
				"additionalProperties": false,
				"properties": {
					"bin": {
						"type": "string",
						"description": "Bank identification number. The initial six digits of a credit card number. Null is returned if BIN is not available."
					},
					"card_brand": {
						"type": "string",
						"description": "Brand of the credit card. Possible values include: `amex`, `discover`, `diners`, `jcb`, `mastercard`, `visa`."
					},
					"card_holder": {
						"$ref": "#/components/schemas/reports_card_holder"
					},
					"last_four": {
						"type": "string",
						"description": "The last four digits of the credit card number."
					}
				},
				"required": [
					"bin",
					"card_brand",
					"last_four",
					"card_holder"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_credit_card",
				"description": "Raw credit card information."
			},
			"reports_payment_bank": {
				"additionalProperties": false,
				"properties": {
					"account_holder": {
						"$ref": "#/components/schemas/reports_account_holder"
					},
					"bank_name": {
						"type": "string",
						"description": "The name of the Payment bank."
					},
					"last_four": {
						"type": "string",
						"description": "The last four numbers of the bank account. **Note:** If you have verified your account via Plaid, this might be the last four numbers of your tokenized bank account number (TAN)."
					}
				},
				"required": [
					"bank_name",
					"account_holder",
					"last_four"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_payment_bank",
				"description": "Raw bank account information."
			},
			"fee_type": {
				"enum": [
					"ACCOUNT_DEBIT_FAILURE",
					"ADJUSTMENT",
					"AMEX",
					"CHARGEBACK",
					"DISCOVER",
					"ECHECK",
					"JCB",
					"MAESTRO",
					"MASTERCARD",
					"OTHER",
					"RECURRING FEES",
					"UNIONPAY",
					"VISA"
				],
				"x-enumDescriptions": {
					"ACCOUNT_DEBIT_FAILURE": "If WePay is unable to collect fees from a merchant at the end of a billing cycle, this fee is applied to the merchant's account.",
					"ADJUSTMENT": "If a merchant is charged incorrect fees, **or** if a merchant is charged correct fees but fees are reported incorrectly, WePay will adjust the merchant's account to correct the issue.",
					"AMEX": "Indicates that the fees are the AmEx card brand processing fees.",
					"CHARGEBACK": "Indicates that the fees are charged for disputes.",
					"DISCOVER": "Indicates that the fees are the Discover / Diners card brand processing fees.",
					"ECHECK": "Indicates fees that are charged for ACH / eCheck transactions.",
					"JCB": "Indicates that the fees are the JCB card brand processing fees.",
					"MAESTRO": "Indicates that the fees are the Maestro card brand processing fees.",
					"MASTERCARD": "Indicates that the fees are the Mastercard card brand processing fees.",
					"OTHER": "",
					"RECURRING FEES": "Indicates recurring service fees charged by platforms for offering interchange processing.",
					"UNIONPAY": "Indicates that the fees are the UnionPay card brand processing fees.",
					"VISA": "Indicates that the fees are the Visa card brand processing fees."
				},
				"additionalProperties": false,
				"description": "Defines a fee or transaction summary array object as pertinent to transactions of the given type.",
				"example": "VISA",
				"type": "string",
				"x-label": "fee_type"
			},
			"orders_item_response": {
				"additionalProperties": false,
				"properties": {
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"id": {
						"$ref": "#/components/schemas/id"
					},
					"owner": {
						"$ref": "#/components/schemas/shared_item_owner_response"
					},
					"path": {
						"type": "string"
					},
					"product_name": {
						"maxLength": 255,
						"type": "string"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-items"
					},
					"state": {
						"type": "string"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true
					},
					"photos": {
						"items": {
							"$ref": "#/components/schemas/uri"
						},
						"type": "array",
						"nullable": true
					},
					"price": {
						"type": "integer",
						"nullable": true
					},
					"product_code": {
						"maxLength": 255,
						"type": "string",
						"nullable": true
					},
					"product_details": {
						"type": "object",
						"nullable": true,
						"x-maxByteSize": 10240,
						"additionalProperties": true
					},
					"reference_number": {
						"$ref": "#/components/schemas/id"
					},
					"shipping_options": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"uniqueItems": true
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"uri": {
						"$ref": "#/components/schemas/uri"
					},
					"weight": {
						"$ref": "#/components/schemas/shared_weight"
					}
				},
				"required": [
					"id",
					"path",
					"owner",
					"resource",
					"create_time",
					"product_name",
					"state"
				],
				"type": "object",
				"nullable": true,
				"x-label": "orders_item_response"
			},
			"embedded-rbits": {
				"items": {
					"additionalProperties": false,
					"properties": {
						"receive_time": {
							"type": "integer",
							"format": "int64",
							"minimum": 0,
							"description": "The timestamp the embedded rbit was received indicated by a UNIX timestamp. eg. 1623263544"
						},
						"source": {
							"$ref": "#/components/schemas/rbit-source"
						},
						"type": {
							"$ref": "#/components/schemas/rbit-types"
						},
						"address": {
							"$ref": "#/components/schemas/rbits_address"
						},
						"auto_billing": {
							"$ref": "#/components/schemas/shared_auto_billing"
						},
						"business_description": {
							"$ref": "#/components/schemas/shared_business_description"
						},
						"business_name": {
							"$ref": "#/components/schemas/shared_business_name"
						},
						"external_account": {
							"$ref": "#/components/schemas/shared_external_account"
						},
						"fundraising_event": {
							"$ref": "#/components/schemas/shared_fundraising_event"
						},
						"fundraising_update": {
							"$ref": "#/components/schemas/shared_fundraising_update"
						},
						"industry_code": {
							"$ref": "#/components/schemas/shared_industry_code"
						},
						"mfa": {
							"$ref": "#/components/schemas/shared_mfa"
						},
						"partner_service": {
							"$ref": "#/components/schemas/shared_partner_service"
						},
						"person": {
							"$ref": "#/components/schemas/shared_person"
						},
						"phone": {
							"$ref": "#/components/schemas/shared_rbits_phone"
						},
						"project": {
							"$ref": "#/components/schemas/shared_project"
						},
						"revenue": {
							"$ref": "#/components/schemas/shared_revenue"
						},
						"transaction_details": {
							"$ref": "#/components/schemas/shared_transaction_details"
						},
						"website": {
							"$ref": "#/components/schemas/shared_website"
						}
					},
					"required": [
						"receive_time",
						"type",
						"source"
					],
					"type": "object"
				},
				"type": "array",
				"nullable": true,
				"x-label": "embedded-rbits",
				"description": "Any rbit data your platform chooses to attach to this resource. The rbit data must be key-value pairs and can be an array of rbit objects."
			},
			"accounts_amex_countries_US_request": {
				"additionalProperties": false,
				"properties": {
					"opt_blue": {
						"$ref": "#/components/schemas/accounts_opt_blue_request"
					}
				},
				"type": "object",
				"x-label": "accounts_amex_countries_US_request"
			},
			"accounts_accepted_method_of_payments_countries": {
				"additionalProperties": false,
				"properties": {
					"CA": {
						"$ref": "#/components/schemas/accounts_accepted_method_of_payments_countries_CA"
					},
					"US": {
						"$ref": "#/components/schemas/accounts_accepted_method_of_payments_countries_US"
					}
				},
				"type": "object",
				"x-label": "accounts_accepted_method_of_payments_countries"
			},
			"email": {
				"maxLength": 254,
				"pattern": "^([^,:;=@\"'\\\\\\s()\\[\\]]+)+@([a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$",
				"type": "string",
				"x-label": "email",
				"description": "Email associated with the person. Note that each domain label (parts that are separated by dots) must not exceed 63 characters."
			},
			"standard_id": {
				"description": "JPMC Standard ID of referring representative",
				"maxLength": 7,
				"minLength": 7,
				"pattern": "[A-Z][0-9]{6}",
				"type": "string",
				"nullable": false,
				"x-label": "standard_id"
			},
			"coupon_code": {
				"description": "This is an offer code provided by Chase to incentivize merchants to sign up for WePay",
				"type": "string",
				"x-label": "coupon_code"
			},
			"accounts_id_CAD_blended_request": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "accounts_id_CAD_blended_request",
				"description": "The blended pricing model to collect platform fees."
			},
			"accounts_id_blended_request": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "accounts_id_blended_request",
				"description": "The blended pricing model to collect platform fees."
			},
			"resource-transaction_records": {
				"enum": [
					"transaction_records"
				],
				"x-enumDescriptions": {
					"transaction_records": ""
				},
				"type": "string",
				"x-label": "resource-transaction_records",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"terminals_address_response": {
				"additionalProperties": false,
				"properties": {
					"city": {
						"maxLength": 30,
						"type": "string",
						"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"line1": {
						"maxLength": 60,
						"type": "string",
						"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"line2": {
						"maxLength": 60,
						"type": "string",
						"nullable": true,
						"description": "Second line of the address."
					},
					"postal_code": {
						"maxLength": 14,
						"type": "string",
						"description": "Postal code associated with the address."
					},
					"region": {
						"maxLength": 30,
						"type": "string",
						"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
					}
				},
				"required": [
					"line1",
					"line2",
					"city",
					"postal_code",
					"region",
					"country"
				],
				"type": "object",
				"x-label": "terminals_address_response"
			},
			"usd-currency": {
				"enum": [
					"USD"
				],
				"x-enumDescriptions": {
					"USD": "United States Dollar"
				},
				"type": "string",
				"x-label": "usd-currency",
				"description": "ISO 4217 currency code. Currently, the only supported value is `USD`.",
				"example": "USD"
			},
			"terminals_deferred_authorization": {
				"type": "object",
				"nullable": true,
				"description": "Configuration settings for deferred authorization (offline auth) functionality. Enabling `deferred_authoization` means that merchants can still transact with offline terminals, although risk of declines may increase. Once an offline terminal goes online again, the encoded payment method can be used to create a Payment. **Note:** If not sent or if explicitly set to `null` (i.e. `deferred_authorization`: `null`), the deferred authorization parameters will revert to their defaults.",
				"properties": {
					"enabled": {
						"type": "boolean",
						"default": false,
						"description": "Determines if deferred authorization functionality is enabled.",
						"example": true
					},
					"international_enabled": {
						"type": "boolean",
						"default": false,
						"description": "Determines if international payment methods are allowed for deferred authorizations.",
						"example": false
					},
					"max_total_amount": {
						"type": "integer",
						"description": "The maximum total amount of money that can be processed as deferred authorizations. The amount is in cents. For example, if the value is set to 250000, it represents $2500.00. Once exceeded, the terminal will no longer process transactions until connectivity has been restored.",
						"minimum": 0,
						"example": 250000,
						"default": 0
					},
					"max_transaction_amount": {
						"type": "integer",
						"description": "The maximum amount for any single transaction that can be processed as a deferred authorization. The amount is in cents. For example, if the value is set to 12500, it represents $125.00. Attempts to process authorizations above this amount will fail until connectivity has been restored.",
						"minimum": 0,
						"maximum": 99999999,
						"example": 12500,
						"default": 0
					},
					"max_transaction_count": {
						"type": "integer",
						"description": "The maximum number of transactions that can be processed as deferred authorizations. Once exceeded, the terminal will no longer process transactions until connectivity has been restored.",
						"minimum": 0,
						"maximum": 1000,
						"example": 20,
						"default": 0
					},
					"supported_card_entry_modes": {
						"type": "array",
						"description": "The card entry modes that are allowed in deferred authorizations.",
						"minItems": 0,
						"items": {
							"type": "string",
							"enum": [
								"chip",
								"magnetic_stripe",
								"contactless",
								"manual"
							],
							"x-enumDescriptions": {
								"chip": "Include this value to support dipping cards during offline authorizations.",
								"magnetic_stripe": "Include this value to support swiping cards during offline authorizations.",
								"contactless": "Include this value to support tapping cards during offline authorizations.",
								"manual": "Include this value to support manually entering card information during offline authorizations."
							},
							"uniqueItems": true
						},
						"example": [
							"chip",
							"contactless"
						]
					}
				},
				"required": [
					"enabled",
					"international_enabled",
					"max_transaction_count",
					"max_total_amount",
					"max_transaction_amount",
					"supported_card_entry_modes"
				],
				"x-label": "terminals_deferred_authorization"
			},
			"terminals_manual_entry_configuration": {
				"type": "object",
				"description": "Configuration for manual entry mode.",
				"additionalProperties": false,
				"properties": {
					"avs_prompt_enabled": {
						"type": "boolean",
						"description": "If true, a user is prompted to enter AVS (ZIP code) during manual card entry.",
						"default": true
					},
					"cvd_prompt_enabled": {
						"type": "boolean",
						"description": "If true, a user is prompted to enter CVD (same as CVC) during manual card entry.",
						"default": false
					}
				},
				"x-label": "terminals_manual_entry_configuration"
			},
			"terminals_quick_chip": {
				"type": "object",
				"description": "Configuration settings for quick chip functionality.",
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Determines if quick chip functionality is enabled on the terminal."
					}
				},
				"required": [
					"enabled"
				],
				"x-label": "terminals_quick_chip"
			},
			"terminals-supported_card_brands": {
				"type": "array",
				"description": "The collection of card brands that are supported by the terminal. Must provide at least one.",
				"minItems": 1,
				"uniqueItems": true,
				"items": {
					"type": "string",
					"enum": [
						"visa",
						"american_express",
						"discover",
						"mastercard",
						"diners_club",
						"jcb"
					],
					"x-enumDescriptions": {
						"visa": "",
						"american_express": "",
						"discover": "",
						"mastercard": "",
						"diners_club": "",
						"jcb": ""
					}
				},
				"x-label": "terminals-supported_card_brands",
				"example": [
					"visa",
					"american_express",
					"discover",
					"mastercard",
					"diners_club",
					"jcb"
				]
			},
			"terminals_tip": {
				"type": "object",
				"properties": {
					"mode": {
						"type": "string",
						"description": "The way in which tip is handled by this terminal. If \"disabled\", tip will not be prompted for. Otherwise, value determines if the prompt should appear on the terminal or on the receipt. Note: If set to \"prompt_on_terminal\" then you must provide the \"terminal_display\" field as well.",
						"default": "disabled",
						"enum": [
							"disabled",
							"prompt_on_terminal",
							"prompt_on_receipt"
						],
						"x-enumDescriptions": {
							"disabled": "No prompt for a tip amount to be added to the authorization will be shown on the terminal or receipt.",
							"prompt_on_terminal": "Users will be prompted to add a tip amount to their authorization on the terminal UI.",
							"prompt_on_receipt": "Users will be prompted to add a tip amount to their authorization on the receipt."
						}
					},
					"terminal_display": {
						"type": "object",
						"description": "This configuration is required if the mode is \"prompt_on_terminal\", and is responsible for configuring how the tip guide appears on the physical terminal.",
						"example": {
							"amount_guide_type": "percentage_guide",
							"percentage_guide": {
								"show_amount": false,
								"percentage_low": 10,
								"percentage_medium": 15,
								"percentage_high": 18
							}
						},
						"properties": {
							"amount_guide_type": {
								"type": "string",
								"description": "The type of the amount guide can be either a percentage guide or a flat guide. Percentage guides will offer the payer a chance to tip with one of a few default tip percentages that are configured. Flat guides will offer the payer flat tip amounts to choose from. Both types of guides will allow the payer to manually enter a tip amount.",
								"default": "percentage_guide",
								"enum": [
									"percentage_guide",
									"flat_guide"
								],
								"x-enumDescriptions": {
									"percentage_guide": "Indicate that you'll be providing the percentage tip options for payers to select from on the device.",
									"flat_guide": "Indicate that you'll be providing the flat tip options for payers to select from on the device."
								},
								"x-isOneOfKey": true
							},
							"flat_guide": {
								"type": "object",
								"description": "The configuration for a flat tip guide. All three guides must be provided. Note that the expected value is the recommended tip amount in cents, and will appear on the device in dollars and cents.",
								"properties": {
									"amount_high": {
										"type": "integer",
										"minimum": 0,
										"description": "The highest flat tip amount which will appear on the device for a payer to select. The example provided here would show on the device as $3.00.",
										"example": 300
									},
									"amount_low": {
										"type": "integer",
										"minimum": 0,
										"description": "The lowest flat tip amount which will appear on the device for a payer to select. The example provided here would show on the device as $1.00.",
										"example": 100
									},
									"amount_medium": {
										"type": "integer",
										"minimum": 0,
										"description": "The middle flat tip amount which will appear on the device for a payer to select. The example provided here would show on the device as $2.00.",
										"example": 200
									}
								},
								"required": [
									"amount_low",
									"amount_medium",
									"amount_high"
								]
							},
							"percentage_guide": {
								"type": "object",
								"description": "The configuration for a percentage tip guide. All three guides must be provided, in addition to the amount display toggle.",
								"properties": {
									"percentage_high": {
										"type": "integer",
										"description": "The highest percentage tip option which will appear on the device for a payer to select.",
										"example": 20,
										"minimum": 0,
										"maximum": 100,
										"default": 18
									},
									"percentage_low": {
										"type": "integer",
										"description": "The lowest percentage tip option which will appear on the device for a payer to select.",
										"example": 12,
										"minimum": 0,
										"maximum": 100,
										"default": 10
									},
									"percentage_medium": {
										"type": "integer",
										"description": "The middle percentage tip option which will appear on the device for a payer to select.",
										"example": 17,
										"minimum": 0,
										"maximum": 100,
										"default": 15
									},
									"show_amount": {
										"type": "boolean",
										"description": "Toggle whether or not to show the amount that the percentage equates to in the tip guide button.",
										"example": true,
										"default": false
									}
								},
								"required": [
									"show_amount",
									"percentage_low",
									"percentage_medium",
									"percentage_high"
								]
							}
						},
						"required": [
							"amount_guide_type"
						]
					}
				},
				"x-label": "terminals_tip",
				"example": {
					"mode": "prompt_on_terminal",
					"terminal_display": {
						"amount_guide_type": "percentage_guide",
						"percentage_guide": {
							"show_amount": false,
							"percentage_low": 15,
							"percentage_medium": 18,
							"percentage_high": 20
						}
					}
				},
				"required": [
					"mode"
				]
			},
			"shared_representative_response": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"date_of_birth_is_present": {
						"type": "boolean",
						"description": "Indicates if the date of birth of the controller is present."
					},
					"email": {
						"$ref": "#/components/schemas/email-nullable"
					},
					"email_is_verified": {
						"type": "boolean"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"is_auxiliary_controller": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative is a auxiliary controller for the legal entity."
					},
					"is_beneficial_owner": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative or controller is a beneficial owner for the legal entity."
					},
					"job_title": {
						"maxLength": 64,
						"minLength": 2,
						"type": "string",
						"nullable": true,
						"description": "The job title of the controller."
					},
					"name": {
						"$ref": "#/components/schemas/shared_full_name"
					},
					"personal_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_CA_response"
							},
							"GB": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_GB_response"
							},
							"US": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_US_response"
							}
						},
						"type": "object"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"reference_id": {
						"$ref": "#/components/schemas/beneficial_owner_reference_id"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "shared_representative_response",
				"description": "Personal details of the additional representative."
			},
			"legal_entities_attestation_additional_representative": {
				"additionalProperties": false,
				"properties": {
					"attest_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the legal entity was attested."
					},
					"original_ip": {
						"maxLength": 45,
						"pattern": "^[A-F0-9a-f:\\.]*$",
						"type": "string",
						"nullable": false,
						"description": "The user's client IP address when they attested legal entity information."
					},
					"representative_id": {
						"enum": [
							"representative_0",
							"representative_1",
							"representative_2",
							"representative_3"
						],
						"type": "string",
						"description": "The `additional_representatives.representative_{0-3}` identifier of the additional representative that attested the legal entity, if applicable. If the person who provided attestation was **not** an additional representative, then this field will not be returned.",
						"x-enumDescriptions": {
							"representative_0": "The legal entity is attested by the first additional representative.",
							"representative_1": "The legal entity is attested by the second additional representative.",
							"representative_2": "The legal entity is attested by the third additional representative.",
							"representative_3": "The legal entity is attested by the fourth additional representative."
						}
					}
				},
				"required": [
					"attest_time",
					"original_ip",
					"representative_id"
				],
				"type": "object",
				"x-label": "legal_entities_attestation_additional_representative"
			},
			"legal_entities_attestation_controller": {
				"additionalProperties": false,
				"properties": {
					"attest_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the legal entity was attested."
					},
					"original_ip": {
						"maxLength": 45,
						"pattern": "^[A-F0-9a-f:\\.]*$",
						"type": "string",
						"nullable": false,
						"description": "The user's client IP address when they attested legal entity information."
					}
				},
				"required": [
					"attest_time",
					"original_ip"
				],
				"type": "object",
				"x-label": "legal_entities_attestation_controller"
			},
			"legal_entities_attestation_other_representative": {
				"additionalProperties": false,
				"properties": {
					"attest_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the legal entity was attested."
					},
					"job_title": {
						"maxLength": 64,
						"minLength": 2,
						"type": "string",
						"nullable": false,
						"description": "The job title of the controller."
					},
					"name": {
						"additionalProperties": false,
						"properties": {
							"first": {
								"maxLength": 30,
								"minLength": 2,
								"type": "string",
								"description": "First name."
							},
							"last": {
								"maxLength": 30,
								"minLength": 2,
								"type": "string",
								"description": "Last name."
							}
						},
						"required": [
							"first",
							"last"
						],
						"type": "object"
					},
					"original_ip": {
						"maxLength": 45,
						"pattern": "^[A-F0-9a-f:\\.]*$",
						"type": "string",
						"nullable": false,
						"description": "The user's client IP address when they attested legal entity information."
					}
				},
				"required": [
					"attest_time",
					"job_title",
					"name",
					"original_ip"
				],
				"type": "object",
				"x-label": "legal_entities_attestation_other_representative"
			},
			"legal_entities_traded_exchanges_response": {
				"additionalProperties": false,
				"properties": {
					"AMEX": {
						"$ref": "#/components/schemas/legal_entities_traded_exchange_response"
					},
					"NASDAQ": {
						"$ref": "#/components/schemas/legal_entities_traded_exchange_response"
					},
					"NYSE": {
						"$ref": "#/components/schemas/legal_entities_traded_exchange_response"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "legal_entities_traded_exchanges_response",
				"description": "Describes all the markets where the company is publicly traded."
			},
			"shared_holder_address_request": {
				"additionalProperties": false,
				"properties": {
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"postal_code": {
						"maxLength": 14,
						"type": "string",
						"description": "Postal code associated with the address."
					},
					"city": {
						"maxLength": 30,
						"type": "string",
						"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"line1": {
						"maxLength": 60,
						"type": "string",
						"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"line2": {
						"maxLength": 60,
						"type": "string",
						"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"region": {
						"maxLength": 30,
						"type": "string",
						"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
					}
				},
				"required": [
					"postal_code",
					"country"
				],
				"type": "object",
				"x-isAddress": true,
				"x-label": "shared_holder_address_request",
				"description": "Address indicating where services were rendered, origin of goods, or account holder for credit card / payment bank."
			},
			"shared_account_controller": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"email": {
						"$ref": "#/components/schemas/email-nullable"
					},
					"email_is_verified": {
						"type": "boolean",
						"description": "Mark the email as verified after you have established it is the right email."
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"name": {
						"$ref": "#/components/schemas/shared_full_name"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					}
				},
				"nullable": true,
				"type": "object",
				"x-label": "shared_account_controller",
				"description": "Personal details of the account controller. *Note:* An account controller is an authorized representative who controls the merchant account and can call in for support. The `account_controller` replaces the `controller` object for government entities and publicly traded companies (including subsidiaries)."
			},
			"shared_additional_representatives_request": {
				"additionalProperties": false,
				"properties": {
					"representative_0": {
						"$ref": "#/components/schemas/shared_representative_request"
					},
					"representative_1": {
						"$ref": "#/components/schemas/shared_representative_request"
					},
					"representative_2": {
						"$ref": "#/components/schemas/shared_representative_request"
					},
					"representative_3": {
						"$ref": "#/components/schemas/shared_representative_request"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "shared_additional_representatives_request",
				"description": "Personal information for additional representatives of the legal entity. WePay collects additional representatives information for businesses. The additional representatives could a beneficial owners or an auxiliary controller.  This is determined by setting the parameters on the representative. **Note:** You can pass `{}` to signify that this legal entity does not have any additional representatives."
			},
			"shared_controller_request": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"date_of_birth": {
						"additionalProperties": false,
						"properties": {
							"day": {
								"maximum": 31,
								"minimum": 1,
								"type": "integer",
								"description": "Day of birth."
							},
							"month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "Month of birth."
							},
							"year": {
								"minimum": 1900,
								"type": "integer",
								"description": "Year of birth."
							}
						},
						"required": [
							"year",
							"month",
							"day"
						],
						"type": "object",
						"nullable": true,
						"x-isDate": true,
						"description": "Date of birth details."
					},
					"email": {
						"$ref": "#/components/schemas/email-nullable"
					},
					"email_is_verified": {
						"type": "boolean",
						"description": "Mark the email as verified after you have established it is the right email."
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"is_beneficial_owner": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative or controller is a beneficial owner for the legal entity."
					},
					"job_title": {
						"maxLength": 64,
						"minLength": 2,
						"type": "string",
						"nullable": true,
						"description": "The job title of the controller."
					},
					"name": {
						"$ref": "#/components/schemas/shared_full_name"
					},
					"personal_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_personal_country_info_CA_request"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_personal_country_info_GB_request"
							},
							"US": {
								"$ref": "#/components/schemas/shared_personal_country_info_US_request"
							}
						},
						"type": "object"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"reference_id": {
						"$ref": "#/components/schemas/beneficial_owner_reference_id"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "shared_controller_request",
				"description": "Personal details of the controller. **Note:** A controller is an individual with significant responsibility to control or manage a legal entity. Examples of controllers include, but are not limited to, a Chief Executive Officer, Chief Financial Officer, Chief Operating Officer, Managing Member, General Partner, President, Vice President, or Treasurer, or any other individual who regularly performs similar functions as part of a control prong."
			},
			"controller_type": {
				"enum": [
					"controller",
					"account_controller"
				],
				"x-enumDescriptions": {
					"controller": "Personal details of the controller. **Note:** A controller is an individual with significant responsibility to control or manage a legal entity. Examples of controllers include, but are not limited to, a Chief Executive Officer, Chief Financial Officer, Chief Operating Officer, Managing Member, General Partner, President, Vice President, or Treasurer, or any other individual who regularly performs similar functions as part of a control prong.",
					"account_controller": "Personal details of the account controller. **Note:** An account controller is an authorized representative who controls the account and can call in for support. Account controllers are not subject to the same definition as `controller`."
				},
				"type": "string",
				"x-label": "controller_type",
				"description": "Describes the type of controller for an account. Can be either `controller` (standard) or `account_controller` (government entities and publicly traded companied (including subsidiaries))."
			},
			"custom_data": {
				"type": "object",
				"nullable": true,
				"x-maxByteSize": 10240,
				"additionalProperties": true,
				"x-label": "custom_data",
				"description": "Any custom data your platform chooses to attach to this resource. The custom data must be key-value pairs and not contain any personally identifiable information (PII) or payment card (PCI) data."
			},
			"entity-email-nullable": {
				"maxLength": 254,
				"pattern": "^([^,:;=@\"'\\\\\\s()\\[\\]]+)+@([a-zA-Z-0-9-]+\\.)+[a-zA-Z]{2,}$",
				"type": "string",
				"nullable": true,
				"x-label": "entity-email-nullable",
				"description": "Email associated with the Legal Entity (business email). Note that each domain label (parts that are separated by dots) must not exceed 63 characters."
			},
			"shared_public_ownership_request": {
				"additionalProperties": false,
				"properties": {
					"is_publicly_traded": {
						"type": "boolean",
						"description": "Specifies if the legal entity is a publicly traded company. Should be `false` for subsidiaries of publicly traded companies."
					},
					"is_subsidiary": {
						"type": "boolean",
						"description": "Specifies if the legal entity is a subsidiary of a publicly traded company."
					},
					"parent_company_name": {
						"type": "string",
						"description": "Name of the parent company if the company is a subsidiary of a publicly traded company."
					},
					"primary_exchange": {
						"enum": [
							"NYSE",
							"AMEX",
							"NASDAQ"
						],
						"x-enumDescriptions": {
							"NYSE": "",
							"AMEX": "",
							"NASDAQ": ""
						},
						"type": "string",
						"description": "Describes the primary market/stock-exchange where the company is publicly traded."
					},
					"traded_exchanges": {
						"$ref": "#/components/schemas/shared_traded_exchanges_request"
					}
				},
				"nullable": true,
				"type": "object",
				"x-permission": {
					"type": "can_be_used",
					"phase": "post_token_expansion",
					"partner_config_key_path": "api.v3.legal_entities.public_ownership_enabled",
					"feature_name": "public ownership"
				},
				"x-label": "shared_public_ownership_request",
				"description": "Information regarding public ownership of an entity. Required for publicly traded companies."
			},
			"reference_id": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"nullable": true,
				"x-label": "reference_id",
				"description": "A custom reference ID for your platform to track the object. It can be any string."
			},
			"shared_token_request": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"nullable": true,
						"description": "ID of the token, generated by WePay when the token is created."
					},
					"permissioned_fields": {
						"items": {
							"maxLength": 1024,
							"type": "string"
						},
						"type": "array",
						"description": "Array of JSON dot-notated paths for allowed fields. You can add any string as a value but only values which correspond to an existing field will be utilized."
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"x-label": "shared_token_request",
				"description": "A previously created token. **Note:** Using tokens to pass highly-sensitive data directly to WePay may help your platform avoid certain compliance and regulatory overhead. Learn more about tokens [here](/sdks-and-libraries/helper-js/#tokenization)."
			},
			"resource-payment_methods": {
				"enum": [
					"payment_methods"
				],
				"x-enumDescriptions": {
					"payment_methods": ""
				},
				"type": "string",
				"x-label": "resource-payment_methods",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"api_version": {
				"type": "string",
				"x-label": "api_version",
				"example": "3.0"
			},
			"shared_payment_method_owner_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The application ID assigned to your platform in the Partner Center. Your app owns the payment methods that you create, allowing them be used across any of your merchants."
					},
					"path": {
						"type": "string",
						"nullable": true,
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"enum": [
							"applications"
						],
						"x-enumDescriptions": {
							"applications": ""
						},
						"type": "string",
						"description": "Helps organize information by identifying the resource type of the object data."
					}
				},
				"required": [
					"resource",
					"id",
					"path"
				],
				"type": "object",
				"x-label": "shared_payment_method_owner_response",
				"description": "Details the owner resource and owner path."
			},
			"resource-orders": {
				"enum": [
					"orders"
				],
				"x-enumDescriptions": {
					"orders": ""
				},
				"type": "string",
				"x-label": "resource-orders",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"resource-payout_methods": {
				"enum": [
					"payout_methods"
				],
				"x-enumDescriptions": {
					"payout_methods": ""
				},
				"type": "string",
				"x-label": "resource-payout_methods",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"payout_methods_paper_check_address": {
				"additionalProperties": false,
				"properties": {
					"city": {
						"maxLength": 30,
						"type": "string",
						"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"line1": {
						"maxLength": 60,
						"type": "string",
						"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"postal_code": {
						"maxLength": 14,
						"type": "string",
						"description": "Postal code associated with the address."
					},
					"region": {
						"maxLength": 30,
						"type": "string",
						"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
					},
					"line2": {
						"maxLength": 60,
						"type": "string",
						"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					}
				},
				"required": [
					"line1",
					"city",
					"postal_code",
					"region",
					"country"
				],
				"type": "object",
				"x-isAddress": true,
				"x-label": "payout_methods_paper_check_address"
			},
			"resource_types-rbit": {
				"enum": [
					"legal_entities",
					"accounts",
					"payout_methods",
					"payment_methods",
					"payments",
					"refunds",
					"items",
					"orders"
				],
				"x-enumDescriptions": {
					"legal_entities": "rBits associated with a Legal Entity.",
					"accounts": "rBits associated with an Account",
					"payout_methods": "rBits associated with a Payout Method.",
					"payment_methods": "rBits associated with a Payment Method.",
					"payments": "rBits associated with a Payment.",
					"refunds": "rBits associated with a Refund.",
					"items": "rBits associated with an Item.",
					"orders": "rBits associated with an Order."
				},
				"type": "string",
				"x-label": "resource_types-rbit",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"reports_payout_method": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "ID of the payout method, generated by WePay when the payout method is created."
					},
					"type": {
						"enum": [
							"payout_bank_ca",
							"payout_bank_gb",
							"payout_bank_us",
							"paper_check"
						],
						"x-enumDescriptions": {
							"payout_bank_ca": "Bank account in Canada.",
							"payout_bank_gb": "Bank account in the UK (not currently supported).",
							"payout_bank_us": "Bank account in the US.",
							"paper_check": "Paper check delivered to an address in the US."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Possible values: `payout_bank_ca`, `payout_bank_us` and `payout_bank_gb`. **Note:** The `paper_check` option requires permission from WePay to use. Reach out to your integration team for assistance."
					},
					"payout_bank_ca": {
						"$ref": "#/components/schemas/reports_payout_bank"
					},
					"payout_bank_gb": {
						"$ref": "#/components/schemas/reports_payout_bank"
					},
					"payout_bank_us": {
						"$ref": "#/components/schemas/reports_payout_bank"
					}
				},
				"required": [
					"id",
					"type"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_payout_method",
				"description": "Contains details relevant to the payout method."
			},
			"reports_payment_method": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "ID of the payment method, generated by WePay when the payment method is created."
					},
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca"
						],
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": {
								"description": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
								"x-versions": [
									"v3.0.rc.2.2"
								]
							}
						},
						"type": "string",
						"description": "The type of payment method. Possible values include: `payment_bank_us`, and `credit_card`."
					},
					"credit_card": {
						"$ref": "#/components/schemas/reports_credit_card"
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/reports_payment_bank"
					}
				},
				"required": [
					"id",
					"type"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_payment_method",
				"description": "Contains details relevant to the payment method."
			},
			"billing_statements_summaries_response": {
				"additionalProperties": false,
				"properties": {
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"fee_type": {
						"$ref": "#/components/schemas/fee_type"
					},
					"item_count": {
						"minimum": 0,
						"type": "integer",
						"description": "The number of transactions the merchant processed in a transactions summary for the given fee type.",
						"example": 1
					},
					"total_amount": {
						"type": "integer",
						"description": "Gross transaction amount a merchant has processed in a transactions summary for the given fee type. This is a sum of (the merchant's net settlement) + (total fees).",
						"example": 100
					}
				},
				"required": [
					"fee_type",
					"currency",
					"total_amount",
					"item_count"
				],
				"type": "object",
				"nullable": true,
				"x-label": "billing_statements_summaries_response"
			},
			"item-nullable-req": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"$ref": "#/components/schemas/id"
					},
					"product_name": {
						"maxLength": 255,
						"type": "string",
						"description": "Product name associated with the order."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true
					},
					"photos": {
						"items": {
							"$ref": "#/components/schemas/uri"
						},
						"type": "array",
						"nullable": true
					},
					"price": {
						"type": "integer",
						"nullable": true
					},
					"product_code": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Product code associated with the order."
					},
					"product_details": {
						"type": "object",
						"nullable": true,
						"x-maxByteSize": 10240,
						"additionalProperties": true
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"$ref": "#/components/schemas/id"
					},
					"shipping_options": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"uniqueItems": true
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"uri": {
						"$ref": "#/components/schemas/uri"
					},
					"weight": {
						"$ref": "#/components/schemas/shared_weight"
					}
				},
				"required": [
					"account_id",
					"product_name"
				],
				"type": "object",
				"nullable": true,
				"x-label": "item-nullable-req",
				"description": "Item object with detailed information. Can be expandable."
			},
			"payments_pending_reasons_response": {
				"additionalProperties": false,
				"properties": {
					"details": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"detail_code": {
									"enum": [
										"manual_capture",
										"processing",
										"risk_review",
										"echeck_submission",
										"bank_verification",
										"deferred_capture",
										"unknown"
									],
									"x-enumDescriptions": {
										"manual_capture": "The payment was created with `auto_capture` set to `false`. Identify why the payment was created with a pending capture value, and evaluate if the payment is ready for capture.",
										"processing": "ACH payment can remain in a pending state due to processing for up to 2 business days. If the payment method was not a bank account and the status gets stuck in pending, reach out to WePay for support.",
										"risk_review": "The payment is pending while WePay reviews it. Once WePay's review is complete, the status will update to either `completed` or `failed`.",
										"echeck_submission": "The payment is pending a response from the processing institution.",
										"bank_verification": "The payment is pending while the payer verifies microdeposits. If the payer is able to verify their payment method, then the payment status will update to `completed`. If not, then the payment status will update to `failed`.",
										"deferred_capture": "The payment was created with a value for `capture_at`. The payment will capture at the time designated by the UNIX timestamp, or you can update the payment with a different `capture_at` time.",
										"unknown": "The payment is pending due to unknown reasons. Reach out to WePay for support."
									},
									"type": "string"
								},
								"detail_message": {
									"type": "string"
								}
							},
							"type": "object",
							"nullable": true
						},
						"type": "array",
						"nullable": true
					},
					"reason_code": {
						"enum": [
							"PENDING_CAPTURE",
							"PROCESSING",
							"REVIEW",
							"ECHECK_SUBMISSION",
							"BANK_VERIFICATION",
							"UNKNOWN"
						],
						"x-enumDescriptions": {
							"PENDING_CAPTURE": "The payment is pending a manual capture. Identify why the payment was created with a pending capture value, and evaluate if the payment is ready for capture.",
							"PROCESSING": "The payment currently under processing. Allow ACH payments up to 2 business days to process, otherwise reach out to WePay Support.",
							"REVIEW": "The payment is currently pending risk review. Allow the WePay team until 5pm the next business day from the payment entering review.",
							"ECHECK_SUBMISSION": "The payment is pending a response from the processing institution. Allow 2 business days to process, otherwise reach out to WePay Support.",
							"BANK_VERIFICATION": "The payment is currently pending payment bank verification. If the Plaid lightbox was not used, remind the payer to look for microdeposits and to verify them with your platform. Once the payer has verified the microdeposits, send the POST /payment_methods/{id}/verify_bank_deposits request.",
							"UNKNOWN": "The payment is pending due to unknown reasons. Reach out to WePay Support."
						},
						"type": "string"
					},
					"reason_message": {
						"type": "string"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "payments_pending_reasons_response"
			},
			"payouts_pending_reasons_response": {
				"additionalProperties": false,
				"properties": {
					"details": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"detail_code": {
									"enum": [
										"risk_review",
										"processing"
									],
									"type": "string",
									"x-enumDescriptions": {
										"risk_review": "The payout has started processing, but requires WePay to review it before proceeding.",
										"processing": "The payout has started processing and the status will update shortly."
									}
								},
								"detail_message": {
									"type": "string"
								}
							},
							"type": "object",
							"nullable": true
						},
						"type": "array",
						"nullable": true
					},
					"reason_code": {
						"enum": [
							"REVIEW",
							"PROCESSING"
						],
						"type": "string",
						"x-enumDescriptions": {
							"REVIEW": "The payout has started processing, but requires WePay to review it before proceeding.",
							"PROCESSING": "The payout has started processing and the status will update shortly."
						}
					},
					"reason_message": {
						"type": "string"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "payouts_pending_reasons_response",
				"description": "Explains why this payout is pending and may contain an array of reasons."
			},
			"recoveries_pending_reasons_response": {
				"additionalProperties": false,
				"properties": {
					"details": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"detail_code": {
									"enum": [
										"processing",
										"unknown"
									],
									"x-enumDescriptions": {
										"processing": "The recovery attempt is processing. Since recoveries are a form of ACH transaction, please allow 2 business days for the status to update.",
										"unknown": "The recovery attempt is processing, but for unknown reasons. Reach out to WePay if the status takes more than 2 business days to update."
									},
									"type": "string"
								},
								"detail_message": {
									"type": "string"
								}
							},
							"type": "object",
							"nullable": true
						},
						"type": "array",
						"nullable": true
					},
					"reason_code": {
						"enum": [
							"PROCESSING",
							"UNKNOWN"
						],
						"x-enumDescriptions": {
							"PROCESSING": "The recovery attempt is processing. Since recoveries are a form of ACH transaction, please allow 2 business days for the status to update.",
							"UNKNOWN": "The recovery attempt is processing, but for unknown reasons. Reach out to WePay if the status takes more than 2 business days to update."
						},
						"type": "string"
					},
					"reason_message": {
						"type": "string"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "recoveries_pending_reasons_response"
			},
			"refunds_pending_reasons_response": {
				"additionalProperties": false,
				"properties": {
					"details": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"detail_code": {
									"enum": [
										"risk_review",
										"processing",
										"unknown"
									],
									"x-enumDescriptions": {
										"risk_review": "The refund has started processing, but requires WePay to review it before proceeding. Allow the WePay team until 5pm the next business day from the refund entering review.",
										"processing": "The refund has started processing and the status will update shortly.",
										"unknown": "The refund is pending due to unknown reasons. Please reach out to WePay for further information."
									},
									"type": "string"
								},
								"detail_message": {
									"type": "string"
								}
							},
							"type": "object",
							"nullable": true
						},
						"type": "array",
						"nullable": true
					},
					"reason_code": {
						"enum": [
							"REVIEW",
							"PROCESSING",
							"UNKNOWN"
						],
						"x-enumDescriptions": {
							"REVIEW": "The refund has started processing, but requires WePay to review it before proceeding. Allow the WePay team until 5pm the next business day from the refund entering review.",
							"PROCESSING": "The refund has started processing and the status will update shortly.",
							"UNKNOWN": "The refund is pending due to unknown reasons. Please reach out to WePay for further information."
						},
						"type": "string"
					},
					"reason_message": {
						"type": "string"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "refunds_pending_reasons_response"
			},
			"accounts_amex_countries_request": {
				"additionalProperties": false,
				"type": "object",
				"properties": {
					"US": {
						"$ref": "#/components/schemas/accounts_amex_countries_US_request"
					}
				},
				"x-label": "accounts_amex_countries_request"
			},
			"v3.0.rc.1.1-accounts_payout_currency_request": {
				"additionalProperties": false,
				"properties": {
					"payout_method_id": {
						"maxLength": 255,
						"type": "string",
						"description": "ID of the payout method associated with the USD payout."
					},
					"period": {
						"enum": [
							"daily",
							"weekly",
							"monthly"
						],
						"x-enumDescriptions": {
							"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
							"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
							"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
						},
						"type": "string",
						"description": "Describes the how often a USD payout will occur."
					},
					"payout_purpose": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"adjustment_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"fees_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"refunds_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"sales_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"payout_method_id",
					"period"
				],
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.1.1-accounts_payout_currency_request",
				"description": "Payout currency details."
			},
			"pricing_by_currency-create-CAD": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_CAD_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-create-CAD"
			},
			"path": {
				"type": "string",
				"x-label": "path",
				"description": "The HTTP path of the resource. The path can be used to retrieve details about the resource and perform actions on it."
			},
			"v3.0.rc.1.1-accounts_payout_response": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.0.rc.1.1-accounts_payout_currency_response"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.0.rc.1.1-accounts_payout_currency_response"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.0.rc.1.1-accounts_payout_currency_response"
							}
						},
						"type": "object"
					},
					"default_currency": {
						"enum": [
							"USD",
							"CAD",
							"GBP"
						],
						"x-enumDescriptions": {
							"USD": "Indicate that this account's default payout should be in US dollars.",
							"CAD": "Indicate that this account's default payout should be in Canadian dollars.",
							"GBP": "Indicate that this account's default payout should be in Great British pounds. **Note:** Not currently supported."
						},
						"type": "string"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.1.1-accounts_payout_response",
				"description": "Details the merchant’s payout method."
			},
			"pricing-resp": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/pricing_by_currency-resp-CAD"
							},
							"GBP": {
								"$ref": "#/components/schemas/pricing_by_currency-resp-GBP"
							},
							"USD": {
								"$ref": "#/components/schemas/pricing_by_currency-resp-USD"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "pricing-resp",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"pricing_by_currency-update-CAD": {
				"additionalProperties": false,
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_id_CAD_blended_request"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-update-CAD"
			},
			"pricing_by_currency-update-GBP": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_id_blended_request"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-update-GBP"
			},
			"pricing_by_currency-update-USD": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_id_blended_request"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-update-USD"
			},
			"shared_owner_is_account_nullable_response": {
				"additionalProperties": false,
				"description": "Details the owner resource and owner path.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The merchant account ID."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					}
				},
				"required": [
					"id",
					"resource",
					"path"
				],
				"type": "object",
				"nullable": true,
				"x-label": "shared_owner_is_account_nullable_response"
			},
			"resource-adjustments": {
				"enum": [
					"adjustments"
				],
				"x-enumDescriptions": {
					"adjustments": ""
				},
				"type": "string",
				"x-label": "resource-adjustments",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"txnr_adjustment": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_adjustment",
				"description": "When an adjustment occurs, fetch this transaction record to account for the credit OR debit impacting the merchant's account balance."
			},
			"dba_name": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"nullable": true,
				"x-label": "dba_name",
				"description": "Doing Business As allows legal entities to conduct business under a name other than the name on registration and other legal documents."
			},
			"shared_payment_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"enum": [
							"payments"
						],
						"x-enumDescriptions": {
							"payments": ""
						},
						"type": "string",
						"description": "payments"
					}
				},
				"required": [
					"id",
					"resource",
					"path"
				],
				"type": "object",
				"x-label": "shared_payment_response",
				"description": "The payment linked to this refund or dispute."
			},
			"disputes_reason_response": {
				"type": "object",
				"properties": {
					"details": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"detail_code": {
									"enum": [
										"10.1",
										"10.2",
										"10.3",
										"10.4",
										"10.5",
										"11.1",
										"11.2",
										"11.3",
										"12.1",
										"12.2",
										"12.3",
										"12.4",
										"12.5",
										"12.6",
										"12.6.1",
										"12.6.2",
										"12.7",
										"13.1",
										"13.2",
										"13.3",
										"13.4",
										"13.5",
										"13.6",
										"13.7",
										"13.8",
										"13.9",
										"4807",
										"4808",
										"4812",
										"4831",
										"4834",
										"4835",
										"4837",
										"4840",
										"4841",
										"4842",
										"4846",
										"4847",
										"4849",
										"4850",
										"4853",
										"4854",
										"4855",
										"4859",
										"4860",
										"4862",
										"4863",
										"4870",
										"4871",
										"6305",
										"6321",
										"A24",
										"C04",
										"C05",
										"C08",
										"C28",
										"C31",
										"C32",
										"F10",
										"F14",
										"F22",
										"F24",
										"F25",
										"F29",
										"FR2",
										"FR4",
										"FR6",
										"P01",
										"P03",
										"P04",
										"P05",
										"P07",
										"P08",
										"P22",
										"P23",
										"4534",
										"4541",
										"4542",
										"4550",
										"4553",
										"4586",
										"4752",
										"4753",
										"4754",
										"4755",
										"7010",
										"7030",
										"unknown"
									],
									"x-enumDescriptions": {
										"4534": "The Discover / JCB / Diners code to indicate that there was an error processing the transaction, specifically, \"Duplicate Processing\".",
										"4541": "The Discover / JCB / Diners code to indicate that the payer reported services were not provided, specifically, \"Automatic Payment Dispute\".",
										"4542": "The Discover / JCB / Diners code to indicate that there was an error processing the transaction, specifically, \"Late Presentation\".",
										"4550": "The Discover / JCB / Diners code to indicate that there was an error processing the transaction, specifically, \"Credit Posted as Card Sale\".",
										"4553": "The Discover / JCB / Diners code to indicate that the payer reported goods or services were not as described, specifically, \"Quality of Goods or Services Dispute\".",
										"4586": "The Discover / JCB / Diners code to indicate that there was an error processing the transaction, specifically, \"Altered Amount Dispute\".",
										"4752": "The Discover / JCB / Diners code to indicate that the payer did not recognize the transaction on their statement, specifically, \"Declined Authorization\".",
										"4753": "The Discover / JCB / Diners code to indicate that there was an error processing the transaction, specifically, \"Invalid Card Number\".",
										"4754": "The Discover / JCB / Diners code to indicate that the payer did not recognize the transaction on their statement, specifically, \"No Authorization\".",
										"4755": "The Discover / JCB / Diners code to indicate that the payer reported goods or services were not provided, specifically, \"Non-receipts of Goods or Services\".",
										"4807": "The MasterCard code to indicate that there was an error with the transaction, specifically, \"Warning bulletin file\".",
										"4808": "The MasterCard code to indicate that there was an error with the transaction, specifically, \"Requested / required authorization not obtained\".",
										"4812": "The MasterCard code to indicate that there was an error with the transaction, specifically, \"Account number not on file\".",
										"4831": "The MasterCard code to indicate that there was an error with the transaction, specifically, \"Transaction amount differs\".",
										"4834": "The MasterCard code to indicate that there was an error with the transaction, specifically, \"Duplicate processing\".",
										"4835": "The MasterCard code to indicate that there was an error with the transaction, specifically, \"Card not valid or expired\".",
										"4837": "The MasterCard code to indicate that the payer identified the transaction as fraud, specifically, \"No cardholder authorization\".",
										"4840": "The MasterCard code to indicate that the payer identified the transaction as fraud, specifically, \"Fraudulent processing of transactions\"",
										"4841": "The MasterCard code to indicate that the payer reported services were not provided, specifically, \"Cancelled recurring transaction\".",
										"4842": "The MasterCard code to indicate that there was an error with the transaction, specifically, \"Late presentment\".",
										"4846": "The MasterCard code to indicate that there was an error with the transaction, specifically, \"Correct transaction currency code not provided\".",
										"4847": "The MasterCard code to indicate that the payer identified the transaction as fraud, specifically, \"Requested / required authorization not obtained and fraudulent transaction\".",
										"4849": "The MasterCard code to indicate that the payer identified the transaction as fraud, specifically, \"Questionable merchant activity\".",
										"4850": "The MasterCard code to indicate that there was an error with the transaction, specifically, \"Credit posted as a purchase\".",
										"4853": "The MasterCard code to indicate that the payer reported items or goods were not as described, specifically, \"Cardholder dispute - defective / not as described\".",
										"4854": "The MasterCard code to indicate that the payer reported items or goods were not as described, specifically, \"Cardholder dispute - not elsewhere classified (U.S. region only)\".",
										"4855": "The MasterCard code to indicate that the payer reported  goods or services were not provided, specifically, \"Goods or services not provided\".",
										"4859": "The MasterCard code to indicate that the payer reported  goods or services were not provided, specifically, \"Addendum, no-show, or ATM dispute\".",
										"4860": "The MasterCard code to indicate that there was an error with the transaction, specifically, \"Credit not processed\".",
										"4862": "The MasterCard code to indicate that the payer identified the transaction as fraud, specifically, \"Counterfeit transaction magnetic stripe POS fraud\".",
										"4863": "The MasterCard code to indicate that the payer identified the transaction as fraud, specifically, \"Cardholder does not recognize - potential fraud\".",
										"4870": "The MasterCard code to indicate that the payer identified the transaction as fraud, specifically, \"Chip liability shift\".",
										"4871": "The MasterCard code to indicate that the payer identified the transaction as fraud, specifically, \"Chip / PIN liability shift\".",
										"6305": "The MasterCard code to indicate that the payer reported goods or services were not provided, specifically, \"Cardholder does not agree with billed amount\".",
										"6321": "The MasterCard code to indicate that the payer did not recognize the charge on their statement, specifically, \"Cardholder does not recognize transaction\".",
										"7010": "The Discover / JCB / Diners code to indicate that the payer identified the transaction as fraud, specifically, \"Fraud - Card Present Transaction\".",
										"7030": "The Discover / JCB / Diners code to indicate that the payer identified the transaction as fraud, specifically, \"Fraud - Card Not Present Transaction\".",
										"10.1": "The Visa code to indicate that the payer identified the charge as fraud, specifically \"EMV Liability Shift - Counterfeit Fraud\".",
										"10.2": "The Visa code to indicate that the payer identified the charge as fraud, specifically \"EMV Liability Shift - Non-Counterfeit Fraud\".",
										"10.3": "The Visa code to indicate that the payer identified the charge as fraud, specifically \"Other Fraud - Card Present Environment\".",
										"10.4": "The Visa code to indicate that the payer identified the charge as fraud, specifically \"Other Fraud - Card Not Present Environment\".",
										"10.5": "The Visa code to indicate that the payer identified the charge as fraud, specifically \"Visa Fraud Monitoring Program\".",
										"11.1": "The Visa code to indicate that the payer did not recognize the charge, specifically \"Card Recovery Bulletin\".",
										"11.2": "The Visa code to indicate that the payer did not recognize the charge, specifically \"Declined Authorization\".",
										"11.3": "The Visa code to indicate that the payer did not recognize the charge, specifically \"No Authorization\".",
										"12.1": "The Visa code to indicate that there was a processing error, specifically \"Late Presentment\".",
										"12.2": "The Visa code to indicate that there was a processing error, specifically \"Incorrect Transaction Code\".",
										"12.3": "The Visa code to indicate that there was a processing error, specifically \"Incorrect Currency\".",
										"12.4": "The Visa code to indicate that there was a processing error, specifically \"Incorrect Account Number\".",
										"12.5": "The Visa code to indicate that there was a processing error, specifically \"Incorrect Amount\".",
										"12.6": "The Visa code to indicate that there was a processing error, specifically \"Duplicate Processing/ Paid by Other Means\".",
										"12.6.1": "The Visa code to indicate that there was a processing error, specifically \"Duplicate Processing\".",
										"12.6.2": "The Visa code to indicate that there was a processing error, specifically \"Paid by Other Means\".",
										"12.7": "The Visa code to indicate that there was a processing error, specifically \"Invalid Data\".",
										"13.1": "The Visa code to indicate that the payer reported services were not provided, specifically \"Merchandise/Services Not Received\".",
										"13.2": "The Visa code to indicate that the payer reported services were not provided, specifically \"Cancelled Recurring\"",
										"13.3": "The Visa code to indicate that services or goods were not as described, specifically \"Not as Described or Defective Merchandise / Services\".",
										"13.4": "The Visa code to indicate that services or goods were not as described, specifically \"Counterfeit Merchandise\".",
										"13.5": "The Visa code to indicate that services or goods were not as described, specifically \"Misrepresentation\".",
										"13.6": "The Visa code to indicate that the payer reported services were not provided, specifically \"Credit Not Processed\".",
										"13.7": "The Visa code to indicate that the payer reported services were not provided, specifically \"Canceled Merchandise / Services\".",
										"13.8": "The Visa code to indicate that there was a processing error, specifically \"Original Credit Transaction Not Accepted\".",
										"13.9": "The Visa code to indicate that the payer reported services were not provided, specifically \"Non-Receipt of Cash or Load Transaction Value\".",
										"A24": "The Interac code to indicate that the dispute or chargeback is from a debit adjustment request.",
										"C04": "The AmEx code to indicate that the payer reported services were not as described, specifically, \"Goods / Services Returned or Refused\".",
										"C05": "The AmEx code to indicate that the payer reported services were not provided, specifically, \"Goods / Services Cancelled\".",
										"C08": "The AmEx code to indicate that the payer reported services were not provided, specifically, \"Goods / Services Not Received\".",
										"C28": "The AmEx code to indicate that the payer reported services were not as described, specifically, \"Cancelled Recurring Billing\".",
										"C31": "The AmEx code to indicate that the payer reported goods or services were not as described, specifically, \"Goods / Services Not as Described\".",
										"C32": "The AmEx code to indicate that the payer reported goods or services were not as described, specifically, \"Goods / Services Damaged or Defective\".",
										"F10": "The AmEx code to indicate that the payer reported the transaction as fraud, specifically, \"Missing Imprint\".",
										"F14": "The AmEx code to indicate that the payer reported the transaction as fraud, specifically, \"Missing Signature\".",
										"F22": "The AmEx code to indicate that the payer reported the transaction as fraud, specifically, \"Expired or Not Yet Valid Card\".",
										"F24": "The AmEx code to indicate that the payer did not recognize the transaction on their statement, specifically, \"No Card Member Authorization\".",
										"F25": "The AmEx code to indicate that the payer did not recognize the transaction on their statement, specifically, \"Unauthorized charge\".",
										"F29": "The AmEx code to indicate that the payer reported the transaction as fraud, specifically, \"Card Not Present\".",
										"FR2": "The AmEx code to indicate that the payer reported the transaction as fraud, specifically, \"Fraud Full Recourse Program\".",
										"FR4": "The AmEx code to indicate that the payer reported the transaction as fraud, specifically, \"Immediate Chargeback Program\".",
										"FR6": "The AmEx code to indicate that the payer reported the transaction as fraud, specifically, \"Partial Immediate Chargeback Program\".",
										"P01": "The AmEx code to indicate that there was an error processing the transaction, specifically, \"Unassigned Card Number\".",
										"P03": "The AmEx code to indicate that there was an error processing the transaction, specifically, \"Credit Processed as Charge\".",
										"P04": "The AmEx code to indicate that there was an error processing the transaction, specifically, \"Charge Processed as Credit\".",
										"P05": "The AmEx code to indicate that there was an error processing the transaction, specifically, \"Incorrect Transaction Amount\".",
										"P07": "The AmEx code to indicate that there was an error processing the transaction, specifically, \"Late Presentment\".",
										"P08": "The AmEx code to indicate that there was an error processing the transaction, specifically, \"Duplicate Charge\".",
										"P22": "The AmEx code to indicate that there was an error processing the transaction, specifically, \"Nonmatching Card Number\".",
										"P23": "The AmEx code to indicate that there was an error processing the transaction, specifically, \"Currency Discrepancy\".",
										"unknown": "The Discover / JCB / Diners code to indicate that an inquiry or chargeback was posted against the transaction for unspecified reason"
									},
									"type": "string",
									"description": "Chargeback code for visa, mastercard, amex, and discover cards."
								},
								"detail_message": {
									"type": "string",
									"description": "A reason message written by a WePay Risk Analyst."
								}
							},
							"required": [
								"detail_code",
								"detail_message"
							],
							"additionalProperties": false
						},
						"nullable": true
					},
					"reason_code": {
						"enum": [
							"FRAUD",
							"RECOGNITION",
							"PROCESSING_ERROR",
							"SERVICES_NOT_PROVIDED",
							"NOT_AS_DESCRIBED",
							"INQUIRY",
							"UNKNOWN",
							"DEBIT_ADJUSTMENT"
						],
						"x-enumDescriptions": {
							"FRAUD": "Disputed due to fraudulent use of the card.",
							"RECOGNITION": "Dispute is a result of the card holder not remembering authorizing the payment to that merchant.",
							"PROCESSING_ERROR": "",
							"SERVICES_NOT_PROVIDED": "Dispute is a result of merchant not fulfilling terms of the payment.",
							"NOT_AS_DESCRIBED": "Disputed due to merchant not delivering goods matching the card holder's intended purchase.",
							"INQUIRY": "The card issuer has opted to request preliminary information about the transaction before deciding to move forward with a chargeback.",
							"UNKNOWN": "Dispute is a result of unknown/undisclosed reasons.",
							"DEBIT_ADJUSTMENT": "Dispute came from a debit adjustment request."
						},
						"type": "string",
						"description": "The category of dispute reason."
					},
					"reason_message": {
						"type": "string",
						"description": "An explanation of the reason code."
					}
				},
				"required": [
					"reason_code",
					"reason_message",
					"details"
				],
				"additionalProperties": false,
				"x-label": "disputes_reason_response",
				"description": "The reason a chargeback is being disputed."
			},
			"resource-disputes": {
				"enum": [
					"disputes"
				],
				"x-enumDescriptions": {
					"disputes": ""
				},
				"type": "string",
				"x-label": "resource-disputes",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"txnr_chargeback_app_fees": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_chargeback_app_fees",
				"description": "If a chargeback has occurred, fetch this transaction record to account for the portion of the chargeback debited from your platform account balance."
			},
			"txnr_chargeback_merchant": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_chargeback_merchant",
				"description": "If a chargeback has occurred, fetch this transaction record to account for the portion of the chargeback debited from the merchant."
			},
			"txnr_chargeback_reversal_app_fee": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_chargeback_reversal_app_fee",
				"description": "If a chargeback has occurred and has since been reversed, fetch this transaction record to account for the portion of the reversal credited to your platform account balance."
			},
			"txnr_chargeback_reversal_merchant": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_chargeback_reversal_merchant",
				"description": "If a chargeback has occurred and has since been reversed, fetch this transaction record to account for the portion of the reversal credited back to the merchant."
			},
			"txnr_merchant_chargeback_fee": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_merchant_chargeback_fee",
				"description": "If a chargeback has occurred, fetch this transaction record to account for the chargeback fee charged to the merchant."
			},
			"accounts_id_capabilities_owner_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The legal entity ID associated with verification document."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					}
				},
				"required": [
					"resource",
					"id",
					"path"
				],
				"type": "object",
				"x-label": "accounts_id_capabilities_owner_response",
				"description": "Details the owner resource and owner path."
			},
			"resource-hardware_reports": {
				"enum": [
					"hardware_reports"
				],
				"x-enumDescriptions": {
					"hardware_reports": "Fetch details for all of your app's onboarded terminals."
				},
				"type": "string",
				"x-label": "resource-hardware_reports",
				"description": "Get a hardware report with data specific to a given API resource (i.e. Accounts, Payments, etc)."
			},
			"terminals_status": {
				"type": "string",
				"description": "The status of the terminal. Active means the terminal is able to accept authorizations. Inactive means the terminal has been deactivated and is unable to accept payments (this can occur for risk and fraud related reasons).",
				"enum": [
					"active",
					"deleted",
					"inactive"
				],
				"x-enumDescriptions": {
					"active": "The terminal has been onboarded for a merchant and is able to process authorizations.",
					"deleted": "The terminal was deleted and cannot process authorizations.",
					"inactive": "The terminal was deactivated with the POST /terminals/{id}/deactivate endpoint and cannot currently process authorizations. To activate the terminal again, use the POST /terminals/{id}/activate endpoint.."
				},
				"x-label": "terminals_status"
			},
			"currency-nullable": {
				"enum": [
					"USD",
					"CAD",
					"GBP"
				],
				"type": "string",
				"nullable": true,
				"x-label": "currency-nullable",
				"x-enumDescriptions": {
					"USD": "United States Dollar",
					"CAD": "Canadian Dollar",
					"GBP": "Great Britain Pound"
				}
			},
			"id-nullable": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"nullable": true,
				"x-label": "id-nullable",
				"description": "A reference number your platform assigns to an Item."
			},
			"shared_terms_nullable_response": {
				"additionalProperties": false,
				"properties": {
					"terms_text": {
						"type": "string",
						"nullable": true
					},
					"terms_uri": {
						"$ref": "#/components/schemas/uri-nullable"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "shared_terms_nullable_response",
				"description": "Terms associated with the transaction."
			},
			"legal_entities_additional_representatives_response": {
				"additionalProperties": false,
				"properties": {
					"representative_0": {
						"$ref": "#/components/schemas/shared_representative_response"
					},
					"representative_1": {
						"$ref": "#/components/schemas/shared_representative_response"
					},
					"representative_2": {
						"$ref": "#/components/schemas/shared_representative_response"
					},
					"representative_3": {
						"$ref": "#/components/schemas/shared_representative_response"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "legal_entities_additional_representatives_response",
				"description": "Personal information for additional representatives of the legal entity."
			},
			"legal_entities_controller_response": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"date_of_birth_is_present": {
						"type": "boolean",
						"description": "Indicates if the date of birth of the controller is present."
					},
					"email": {
						"$ref": "#/components/schemas/email-nullable"
					},
					"email_is_verified": {
						"type": "boolean"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"is_beneficial_owner": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative or controller is a beneficial owner for the legal entity."
					},
					"job_title": {
						"maxLength": 64,
						"minLength": 2,
						"type": "string",
						"nullable": true,
						"description": "The job title of the controller."
					},
					"name": {
						"$ref": "#/components/schemas/shared_full_name"
					},
					"personal_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_CA_response"
							},
							"GB": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_GB_response"
							},
							"US": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_US_response"
							}
						},
						"type": "object"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"reference_id": {
						"$ref": "#/components/schemas/beneficial_owner_reference_id"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "legal_entities_controller_response",
				"description": "Personal details of the controller. **Note:** A controller is an individual with significant responsibility to control or manage a legal entity. Examples of controllers include, but are not limited to, a Chief Executive Officer, Chief Financial Officer, Chief Operating Officer, Managing Member, General Partner, President, Vice President, or Treasurer, or any other individual who regularly performs similar functions as part of a control prong."
			},
			"shared_owner_is_application_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The legal entity ID associated with verification document."
					},
					"path": {
						"type": "string",
						"nullable": true,
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"enum": [
							"applications"
						],
						"x-enumDescriptions": {
							"applications": ""
						},
						"type": "string",
						"description": "Helps organize information by identifying the resource type of the object data."
					}
				},
				"required": [
					"resource",
					"id",
					"path"
				],
				"type": "object",
				"x-label": "shared_owner_is_application_response",
				"description": "This owner resource and owner path of the object."
			},
			"legal_entities_public_ownership_response": {
				"additionalProperties": false,
				"type": "object",
				"properties": {
					"is_publicly_traded": {
						"type": "boolean",
						"description": "Specifies if the legal entity is a publicly traded company. Should be `false` for subsidiaries of publicly traded companies."
					},
					"is_subsidiary": {
						"type": "boolean",
						"description": "Specifies if the legal entity is a subsidiary of a publicly traded company."
					},
					"parent_company_name": {
						"type": "string",
						"nullable": true,
						"description": "Name of the parent company if the company is a subsidiary of a publicly traded company."
					},
					"primary_exchange": {
						"enum": [
							"NYSE",
							"AMEX",
							"NASDAQ"
						],
						"x-enumDescriptions": {
							"NYSE": "",
							"AMEX": "",
							"NASDAQ": ""
						},
						"type": "string",
						"nullable": true,
						"description": "Describes the primary market/stock-exchange where the company is publicly traded."
					},
					"traded_exchanges": {
						"$ref": "#/components/schemas/legal_entities_traded_exchanges_response"
					}
				},
				"required": [
					"is_publicly_traded",
					"is_subsidiary",
					"parent_company_name",
					"primary_exchange",
					"traded_exchanges"
				],
				"x-label": "legal_entities_public_ownership_response",
				"description": "Information regarding public ownership of an entity. Required for publicly traded companies."
			},
			"notifications_id": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"x-label": "notifications_id",
				"description": "ID of the notification, generated by WePay when the notification is created."
			},
			"resource-notifications": {
				"enum": [
					"notifications"
				],
				"x-enumDescriptions": {
					"notifications": ""
				},
				"type": "string",
				"x-label": "resource-notifications",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"resource-notification_preferences": {
				"enum": [
					"notification_preferences"
				],
				"x-enumDescriptions": {
					"notification_preferences": ""
				},
				"type": "string",
				"x-label": "resource-notification_preferences",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"buyer-resp": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The legal entity ID associated with the buyer i.e. the merchant."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-legal_entities"
					}
				},
				"required": [
					"resource",
					"id",
					"path"
				],
				"type": "object",
				"description": "Buyer of the order.",
				"x-label": "buyer-resp"
			},
			"orders_id": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"x-label": "orders_id",
				"description": "ID of the order, generated by WePay when the order is created."
			},
			"orders_owner_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The merchant account ID."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					}
				},
				"required": [
					"id",
					"resource",
					"path"
				],
				"type": "object",
				"x-label": "orders_owner_response",
				"description": "Details the owner resource and owner path."
			},
			"orders_address_response": {
				"additionalProperties": false,
				"properties": {
					"postal_code": {
						"maxLength": 14,
						"type": "string",
						"description": "Postal code associated with the address."
					},
					"city": {
						"maxLength": 30,
						"type": "string",
						"nullable": true,
						"description": "City associated with the address."
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"line1": {
						"maxLength": 60,
						"type": "string",
						"nullable": true,
						"description": "First line of the address."
					},
					"line2": {
						"maxLength": 60,
						"type": "string",
						"nullable": true,
						"description": "Second line of the address."
					},
					"region": {
						"maxLength": 30,
						"type": "string",
						"nullable": true,
						"description": "Region associated with the address."
					}
				},
				"required": [
					"postal_code"
				],
				"type": "object",
				"nullable": true,
				"x-label": "orders_address_response",
				"description": "Optional address indicating where service was rendered or destination of the order."
			},
			"holder-req": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"holder_name": {
						"maxLength": 26,
						"minLength": 3,
						"type": "string",
						"pattern": "^[^\\x00-\\x1f]+$",
						"description": "Name of the person as it appears on the credit card or bank account statement."
					},
					"email": {
						"$ref": "#/components/schemas/email"
					},
					"phone": {
						"additionalProperties": false,
						"properties": {
							"country_code": {
								"pattern": "^\\+?[0-9]{1,3}$",
								"type": "string",
								"nullable": true,
								"description": "Country code associated with the legal entity."
							},
							"phone_number": {
								"pattern": "^[0-9]{7,14}$",
								"type": "string",
								"nullable": true,
								"description": "Phone number associated with the legal entity."
							},
							"type": {
								"enum": [
									"mobile",
									"personal",
									"business"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the phone number is for a mobile device.",
									"personal": "Indicates that the phone number is for a personal device.",
									"business": "Indicates that the phone number is for a business device."
								},
								"type": "string"
							}
						},
						"required": [
							"country_code",
							"phone_number"
						],
						"type": "object",
						"description": "Standard international phone structure."
					}
				},
				"required": [
					"holder_name",
					"address"
				],
				"type": "object",
				"x-label": "holder-req",
				"description": "Personal details of the card or account holder."
			},
			"payment_bank_us_holder-req": {
				"additionalProperties": false,
				"properties": {
					"holder_name": {
						"maxLength": 26,
						"minLength": 3,
						"type": "string",
						"pattern": "^[^\\x00-\\x1f]+$",
						"description": "Name of the person as it appears on the credit card or bank account statement."
					},
					"address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"email": {
						"$ref": "#/components/schemas/email"
					},
					"phone": {
						"additionalProperties": false,
						"properties": {
							"country_code": {
								"pattern": "^\\+?[0-9]{1,3}$",
								"type": "string",
								"nullable": true,
								"description": "Country code associated with the legal entity."
							},
							"phone_number": {
								"pattern": "^[0-9]{7,14}$",
								"type": "string",
								"nullable": true,
								"description": "Phone number associated with the legal entity."
							},
							"type": {
								"enum": [
									"mobile",
									"personal",
									"business"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the phone number is for a mobile device.",
									"personal": "Indicates that the phone number is for a personal device.",
									"business": "Indicates that the phone number is for a business device."
								},
								"type": "string"
							}
						},
						"required": [
							"country_code",
							"phone_number"
						],
						"type": "object",
						"description": "Standard international phone structure."
					}
				},
				"required": [
					"holder_name"
				],
				"type": "object",
				"x-label": "payment_bank_us_holder-req",
				"description": "Personal details of the card or account holder."
			},
			"us_bank_account_number": {
				"pattern": "^[0-9]{3,17}$",
				"type": "string",
				"x-label": "us_bank_account_number",
				"description": "Account number of the bank account."
			},
			"us_bank_routing_number": {
				"pattern": "^[0-9]{9}$",
				"type": "string",
				"x-label": "us_bank_routing_number",
				"x-isRoutingNumber": true,
				"description": "Routing number of the bank account."
			},
			"shared_legal_entity_request": {
				"additionalProperties": false,
				"properties": {
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"account_controller": {
						"$ref": "#/components/schemas/shared_account_controller"
					},
					"additional_representatives": {
						"$ref": "#/components/schemas/shared_additional_representatives_request"
					},
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"controller": {
						"$ref": "#/components/schemas/shared_controller_request"
					},
					"controller_type": {
						"$ref": "#/components/schemas/controller_type"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 1024,
						"type": "string",
						"nullable": true,
						"description": "Description of the Legal Entity. WePay uses this information for underwriting purposes."
					},
					"email": {
						"$ref": "#/components/schemas/entity-email-nullable"
					},
					"entity_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_entity_country_info_CA"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_entity_country_info_GB"
							},
							"US": {
								"$ref": "#/components/schemas/shared_entity_country_info_US"
							},
							"country_of_formation": {
								"$ref": "#/components/schemas/country_code-nullable"
							},
							"operates_in_sanctioned_countries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"enum": [
										"CU",
										"IR",
										"KP",
										"SY",
										"XX"
									],
									"x-enumDescriptions": {
										"CU": "Cuba",
										"IR": "Iran",
										"KP": "North Korea",
										"SY": "Syria",
										"XX": "WePay's custom 2-digit ISO code for Crimea Region, as a 2-digit code does not exist."
									},
									"type": "string"
								},
								"nullable": true,
								"description": "An array of sanctioned countries where the Legal Entity operates. Possible values include `CU`, `IR`, `KP`, `XX`, `SY`. Note that `XX` is used to represent Crimea, as it does not have its own 2-digit ISO code. If the merchant indicates they do not have operations in one of the sanctioned countries listed above, then pass an empty array: `[]`. This field is required, if the value is left `null`, capabilities (payments and payouts) will be disabled."
							},
							"year_of_formation": {
								"type": "integer",
								"minimum": 0,
								"nullable": true,
								"description": "The year when the Legal Entity originated."
							}
						},
						"type": "object",
						"description": "Information about the Legal Entity."
					},
					"entity_name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*$",
						"type": "string",
						"nullable": true,
						"description": "The name of the legal entity. This should **not** contain a merchant's DBA; DBAs can be included on the Account resource. Must not contain the word `wepay`."
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"primary_url": {
						"$ref": "#/components/schemas/uri-nullable"
					},
					"public_ownership": {
						"$ref": "#/components/schemas/shared_public_ownership_request"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"terms_of_service": {
						"additionalProperties": false,
						"properties": {
							"acceptance_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "Time (in UNIX) when WePay's Terms of Service was accepted."
							},
							"original_ip": {
								"maxLength": 45,
								"pattern": "^[A-F0-9a-f:\\.]*$",
								"type": "string",
								"nullable": true,
								"description": "The IP address in use when WePay's Terms of Service was accepted."
							},
							"terms_of_service_version": {
								"maxLength": 20,
								"pattern": "^[A-Za-z0-9_]+$",
								"type": "string",
								"nullable": true,
								"description": "The version of WePay's Terms of Service that was accepted."
							}
						},
						"type": "object",
						"description": "Data regarding the legal entity's acceptance of the WePay terms of service."
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"country"
				],
				"type": "object",
				"x-label": "shared_legal_entity_request",
				"description": "Inline legal entity information associated with the buyer of the order."
			},
			"cc-authorization_code": {
				"type": "string",
				"nullable": true,
				"x-label": "cc-authorization_code",
				"description": "Authorization code returned from the card issuer after a credit card payment is authorized"
			},
			"initiated_by-resp": {
				"enum": [
					"customer",
					"merchant",
					"none"
				],
				"x-enumDescriptions": {
					"customer": "",
					"merchant": "",
					"none": ""
				},
				"type": "string",
				"x-label": "initiated_by-resp",
				"description": "Indicates who initiated a payment. Possible values include: `customer`, `merchant`, none."
			},
			"shared_payment_method_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "ID of the payment method, generated by WePay when the payment method is created."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payment_methods"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv_provided": {
								"type": "boolean"
							},
							"expiration_month": {
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"description": "The year the credit card expires."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"backing_display_name": {
								"type": "string",
								"nullable": true,
								"description": "The backing display name for the credit card."
							},
							"bin": {
								"type": "string",
								"description": "Bank identification number. The initial six digits of a credit card number. Null is returned if BIN is not available."
							},
							"card_brand": {
								"enum": [
									"visa",
									"mastercard",
									"discover",
									"amex",
									"jcb",
									"diners"
								],
								"x-enumDescriptions": {
									"visa": "",
									"mastercard": "",
									"discover": "",
									"amex": "",
									"jcb": "",
									"diners": ""
								},
								"type": "string",
								"description": "Brand of the credit card. Possible values include: `amex`, `discover`, `diners`, `jcb`, `mastercard`, `visa`."
							},
							"card_entry_type": {
								"enum": [
									"card_keyed",
									"card_emv",
									"card_swiped",
									"card_manual",
									"card_emv_contactless"
								],
								"x-enumDescriptions": {
									"card_keyed": "",
									"card_emv": "",
									"card_swiped": "",
									"card_manual": "",
									"card_emv_contactless": ""
								},
								"type": "string",
								"description": "Possible values include: `card_keyed`, `card_transfer`."
							},
							"display_name": {
								"type": "string",
								"description": "The display name for the credit card."
							},
							"last_four": {
								"type": "string",
								"description": "The last four digits of the credit card number."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"expiration_month",
							"expiration_year",
							"card_on_file",
							"recurring",
							"cvv_provided"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"owner": {
						"$ref": "#/components/schemas/shared_payment_method_owner_response"
					},
					"payment_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
									"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account. **Note:** If you have verified your account via Plaid, this might be the last four numbers of your tokenized bank account number (TAN)."
							}
						},
						"required": [
							"account_type",
							"last_four",
							"account_holder"
						],
						"type": "object",
						"description": "Raw bank account information."
					},
					"status": {
						"enum": [
							"unverified",
							"verified",
							"verification_failed",
							"deleted"
						],
						"x-enumDescriptions": {
							"unverified": "This payment method has not been verified yet and cannot be used to create payments until the status updates to `verified`.",
							"verified": "This payment method has successfully been verified and can now be used to create payments.",
							"verification_failed": "Verification attempt(s) for this payment method have failed. If this value returns, the payer should double check their payment details and re-submit them.",
							"deleted": "This payment method has been permanently deleted and cannot be used to create any further payments."
						},
						"type": "string",
						"description": "Possible values include: `deleted`, `unverified`, `verification_failed`, `verified`."
					},
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"encoded_payment_method",
							"google_pay"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data."
						}
					}
				},
				"required": [
					"id",
					"resource",
					"path"
				],
				"type": "object",
				"x-label": "shared_payment_method_response"
			},
			"resource-payments": {
				"enum": [
					"payments"
				],
				"x-enumDescriptions": {
					"payments": ""
				},
				"type": "string",
				"x-label": "resource-payments",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"payments_failure_reason_response": {
				"additionalProperties": false,
				"properties": {
					"details": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"detail_code": {
									"enum": [
										"invalid_address",
										"invalid_card_number",
										"invalid_card_type",
										"card_not_supported",
										"incorrect_cid",
										"decline_bank",
										"decline_issuer",
										"decline_insufficient_funds",
										"decline_card_stolen",
										"decline_card_inactive",
										"decline_credit_limit",
										"decline_blacklisted",
										"decline_general",
										"card_expired",
										"card_invalid_data",
										"card_missing_fields",
										"system_failure",
										"excessive_authorizations",
										"account_cannot_transact",
										"abuse",
										"bank_failure",
										"testing",
										"no_payment_attempted",
										"failed_permanently",
										"unexpected",
										"undefined",
										"debit_card_not_accepted",
										"exceeded_token_amount_limit",
										"token_currency_mismatch",
										"processor_timed_out",
										"processor_declined",
										"R01",
										"R02",
										"R03",
										"R04",
										"R05",
										"R06",
										"R07",
										"R08",
										"R09",
										"R10",
										"R11",
										"R12",
										"R13",
										"R14",
										"R15",
										"R16",
										"R17",
										"R18",
										"R19",
										"R20",
										"R21",
										"R22",
										"R23",
										"R24",
										"R25",
										"R26",
										"R27",
										"R28",
										"R29",
										"R30",
										"R31",
										"R32",
										"R33",
										"R34",
										"R35",
										"R36",
										"R37",
										"R38",
										"R39",
										"R40",
										"R41",
										"R42",
										"R43",
										"R44",
										"R45",
										"R46",
										"R47",
										"R50",
										"R51",
										"R52",
										"R53",
										"R61",
										"R67",
										"R68",
										"R69",
										"R70",
										"R71",
										"R72",
										"R73",
										"R74",
										"R75",
										"R76",
										"R80",
										"R81",
										"R82",
										"R83",
										"R84",
										"R94",
										"R95",
										"R97",
										"R98",
										"R99",
										"request_expired",
										"risk_review",
										"unknown",
										"other"
									],
									"x-enumDescriptions": {
										"invalid_address": "The address could not be verified. Advise that the payer double check their billing address or to check with their card issuer.",
										"invalid_card_number": "The card number is invalid. Advise that the payer verify their card details or use a different card.",
										"invalid_card_type": "The card type is invalid. Identify the cards accepted by the WePay account in question, and advise that the payer use a different card of that type.",
										"card_not_supported": "The card type does not support this purchase. Some card brands have restrictions on the types of purchases. Advise that the payer use a different payment method.",
										"incorrect_cid": "The CVC number is incorrect. Advise the payer to verify their card details or use a different card.",
										"decline_bank": "",
										"decline_issuer": "",
										"decline_insufficient_funds": "The card has insufficient funds for this transaction. Advise that the payer try the payment when they have sufficient funds, or that they use a different payment method.",
										"decline_card_stolen": "The card cannot be used for this transaction (it may have been reported stolen). Do not relay the possible \"reported stolen\" status to the payer. Advise that the payer check with their card issuer.",
										"decline_card_inactive": "The card cannot be used for this transaction (it may have been reported inactive). Do not relay the possible \"reported inactive\" status to the payer. Advise that the payer check with their card issuer.",
										"decline_credit_limit": "The card has reached its balance or credit limit available. Advise that the payer use a card with an available balance or credit limit.",
										"decline_blacklisted": "",
										"decline_general": "The card has been declined for unknown reasons. Advise that the payer check with their card issuer.",
										"card_expired": "The card has expired. Advise that the payer resubmit their card details with the most current expiration date and to try the payment again.",
										"card_invalid_data": "One or more fields associated with this transaction has invalid data. Advise that the payer check their card details or use a different payment method.",
										"card_missing_fields": "The card data is missing required fields. Check your platform's UI to ensure that you are collecting all fields required by WePay up front. Advise the payer on what the required fields are and that they resubmit card details.",
										"system_failure": "Issuer or host system could not be reached. Advise that the payer wait a few minutes and to try again. If the issue persists, check the [WePay status page](https://status.wepay.com/) or reach out to WePay's API Support (api@wepay.com).",
										"excessive_authorizations": "The card has exceeded its withdrawal limit. Advise that the payer check with their card issuer or try a different payment method.",
										"account_cannot_transact": "The card or the account its connected to cannot transact. Verify the `status` of the Payment Method, and the `status` and `capabilities` of the receiving Account in order to identify the issue.",
										"abuse": "",
										"bank_failure": "The bank declined this transaction for unknown reasons. Advise that the payer check with their connected bank or to add a new payment method.",
										"testing": "",
										"no_payment_attempted": "Payment could not be captured for unknown reasons. Advise that the payer double check their card details and to re-submit after a few minutes. If the issue persists, check the [WePay status page](https://status.wepay.com/) or reach out to WePay's API Support (api@wepay.com).",
										"failed_permanently": "Payment could not be captured for unknown reasons. Advise that the payer double check their card details and to re-submit after a few minutes. If the issue persists, check the [WePay status page](https://status.wepay.com/) or reach out to WePay's API Support (api@wepay.com).",
										"unexpected": "Payment could not be captured for unknown reasons. Advise that the payer double check their card details and to re-submit after a few minutes. If the issue persists, check the [WePay status page](https://status.wepay.com/) or reach out to WePay's API Support (api@wepay.com).",
										"undefined": "Payment could not be captured for unknown reasons. Advise that the payer double check their card details and to re-submit after a few minutes. If the issue persists, check the [WePay status page](https://status.wepay.com/) or reach out to WePay's API Support (api@wepay.com).",
										"debit_card_not_accepted": "Debit card is not accepted for this transaction. Advise that the payer add a credit card or ACH payment method and re-try the payment.",
										"exceeded_token_amount_limit": "This transaction exceeds the token amount limit. Identify why your platform is requesting a payment for more than the authorized amount of the token. Advise that the payer resubmit their payment method and try the payment again once the token has the correct amount limit.",
										"token_currency_mismatch": "This transaction does not match the currency specified in the token. Identify why your platform is requesting a payment in a different currency than the token. Re-send the POST /payments call once the correct currency is in place.",
										"processor_timed_out": "The processor was unavailable so we could not capture the payment. Advise that the payer wait a few minutes before resubmitting the payment. If the issue persists, check the [WePay status page](https://status.wepay.com/) or reach out to WePay's API Support (api@wepay.com).",
										"processor_declined": "The payment was declined by processor for unknown reasons. Advise that the payer check with their card issuer or try a different payment method.",
										"R01": "ACH reason: Insufficient funds in account. Advise that the payer resubmit payment with updated account information or a new account.",
										"R02": "ACH reason: Account is closed. Advise that the payer resubmit payment with updated account information or a new account.",
										"R03": "ACH reason: No account on file. Advise that the payer resubmit payment with updated account information or a new account.",
										"R04": "ACH reason: Invalid account number. Advise that the payer resubmit payment with updated account information or a new account.",
										"R05": "ACH reason: Unauthorized debit to consumer account. Bank rejected payment request, no follow-up suggested",
										"R06": "AH reason: Returned at request of originating bank. Advise that they payer resubmit payment with updated account information or a new account.",
										"R07": "ACH reason: Authorization revoked by customer. Advise that the payer resubmit payment with updated account information or a new account.",
										"R08": "ACH reason: Payment stopped. The payer stopped this request for payment. Please work with the payer for updated payment information.",
										"R09": "ACH reason: Insufficient collected funds in account being charged. Advise that the payer resubmit payment with updated account information or a new account.",
										"R10": "ACH reason: Customer Advises Originator is Not Known to Receiver and/or Is Not Authorized by Receiver to Debit Receiver’s Account. Advise that the merchant work with the payer to resolve the matter.",
										"R11": "ACH reason: Customer Advises Entry Not In Accordance with the Terms of the Authorization. Advise that the merchant work with the payer to resolve the matter.",
										"R12": "ACH reason: Account sold to another financial institution. Advise that the payer resubmit payment with updated account information or a new account.",
										"R13": "ACH reason: Invalid ACH routing number. Advise that the payer resubmit payment with updated account information or a new account.",
										"R14": "ACH reason: Payee is deceased. Bank rejected payment request, no follow-up suggested.",
										"R15": "ACH reason: Account holder is deceased. Bank rejected payment request, no follow-up suggested.",
										"R16": "ACH reason: Account funds have been frozen. Advise that the payer resubmit payment with updated account information or a new account.",
										"R17": "ACH reason: Item returned because of invalid data. Advise that the payer resubmit payment with updated account information or a new account.",
										"R18": "ACH reason: Improper effective entry date. Advise that the payer use a different bank account, preferably at a different bank.",
										"R19": "ACH reason: Amount error. Advise that the payer resubmit payment with updated account information or a new account.",
										"R20": "ACH reason: Account does not allow ACH transactions or limit has been exceeded. Advise that the payer resubmit payment with updated account information or a new account.",
										"R21": "ACH reason: Invalid company identification. Advise that the payer use a different bank account, preferably at a different bank.",
										"R22": "ACH reason: Invalid individual ID. Advise that the payer use a different bank account, preferably at a different bank",
										"R23": "ACH reason: Credit entry refused by receiver. Advise that the payer resubmit payment with updated account information or a new account.",
										"R24": "ACH reason: Duplicate entry. Advise that the payer use a different bank account, preferably at a different bank.",
										"R25": "ACH reason: Addenda record error. Advise that the payer use a different bank account, preferably at a different bank.",
										"R26": "ACH reason: Mandatory field error. Advise that the payer use a different bank account, preferably at a different bank.",
										"R27": "ACH reason: Trace number error. Advise that the payer use a different bank account, preferably at a different bank.",
										"R28": "ACH reason: Routing / transit number check digit error. Advise that the payer use a different bank account, preferably at a different bank.",
										"R29": "ACH reason: Corporate customer advised not authorized. Bank rejected payment request, no follow-up suggested.",
										"R30": "ACH reason: RDFI not participant in check truncation program. Advise that the payer resubmit payment with updated account information or a new account.",
										"R31": "ACH reason: Permissible return entry. Advise that the payer resubmit payment with updated account information or a new account.",
										"R32": "ACH reason: Receiving bank non-settlement. Advise that the payer resubmit payment with updated account information or a new account",
										"R33": "ACH reason: Return of item. Advise that the payer resubmit payment with updated account information or a new account.",
										"R34": "ACH reason: Limited participation originating bank. Advise that the payer resubmit payment with updated account information or a new account.",
										"R35": "ACH reason: Return of improper debit entry. Advise that the payer resubmit payment with updated account information or a new account.",
										"R36": "ACH reason: Return of improper credit entry. Advise that the payer resubmit payment with updated account information or a new account.",
										"R37": "ACH reason: Source document presented for payment. Advise that the payer use a different bank account, preferably at a different bank.",
										"R38": "ACH reason: Stop payment on source document. Advise that the payer use a different bank account, preferably at a different bank.",
										"R39": "ACH reason: Improper source document. Advise that the payer use a different bank account, preferably at a different bank.",
										"R40": "ACH reason: Return of item by government agency. Advise that the payer resubmit payment with updated account information or a new account.",
										"R41": "ACH reason: Invalid Transaction Code. Advise that the payer resubmit payment with updated account information or a new account.",
										"R42": "ACH reason: Routing / transit number check digit error. Advise that the payer resubmit payment with updated account information or a new account.",
										"R43": "ACH reason: Invalid account number. Advise that the payer resubmit payment with updated account information or a new account.",
										"R44": "ACH reason: Invalid individual ID. Advise that the payer use a different bank account, preferably at a different bank.",
										"R45": "ACH reason: Invalid individual or company name. Advise that the payer use a different bank account, preferably at a different bank.",
										"R46": "ACH reason: Invalid payee indicator code. Advise that the payer use a different bank account, preferably at a different bank.",
										"R47": "ACH reason: Duplicate enrollment. Advise that the payer resubmit payment with updated account information or a new account.",
										"R50": "ACH reason: State law affecting RCK acceptance. Advise that the payer resubmit payment with updated account information or a new account.",
										"R51": "ACH reason: Item is ineligible, notice not provided, signature not genuine, or original item altered for adjustment entry. Advise that the payer use a different bank account, preferably at a different bank.",
										"R52": "ACH reason: Stop payment on item. Advise that the payer use a different bank account, preferably at a different bank.",
										"R53": "ACH reason: Item and ACH entry presented for payment. Advise that the payer use a different bank account, preferably at a different bank.",
										"R61": "ACH reason: Misrouted return - RDFI has placed incorrect routing/transit # in RDFI id field. Advise that the payer use a different bank account, preferably at a different bank.",
										"R67": "ACH reason: Duplicate return. Advise that the payer use a different bank account, preferably at a different bank.",
										"R68": "ACH reason: Untimely return - the return was not sent within the established timeframe. Advise that the payer use a different bank account, preferably at a different bank.",
										"R69": "ACH reason: Field errors. Advise that the payer use a different bank account, preferably at a different bank.",
										"R70": "ACH reason: Permissible return entry not accepted. Advise that the payer resubmit payment with updated account information or a new account.",
										"R71": "ACH reason: Misrouted dishonored return - incorrect routing/transit # in RDFI id field. Advise that the payer resubmit payment with updated account information or a new account.",
										"R72": "ACH reason: Untimely return - dishonored return was not sent within the established timeframe. Advise that the payer resubmit payment with updated account information or a new account.",
										"R73": "ACH reason: Timely original return - RDFI certifies the original return entry was sent within established timeframe for original returns. Advise that the payer resubmit payment with updated account information or a new account.",
										"R74": "ACH reason: Corrected return - RDFI is correcting a previous return entry that was dishonored because it contained incomplete or incorrect information. Advise that the payer resubmit payment with updated account information or a new account.",
										"R75": "ACH reason: Original return not a duplicate. Advise that the payer resubmit payment with updated account information or a new account.",
										"R76": "ACH reason: No errors found. Advise that the payer resubmit payment with updated account information or a new account.",
										"R80": "ACH reason: Cross-border payment coding error. Advise that the payer resubmit payment with updated account information or a new account.",
										"R81": "ACH reason: Non-participant in cross-border program. Advise that the payer resubmit payment with updated account information or a new account.",
										"R82": "ACH reason: Invalid foreign RDFI identification. Advise that the payer resubmit payment with updated account information or a new account.",
										"R83": "ACH reason: Foreign RDFI unable to settle. Advise that the payer resubmit payment with updated account information or a new account.",
										"R84": "ACH reason: Cross-border entry not processed by originating gateway operator. Advise that the payer resubmit payment with updated account information or a new account.",
										"R94": "ACH reason: Administrative return item was processed and resubmitted as a photocopy. Advise that the payer use a different bank account, preferably at a different bank.",
										"R95": "ACH reason: Administrative return item was processed and resubmitted as a MICR-Split. Advise that the payer use a different bank account, preferably at a different bank.",
										"R97": "ACH reason: Administrative return item was processed and resubmitted with corrected dollar amount. Advise that the payer use a different bank account, preferably at a different bank.",
										"R98": "ACH reason: Indicates a return PAC (pre-authorized check); RDFI provides a text reason and indicated a new account number on the PAC itself. Advise that the payer use a different bank account, preferably at a different bank.",
										"R99": "ACH reason: Indicates a return PAC (pre-authorized check); RDFI provides a text reason on the PAC itself for which there is no equivalent return reason code. Advise that the payer use a different bank account, preferably at a different bank.",
										"request_expired": "The payment request has expired. Please refer to Payments documentation for details on when payment request expires. Verify whether the payment was supposed to go through with the merchant and payer. If the payment was supposed to be captured, re-try the payment and be sure to capture it within the 7 day timeframe.",
										"risk_review": "The payment could not be captured as it failed risk review. No action recommended. Let the merchant know that the payer will need to find an alternate method of payment.",
										"unknown": "The payment could not be captured for unknown reasons. Reach out to WePay Support for assistance.",
										"other": "The payment could have been rejected for a variety of reasons. Please contact support."
									},
									"type": "string"
								},
								"detail_message": {
									"type": "string"
								}
							},
							"type": "object",
							"nullable": true
						},
						"type": "array",
						"nullable": true
					},
					"reason_code": {
						"enum": [
							"NOT_CAPTURED",
							"ECHECK_FRAUD",
							"BANK_NOT_CONFIRMED",
							"BANK_SYSTEM_ERROR",
							"PAYMENT_EXPIRED",
							"REVIEW",
							"UNKNOWN"
						],
						"x-enumDescriptions": {
							"NOT_CAPTURED": "Failed to capture the payment. See the `detail_code` for further information.",
							"ECHECK_FRAUD": "Failed to process an ACH payment due to reported fraudulent activity on the bank account. See the `detail_code` for further information.",
							"BANK_NOT_CONFIRMED": "Failed to process an ACH payment due to incorrect bank account information. See the `detail_code` for further information.",
							"BANK_SYSTEM_ERROR": "Failed to process an ACH payment due to an error. See the `detail_code` for additional information.",
							"PAYMENT_EXPIRED": "Payments generally need to be captured within 7 days from the authorization, otherwise the auth will expire and this error will return. See `detail_code` for further information.",
							"REVIEW": "WePay's review of a payment resulted in a decline from WePay's end. No action recommended. Let the merchant know that the payer will need to find an alternate method of payment.",
							"UNKNOWN": "Failed to capture the payment due to unknown reasons. Reach out to WePay Support for assistance."
						},
						"type": "string"
					},
					"reason_message": {
						"type": "string"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "payments_failure_reason_response"
			},
			"shared_order_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The resource ID of the order generated when your app created it on a [POST /orders](/api/#/http/api-endpoints/risk/create-an-order) request.",
						"example": "b14095f1-1333-4b9a-9d54-84f3c04b6edb"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-orders"
					}
				},
				"required": [
					"id",
					"resource",
					"path"
				],
				"type": "object",
				"nullable": true,
				"x-label": "shared_order_response",
				"description": "The resource ID and path for the Order that your app created and associated with the payment."
			},
			"txnr_app_fee": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_app_fee",
				"description": "Fetch this transaction record to account for the portion of this transaction which impact your application balance."
			},
			"txnr_merchant": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_merchant",
				"description": "Fetch this transaction record to account for the merchant's portion of this transaction."
			},
			"resource-payouts": {
				"enum": [
					"payouts"
				],
				"x-enumDescriptions": {
					"payouts": ""
				},
				"type": "string",
				"x-label": "resource-payouts",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"payouts_failure_reason_response": {
				"additionalProperties": false,
				"properties": {
					"details": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"detail_code": {
									"enum": [
										"suspected_payer_fraud",
										"suspected_merchant_fraud",
										"account_compromised",
										"unable_to_verify_controlling_owner",
										"unable_to_verify_payer",
										"unable_to_verify_owner_payer",
										"against_tos",
										"account_cannot_go_negative",
										"high_risk_account",
										"name_mismatch",
										"admin_kyc_mismatch",
										"other",
										"unknown"
									],
									"x-enumDescriptions": {
										"suspected_payer_fraud": "**Do not provide this information to end-users.** The payout failed due to potential fraud from a payer on the account.",
										"suspected_merchant_fraud": "**Do not provide this information to end-users.** The payout failed due to potential fraud from the merchant.",
										"account_compromised": "The payout failed due to unauthorized user(s) accessing the merchant's account.",
										"unable_to_verify_controlling_owner": "WePay needs additional information about the legal entity's controller before allowing payouts to process. Find more information on the legal entity verifications resource.",
										"unable_to_verify_payer": "",
										"unable_to_verify_owner_payer": "",
										"against_tos": "",
										"account_cannot_go_negative": "",
										"high_risk_account": "",
										"name_mismatch": "",
										"admin_kyc_mismatch": "",
										"other": "",
										"unknown": ""
									},
									"type": "string"
								},
								"detail_message": {
									"type": "string"
								}
							},
							"type": "object",
							"nullable": true
						},
						"type": "array",
						"nullable": true
					},
					"reason_code": {
						"enum": [
							"SUSPECTED_FRAUD",
							"VERIFICATION",
							"OTHER",
							"UNKNOWN"
						],
						"type": "string",
						"x-enumDescriptions": {
							"SUSPECTED_FRAUD": "**Do not provide this information to end-users.** The payout failed due to potential fraud.",
							"VERIFICATION": "WePay needs additional information before allowing payouts to process.",
							"OTHER": "",
							"UNKNOWN": ""
						}
					},
					"reason_message": {
						"type": "string"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "payouts_failure_reason_response"
			},
			"shared_payout_method_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "ID of the payout method where the payout was sent i.e. bank account."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payout_methods"
					}
				},
				"required": [
					"id",
					"resource",
					"path"
				],
				"type": "object",
				"x-label": "shared_payout_method_response",
				"description": "Payout method associated with payouts."
			},
			"txnr_failure": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_failure",
				"description": "When a non-payment resource (i.e. recoveries or payouts) fails to process, fetch this transaction record in order to maintain accurate accounting of the merchant's balance."
			},
			"txnr_payout": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_payout",
				"description": "When a payout has occurred, fetch this transaction record to account for the debit from the merchant."
			},
			"payout_methods_owner_response": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The legal entity ID associated with the Merchant account."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-legal_entities"
					}
				},
				"required": [
					"resource",
					"id",
					"path"
				],
				"type": "object",
				"x-label": "payout_methods_owner_response",
				"description": "Details the owner resource and owner path."
			},
			"rbit_id": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"x-label": "rbit_id",
				"description": "ID of the rbit, generated by WePay when the rbit is created."
			},
			"resource-rbits": {
				"enum": [
					"rbits"
				],
				"x-enumDescriptions": {
					"rbits": ""
				},
				"type": "string",
				"x-label": "resource-rbits",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"recoveries_failure_reason_response": {
				"additionalProperties": false,
				"properties": {
					"details": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"detail_code": {
									"enum": [
										"insufficient_funds",
										"unknown"
									],
									"x-enumDescriptions": {
										"insufficient_funds": "The recovery failed; the bank rejected the attempt due to insufficient funds in the bank account.",
										"unknown": "The recovery attempt failed due to unknown reasons. Reach out to WePay for further information."
									},
									"type": "string"
								},
								"detail_message": {
									"type": "string"
								}
							},
							"type": "object",
							"nullable": true
						},
						"type": "array",
						"nullable": true
					},
					"reason_code": {
						"enum": [
							"BANK_REJECT",
							"UNKNOWN"
						],
						"x-enumDescriptions": {
							"BANK_REJECT": "The issuing bank denied WePay's attempt to debit the bank account.",
							"UNKNOWN": "The recovery attempt failed for an unknown reason."
						},
						"type": "string"
					},
					"reason_message": {
						"type": "string"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "recoveries_failure_reason_response"
			},
			"resource-recoveries": {
				"enum": [
					"recoveries"
				],
				"x-enumDescriptions": {
					"recoveries": ""
				},
				"type": "string",
				"x-label": "resource-recoveries",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"txnr_recovery": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_recovery",
				"description": "When a recovery occurs, fetch this transaction record to account for the debit from the merchant's account balance."
			},
			"refunds_amounts": {
				"additionalProperties": false,
				"properties": {
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"fee_refund_amount": {
						"minimum": 0,
						"type": "integer",
						"description": "The amount of the refund coming from the fees."
					},
					"total_amount": {
						"minimum": 100,
						"type": "integer",
						"description": "The total amount for the refund including the fees."
					}
				},
				"required": [
					"total_amount",
					"currency",
					"fee_refund_amount"
				],
				"type": "object",
				"nullable": true,
				"x-label": "refunds_amounts",
				"description": "The amount of the refund when not performing a full refund."
			},
			"refunds_failure_reason_response": {
				"additionalProperties": false,
				"properties": {
					"details": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"detail_code": {
									"enum": [
										"risk_review",
										"unknown"
									],
									"x-enumDescriptions": {
										"risk_review": "The refund was failed by WePay. Please reach out for additional information.",
										"unknown": "The refund failed due to unknown reasons. Please reach out to WePay for further information."
									},
									"type": "string"
								},
								"detail_message": {
									"type": "string"
								}
							},
							"type": "object",
							"nullable": true
						},
						"type": "array",
						"nullable": true
					},
					"reason_code": {
						"enum": [
							"REVIEW",
							"UNKNOWN"
						],
						"x-enumDescriptions": {
							"REVIEW": "The refund was failed by WePay. Please reach out for additional information.",
							"UNKNOWN": "The refund failed due to unknown reasons. Please reach out to WePay for further information."
						},
						"type": "string"
					},
					"reason_message": {
						"type": "string"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "refunds_failure_reason_response"
			},
			"resource-refunds": {
				"enum": [
					"refunds"
				],
				"x-enumDescriptions": {
					"refunds": ""
				},
				"type": "string",
				"x-label": "resource-refunds",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"txnr_app_fee_refund": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_app_fee_refund",
				"description": "If a refund has occurred, fetch this transaction record to account for the portion of the refund debited from your platform account balance."
			},
			"txnr_merchant_refund": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "txnr_merchant_refund",
				"description": "If a refund has occurred, fetch this transaction record to account for the portion of the refund debited from the merchant."
			},
			"resource-reports": {
				"enum": [
					"reports"
				],
				"x-enumDescriptions": {
					"reports": ""
				},
				"type": "string",
				"x-label": "resource-reports",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"reports_adjustment": {
				"additionalProperties": false,
				"properties": {
					"adjustment_id": {
						"type": "string",
						"description": "ID of the adjustment, generated by WePay when the adjustment is created."
					},
					"amount": {
						"type": "integer",
						"description": "Amount of the adjustment."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"payout_id": {
						"type": "string",
						"description": "ID of the payout, generated by WePay when the payout is created."
					},
					"payout_method": {
						"$ref": "#/components/schemas/reports_payout_method"
					},
					"reference_id": {
						"type": "string",
						"description": "A custom reference ID for your platform to track the object. It can be any string."
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"refunded",
							"disputed",
							"failed",
							"canceled"
						],
						"x-enumDescriptions": {
							"pending": "WePay has started processing the transaction, but it is not yet available.",
							"completed": "WePay has finished processing this transaction.",
							"refunded": "The transaction has been processed and the amount has been refunded.",
							"disputed": "The amount was paid, but the transaction has since received a chargeback.",
							"failed": "WePay could not process the transaction.",
							"canceled": "This transaction was canceled."
						},
						"type": "string",
						"description": "Status of the adjustment. Possible values include: `pending`, `completed`, `refunded`, `disputed`,`failed`,`canceled`."
					}
				},
				"required": [
					"status",
					"adjustment_id",
					"amount",
					"currency",
					"payout_id",
					"payout_method",
					"reference_id"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_adjustment",
				"description": "Contains details relevant to the adjustment."
			},
			"reports_chargeback_reversal": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "The amount under dispute. If the dispute amount differs from the transaction amount, there is either [a partial dispute or an exchange rate fluctuation](/payments-101/disputes-deep-dive/#differing-dispute-and-transaction-amounts)."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"dispute_id": {
						"type": "string",
						"description": "ID of the dispute, generated by WePay when the dispute is created."
					},
					"fee_amount": {
						"type": "integer",
						"description": "The chargeback fee deducted from merchant account."
					},
					"payout_id": {
						"type": "string",
						"description": "ID of the payout, generated by WePay when the payout is created."
					},
					"payout_method": {
						"$ref": "#/components/schemas/reports_payout_method"
					},
					"reference_id": {
						"type": "string",
						"description": "A custom reference ID for your platform to track the object. It can be any string."
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"refunded",
							"disputed",
							"failed",
							"canceled"
						],
						"x-enumDescriptions": {
							"pending": "WePay has started processing the transaction, but it is not yet available.",
							"completed": "WePay has finished processing this transaction.",
							"refunded": "The transaction has been processed and the amount has been refunded.",
							"disputed": "The amount was paid, but the transaction has since received a chargeback.",
							"failed": "WePay could not process the transaction.",
							"canceled": "This transaction was canceled."
						},
						"type": "string",
						"description": "The status of the chargeback reversal."
					}
				},
				"required": [
					"status",
					"dispute_id",
					"amount",
					"fee_amount",
					"currency",
					"payout_id",
					"payout_method",
					"reference_id"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_chargeback_reversal",
				"description": "Contains details relevant to the chargeback reversal."
			},
			"reports_dispute": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "The amount under dispute. If the dispute amount differs from the transaction amount, there is either [a partial dispute or an exchange rate fluctuation](/payments-101/disputes-deep-dive/#differing-dispute-and-transaction-amounts)."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"dispute_id": {
						"type": "string",
						"description": "ID of the dispute, generated by WePay when the dispute is created."
					},
					"fee_amount": {
						"type": "integer",
						"description": "The dispute fee deducted from merchant account."
					},
					"payment_id": {
						"type": "string",
						"description": "ID of the payment, generated by WePay when the payment is created."
					},
					"payment_method": {
						"$ref": "#/components/schemas/reports_payment_method"
					},
					"payout_id": {
						"type": "string",
						"description": "ID of the payout, generated by WePay when the payout is created."
					},
					"payout_method": {
						"$ref": "#/components/schemas/reports_payout_method"
					},
					"reference_id": {
						"type": "string",
						"description": "A custom reference ID for your platform to track the object. It can be any string."
					},
					"status": {
						"enum": [
							"awaiting_merchant_response",
							"pending_wepay_review",
							"awaiting_chargeback_decision",
							"resolved",
							"awaiting_chargeback_decision_with_credit",
							"awaiting_chargeback_decision_without_credit"
						],
						"type": "string",
						"description": "Status of the dispute. Possible values include: `awaiting_payee_response`, `awaiting_chargeback_decision`, `pending_wepay_review`, `resolved`,`awaiting_chargeback_decision_with_credit`,'awaiting_chargeback_decision_without_credit'.",
						"x-enumDescriptions": {
							"awaiting_merchant_response": "The merchant has not provided any response to the dispute. If the merchant want to attempt to recoup these funds, they must upload documentation supporting the charge.",
							"pending_wepay_review": "WePay is reviewing the dispute and any documentation submitted by the merchant. Once WePay's review is complete, the status will be updated.",
							"awaiting_chargeback_decision": "The card issuer is reviewing the dispute and all related evidence and documentation. Once the card issuer's review is complete, the status will be updated.",
							"resolved": "The dispute has been resolved. Find more information in the resolution JSON block.",
							"awaiting_chargeback_decision_with_credit": "The card issuer is reviewing the dispute and all related evidence and documentation. Until a final decision is made, the merchant has a credit for the amount of the dispute and fees. Note that if the dispute is ultimately resolved in favor of the payer, this credit will be reversed and debited from the merchant.",
							"awaiting_chargeback_decision_without_credit": "The card issuer is reviewing the dispute and all related evidence and documentation. The merchant will not receive a credit for the dispute while this process takes place. If the dispute is resolved in favor of the merchant, then the merchant will receive the funds back."
						}
					}
				},
				"required": [
					"status",
					"dispute_id",
					"payment_id",
					"amount",
					"fee_amount",
					"currency",
					"payout_id",
					"payment_method",
					"payout_method",
					"reference_id"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_dispute",
				"description": "Contains details relevant to the dispute."
			},
			"reports_payment": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "Amount in the lowest denomination."
					},
					"app_fee_amount": {
						"type": "integer",
						"description": "The application fee amount for the payment."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"net_amount": {
						"type": "integer",
						"description": "The net amount for the payment."
					},
					"payment_id": {
						"type": "string",
						"description": "ID of the payment, generated by WePay when the payment is created."
					},
					"payment_method": {
						"$ref": "#/components/schemas/reports_payment_method"
					},
					"payout_id": {
						"type": "string",
						"description": "ID of the payout, generated by WePay when the payout is created."
					},
					"payout_method": {
						"$ref": "#/components/schemas/reports_payout_method"
					},
					"processing_fee_amount": {
						"type": "integer",
						"description": "The processing fee amount for the payment."
					},
					"reference_id": {
						"type": "string",
						"description": "A custom reference ID for your platform to track the object. It can be any string."
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"failed",
							"canceled"
						],
						"x-enumDescriptions": {
							"pending": "This payment is processing, but is not yet included in the account's available or reserve balance. Find more information in the `pending_reasons` structure.",
							"completed": "This payment has finished processing, and is now available in either the account's available or reserved balance. **Note:** A payment can have a completed status and simultaneously have a refund or dispute issued against it.",
							"failed": "This payment has failed to process, and cannot be made available to the merchant. Find more information in the `failure_reason` structure.",
							"canceled": "This payment was canceled. If the cancellation was inadvertent, a new payment will need to be created."
						},
						"type": "string",
						"description": "Status of the payment. Possible values include: `canceled` `completed`, `failed`, `pending`."
					}
				},
				"required": [
					"status",
					"payment_id",
					"currency",
					"amount",
					"processing_fee_amount",
					"app_fee_amount",
					"net_amount",
					"payout_id",
					"payment_method",
					"payout_method",
					"reference_id"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_payment",
				"description": "Contains details relevant to the payment."
			},
			"reports_payout": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "Amount in cents."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"payout_id": {
						"type": "string",
						"description": "ID of the payout, generated by WePay when the payout is created."
					},
					"payout_method": {
						"$ref": "#/components/schemas/reports_payout_method"
					},
					"reference_id": {
						"type": "string",
						"description": "A custom reference ID for your platform to track the object. It can be any string."
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"failed"
						],
						"x-enumDescriptions": {
							"pending": "WePay is currently processing this payout. See the `pending_reasons` structure for additional information.",
							"completed": "WePay has finished processing this payout. **Note:** Other bank institutions must also process payouts to bank accounts before the merchant will see the deposit in their account.",
							"failed": "WePay failed to process this payout. See the `failure_reason` structure for additional information."
						},
						"type": "string"
					}
				},
				"required": [
					"status",
					"payout_id",
					"amount",
					"currency",
					"payout_method",
					"reference_id"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_payout",
				"description": "Contains details relevant to the payout."
			},
			"reports_payout_return": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "Amount in cents."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"payout_id": {
						"type": "string",
						"description": "ID of the payout, generated by WePay when the payout is created."
					},
					"payout_method": {
						"$ref": "#/components/schemas/reports_payout_method"
					},
					"reference_id": {
						"type": "string",
						"description": "A custom reference ID for your platform to track the object. It can be any string."
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"refunded",
							"disputed",
							"failed",
							"canceled"
						],
						"x-enumDescriptions": {
							"pending": "WePay has started processing the transaction, but it is not yet available.",
							"completed": "WePay has finished processing this transaction.",
							"refunded": "The transaction has been processed and the amount has been refunded.",
							"disputed": "The amount was paid, but the transaction has since received a chargeback.",
							"failed": "WePay could not process the transaction.",
							"canceled": "This transaction was canceled."
						},
						"type": "string",
						"description": "The status of the payout return."
					}
				},
				"required": [
					"status",
					"payout_id",
					"amount",
					"currency",
					"payout_method",
					"reference_id"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_payout_return",
				"description": "Contains details relevant to the payout return."
			},
			"reports_recovery": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "Amount of the recovery."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"payout_id": {
						"type": "string",
						"description": "ID of the payout, generated by WePay when the payout is created."
					},
					"payout_method": {
						"$ref": "#/components/schemas/reports_payout_method"
					},
					"recovery_id": {
						"type": "string",
						"description": "ID of the recovery, generated by WePay when the recovery is created."
					},
					"reference_id": {
						"type": "string",
						"description": "A custom reference ID for your platform to track the object. It can be any string."
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"failed"
						],
						"x-enumDescriptions": {
							"pending": "WePay has started processing the recovery, but it is not yet available. Find more details in the `pending_reasons` structure.",
							"completed": "WePay has processed the recovery. Note that a recovery's status can change from `completed` to `failed` if the issuing bank rejects the debit.",
							"failed": "WePay could not process the recovery. Find more information in the `failure_reason` structure."
						},
						"type": "string",
						"description": "Status of the recovery. Possible values include: `completed`, `failed`, `pending`."
					}
				},
				"required": [
					"status",
					"recovery_id",
					"amount",
					"currency",
					"payout_id",
					"payout_method",
					"reference_id"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_recovery",
				"description": "Contains details relevant to the recovery."
			},
			"reports_refund": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "The total amount for the refund including the fees."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"fee_refund_amount": {
						"type": "integer",
						"description": "The amount of the refund coming from the fees."
					},
					"payment_id": {
						"type": "string",
						"description": "ID of the payment, generated by WePay when the payment is created."
					},
					"payment_method": {
						"$ref": "#/components/schemas/reports_payment_method"
					},
					"payout_id": {
						"type": "string",
						"description": "ID of the payout, generated by WePay when the payout is created."
					},
					"payout_method": {
						"$ref": "#/components/schemas/reports_payout_method"
					},
					"reference_id": {
						"type": "string",
						"description": "A custom reference ID for your platform to track the object. It can be any string."
					},
					"refund_id": {
						"type": "string",
						"description": "ID of the refund, generated by WePay when the refund is created."
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"failed"
						],
						"x-enumDescriptions": {
							"pending": "",
							"completed": "",
							"failed": ""
						},
						"type": "string",
						"description": "Status of the refund. Possible values include: `pending`, `completed`, `failed`."
					}
				},
				"required": [
					"status",
					"refund_id",
					"payment_id",
					"amount",
					"fee_refund_amount",
					"currency",
					"payout_id",
					"payment_method",
					"payout_method",
					"reference_id"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_refund",
				"description": "Contains details relevant to the refund issued."
			},
			"path-nullable": {
				"type": "string",
				"nullable": true,
				"x-label": "path-nullable",
				"description": "The HTTP path of the resource. The path can be used to retrieve details about the resource and perform actions on it."
			},
			"resource-session_tokens": {
				"enum": [
					"session_tokens"
				],
				"x-enumDescriptions": {
					"session_tokens": ""
				},
				"type": "string",
				"x-label": "resource-session_tokens",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"resource-terminals": {
				"enum": [
					"terminals"
				],
				"x-enumDescriptions": {
					"terminals": ""
				},
				"type": "string",
				"x-label": "resource-terminals",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"accounts_amex_request": {
				"additionalProperties": false,
				"properties": {
					"countries": {
						"$ref": "#/components/schemas/accounts_amex_countries_request"
					}
				},
				"type": "object",
				"x-label": "accounts_amex_request",
				"description": "American Express payment processing options."
			},
			"v3.0.rc.1.1-account-resp": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"balances": {
						"additionalProperties": false,
						"properties": {
							"currencies": {
								"additionalProperties": true,
								"properties": {
									"CAD": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									},
									"GBP": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									},
									"USD": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									}
								},
								"type": "object",
								"description": "Payout currency details."
							}
						},
						"type": "object",
						"description": "Displays balances pertaining to the merchant account."
					},
					"beneficiary": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 65535,
						"type": "string",
						"nullable": true,
						"description": "Short description of the merchant account."
					},
					"documents": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"create_time": {
									"$ref": "#/components/schemas/create_time"
								},
								"id": {
									"$ref": "#/components/schemas/id"
								},
								"owner": {
									"$ref": "#/components/schemas/shared_owner_response"
								},
								"path": {
									"type": "string",
									"nullable": true
								},
								"reject_reason": {
									"type": "string",
									"nullable": true
								},
								"resource": {
									"enum": [
										"documents"
									],
									"x-enumDescriptions": {
										"documents": ""
									},
									"type": "string"
								},
								"status": {
									"type": "string",
									"nullable": true
								},
								"type": {
									"enum": [
										"fee_disclosure",
										"invoice",
										"tracking",
										"drivers_license",
										"passport",
										"evidence_of_corporate_registration",
										"evidence_of_authority",
										"current_bank_statement",
										"evidence_of_nonprofit_registration",
										"social_security_card",
										"current_utility_bill",
										"other_government_issued_photo_id",
										"current_lease_contract",
										"birth_certificate",
										"not_applicable",
										"certificate_of_citizenship",
										"permanent_resident_card",
										"employment_authorization_card",
										"benefits_card",
										"social_insurance_number_card",
										"miscellaneous_compliance_doc",
										"business_report",
										"negative_media_searches",
										"person_report",
										"mortgage_statement",
										"certified_copy_of_court_order",
										"current_local_tax_bill",
										"certificate_of_naturalization"
									],
									"x-enumDescriptions": {
										"fee_disclosure": "Indicates that the document uploaded and associated with this account is the fee disclosure presented to the merchant.",
										"invoice": "Indicates that the document uploaded and associated with this account is an invoice presented to the merchant.",
										"tracking": "Indicates that the document uploaded and associated with this account is for general tracking purposes",
										"drivers_license": "Indicates that the document uploaded and associated with this account is the driver's license presented by the merchant.",
										"passport": "Indicates that the document uploaded and associated with this account is the passport presented by the merchant.",
										"evidence_of_corporate_registration": "Indicates that the document uploaded and associated with this account is the evidence of corporate registration presented by the merchant.",
										"evidence_of_authority": "Indicates that the document uploaded and associated with this account is the evidence of authority presented by the merchant.",
										"current_bank_statement": "Indicates that the document uploaded and associated with this account is the current bank statement presented by the merchant.",
										"evidence_of_nonprofit_registration": "Indicates that the document uploaded and associated with this account is the evidence of non profit registration presented by the merchant.",
										"social_security_card": "Indicates that the document uploaded and associated with this account is the social security card presented by the merchant.",
										"current_utility_bill": "Indicates that the document uploaded and associated with this account is the current utility bill presented by the merchant.",
										"other_government_issued_photo_id": "Indicates that the document uploaded and associated with this account is other government issued photo id presented by the merchant.",
										"current_lease_contract": "Indicates that the document uploaded and associated with this account is the current lease contract presented by the merchant.",
										"birth_certificate": "Indicates that the document uploaded and associated with this account is the birth certificate presented by the merchant.",
										"not_applicable": "Indicates that the document uploaded and associated with this account is not applicable.",
										"certificate_of_citizenship": "Indicates that the document uploaded and associated with this account is the certificate of citizenship presented by the merchant.",
										"permanent_resident_card": "Indicates that the document uploaded and associated with this account is the permanent resident card presented by the merchant.",
										"employment_authorization_card": "Indicates that the document uploaded and associated with this account is the employment authorization card presented by the merchant.",
										"benefits_card": "Indicates that the document uploaded and associated with this account is the benefits card presented by the merchant.",
										"social_insurance_number_card": "Indicates that the document uploaded and associated with this account is the social insurance number card presented by the merchant.",
										"miscellaneous_compliance_doc": "Indicates that the document uploaded and associated with this account is the miscellaneous compliance document presented by the merchant.",
										"business_report": "Indicates that the document uploaded and associated with this account is the business report presented by the merchant.",
										"negative_media_searches": "Indicates that the document uploaded and associated with this account is the negative media searches presented by the merchant.",
										"person_report": "Indicates that the document uploaded and associated with this account is the person report presented by the merchant.",
										"mortgage_statement": "Indicates that the document uploaded and associated with this account is the mortgage statement presented by the merchant.",
										"certified_copy_of_court_order": "Indicates that the document uploaded and associated with this account is the certified copy of the court order presented by the merchant.",
										"current_local_tax_bill": "Indicates that the document uploaded and associated with this account is the current local tax bill presented by the merchant.",
										"certificate_of_naturalization": "Indicates that the document uploaded and associated with this account is the certificate of naturalization presented by the merchant."
									},
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"resource",
								"id",
								"path",
								"owner",
								"create_time",
								"type",
								"status",
								"reject_reason"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An array of documents attached to this merchant to verify fee disclosure."
					},
					"id": {
						"$ref": "#/components/schemas/accounts_id"
					},
					"incoming_payments": {
						"$ref": "#/components/schemas/accounts_incoming_payments_response"
					},
					"industry": {
						"additionalProperties": false,
						"properties": {
							"category_detail": {
								"maxLength": 1024,
								"type": "string",
								"nullable": true,
								"description": "Details about the merchant's industry category."
							},
							"merchant_category_code": {
								"pattern": "^\\d{4}$",
								"type": "string",
								"description": "Category code associated with the merchant's industry.",
								"nullable": true
							}
						},
						"type": "object",
						"description": "Categorizes the type of service or item a merchant is providing."
					},
					"name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*\\w+.*$",
						"type": "string",
						"nullable": true,
						"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payout": {
						"$ref": "#/components/schemas/v3.0.rc.1.1-accounts_payout_response"
					},
					"platform_onboarding_time": {
						"type": "integer",
						"minimum": 0,
						"format": "int64",
						"nullable": true,
						"description": "The Unix epoch time (in seconds) when the account finished onboarding to the platform."
					},
					"pricing": {
						"$ref": "#/components/schemas/pricing-resp"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					},
					"statement_description": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"pattern": "^((?![Ww][Ee][Pp][Aa][Yy])[ -~ùûüÿàâæçéèêëïîôœÙÛÜŸÀÂÆÇÉÈÊËÏÎÔŒ«»‘“”—–€])*$",
						"description": "A non-empty, ASCII-printable string that does **not** contain the word WePay. This will appear on payers' credit card statements. **Note:** The API allows up to 255 characters, but card issuers will only print 12-14 characters on statements. Find more information [here](/clear/onboard-merchants/)."
					},
					"accepted_method_of_payments": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"countries": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_countries"
							}
						},
						"type": "object",
						"description": "Provide the merchant's identifiers with different card brands they accept as methods of payment."
					},
					"convenience_fee_amount": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"type": "integer",
						"nullable": true,
						"minimum": 0,
						"maximum": 9999999,
						"description": "Describe the [convenience fees](/clear/certify/card-network-rules/#convenience-fees) for [Merchant IC+](/pricing/merchant-interchange-plus/) accounts in cents."
					},
					"enhanced_review": {
						"type": "string",
						"nullable": true,
						"description": "Indicates if the account is under enhanced review by WePay."
					},
					"onboarding_location": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"city": {
								"maxLength": 30,
								"type": "string",
								"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							},
							"country": {
								"$ref": "#/components/schemas/country_code"
							},
							"line1": {
								"maxLength": 60,
								"type": "string",
								"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							},
							"postal_code": {
								"maxLength": 14,
								"type": "string",
								"description": "Postal code associated with the address."
							},
							"region": {
								"maxLength": 30,
								"type": "string",
								"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
							},
							"line2": {
								"maxLength": 60,
								"type": "string",
								"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							}
						},
						"required": [
							"line1",
							"city",
							"postal_code",
							"region",
							"country"
						],
						"type": "object",
						"nullable": true,
						"x-isAddress": true,
						"description": "Address of the legal entity, controller, or additional representatives. When representing the entity's address, send the entity's address of operation. When representing the controller or additional representative send the individual's residential address."
					},
					"projected_monthly_transaction_volume": {
						"type": "integer",
						"nullable": true,
						"description": "The projected monthly transaction volume, TPV, of an account."
					},
					"referral_details": {
						"type": "object",
						"description": "Information regarding the referring representative",
						"properties": {
							"email": {
								"$ref": "#/components/schemas/email"
							},
							"name": {
								"additionalProperties": false,
								"properties": {
									"first": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "First name."
									},
									"last": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "Last name."
									}
								},
								"required": [
									"first",
									"last"
								],
								"type": "object"
							},
							"standard_id": {
								"$ref": "#/components/schemas/standard_id"
							},
							"coupon_code": {
								"$ref": "#/components/schemas/coupon_code"
							}
						},
						"required": [
							"name",
							"email",
							"standard_id"
						]
					},
					"referral_partner": {
						"maxLength": 75,
						"minLength": 1,
						"type": "string",
						"description": "The non ISV partner/solution that refers merchants for payment processing services"
					},
					"transaction_division_mid": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"type": "integer",
						"nullable": true,
						"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_division_mid-nullable/description"
					},
					"transaction_type": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"type": "string",
						"enum": [
							"internet",
							"retail"
						],
						"x-enumDescriptions": {
							"internet": "The merchant will process card-not-present web transactions.",
							"retail": "The merchant will process card-present transactions."
						},
						"nullable": true,
						"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_type/description"
					}
				},
				"required": [
					"api_version",
					"balances",
					"beneficiary",
					"create_time",
					"custom_data",
					"description",
					"documents",
					"id",
					"incoming_payments",
					"industry",
					"name",
					"owner",
					"path",
					"payout",
					"platform_onboarding_time",
					"pricing",
					"reference_id",
					"resource",
					"statement_description"
				],
				"type": "object",
				"x-label": "v3.0.rc.1.1-account-resp"
			},
			"adjustments": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "Amount of the adjustment."
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the adjustment was created."
					},
					"currency": {
						"type": "string",
						"description": "ISO 4217 currency code. Possible values include: `CAD`, `GBP`, `USD`."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"id": {
						"type": "string",
						"description": "ID of the adjustment, generated by WePay when the adjustment is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"reason": {
						"type": "object",
						"properties": {
							"details": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"detail_code": {
											"enum": [
												"balance_transfer",
												"billing_statement_fees",
												"other",
												"partial_chargeback_reversals",
												"chargeback_fee_reimbursements",
												"lien_or_levy",
												"escheatment",
												"correction_to_fee_schedules",
												"processing_fee_reimbursements",
												"revshare_disbursements",
												"inadvertent_refunds",
												"bank_overdraft_fee",
												"negative_account_balance_recovery",
												"negative_account_balance_to_zero",
												"system_issues",
												"miscellaneous"
											],
											"x-enumDescriptions": {
												"balance_transfer": "",
												"billing_statement_fees": "",
												"other": "",
												"partial_chargeback_reversals": "",
												"chargeback_fee_reimbursements": "",
												"lien_or_levy": "",
												"escheatment": "",
												"correction_to_fee_schedules": "",
												"processing_fee_reimbursements": "",
												"revshare_disbursements": "",
												"inadvertent_refunds": "",
												"bank_overdraft_fee": "",
												"negative_account_balance_recovery": "",
												"negative_account_balance_to_zero": "",
												"system_issues": "",
												"miscellaneous": ""
											},
											"type": "string",
											"description": "Adjustment detail code"
										},
										"detail_message": {
											"type": "string",
											"description": "Adjustment detail message for manual adjustment"
										}
									},
									"required": [
										"detail_code",
										"detail_message"
									],
									"additionalProperties": false
								},
								"nullable": true,
								"description": "More detail information."
							},
							"reason_code": {
								"enum": [
									"BALANCE_TRANSFER",
									"CHARGEBACK",
									"ESCHEATMENT",
									"FEES",
									"REIMBURSEMENTS_AND_CORRECTIONS",
									"MISCELLANEOUS"
								],
								"x-enumDescriptions": {
									"BALANCE_TRANSFER": "",
									"CHARGEBACK": "Indicates that the adjustment is a result of a Dispute.",
									"ESCHEATMENT": "Indicates that the adjustment is a result of an abandoned account, which required under law that funds be escheated to the merchant's state (if provided).",
									"FEES": "",
									"REIMBURSEMENTS_AND_CORRECTIONS": "Indicates that the adjustment is a result of funds owed the merchant due to miscalculations or other losses.",
									"MISCELLANEOUS": "Indicates that the adjustment is the result of some other reason not elsewhere described."
								},
								"type": "string",
								"description": "Adjustment reason category. Possible values include: `manual`, `escheatment`."
							},
							"reason_message": {
								"type": "string",
								"description": "An explanation of the reason code."
							}
						},
						"required": [
							"reason_code",
							"reason_message",
							"details"
						],
						"additionalProperties": false,
						"description": "Reasons for and details about the Adjustment."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-adjustments"
					},
					"txnr_adjustment": {
						"$ref": "#/components/schemas/txnr_adjustment"
					},
					"type": {
						"enum": [
							"credit",
							"debit"
						],
						"type": "string",
						"x-enumDescriptions": {
							"credit": "Indicates that the adjustment credited the given account with the given amount.",
							"debit": "Indicated that the adjustment debited the given account for the given amount."
						},
						"description": "Types of adjustments. Possible values include: `credit`, `debit`."
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					}
				},
				"required": [
					"txnr_adjustment",
					"resource",
					"custom_data",
					"reason",
					"currency",
					"amount",
					"create_time",
					"owner",
					"path",
					"type",
					"id"
				],
				"type": "object",
				"x-label": "adjustments"
			},
			"banking_applications-resp": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"dba_name": {
						"$ref": "#/components/schemas/dba_name"
					},
					"description": {
						"maxLength": 65535,
						"type": "string",
						"nullable": true,
						"description": "Description for an embedded banking application"
					},
					"id": {
						"$ref": "#/components/schemas/id"
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"resource": {
						"enum": [
							"banking_applications"
						],
						"x-enumDescriptions": {
							"banking_applications": ""
						},
						"type": "string",
						"description": "Helps organize information by identifying the resource type as `banking_application`."
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					}
				},
				"required": [
					"resource",
					"id",
					"path",
					"owner",
					"create_time",
					"api_version",
					"dba_name",
					"description"
				],
				"type": "object",
				"x-label": "banking_applications-resp"
			},
			"billing_statement": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"currency": {
						"$ref": "#/components/schemas/usd-currency"
					},
					"id": {
						"type": "string"
					},
					"month": {
						"maximum": 12,
						"minimum": 1,
						"type": "integer",
						"description": "Indicates the month for which the billing statement is calculated.",
						"example": 12
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"type": "string"
					},
					"resource": {
						"enum": [
							"billing_statements"
						],
						"x-enumDescriptions": {
							"billing_statements": ""
						},
						"type": "string",
						"description": "Helps organize information by identifying the resource type of the object data."
					},
					"total_fee_amount": {
						"type": "integer",
						"description": "The total amount in fees that the merchant owes to the platform. ",
						"example": 345
					},
					"year": {
						"minimum": 0,
						"type": "integer",
						"description": "Indicates the year in which the billing statement's month occurred.",
						"example": 2020
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"total_fee_amount",
					"currency",
					"month",
					"year",
					"api_version"
				],
				"type": "object",
				"nullable": true,
				"x-label": "billing_statement"
			},
			"billing_statements_id_fees_summary_response": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"currency": {
						"$ref": "#/components/schemas/usd-currency"
					},
					"fee_category": {
						"description": "Further breaks down the `fee_type` by providing insight into how different fee categories (e.g `VISA BUSINESS TIER 4 - STANDARD` vs. `VISA BUSINESS TIER 3 - STANDARD`) get billed.",
						"example": "VISA BUSINESS TIER 4 - STANDARD",
						"type": "string"
					},
					"fee_type": {
						"$ref": "#/components/schemas/fee_type"
					},
					"fixed_fee_amount": {
						"description": "The total amount of network and issuer fees for the transactions of the associated `fee_category`. This is a combination of the `variable_fee_bps` and the per-transaction price that networks and issuers charge.",
						"example": 320,
						"type": "integer",
						"nullable": true
					},
					"fixed_fee_markup_amount": {
						"description": "The amount of fixed markup which your platform set for this merchant. This number is represented in cents. This is applied to each item in the billing statement along with `variable_fee_markup_bps` to result in the `total_markup`.",
						"example": 20,
						"type": "integer",
						"nullable": true
					},
					"item_count": {
						"description": "Number of transactions in a billing statement for the given fee type and fee category.",
						"example": 1,
						"type": "integer",
						"nullable": true
					},
					"total_amount": {
						"description": "Total transaction amount in a billing statement for the given fee type and fee category. This includes the net received by the merchant and all fees.",
						"example": 100,
						"type": "integer",
						"nullable": true
					},
					"total_fees": {
						"description": "Total fee amount for the indicated `fee_type` and `fee_category`. The equation for this value is (`total_interchange_fee` + `total_markup`).",
						"example": 360,
						"type": "integer",
						"nullable": true
					},
					"total_interchange_fee": {
						"description": "This is the total fees charged by issuers and networks that the merchant owes for this billing statement. This value is derived from variable bps and fixed fee amount.",
						"example": 320,
						"type": "integer",
						"nullable": true
					},
					"total_markup": {
						"description": "This is the total fees charged by the platform for credit card transactions. This is calculated as (`item_count` * `fixed_fee_markup_amount`) + (`transaction_amount` * `variable_fee_markup_bps`).",
						"example": 40,
						"type": "integer",
						"nullable": true
					},
					"variable_fee_bps": {
						"description": "Basis points to calculate variable fee amount per transaction. Basis points translate directly to percent, so a value of `295` here will be calculated as 2.95% against the `amount` of each item in the billing statement. For credit card transactions, this parameter represents variable network and issuer fees. For ACH payments, this value will be the entire variable processing fee.",
						"example": 295,
						"type": "integer",
						"nullable": true
					},
					"variable_fee_markup_bps": {
						"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%. For credit card transactions, this parameter represents variable platform fees. For ACH payments, the value here will be `0`.",
						"example": 20,
						"type": "integer",
						"nullable": true
					},
					"month": {
						"description": "Returns when the value for `fee_type` is `ADJUSTMENT`, and indicates the month in which the adjustment occurred. This will typically be the same month as the billing statement.",
						"example": 5,
						"maximum": 12,
						"minimum": 1,
						"type": "integer"
					}
				},
				"required": [
					"fee_type",
					"fee_category",
					"currency",
					"total_amount",
					"item_count",
					"variable_fee_bps",
					"fixed_fee_amount",
					"variable_fee_markup_bps",
					"fixed_fee_markup_amount",
					"total_interchange_fee",
					"total_markup",
					"total_fees",
					"api_version"
				],
				"type": "object",
				"nullable": true,
				"x-label": "billing_statements_id_fees_summary_response",
				"description": "An array of fee information for the given `fee_type` and `fee_category`."
			},
			"billing_statements_id_transactions_summary_response": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"currency": {
						"$ref": "#/components/schemas/usd-currency"
					},
					"day": {
						"maximum": 31,
						"minimum": 1,
						"type": "integer",
						"description": "Defines the day of the month which the transactions summary array object is reporting on.",
						"example": 31
					},
					"item_count": {
						"minimum": 0,
						"type": "integer",
						"description": "The number of transactions the merchant processed on the transaction summary's given date (`month`, `day`, & `year`).",
						"example": 1
					},
					"month": {
						"maximum": 12,
						"minimum": 1,
						"type": "integer",
						"description": "Defines the month of the year which the transactions summary array object is reporting on.",
						"example": 7
					},
					"summaries": {
						"items": {
							"$ref": "#/components/schemas/billing_statements_summaries_response"
						},
						"type": "array",
						"description": "An array containing transaction information for the transactions summary's given date (`month`, `day`, & `year`) organized by `fee_type`.",
						"uniqueItems": true
					},
					"total_amount": {
						"type": "integer",
						"description": "This is the gross ((merchant's net settlement) + ( total fees)) amount the merchant processed on the transactions summary's given date (`month`, `day`, & `year`).",
						"example": 100
					},
					"year": {
						"minimum": 0,
						"type": "integer",
						"description": "Defines the year which the transactions summary array object is reporting on.",
						"example": 2020
					}
				},
				"required": [
					"day",
					"month",
					"year",
					"currency",
					"total_amount",
					"item_count",
					"summaries",
					"api_version"
				],
				"type": "object",
				"nullable": true,
				"x-label": "billing_statements_id_transactions_summary_response"
			},
			"disputes": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "The amount under dispute. If the dispute amount differs from the transaction amount, there is either [a partial dispute or an exchange rate fluctuation](/payments-101/disputes-deep-dive/#differing-dispute-and-transaction-amounts)."
					},
					"card_brand": {
						"enum": [
							"visa",
							"mastercard",
							"discover",
							"amex",
							"jcb",
							"diners"
						],
						"x-enumDescriptions": {
							"visa": "",
							"mastercard": "",
							"discover": "",
							"amex": "",
							"jcb": "",
							"diners": ""
						},
						"type": "string"
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"currency": {
						"type": "string",
						"description": "ISO 4217 currency code. Possible values include: `CAD`, `USD`."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"documentation": {
						"additionalProperties": false,
						"properties": {
							"documents": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"explanation": {
								"type": "string",
								"description": "A free-form textual description from the merchant."
							}
						},
						"type": "object",
						"description": "Documentation provided by your merchant to challenge the dispute."
					},
					"fee": {
						"type": "integer",
						"description": "Specifies whether an app fee will be collected and who should pay the app fee."
					},
					"id": {
						"type": "string",
						"description": "ID of the dispute, generated by WePay when the dispute is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"payment": {
						"$ref": "#/components/schemas/shared_payment_response"
					},
					"reason": {
						"$ref": "#/components/schemas/disputes_reason_response"
					},
					"resolution": {
						"additionalProperties": false,
						"properties": {
							"resolution_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "Time (in UNIX) when the dispute was resolved."
							},
							"type": {
								"enum": [
									"won",
									"lost",
									"pending",
									"expired"
								],
								"x-enumDescriptions": {
									"won": "Indicates that the dispute has been resolved in favor of the merchant (i.e. funds have been credited back to the merchant).",
									"lost": "Indicates that the dispute has been resolved in favor of the payer (i.e. the funds will not be returned to the merchant).",
									"pending": "Indicates that the dispute has not been resolved either way at this point.",
									"expired": "Indicates that the dispute has expired due to inaction."
								},
								"type": "string",
								"description": "Type of resolution. Possible values include: `won`: the dispute was resolved in favor of the merchant; `lost`: the dispute was resolved in favor of the payer; `pending`: the dispute has not been resolved yet; `expired`: The dispute has not been challenged or conceded, so it has expired."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "The ultimate resolution to the dispute."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-disputes"
					},
					"status": {
						"enum": [
							"awaiting_merchant_response",
							"pending_wepay_review",
							"awaiting_chargeback_decision",
							"resolved",
							"awaiting_chargeback_decision_with_credit",
							"awaiting_chargeback_decision_without_credit"
						],
						"type": "string",
						"description": "Status of the dispute. Possible values include: `awaiting_payee_response`, `awaiting_chargeback_decision`, `pending_wepay_review`, `resolved`,`awaiting_chargeback_decision_with_credit`,'awaiting_chargeback_decision_without_credit'.",
						"x-enumDescriptions": {
							"awaiting_merchant_response": "The merchant has not provided any response to the dispute. If the merchant want to attempt to recoup these funds, they must upload documentation supporting the charge.",
							"pending_wepay_review": "WePay is reviewing the dispute and any documentation submitted by the merchant. Once WePay's review is complete, the status will be updated.",
							"awaiting_chargeback_decision": "The card issuer is reviewing the dispute and all related evidence and documentation. Once the card issuer's review is complete, the status will be updated.",
							"resolved": "The dispute has been resolved. Find more information in the resolution JSON block.",
							"awaiting_chargeback_decision_with_credit": "The card issuer is reviewing the dispute and all related evidence and documentation. Until a final decision is made, the merchant has a credit for the amount of the dispute and fees. Note that if the dispute is ultimately resolved in favor of the payer, this credit will be reversed and debited from the merchant.",
							"awaiting_chargeback_decision_without_credit": "The card issuer is reviewing the dispute and all related evidence and documentation. The merchant will not receive a credit for the dispute while this process takes place. If the dispute is resolved in favor of the merchant, then the merchant will receive the funds back."
						}
					},
					"txnr_chargeback_app_fees": {
						"$ref": "#/components/schemas/txnr_chargeback_app_fees"
					},
					"txnr_chargeback_merchant": {
						"$ref": "#/components/schemas/txnr_chargeback_merchant"
					},
					"txnr_chargeback_reversal_app_fee": {
						"$ref": "#/components/schemas/txnr_chargeback_reversal_app_fee"
					},
					"txnr_chargeback_reversal_merchant": {
						"$ref": "#/components/schemas/txnr_chargeback_reversal_merchant"
					},
					"txnr_merchant_chargeback_fee": {
						"$ref": "#/components/schemas/txnr_merchant_chargeback_fee"
					},
					"type": {
						"enum": [
							"inquiry",
							"chargeback",
							"second_chargeback",
							"debit_adjustment"
						],
						"type": "string",
						"description": "Type of dispute. Possible values include: `chargeback`, `inquiry`, `debit_adjustment`.",
						"x-enumDescriptions": {
							"inquiry": "Some card brands like AmEx will issue an inquiry to get more information about a charge. If inquiries are not responded to, the inquiry will be closed and a dispute will be created.",
							"chargeback": "When a chargeback occurs, it means that the card holder or card issuer does not believe the payment should have been made. Merchants can challenge a dispute by uploading documentation.",
							"second_chargeback": "When a second chargeback occurs, it means that the merchant challenged the original dispute which was then resolved in favor of the merchant. Then, either the card holder or card issuer provides additional evidence regarding the dispute, so the same transaction is disputed again.",
							"debit_adjustment": "When a debit adjustment occurs, it means that there is a change that needs to be made against the original transaction, could either debit or credit the merchant."
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"status",
					"type",
					"amount",
					"fee",
					"currency",
					"payment",
					"card_brand",
					"reason",
					"resolution",
					"txnr_chargeback_merchant",
					"txnr_chargeback_reversal_merchant",
					"txnr_merchant_chargeback_fee",
					"txnr_chargeback_app_fees",
					"txnr_chargeback_reversal_app_fee",
					"documentation",
					"custom_data"
				],
				"type": "object",
				"x-label": "disputes"
			},
			"hardware_reports": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"description": "ID of the merchant account, generated by WePay when the account is created."
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"count_auths_captured": {
						"type": "integer",
						"description": "Numbers of authorizations that are captured at the terminal since the terminal has been onboarded."
					},
					"count_auths_declined": {
						"type": "integer",
						"description": "Numbers of authorizations that are declined at the terminal since the terminal has been onboarded."
					},
					"count_auths_pending": {
						"type": "integer",
						"description": "Numbers of authorizations that are pending at the terminal since the terminal has been onboarded."
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The timestamp (in UNIX seconds) for the creation of the terminal report record."
					},
					"id": {
						"type": "string",
						"description": "The terminal ID associated with the terminal information record."
					},
					"model": {
						"type": "string",
						"description": "The model of the physical terminal. **Note:** Models `ingenico_lane3000` and `xac_at170r` are currently only usable in the stage environment. If you are interested in using these models, please reach out to your integration team or account manager at WePay.",
						"enum": [
							"verifone_p400",
							"verifone_v400m",
							"ingenico_lane3000",
							"xac_at170r"
						],
						"x-enumDescriptions": {
							"verifone_p400": "This terminal is a [VeriFone P400](/card-present/procure-terminals/#verifone-p400).",
							"verifone_v400m": "This terminal is a [VeriFone V400m](/card-present/procure-terminals/#verifone-v400m).",
							"ingenico_lane3000": "This terminal is a an Ingenico Lane 3000. **Note:** This model is not generally available.",
							"xac_at170r": "This terminal is a an XAC AT170R, used in WePay's [Smart POS](/card-present/procure-smartpos/#xac-at170r) solution."
						}
					},
					"owner": {
						"$ref": "#/components/schemas/accounts_id_capabilities_owner_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-hardware_reports"
					},
					"serial_number": {
						"type": "string",
						"description": "The serial number of the physical terminal.",
						"minLength": 1,
						"maxLength": 32,
						"pattern": "^[a-zA-Z0-9-]+$",
						"example": "FA00332-1000138"
					},
					"status": {
						"$ref": "#/components/schemas/terminals_status"
					},
					"terminal_configuration": {
						"additionalProperties": false,
						"properties": {
							"address": {
								"$ref": "#/components/schemas/terminals_address_response"
							},
							"contactless_payments": {
								"type": "object",
								"description": "The response schema for contactless payments configuration.",
								"properties": {
									"credit_debit_preference": {
										"type": "string",
										"enum": [
											"credit",
											"debit"
										],
										"default": "credit",
										"x-enumDescriptions": {
											"credit": "If a card allows credit and debit transactions, automatically process the authorization as credit.",
											"debit": "If a card allows credit and debit transactions, automatically process the authorization as debit."
										},
										"description": "Determines how the terminal should prefer to charge contactless cards. `credit` is the EMV default, selecting the highest priority application in the card (which is the credit application). Debit preferred attempts to select debit network application on the card first."
									},
									"enabled": {
										"type": "boolean"
									}
								},
								"required": [
									"enabled",
									"credit_debit_preference"
								]
							},
							"credit_debit_preference": {
								"type": "string",
								"enum": [
									"credit",
									"debit",
									"prompt"
								],
								"default": "prompt",
								"description": "Determines how the terminal should prefer credit vs debit when a card is dipped. `credit` indicates credit is the preferred application selection, whereas `debit` would prefer the debit application. `prompt` will perform the EMV default behavior, which is to prompt if multiple applications exist.",
								"x-enumDescriptions": {
									"credit": "If a card allows credit and debit transactions, automatically process the authorization as credit.",
									"debit": "If a card allows credit and debit transactions, automatically process the authorization as debit.",
									"prompt": "If a card allows credit and debit transactions, prompt the user to make a selection on the terminal."
								}
							},
							"currency": {
								"$ref": "#/components/schemas/usd-currency"
							},
							"deferred_authorization": {
								"$ref": "#/components/schemas/terminals_deferred_authorization"
							},
							"maintenance_window": {
								"type": "object",
								"description": "Configuration settings for the maintenance window of the physical terminal. Omitting the maintenance window field will result in the use of default values for the field's start and duration.",
								"additionalProperties": false,
								"properties": {
									"duration": {
										"type": "integer",
										"description": "The duration of the maintenance window in hours.",
										"minimum": 1,
										"maximum": 24,
										"default": 4
									},
									"start": {
										"type": "integer",
										"description": "The hour of the day that the maintenance window begins.",
										"minimum": 0,
										"maximum": 23,
										"default": 2
									}
								},
								"required": [
									"start",
									"duration"
								]
							},
							"manual_entry_configuration": {
								"$ref": "#/components/schemas/terminals_manual_entry_configuration"
							},
							"name": {
								"type": "string",
								"description": "The human readable name used to help identify the physical terminal.",
								"example": "Front Desk",
								"maxLength": 255,
								"nullable": true
							},
							"quick_chip": {
								"$ref": "#/components/schemas/terminals_quick_chip"
							},
							"receipt_header_merchant_name": {
								"maxLength": 32,
								"minLength": 1,
								"type": "string",
								"nullable": true,
								"description": "Specify the merchant name to print on receipts. If left null, the account `name` will be used on receipts. **Note:** strings longer than 24 characters will wrap to two lines on receipts printed from Terminals with a built-in printer."
							},
							"signature_required": {
								"type": "boolean",
								"description": "Whether or not this terminal requires signature verification from payers."
							},
							"sim_card_id": {
								"type": "string",
								"example": "5aad45c2-d128-466a-aae3-d42fef57e2f7",
								"description": "The identifier of the SIM card installed in the terminal. Nullable if terminal does not have a SIM card.",
								"nullable": true,
								"minLength": 1
							},
							"supported_card_brands": {
								"$ref": "#/components/schemas/terminals-supported_card_brands"
							},
							"timezone": {
								"type": "string",
								"description": "Timezone of the terminal'",
								"enum": [
									"Africa/Abidjan",
									"Africa/Accra",
									"Africa/Addis_Ababa",
									"Africa/Algiers",
									"Africa/Asmara",
									"Africa/Asmera",
									"Africa/Bamako",
									"Africa/Bangui",
									"Africa/Banjul",
									"Africa/Bissau",
									"Africa/Blantyre",
									"Africa/Brazzaville",
									"Africa/Bujumbura",
									"Africa/Cairo",
									"Africa/Casablanca",
									"Africa/Ceuta",
									"Africa/Conakry",
									"Africa/Dakar",
									"Africa/Dar_es_Salaam",
									"Africa/Djibouti",
									"Africa/Douala",
									"Africa/El_Aaiun",
									"Africa/Freetown",
									"Africa/Gaborone",
									"Africa/Harare",
									"Africa/Johannesburg",
									"Africa/Juba",
									"Africa/Kampala",
									"Africa/Khartoum",
									"Africa/Kigali",
									"Africa/Kinshasa",
									"Africa/Lagos",
									"Africa/Libreville",
									"Africa/Lome",
									"Africa/Luanda",
									"Africa/Lubumbashi",
									"Africa/Lusaka",
									"Africa/Malabo",
									"Africa/Maputo",
									"Africa/Maseru",
									"Africa/Mbabane",
									"Africa/Mogadishu",
									"Africa/Monrovia",
									"Africa/Nairobi",
									"Africa/Ndjamena",
									"Africa/Niamey",
									"Africa/Nouakchott",
									"Africa/Ouagadougou",
									"Africa/Porto-Novo",
									"Africa/Sao_Tome",
									"Africa/Timbuktu",
									"Africa/Tripoli",
									"Africa/Tunis",
									"Africa/Windhoek",
									"America/Adak",
									"America/Anchorage",
									"America/Anguilla",
									"America/Antigua",
									"America/Araguaina",
									"America/Argentina/Buenos_Aires",
									"America/Argentina/Catamarca",
									"America/Argentina/ComodRivadavia",
									"America/Argentina/Cordoba",
									"America/Argentina/Jujuy",
									"America/Argentina/La_Rioja",
									"America/Argentina/Mendoza",
									"America/Argentina/Rio_Gallegos",
									"America/Argentina/Salta",
									"America/Argentina/San_Juan",
									"America/Argentina/San_Luis",
									"America/Argentina/Tucuman",
									"America/Argentina/Ushuaia",
									"America/Aruba",
									"America/Asuncion",
									"America/Atikokan",
									"America/Atka",
									"America/Bahia",
									"America/Bahia_Banderas",
									"America/Barbados",
									"America/Belem",
									"America/Belize",
									"America/Blanc-Sablon",
									"America/Boa_Vista",
									"America/Bogota",
									"America/Boise",
									"America/Buenos_Aires",
									"America/Cambridge_Bay",
									"America/Campo_Grande",
									"America/Cancun",
									"America/Caracas",
									"America/Catamarca",
									"America/Cayenne",
									"America/Cayman",
									"America/Chicago",
									"America/Chihuahua",
									"America/Coral_Harbour",
									"America/Cordoba",
									"America/Costa_Rica",
									"America/Creston",
									"America/Cuiaba",
									"America/Curacao",
									"America/Danmarkshavn",
									"America/Dawson",
									"America/Dawson_Creek",
									"America/Denver",
									"America/Detroit",
									"America/Dominica",
									"America/Edmonton",
									"America/Eirunepe",
									"America/El_Salvador",
									"America/Ensenada",
									"America/Fort_Nelson",
									"America/Fort_Wayne",
									"America/Fortaleza",
									"America/Glace_Bay",
									"America/Godthab",
									"America/Goose_Bay",
									"America/Grand_Turk",
									"America/Grenada",
									"America/Guadeloupe",
									"America/Guatemala",
									"America/Guayaquil",
									"America/Guyana",
									"America/Halifax",
									"America/Havana",
									"America/Hermosillo",
									"America/Indiana/Indianapolis",
									"America/Indiana/Knox",
									"America/Indiana/Marengo",
									"America/Indiana/Petersburg",
									"America/Indiana/Tell_City",
									"America/Indiana/Vevay",
									"America/Indiana/Vincennes",
									"America/Indiana/Winamac",
									"America/Indianapolis",
									"America/Inuvik",
									"America/Iqaluit",
									"America/Jamaica",
									"America/Jujuy",
									"America/Juneau",
									"America/Kentucky/Louisville",
									"America/Kentucky/Monticello",
									"America/Knox_IN",
									"America/Kralendijk",
									"America/La_Paz",
									"America/Lima",
									"America/Los_Angeles",
									"America/Louisville",
									"America/Lower_Princes",
									"America/Maceio",
									"America/Managua",
									"America/Manaus",
									"America/Marigot",
									"America/Martinique",
									"America/Matamoros",
									"America/Mazatlan",
									"America/Mendoza",
									"America/Menominee",
									"America/Merida",
									"America/Metlakatla",
									"America/Mexico_City",
									"America/Miquelon",
									"America/Moncton",
									"America/Monterrey",
									"America/Montevideo",
									"America/Montreal",
									"America/Montserrat",
									"America/Nassau",
									"America/New_York",
									"America/Nipigon",
									"America/Nome",
									"America/Noronha",
									"America/North_Dakota/Beulah",
									"America/North_Dakota/Center",
									"America/North_Dakota/New_Salem",
									"America/Ojinaga",
									"America/Panama",
									"America/Pangnirtung",
									"America/Paramaribo",
									"America/Phoenix",
									"America/Port-au-Prince",
									"America/Port_of_Spain",
									"America/Porto_Acre",
									"America/Porto_Velho",
									"America/Puerto_Rico",
									"America/Punta_Arenas",
									"America/Rainy_River",
									"America/Rankin_Inlet",
									"America/Recife",
									"America/Regina",
									"America/Resolute",
									"America/Rio_Branco",
									"America/Rosario",
									"America/Santa_Isabel",
									"America/Santarem",
									"America/Santiago",
									"America/Santo_Domingo",
									"America/Sao_Paulo",
									"America/Scoresbysund",
									"America/Shiprock",
									"America/Sitka",
									"America/St_Barthelemy",
									"America/St_Johns",
									"America/St_Kitts",
									"America/St_Lucia",
									"America/St_Thomas",
									"America/St_Vincent",
									"America/Swift_Current",
									"America/Tegucigalpa",
									"America/Thule",
									"America/Thunder_Bay",
									"America/Tijuana",
									"America/Toronto",
									"America/Tortola",
									"America/Vancouver",
									"America/Virgin",
									"America/Whitehorse",
									"America/Winnipeg",
									"America/Yakutat",
									"America/Yellowknife",
									"Antarctica/Casey",
									"Antarctica/Davis",
									"Antarctica/DumontDUrville",
									"Antarctica/Macquarie",
									"Antarctica/Mawson",
									"Antarctica/McMurdo",
									"Antarctica/Palmer",
									"Antarctica/Rothera",
									"Antarctica/South_Pole",
									"Antarctica/Syowa",
									"Antarctica/Troll",
									"Antarctica/Vostok",
									"Arctic/Longyearbyen",
									"Asia/Aden",
									"Asia/Almaty",
									"Asia/Amman",
									"Asia/Anadyr",
									"Asia/Aqtau",
									"Asia/Aqtobe",
									"Asia/Ashgabat",
									"Asia/Ashkhabad",
									"Asia/Atyrau",
									"Asia/Baghdad",
									"Asia/Bahrain",
									"Asia/Baku",
									"Asia/Bangkok",
									"Asia/Barnaul",
									"Asia/Beirut",
									"Asia/Bishkek",
									"Asia/Brunei",
									"Asia/Calcutta",
									"Asia/Chita",
									"Asia/Choibalsan",
									"Asia/Chongqing",
									"Asia/Chungking",
									"Asia/Colombo",
									"Asia/Dacca",
									"Asia/Damascus",
									"Asia/Dhaka",
									"Asia/Dili",
									"Asia/Dubai",
									"Asia/Dushanbe",
									"Asia/Famagusta",
									"Asia/Gaza",
									"Asia/Harbin",
									"Asia/Hebron",
									"Asia/Ho_Chi_Minh",
									"Asia/Hong_Kong",
									"Asia/Hovd",
									"Asia/Irkutsk",
									"Asia/Istanbul",
									"Asia/Jakarta",
									"Asia/Jayapura",
									"Asia/Jerusalem",
									"Asia/Kabul",
									"Asia/Kamchatka",
									"Asia/Karachi",
									"Asia/Kashgar",
									"Asia/Kathmandu",
									"Asia/Katmandu",
									"Asia/Khandyga",
									"Asia/Kolkata",
									"Asia/Krasnoyarsk",
									"Asia/Kuala_Lumpur",
									"Asia/Kuching",
									"Asia/Kuwait",
									"Asia/Macao",
									"Asia/Macau",
									"Asia/Magadan",
									"Asia/Makassar",
									"Asia/Manila",
									"Asia/Muscat",
									"Asia/Nicosia",
									"Asia/Novokuznetsk",
									"Asia/Novosibirsk",
									"Asia/Omsk",
									"Asia/Oral",
									"Asia/Phnom_Penh",
									"Asia/Pontianak",
									"Asia/Pyongyang",
									"Asia/Qatar",
									"Asia/Qostanay",
									"Asia/Qyzylorda",
									"Asia/Rangoon",
									"Asia/Riyadh",
									"Asia/Saigon",
									"Asia/Sakhalin",
									"Asia/Samarkand",
									"Asia/Seoul",
									"Asia/Shanghai",
									"Asia/Singapore",
									"Asia/Srednekolymsk",
									"Asia/Taipei",
									"Asia/Tashkent",
									"Asia/Tbilisi",
									"Asia/Tehran",
									"Asia/Tel_Aviv",
									"Asia/Thimbu",
									"Asia/Thimphu",
									"Asia/Tokyo",
									"Asia/Tomsk",
									"Asia/Ujung_Pandang",
									"Asia/Ulaanbaatar",
									"Asia/Ulan_Bator",
									"Asia/Urumqi",
									"Asia/Ust-Nera",
									"Asia/Vientiane",
									"Asia/Vladivostok",
									"Asia/Yakutsk",
									"Asia/Yangon",
									"Asia/Yekaterinburg",
									"Asia/Yerevan",
									"Atlantic/Azores",
									"Atlantic/Bermuda",
									"Atlantic/Canary",
									"Atlantic/Cape_Verde",
									"Atlantic/Faeroe",
									"Atlantic/Faroe",
									"Atlantic/Jan_Mayen",
									"Atlantic/Madeira",
									"Atlantic/Reykjavik",
									"Atlantic/South_Georgia",
									"Atlantic/St_Helena",
									"Atlantic/Stanley",
									"Australia/Adelaide",
									"Australia/Brisbane",
									"Australia/Broken_Hill",
									"Australia/Canberra",
									"Australia/Currie",
									"Australia/Darwin",
									"Australia/Eucla",
									"Australia/Hobart",
									"Australia/Lindeman",
									"Australia/Lord_Howe",
									"Australia/Melbourne",
									"Australia/Perth",
									"Australia/Sydney",
									"Australia/Yancowinna",
									"Etc/GMT",
									"Etc/GMT+0",
									"Etc/GMT+1",
									"Etc/GMT+10",
									"Etc/GMT+11",
									"Etc/GMT+12",
									"Etc/GMT+2",
									"Etc/GMT+3",
									"Etc/GMT+4",
									"Etc/GMT+5",
									"Etc/GMT+6",
									"Etc/GMT+7",
									"Etc/GMT+8",
									"Etc/GMT+9",
									"Etc/GMT-0",
									"Etc/GMT-1",
									"Etc/GMT-10",
									"Etc/GMT-11",
									"Etc/GMT-12",
									"Etc/GMT-13",
									"Etc/GMT-14",
									"Etc/GMT-2",
									"Etc/GMT-3",
									"Etc/GMT-4",
									"Etc/GMT-5",
									"Etc/GMT-6",
									"Etc/GMT-7",
									"Etc/GMT-8",
									"Etc/GMT-9",
									"Etc/GMT0",
									"Etc/UTC",
									"Europe/Amsterdam",
									"Europe/Andorra",
									"Europe/Astrakhan",
									"Europe/Athens",
									"Europe/Belfast",
									"Europe/Belgrade",
									"Europe/Berlin",
									"Europe/Bratislava",
									"Europe/Brussels",
									"Europe/Bucharest",
									"Europe/Budapest",
									"Europe/Busingen",
									"Europe/Chisinau",
									"Europe/Copenhagen",
									"Europe/Dublin",
									"Europe/Gibraltar",
									"Europe/Guernsey",
									"Europe/Helsinki",
									"Europe/Isle_of_Man",
									"Europe/Istanbul",
									"Europe/Jersey",
									"Europe/Kaliningrad",
									"Europe/Kiev",
									"Europe/Kirov",
									"Europe/Lisbon",
									"Europe/Ljubljana",
									"Europe/London",
									"Europe/Luxembourg",
									"Europe/Madrid",
									"Europe/Malta",
									"Europe/Mariehamn",
									"Europe/Minsk",
									"Europe/Monaco",
									"Europe/Moscow",
									"Europe/Nicosia",
									"Europe/Oslo",
									"Europe/Paris",
									"Europe/Podgorica",
									"Europe/Prague",
									"Europe/Riga",
									"Europe/Rome",
									"Europe/Samara",
									"Europe/San_Marino",
									"Europe/Sarajevo",
									"Europe/Saratov",
									"Europe/Simferopol",
									"Europe/Skopje",
									"Europe/Sofia",
									"Europe/Stockholm",
									"Europe/Tallinn",
									"Europe/Tirane",
									"Europe/Tiraspol",
									"Europe/Ulyanovsk",
									"Europe/Uzhgorod",
									"Europe/Vaduz",
									"Europe/Vatican",
									"Europe/Vienna",
									"Europe/Vilnius",
									"Europe/Volgograd",
									"Europe/Warsaw",
									"Europe/Zagreb",
									"Europe/Zaporozhye",
									"Europe/Zurich",
									"GMT",
									"Indian/Antananarivo",
									"Indian/Chagos",
									"Indian/Christmas",
									"Indian/Cocos",
									"Indian/Comoro",
									"Indian/Kerguelen",
									"Indian/Mahe",
									"Indian/Maldives",
									"Indian/Mauritius",
									"Indian/Mayotte",
									"Indian/Reunion",
									"Pacific/Apia",
									"Pacific/Auckland",
									"Pacific/Bougainville",
									"Pacific/Chatham",
									"Pacific/Chuuk",
									"Pacific/Easter",
									"Pacific/Efate",
									"Pacific/Enderbury",
									"Pacific/Fakaofo",
									"Pacific/Fiji",
									"Pacific/Funafuti",
									"Pacific/Galapagos",
									"Pacific/Gambier",
									"Pacific/Guadalcanal",
									"Pacific/Guam",
									"Pacific/Honolulu",
									"Pacific/Johnston",
									"Pacific/Kiritimati",
									"Pacific/Kosrae",
									"Pacific/Kwajalein",
									"Pacific/Majuro",
									"Pacific/Marquesas",
									"Pacific/Midway",
									"Pacific/Nauru",
									"Pacific/Niue",
									"Pacific/Norfolk",
									"Pacific/Noumea",
									"Pacific/Pago_Pago",
									"Pacific/Palau",
									"Pacific/Pitcairn",
									"Pacific/Pohnpei",
									"Pacific/Ponape",
									"Pacific/Port_Moresby",
									"Pacific/Rarotonga",
									"Pacific/Saipan",
									"Pacific/Samoa",
									"Pacific/Tahiti",
									"Pacific/Tarawa",
									"Pacific/Tongatapu",
									"Pacific/Truk",
									"Pacific/Wake",
									"Pacific/Wallis",
									"Pacific/Yap",
									"US/Alaska",
									"US/Aleutian",
									"US/Arizona",
									"US/Central",
									"US/East-Indiana",
									"US/Eastern",
									"US/Hawaii",
									"US/Indiana-Starke",
									"US/Michigan",
									"US/Mountain",
									"US/Pacific",
									"US/Pacific-New",
									"US/Samoa",
									"UTC"
								],
								"x-enumDescriptions": {
									"Africa/Abidjan": "",
									"Africa/Accra": "",
									"Africa/Addis_Ababa": "",
									"Africa/Algiers": "",
									"Africa/Asmara": "",
									"Africa/Asmera": "",
									"Africa/Bamako": "",
									"Africa/Bangui": "",
									"Africa/Banjul": "",
									"Africa/Bissau": "",
									"Africa/Blantyre": "",
									"Africa/Brazzaville": "",
									"Africa/Bujumbura": "",
									"Africa/Cairo": "",
									"Africa/Casablanca": "",
									"Africa/Ceuta": "",
									"Africa/Conakry": "",
									"Africa/Dakar": "",
									"Africa/Dar_es_Salaam": "",
									"Africa/Djibouti": "",
									"Africa/Douala": "",
									"Africa/El_Aaiun": "",
									"Africa/Freetown": "",
									"Africa/Gaborone": "",
									"Africa/Harare": "",
									"Africa/Johannesburg": "",
									"Africa/Juba": "",
									"Africa/Kampala": "",
									"Africa/Khartoum": "",
									"Africa/Kigali": "",
									"Africa/Kinshasa": "",
									"Africa/Lagos": "",
									"Africa/Libreville": "",
									"Africa/Lome": "",
									"Africa/Luanda": "",
									"Africa/Lubumbashi": "",
									"Africa/Lusaka": "",
									"Africa/Malabo": "",
									"Africa/Maputo": "",
									"Africa/Maseru": "",
									"Africa/Mbabane": "",
									"Africa/Mogadishu": "",
									"Africa/Monrovia": "",
									"Africa/Nairobi": "",
									"Africa/Ndjamena": "",
									"Africa/Niamey": "",
									"Africa/Nouakchott": "",
									"Africa/Ouagadougou": "",
									"Africa/Porto-Novo": "",
									"Africa/Sao_Tome": "",
									"Africa/Timbuktu": "",
									"Africa/Tripoli": "",
									"Africa/Tunis": "",
									"Africa/Windhoek": "",
									"America/Adak": "",
									"America/Anchorage": "",
									"America/Anguilla": "",
									"America/Antigua": "",
									"America/Araguaina": "",
									"America/Argentina/Buenos_Aires": "",
									"America/Argentina/Catamarca": "",
									"America/Argentina/ComodRivadavia": "",
									"America/Argentina/Cordoba": "",
									"America/Argentina/Jujuy": "",
									"America/Argentina/La_Rioja": "",
									"America/Argentina/Mendoza": "",
									"America/Argentina/Rio_Gallegos": "",
									"America/Argentina/Salta": "",
									"America/Argentina/San_Juan": "",
									"America/Argentina/San_Luis": "",
									"America/Argentina/Tucuman": "",
									"America/Argentina/Ushuaia": "",
									"America/Aruba": "",
									"America/Asuncion": "",
									"America/Atikokan": "",
									"America/Atka": "",
									"America/Bahia": "",
									"America/Bahia_Banderas": "",
									"America/Barbados": "",
									"America/Belem": "",
									"America/Belize": "",
									"America/Blanc-Sablon": "",
									"America/Boa_Vista": "",
									"America/Bogota": "",
									"America/Boise": "",
									"America/Buenos_Aires": "",
									"America/Cambridge_Bay": "",
									"America/Campo_Grande": "",
									"America/Cancun": "",
									"America/Caracas": "",
									"America/Catamarca": "",
									"America/Cayenne": "",
									"America/Cayman": "",
									"America/Chicago": "",
									"America/Chihuahua": "",
									"America/Coral_Harbour": "",
									"America/Cordoba": "",
									"America/Costa_Rica": "",
									"America/Creston": "",
									"America/Cuiaba": "",
									"America/Curacao": "",
									"America/Danmarkshavn": "",
									"America/Dawson": "",
									"America/Dawson_Creek": "",
									"America/Denver": "",
									"America/Detroit": "",
									"America/Dominica": "",
									"America/Edmonton": "",
									"America/Eirunepe": "",
									"America/El_Salvador": "",
									"America/Ensenada": "",
									"America/Fort_Nelson": "",
									"America/Fort_Wayne": "",
									"America/Fortaleza": "",
									"America/Glace_Bay": "",
									"America/Godthab": "",
									"America/Goose_Bay": "",
									"America/Grand_Turk": "",
									"America/Grenada": "",
									"America/Guadeloupe": "",
									"America/Guatemala": "",
									"America/Guayaquil": "",
									"America/Guyana": "",
									"America/Halifax": "",
									"America/Havana": "",
									"America/Hermosillo": "",
									"America/Indiana/Indianapolis": "",
									"America/Indiana/Knox": "",
									"America/Indiana/Marengo": "",
									"America/Indiana/Petersburg": "",
									"America/Indiana/Tell_City": "",
									"America/Indiana/Vevay": "",
									"America/Indiana/Vincennes": "",
									"America/Indiana/Winamac": "",
									"America/Indianapolis": "",
									"America/Inuvik": "",
									"America/Iqaluit": "",
									"America/Jamaica": "",
									"America/Jujuy": "",
									"America/Juneau": "",
									"America/Kentucky/Louisville": "",
									"America/Kentucky/Monticello": "",
									"America/Knox_IN": "",
									"America/Kralendijk": "",
									"America/La_Paz": "",
									"America/Lima": "",
									"America/Los_Angeles": "",
									"America/Louisville": "",
									"America/Lower_Princes": "",
									"America/Maceio": "",
									"America/Managua": "",
									"America/Manaus": "",
									"America/Marigot": "",
									"America/Martinique": "",
									"America/Matamoros": "",
									"America/Mazatlan": "",
									"America/Mendoza": "",
									"America/Menominee": "",
									"America/Merida": "",
									"America/Metlakatla": "",
									"America/Mexico_City": "",
									"America/Miquelon": "",
									"America/Moncton": "",
									"America/Monterrey": "",
									"America/Montevideo": "",
									"America/Montreal": "",
									"America/Montserrat": "",
									"America/Nassau": "",
									"America/New_York": "",
									"America/Nipigon": "",
									"America/Nome": "",
									"America/Noronha": "",
									"America/North_Dakota/Beulah": "",
									"America/North_Dakota/Center": "",
									"America/North_Dakota/New_Salem": "",
									"America/Ojinaga": "",
									"America/Panama": "",
									"America/Pangnirtung": "",
									"America/Paramaribo": "",
									"America/Phoenix": "",
									"America/Port-au-Prince": "",
									"America/Port_of_Spain": "",
									"America/Porto_Acre": "",
									"America/Porto_Velho": "",
									"America/Puerto_Rico": "",
									"America/Punta_Arenas": "",
									"America/Rainy_River": "",
									"America/Rankin_Inlet": "",
									"America/Recife": "",
									"America/Regina": "",
									"America/Resolute": "",
									"America/Rio_Branco": "",
									"America/Rosario": "",
									"America/Santa_Isabel": "",
									"America/Santarem": "",
									"America/Santiago": "",
									"America/Santo_Domingo": "",
									"America/Sao_Paulo": "",
									"America/Scoresbysund": "",
									"America/Shiprock": "",
									"America/Sitka": "",
									"America/St_Barthelemy": "",
									"America/St_Johns": "",
									"America/St_Kitts": "",
									"America/St_Lucia": "",
									"America/St_Thomas": "",
									"America/St_Vincent": "",
									"America/Swift_Current": "",
									"America/Tegucigalpa": "",
									"America/Thule": "",
									"America/Thunder_Bay": "",
									"America/Tijuana": "",
									"America/Toronto": "",
									"America/Tortola": "",
									"America/Vancouver": "",
									"America/Virgin": "",
									"America/Whitehorse": "",
									"America/Winnipeg": "",
									"America/Yakutat": "",
									"America/Yellowknife": "",
									"Antarctica/Casey": "",
									"Antarctica/Davis": "",
									"Antarctica/DumontDUrville": "",
									"Antarctica/Macquarie": "",
									"Antarctica/Mawson": "",
									"Antarctica/McMurdo": "",
									"Antarctica/Palmer": "",
									"Antarctica/Rothera": "",
									"Antarctica/South_Pole": "",
									"Antarctica/Syowa": "",
									"Antarctica/Troll": "",
									"Antarctica/Vostok": "",
									"Arctic/Longyearbyen": "",
									"Asia/Aden": "",
									"Asia/Almaty": "",
									"Asia/Amman": "",
									"Asia/Anadyr": "",
									"Asia/Aqtau": "",
									"Asia/Aqtobe": "",
									"Asia/Ashgabat": "",
									"Asia/Ashkhabad": "",
									"Asia/Atyrau": "",
									"Asia/Baghdad": "",
									"Asia/Bahrain": "",
									"Asia/Baku": "",
									"Asia/Bangkok": "",
									"Asia/Barnaul": "",
									"Asia/Beirut": "",
									"Asia/Bishkek": "",
									"Asia/Brunei": "",
									"Asia/Calcutta": "",
									"Asia/Chita": "",
									"Asia/Choibalsan": "",
									"Asia/Chongqing": "",
									"Asia/Chungking": "",
									"Asia/Colombo": "",
									"Asia/Dacca": "",
									"Asia/Damascus": "",
									"Asia/Dhaka": "",
									"Asia/Dili": "",
									"Asia/Dubai": "",
									"Asia/Dushanbe": "",
									"Asia/Famagusta": "",
									"Asia/Gaza": "",
									"Asia/Harbin": "",
									"Asia/Hebron": "",
									"Asia/Ho_Chi_Minh": "",
									"Asia/Hong_Kong": "",
									"Asia/Hovd": "",
									"Asia/Irkutsk": "",
									"Asia/Istanbul": "",
									"Asia/Jakarta": "",
									"Asia/Jayapura": "",
									"Asia/Jerusalem": "",
									"Asia/Kabul": "",
									"Asia/Kamchatka": "",
									"Asia/Karachi": "",
									"Asia/Kashgar": "",
									"Asia/Kathmandu": "",
									"Asia/Katmandu": "",
									"Asia/Khandyga": "",
									"Asia/Kolkata": "",
									"Asia/Krasnoyarsk": "",
									"Asia/Kuala_Lumpur": "",
									"Asia/Kuching": "",
									"Asia/Kuwait": "",
									"Asia/Macao": "",
									"Asia/Macau": "",
									"Asia/Magadan": "",
									"Asia/Makassar": "",
									"Asia/Manila": "",
									"Asia/Muscat": "",
									"Asia/Nicosia": "",
									"Asia/Novokuznetsk": "",
									"Asia/Novosibirsk": "",
									"Asia/Omsk": "",
									"Asia/Oral": "",
									"Asia/Phnom_Penh": "",
									"Asia/Pontianak": "",
									"Asia/Pyongyang": "",
									"Asia/Qatar": "",
									"Asia/Qostanay": "",
									"Asia/Qyzylorda": "",
									"Asia/Rangoon": "",
									"Asia/Riyadh": "",
									"Asia/Saigon": "",
									"Asia/Sakhalin": "",
									"Asia/Samarkand": "",
									"Asia/Seoul": "",
									"Asia/Shanghai": "",
									"Asia/Singapore": "",
									"Asia/Srednekolymsk": "",
									"Asia/Taipei": "",
									"Asia/Tashkent": "",
									"Asia/Tbilisi": "",
									"Asia/Tehran": "",
									"Asia/Tel_Aviv": "",
									"Asia/Thimbu": "",
									"Asia/Thimphu": "",
									"Asia/Tokyo": "",
									"Asia/Tomsk": "",
									"Asia/Ujung_Pandang": "",
									"Asia/Ulaanbaatar": "",
									"Asia/Ulan_Bator": "",
									"Asia/Urumqi": "",
									"Asia/Ust-Nera": "",
									"Asia/Vientiane": "",
									"Asia/Vladivostok": "",
									"Asia/Yakutsk": "",
									"Asia/Yangon": "",
									"Asia/Yekaterinburg": "",
									"Asia/Yerevan": "",
									"Atlantic/Azores": "",
									"Atlantic/Bermuda": "",
									"Atlantic/Canary": "",
									"Atlantic/Cape_Verde": "",
									"Atlantic/Faeroe": "",
									"Atlantic/Faroe": "",
									"Atlantic/Jan_Mayen": "",
									"Atlantic/Madeira": "",
									"Atlantic/Reykjavik": "",
									"Atlantic/South_Georgia": "",
									"Atlantic/St_Helena": "",
									"Atlantic/Stanley": "",
									"Australia/Adelaide": "",
									"Australia/Brisbane": "",
									"Australia/Broken_Hill": "",
									"Australia/Canberra": "",
									"Australia/Currie": "",
									"Australia/Darwin": "",
									"Australia/Eucla": "",
									"Australia/Hobart": "",
									"Australia/Lindeman": "",
									"Australia/Lord_Howe": "",
									"Australia/Melbourne": "",
									"Australia/Perth": "",
									"Australia/Sydney": "",
									"Australia/Yancowinna": "",
									"Etc/GMT": "",
									"Etc/GMT+0": "",
									"Etc/GMT+1": "",
									"Etc/GMT+10": "",
									"Etc/GMT+11": "",
									"Etc/GMT+12": "",
									"Etc/GMT+2": "",
									"Etc/GMT+3": "",
									"Etc/GMT+4": "",
									"Etc/GMT+5": "",
									"Etc/GMT+6": "",
									"Etc/GMT+7": "",
									"Etc/GMT+8": "",
									"Etc/GMT+9": "",
									"Etc/GMT-0": "",
									"Etc/GMT-1": "",
									"Etc/GMT-10": "",
									"Etc/GMT-11": "",
									"Etc/GMT-12": "",
									"Etc/GMT-13": "",
									"Etc/GMT-14": "",
									"Etc/GMT-2": "",
									"Etc/GMT-3": "",
									"Etc/GMT-4": "",
									"Etc/GMT-5": "",
									"Etc/GMT-6": "",
									"Etc/GMT-7": "",
									"Etc/GMT-8": "",
									"Etc/GMT-9": "",
									"Etc/GMT0": "",
									"Etc/UTC": "",
									"Europe/Amsterdam": "",
									"Europe/Andorra": "",
									"Europe/Astrakhan": "",
									"Europe/Athens": "",
									"Europe/Belfast": "",
									"Europe/Belgrade": "",
									"Europe/Berlin": "",
									"Europe/Bratislava": "",
									"Europe/Brussels": "",
									"Europe/Bucharest": "",
									"Europe/Budapest": "",
									"Europe/Busingen": "",
									"Europe/Chisinau": "",
									"Europe/Copenhagen": "",
									"Europe/Dublin": "",
									"Europe/Gibraltar": "",
									"Europe/Guernsey": "",
									"Europe/Helsinki": "",
									"Europe/Isle_of_Man": "",
									"Europe/Istanbul": "",
									"Europe/Jersey": "",
									"Europe/Kaliningrad": "",
									"Europe/Kiev": "",
									"Europe/Kirov": "",
									"Europe/Lisbon": "",
									"Europe/Ljubljana": "",
									"Europe/London": "",
									"Europe/Luxembourg": "",
									"Europe/Madrid": "",
									"Europe/Malta": "",
									"Europe/Mariehamn": "",
									"Europe/Minsk": "",
									"Europe/Monaco": "",
									"Europe/Moscow": "",
									"Europe/Nicosia": "",
									"Europe/Oslo": "",
									"Europe/Paris": "",
									"Europe/Podgorica": "",
									"Europe/Prague": "",
									"Europe/Riga": "",
									"Europe/Rome": "",
									"Europe/Samara": "",
									"Europe/San_Marino": "",
									"Europe/Sarajevo": "",
									"Europe/Saratov": "",
									"Europe/Simferopol": "",
									"Europe/Skopje": "",
									"Europe/Sofia": "",
									"Europe/Stockholm": "",
									"Europe/Tallinn": "",
									"Europe/Tirane": "",
									"Europe/Tiraspol": "",
									"Europe/Ulyanovsk": "",
									"Europe/Uzhgorod": "",
									"Europe/Vaduz": "",
									"Europe/Vatican": "",
									"Europe/Vienna": "",
									"Europe/Vilnius": "",
									"Europe/Volgograd": "",
									"Europe/Warsaw": "",
									"Europe/Zagreb": "",
									"Europe/Zaporozhye": "",
									"Europe/Zurich": "",
									"GMT": "",
									"Indian/Antananarivo": "",
									"Indian/Chagos": "",
									"Indian/Christmas": "",
									"Indian/Cocos": "",
									"Indian/Comoro": "",
									"Indian/Kerguelen": "",
									"Indian/Mahe": "",
									"Indian/Maldives": "",
									"Indian/Mauritius": "",
									"Indian/Mayotte": "",
									"Indian/Reunion": "",
									"Pacific/Apia": "",
									"Pacific/Auckland": "",
									"Pacific/Bougainville": "",
									"Pacific/Chatham": "",
									"Pacific/Chuuk": "",
									"Pacific/Easter": "",
									"Pacific/Efate": "",
									"Pacific/Enderbury": "",
									"Pacific/Fakaofo": "",
									"Pacific/Fiji": "",
									"Pacific/Funafuti": "",
									"Pacific/Galapagos": "",
									"Pacific/Gambier": "",
									"Pacific/Guadalcanal": "",
									"Pacific/Guam": "",
									"Pacific/Honolulu": "",
									"Pacific/Johnston": "",
									"Pacific/Kiritimati": "",
									"Pacific/Kosrae": "",
									"Pacific/Kwajalein": "",
									"Pacific/Majuro": "",
									"Pacific/Marquesas": "",
									"Pacific/Midway": "",
									"Pacific/Nauru": "",
									"Pacific/Niue": "",
									"Pacific/Norfolk": "",
									"Pacific/Noumea": "",
									"Pacific/Pago_Pago": "",
									"Pacific/Palau": "",
									"Pacific/Pitcairn": "",
									"Pacific/Pohnpei": "",
									"Pacific/Ponape": "",
									"Pacific/Port_Moresby": "",
									"Pacific/Rarotonga": "",
									"Pacific/Saipan": "",
									"Pacific/Samoa": "",
									"Pacific/Tahiti": "",
									"Pacific/Tarawa": "",
									"Pacific/Tongatapu": "",
									"Pacific/Truk": "",
									"Pacific/Wake": "",
									"Pacific/Wallis": "",
									"Pacific/Yap": "",
									"US/Alaska": "",
									"US/Aleutian": "",
									"US/Arizona": "",
									"US/Central": "",
									"US/East-Indiana": "",
									"US/Eastern": "",
									"US/Hawaii": "",
									"US/Indiana-Starke": "",
									"US/Michigan": "",
									"US/Mountain": "",
									"US/Pacific": "",
									"US/Pacific-New": "",
									"US/Samoa": "",
									"UTC": ""
								}
							},
							"tip": {
								"$ref": "#/components/schemas/terminals_tip"
							}
						},
						"type": "object",
						"required": [
							"name",
							"maintenance_window",
							"manual_entry_configuration",
							"currency",
							"address",
							"supported_card_brands",
							"credit_debit_preference",
							"sim_card_id",
							"timezone",
							"tip",
							"signature_required",
							"contactless_payments",
							"quick_chip",
							"deferred_authorization",
							"receipt_header_merchant_name"
						]
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"account_id",
					"serial_number",
					"model",
					"status",
					"terminal_configuration",
					"count_auths_pending",
					"count_auths_declined",
					"count_auths_captured",
					"api_version"
				],
				"type": "object",
				"x-label": "hardware_reports",
				"description": "Contains details relevant to the terminal."
			},
			"item-resp": {
				"additionalProperties": false,
				"properties": {
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the payment was created."
					},
					"id": {
						"type": "string",
						"nullable": true,
						"description": "ID of the order, generated by WePay when the order is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_item_owner_response"
					},
					"path": {
						"type": "string",
						"description": "The HTTP path of the resource. The path can be used to retrieve details about the resource and perform actions on it."
					},
					"product_name": {
						"maxLength": 255,
						"type": "string",
						"description": "The name of the product or service your user signed up for on your platform."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-items"
					},
					"state": {
						"enum": [
							"active",
							"deleted"
						],
						"type": "string",
						"description": "State of the item. Possible values: `active`, `deleted`.",
						"x-enumDescriptions": {
							"active": "The item is active.",
							"deleted": "The item is deleted."
						}
					},
					"account_id": {
						"type": "string",
						"nullable": true,
						"description": "Merchant's account id associated with the item."
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"currency": {
						"$ref": "#/components/schemas/currency-nullable"
					},
					"description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Description of the product or service."
					},
					"photos": {
						"items": {
							"$ref": "#/components/schemas/uri"
						},
						"type": "array",
						"nullable": true,
						"description": "URL for photo images."
					},
					"price": {
						"type": "integer",
						"nullable": true,
						"description": "Price of the item or service."
					},
					"product_code": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "SKU etc."
					},
					"product_details": {
						"type": "object",
						"nullable": true,
						"x-maxByteSize": 10240,
						"additionalProperties": true,
						"description": "Any product details your platform chooses to attach to this resource. The product detail data must be key-value pairs. For example, a pair of black running shoes could have \"category1\":\"Clothing, Shoes, and Accessories\", \"category2\":\"Women's shoes\", \"color\":\"black\"."
					},
					"reference_number": {
						"$ref": "#/components/schemas/id-nullable"
					},
					"shipping_options": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"uniqueItems": true,
						"description": "Description of each available shipping option."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms_nullable_response"
					},
					"uri": {
						"$ref": "#/components/schemas/uri-nullable"
					},
					"weight": {
						"$ref": "#/components/schemas/shared_weight"
					}
				},
				"required": [
					"id",
					"path",
					"owner",
					"resource",
					"create_time",
					"product_name",
					"state"
				],
				"type": "object",
				"x-label": "item-resp"
			},
			"legal_entity-resp": {
				"additionalProperties": false,
				"properties": {
					"additional_representatives": {
						"$ref": "#/components/schemas/legal_entities_additional_representatives_response"
					},
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"controller": {
						"$ref": "#/components/schemas/legal_entities_controller_response"
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"description": {
						"maxLength": 1024,
						"type": "string",
						"nullable": true,
						"description": "Description of the Legal Entity. WePay uses this information for underwriting purposes."
					},
					"entity_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_entity_country_info_CA"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_entity_country_info_GB"
							},
							"US": {
								"$ref": "#/components/schemas/shared_entity_country_info_US"
							},
							"country_of_formation": {
								"$ref": "#/components/schemas/country_code-nullable"
							},
							"operates_in_sanctioned_countries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"enum": [
										"CU",
										"IR",
										"KP",
										"SY",
										"XX"
									],
									"x-enumDescriptions": {
										"CU": "Cuba",
										"IR": "Iran",
										"KP": "North Korea",
										"SY": "Syria",
										"XX": "WePay's custom 2-digit ISO code for Crimea Region, as a 2-digit code does not exist."
									},
									"type": "string"
								},
								"nullable": true,
								"description": "An array of sanctioned countries where the Legal Entity operates. Possible values include `CU`, `IR`, `KP`, `XX`, `SY`. Note that `XX` is used to represent Crimea, as it does not have its own 2-digit ISO code. If the merchant indicates they do not have operations in one of the sanctioned countries listed above, then pass an empty array: `[]`. This field is required, if the value is left `null`, capabilities (payments and payouts) will be disabled."
							},
							"year_of_formation": {
								"type": "integer",
								"minimum": 0,
								"nullable": true,
								"description": "The year when the Legal Entity originated."
							}
						},
						"type": "object",
						"description": "Information about the Legal Entity."
					},
					"entity_name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*$",
						"type": "string",
						"nullable": true,
						"description": "The name of the legal entity. This should **not** contain a merchant's DBA; DBAs can be included on the Account resource. Must not contain the word `wepay`."
					},
					"id": {
						"type": "string",
						"nullable": true,
						"description": "ID of the legal entity, generated by WePay when the legal entity is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_application_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"primary_url": {
						"$ref": "#/components/schemas/uri-nullable"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-legal_entities"
					},
					"terms_of_service": {
						"additionalProperties": false,
						"properties": {
							"acceptance_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "Time (in UNIX) when WePay's Terms of Service was accepted."
							},
							"original_ip": {
								"maxLength": 45,
								"pattern": "^[A-F0-9a-f:\\.]*$",
								"type": "string",
								"nullable": true,
								"description": "The IP address in use when WePay's Terms of Service was accepted."
							},
							"terms_of_service_version": {
								"maxLength": 20,
								"pattern": "^[A-Za-z0-9_]+$",
								"type": "string",
								"nullable": true,
								"description": "The version of WePay's Terms of Service that was accepted."
							}
						},
						"type": "object",
						"description": "Data regarding the legal entity's acceptance of the WePay terms of service."
					},
					"account_controller": {
						"$ref": "#/components/schemas/shared_account_controller"
					},
					"attestation": {
						"additionalProperties": false,
						"properties": {
							"attester_type": {
								"enum": [
									"additional_representative",
									"controller",
									"other_representative"
								],
								"type": "string",
								"x-isOneOfKey": true,
								"description": "Describes by whom a legal entity is attested. The value will be `controller` unless your platform has permission from WePay to collect attestation from other representatives.",
								"x-enumDescriptions": {
									"additional_representative": "**This option requires permission.** The legal entity is attested by one of the additional representatives.",
									"controller": "The legal entity is attested by the controller.",
									"other_representative": "**This option requires permission.** The legal entity is attested by other representative."
								}
							},
							"additional_representative": {
								"$ref": "#/components/schemas/legal_entities_attestation_additional_representative"
							},
							"controller": {
								"$ref": "#/components/schemas/legal_entities_attestation_controller"
							},
							"other_representative": {
								"$ref": "#/components/schemas/legal_entities_attestation_other_representative"
							}
						},
						"required": [
							"attester_type"
						],
						"type": "object",
						"nullable": true,
						"description": "Indicate that the controller has attested to the validity of CIP/KYC details submitted. Find more information [here](/clear/options/kyc-and-cip-certification/#attestation)."
					},
					"controller_type": {
						"$ref": "#/components/schemas/controller_type"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"email": {
						"$ref": "#/components/schemas/entity-email-nullable"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"preferred_locale": {
						"description": "The preferred locale of the legal entity. For merchants using the WePay Merchant Center, or receiving payments emails from WePay, this option will set the language preference.",
						"enum": [
							"en_US",
							"es_US",
							"en_CA",
							"fr_CA"
						],
						"x-enumDescriptions": {
							"en_US": "Locale string representing English - United States",
							"es_US": "Locale string representing Spanish - United States",
							"en_CA": "Locale string representing English - Canada",
							"fr_CA": "Locale string representing French - Canada"
						},
						"nullable": true,
						"type": "string"
					},
					"public_ownership": {
						"$ref": "#/components/schemas/legal_entities_public_ownership_response"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"referral_details": {
						"type": "object",
						"description": "Information regarding the referring representative",
						"properties": {
							"email": {
								"$ref": "#/components/schemas/email"
							},
							"name": {
								"additionalProperties": false,
								"properties": {
									"first": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "First name."
									},
									"last": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "Last name."
									}
								},
								"required": [
									"first",
									"last"
								],
								"type": "object"
							},
							"standard_id": {
								"$ref": "#/components/schemas/standard_id"
							},
							"coupon_code": {
								"$ref": "#/components/schemas/coupon_code"
							}
						},
						"required": [
							"name",
							"email",
							"standard_id"
						]
					},
					"significant_beneficiaries": {
						"additionalProperties": false,
						"properties": {
							"affiliations": {
								"additionalProperties": false,
								"properties": {
									"affiliation_0": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_1": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_2": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_3": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_4": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_5": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_6": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_7": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_8": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_9": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Information about all of the significant beneficiaries' affiliations. 10 affiliations are allowed at most."
							},
							"entities": {
								"additionalProperties": false,
								"properties": {
									"art_and_culture": {
										"type": "boolean",
										"default": false
									},
									"education": {
										"type": "boolean",
										"default": false
									},
									"individual": {
										"type": "boolean",
										"default": false
									},
									"labor_union": {
										"type": "boolean",
										"default": false
									},
									"other": {
										"type": "string",
										"maxLength": 255,
										"minLength": 1,
										"nullable": true
									},
									"political_organization": {
										"type": "boolean",
										"default": false
									},
									"religious": {
										"type": "boolean",
										"default": false
									},
									"social_service_and_economic_development": {
										"type": "boolean",
										"default": false
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Describe significant beneficiaries' entity type."
							},
							"geographies": {
								"additionalProperties": false,
								"properties": {
									"international": {
										"type": "array",
										"minItems": 1,
										"uniqueItems": true,
										"items": {
											"$ref": "#/components/schemas/country_code"
										}
									},
									"local": {
										"type": "boolean",
										"default": true
									},
									"national": {
										"type": "boolean",
										"default": false
									},
									"regional": {
										"type": "boolean",
										"default": false
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Information about significant beneficiaries' geographic locations, including `regional` and `international` details."
							},
							"non_domestic_location_beneficiaries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"$ref": "#/components/schemas/country_code"
								},
								"nullable": true,
								"description": "**Note:** Although this is nested in the `significant_beneficiaries` object, this information must be collected for all non-domestic beneficiaries, even if they receive or control less than 10% of the organization's funds."
							}
						},
						"type": "object",
						"description": "Identify significant beneficiaries. **Note:** A significant beneficiary either receives or is responsible for 10% or more of the organization's funds."
					},
					"significant_donors": {
						"additionalProperties": false,
						"properties": {
							"corporate_entity": {
								"type": "boolean",
								"default": false
							},
							"endowment_fund": {
								"type": "boolean",
								"default": false
							},
							"government": {
								"type": "boolean",
								"default": false
							},
							"individual": {
								"type": "boolean",
								"default": false
							},
							"institutional": {
								"type": "boolean",
								"default": false
							},
							"other": {
								"type": "string",
								"maxLength": 255,
								"minLength": 1,
								"nullable": true
							},
							"other_charitable_organization": {
								"type": "boolean",
								"default": false
							}
						},
						"type": "object",
						"nullable": true,
						"description": "Identify significant donors. **Note:** A significant donor contributes 10% or more of the organization's total volume."
					}
				},
				"required": [
					"additional_representatives",
					"address",
					"api_version",
					"controller",
					"country",
					"create_time",
					"description",
					"entity_country_info",
					"entity_name",
					"id",
					"owner",
					"path",
					"phone",
					"primary_url",
					"resource",
					"terms_of_service"
				],
				"type": "object",
				"x-label": "legal_entity-resp"
			},
			"legal_entities_id_verifications_representative_request": {
				"additionalProperties": false,
				"properties": {
					"personal_verification": {
						"additionalProperties": false,
						"properties": {
							"documents": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"uniqueItems": true,
								"description": "An array of document IDs. The document IDs are returned via the document upload feature in the JavaScript library. These documents will be used for identity verification. Check out Document Upload for more details."
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "legal_entities_id_verifications_representative_request"
			},
			"notification_preferences-resp": {
				"additionalProperties": false,
				"properties": {
					"callback_uri": {
						"type": "string"
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"id": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-notification_preferences"
					},
					"status": {
						"enum": [
							"active",
							"deleted",
							"unreachable"
						],
						"type": "string",
						"description": "Status of the notification preference. Possible values are: `active`, `unreachable`, `deleted`.",
						"x-enumDescriptions": {
							"active": "The notification preference is active and ready to be used.",
							"deleted": "The notification preference has already been deleted.",
							"unreachable": "The notification preference is unreachable. Please create a new one."
						}
					},
					"topic": {
						"type": "string"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_application_response"
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"create_time",
					"topic",
					"callback_uri",
					"status"
				],
				"type": "object",
				"x-label": "notification_preferences-resp"
			},
			"order-resp": {
				"additionalProperties": false,
				"properties": {
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of alternate tax for the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"buyer": {
						"$ref": "#/components/schemas/buyer-resp"
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the payout method was created."
					},
					"currency": {
						"$ref": "#/components/schemas/currency-nullable"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`.",
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						}
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"id": {
						"$ref": "#/components/schemas/orders_id"
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"nullable": true,
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/orders_item_response"
								},
								"tax_amount": {
									"type": "integer",
									"nullable": true,
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"nullable": true,
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"nullable": true,
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"owner": {
						"$ref": "#/components/schemas/orders_owner_response"
					},
					"path": {
						"type": "string",
						"description": "The path of resource and resource ID."
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-orders"
					},
					"service_address": {
						"$ref": "#/components/schemas/orders_address_response"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/orders_address_response"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/orders_address_response"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"nullable": true,
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"nullable": true,
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri-nullable"
							}
						},
						"type": "object",
						"nullable": true,
						"description": "Shipping status details associated with the order."
					},
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"state": {
						"enum": [
							"active",
							"deleted"
						],
						"type": "string",
						"description": "State of the order. Possible values: `active`, `inactive`.",
						"x-enumDescriptions": {
							"active": "The Order contains information that is current and applicable to the associated Payment.",
							"deleted": "the Order contains information that is not current or applicable to the associated Payment and has been deleted."
						}
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`.",
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						}
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms_nullable_response"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`.",
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						}
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"type": "object",
				"x-label": "order-resp"
			},
			"shared_payment_bank_us_request": {
				"additionalProperties": false,
				"properties": {
					"account_holder": {
						"$ref": "#/components/schemas/payment_bank_us_holder-req"
					},
					"account_number": {
						"$ref": "#/components/schemas/us_bank_account_number"
					},
					"account_type": {
						"enum": [
							"checking",
							"savings"
						],
						"type": "string",
						"description": "The account type. Possible values include: `checking`, `savings`.",
						"x-enumDescriptions": {
							"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
							"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
						}
					},
					"routing_number": {
						"$ref": "#/components/schemas/us_bank_routing_number"
					}
				},
				"required": [
					"routing_number",
					"account_number",
					"account_type",
					"account_holder"
				],
				"type": "object",
				"x-label": "shared_payment_bank_us_request",
				"description": "Raw bank account information."
			},
			"shared_buyer_request": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"legal_entity",
							"legal_entity_id"
						],
						"x-enumDescriptions": {
							"legal_entity": "",
							"legal_entity_id": ""
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Your platform can only provide two entries. If you embed legal entity information inline set type to `legal_entity_id`."
					},
					"legal_entity": {
						"$ref": "#/components/schemas/shared_legal_entity_request"
					},
					"legal_entity_id": {
						"type": "string",
						"nullable": true,
						"description": "Merchant's Legal Entity ID associated with the order."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"description": "Buyer of the order. **Required** if the order is not created in-line with a /payment_methods request.",
				"x-label": "shared_buyer_request"
			},
			"payments-v3_0": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "Amount in the lowest denomination."
					},
					"amount_disputed": {
						"type": "integer"
					},
					"amount_refunded": {
						"type": "integer"
					},
					"authorization_code": {
						"$ref": "#/components/schemas/cc-authorization_code"
					},
					"capture_at": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"nullable": true,
						"description": "For payments with a credit card payment method, designate the time at which this payment will capture using a UNIX epoch timestamp. The capture time cannot be more than 7 days in the future. Note that epoch timestamps use the UTC timezone."
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"id": {
						"type": "string",
						"nullable": true,
						"description": "ID of the payment, generated by WePay when the payment is created."
					},
					"initiated_by": {
						"$ref": "#/components/schemas/initiated_by-resp"
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payment_method": {
						"$ref": "#/components/schemas/shared_payment_method_response"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payments"
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"failed",
							"canceled"
						],
						"x-enumDescriptions": {
							"pending": "This payment is processing, but is not yet included in the account's available or reserve balance. Find more information in the `pending_reasons` structure.",
							"completed": "This payment has finished processing, and is now available in either the account's available or reserved balance. **Note:** A payment can have a completed status and simultaneously have a refund or dispute issued against it.",
							"failed": "This payment has failed to process, and cannot be made available to the merchant. Find more information in the `failure_reason` structure.",
							"canceled": "This payment was canceled. If the cancellation was inadvertent, a new payment will need to be created."
						},
						"type": "string",
						"description": "Status of the payment. Possible values include: `canceled` `completed`, `failed`, `pending`."
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"auto_capture": {
						"type": "boolean",
						"description": "For payments with a credit card payment method, set to `false` to create a delayed-capture payment. Capture the payment within 7 days with the [POST /payments/{id}/capture](/api/latest/operation/POST_payments-id-capture/) endpoint. Alternatively, cancel the payment with the [POST /payments/{id}/cancel](/api/latest/operation/POST_payments-id-cancel/) endpoint."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"failure_reason": {
						"$ref": "#/components/schemas/payments_failure_reason_response"
					},
					"fee_amount": {
						"type": "integer",
						"description": "Specifies the fee amount your platform will collect from the payment. The amount should be in the lowest denomination. **Note:** Platforms leveraging the blended rate pricing model should use this parameter. This parameter is not applicable to platforms leveraging the Merchant IC+ pricing model."
					},
					"order": {
						"$ref": "#/components/schemas/shared_order_response"
					},
					"pending_reasons": {
						"items": {
							"$ref": "#/components/schemas/payments_pending_reasons_response"
						},
						"type": "array",
						"nullable": true,
						"description": "Explains why this payment is pending and may contain an array of reasons."
					},
					"txnr_app_fee": {
						"$ref": "#/components/schemas/txnr_app_fee"
					},
					"txnr_merchant": {
						"$ref": "#/components/schemas/txnr_merchant"
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"status",
					"amount",
					"amount_refunded",
					"amount_disputed",
					"currency",
					"payment_method",
					"initiated_by",
					"reference_id",
					"capture_at",
					"authorization_code"
				],
				"type": "object",
				"x-label": "payments-v3_0"
			},
			"payment_method-resp": {
				"additionalProperties": false,
				"properties": {
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"id": {
						"type": "string",
						"description": "ID of the payment method, generated by WePay when the payment method is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_payment_method_owner_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payment_methods"
					},
					"status": {
						"enum": [
							"unverified",
							"verified",
							"verification_failed",
							"deleted"
						],
						"x-enumDescriptions": {
							"unverified": "This payment method has not been verified yet and cannot be used to create payments until the status updates to `verified`.",
							"verified": "This payment method has successfully been verified and can now be used to create payments.",
							"verification_failed": "Verification attempt(s) for this payment method have failed. If this value returns, the payer should double check their payment details and re-submit them.",
							"deleted": "This payment method has been permanently deleted and cannot be used to create any further payments."
						},
						"type": "string",
						"description": "Possible values include: `deleted`, `unverified`, `verification_failed`, `verified`."
					},
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"encoded_payment_method",
							"google_pay"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data."
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv_provided": {
								"type": "boolean"
							},
							"expiration_month": {
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"description": "The year the credit card expires."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"backing_display_name": {
								"type": "string",
								"nullable": true,
								"description": "The backing display name for the credit card."
							},
							"bin": {
								"type": "string",
								"description": "Bank identification number. The initial six digits of a credit card number. Null is returned if BIN is not available."
							},
							"card_brand": {
								"enum": [
									"visa",
									"mastercard",
									"discover",
									"amex",
									"jcb",
									"diners"
								],
								"x-enumDescriptions": {
									"visa": "",
									"mastercard": "",
									"discover": "",
									"amex": "",
									"jcb": "",
									"diners": ""
								},
								"type": "string",
								"description": "Brand of the credit card. Possible values include: `amex`, `discover`, `diners`, `jcb`, `mastercard`, `visa`."
							},
							"card_entry_type": {
								"enum": [
									"card_keyed",
									"card_emv",
									"card_swiped",
									"card_manual",
									"card_emv_contactless"
								],
								"x-enumDescriptions": {
									"card_keyed": "",
									"card_emv": "",
									"card_swiped": "",
									"card_manual": "",
									"card_emv_contactless": ""
								},
								"type": "string",
								"description": "Possible values include: `card_keyed`, `card_transfer`."
							},
							"display_name": {
								"type": "string",
								"description": "The display name for the credit card."
							},
							"last_four": {
								"type": "string",
								"description": "The last four digits of the credit card number."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"expiration_month",
							"expiration_year",
							"card_on_file",
							"recurring",
							"cvv_provided"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"payment_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
									"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account. **Note:** If you have verified your account via Plaid, this might be the last four numbers of your tokenized bank account number (TAN)."
							}
						},
						"required": [
							"account_type",
							"last_four",
							"account_holder"
						],
						"type": "object",
						"description": "Raw bank account information."
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"type",
					"status"
				],
				"type": "object",
				"x-label": "payment_method-resp"
			},
			"payout": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "ID of the payout, generated by WePay when the payout is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payouts"
					},
					"amount": {
						"type": "integer",
						"description": "Amount in cents."
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"complete_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"nullable": true,
						"description": "The time (in UNIX) the payout was completed."
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the payout was created."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"failure_reason": {
						"$ref": "#/components/schemas/payouts_failure_reason_response"
					},
					"payout_method": {
						"$ref": "#/components/schemas/shared_payout_method_response"
					},
					"pending_reasons": {
						"items": {
							"$ref": "#/components/schemas/payouts_pending_reasons_response"
						},
						"type": "array",
						"nullable": true
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"failed"
						],
						"x-enumDescriptions": {
							"pending": "WePay is currently processing this payout. See the `pending_reasons` structure for additional information.",
							"completed": "WePay has finished processing this payout. **Note:** Other bank institutions must also process payouts to bank accounts before the merchant will see the deposit in their account.",
							"failed": "WePay failed to process this payout. See the `failure_reason` structure for additional information."
						},
						"type": "string"
					},
					"txnr_failure": {
						"$ref": "#/components/schemas/txnr_failure"
					},
					"txnr_payout": {
						"$ref": "#/components/schemas/txnr_payout"
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner"
				],
				"type": "object",
				"x-label": "payout"
			},
			"payout_method-resp": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The ID of the payout method, generated by WePay when the payout method is created."
					},
					"path": {
						"type": "string",
						"description": "The path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payout_methods"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the payout method was created."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"nickname": {
						"type": "string",
						"maxLength": 64,
						"minLength": 1,
						"description": "The nickname of the payout method."
					},
					"owner": {
						"$ref": "#/components/schemas/payout_methods_owner_response"
					},
					"paper_check": {
						"additionalProperties": false,
						"properties": {
							"address": {
								"$ref": "#/components/schemas/payout_methods_paper_check_address"
							},
							"memo": {
								"description": "The memo that will be used on the check",
								"type": "string",
								"minLength": 1,
								"maxLength": 70
							}
						},
						"required": [
							"address"
						],
						"description": "Define how to payout a merchant based in the US via paper check. **Note:** Paper checks require permission from WePay, and only US-based merchants can receive payouts via paper check. Reach out to your integration team for further information.",
						"type": "object",
						"x-permission": {
							"type": "can_be_used",
							"phase": "post_token_expansion",
							"partner_config_key_path": "api.v3.payouts.paper_checks_enabled",
							"feature_name": "paper check"
						}
					},
					"payout_bank_ca": {
						"additionalProperties": false,
						"properties": {
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the credit card."
							}
						},
						"required": [
							"account_type",
							"last_four"
						],
						"type": "object",
						"description": "Contains parameters relevant to the payout method."
					},
					"payout_bank_gb": {
						"additionalProperties": false,
						"properties": {
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account."
							}
						},
						"required": [
							"last_four"
						],
						"type": "object",
						"description": "Contains parameters relevant to the payout method."
					},
					"payout_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account."
							}
						},
						"required": [
							"account_type",
							"last_four"
						],
						"type": "object",
						"description": "Contains parameters relevant to the payout method."
					},
					"status": {
						"enum": [
							"active",
							"disabled",
							"deleted"
						],
						"x-enumDescriptions": {
							"active": "This payout method is active, so it can be queried via the APIs and used as a merchant's payout method.",
							"disabled": "Due to three (3) failed attempts to send payouts to this payout method, it has been disabled. Find more information on the failed payouts by examining the `failure_reason` [object](/api/latest/operation/GET_payouts-id/#!c=200&path=failure_reason&t=response) of the payout resource. Note that disabled payout methods cannot be queried via the APIs or used as a merchant's payout method.",
							"deleted": "This payout method has been deleted, so it cannot be queried via the APIs or used as a merchant's payout method. If the payout method was being used as an account's payout method, a new payout method must be provided before the account's payout capability will be enabled again."
						},
						"type": "string",
						"description": "Describes the status of the specific payout method."
					},
					"type": {
						"enum": [
							"payout_bank_ca",
							"payout_bank_gb",
							"payout_bank_us",
							"paper_check"
						],
						"x-enumDescriptions": {
							"payout_bank_ca": "Bank account in Canada.",
							"payout_bank_gb": "Bank account in the UK (not currently supported).",
							"payout_bank_us": "Bank account in the US.",
							"paper_check": "Paper check delivered to an address in the US."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Possible values: `payout_bank_ca`, `payout_bank_us` and `payout_bank_gb`. **Note:** The `paper_check` option requires permission from WePay to use. Reach out to your integration team for assistance."
					}
				},
				"required": [
					"resource",
					"id",
					"path"
				],
				"type": "object",
				"x-label": "payout_method-resp"
			},
			"recoveries": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "Amount of the recovery."
					},
					"complete_time": {
						"type": "integer",
						"nullable": true,
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the recovery was completed."
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the recovery was created."
					},
					"currency": {
						"type": "string",
						"description": "ISO 4217 currency code. Possible values include: `CAD`, `GBP`, `USD`."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"failure_reason": {
						"$ref": "#/components/schemas/recoveries_failure_reason_response"
					},
					"id": {
						"type": "string",
						"description": "ID of the recovery, generated by WePay when the recovery is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"payout_method": {
						"$ref": "#/components/schemas/shared_payout_method_response"
					},
					"pending_reasons": {
						"items": {
							"$ref": "#/components/schemas/recoveries_pending_reasons_response"
						},
						"type": "array",
						"nullable": true,
						"description": "Reason why the status is pending and may contain an array of reasons."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-recoveries"
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"failed"
						],
						"x-enumDescriptions": {
							"pending": "WePay has started processing the recovery, but it is not yet available. Find more details in the `pending_reasons` structure.",
							"completed": "WePay has processed the recovery. Note that a recovery's status can change from `completed` to `failed` if the issuing bank rejects the debit.",
							"failed": "WePay could not process the recovery. Find more information in the `failure_reason` structure."
						},
						"type": "string",
						"description": "Status of the recovery. Possible values include: `completed`, `failed`, `pending`."
					},
					"txnr_failure": {
						"$ref": "#/components/schemas/txnr_failure"
					},
					"txnr_recovery": {
						"$ref": "#/components/schemas/txnr_recovery"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"create_time",
					"complete_time",
					"status",
					"amount",
					"currency",
					"owner",
					"payout_method",
					"pending_reasons",
					"failure_reason",
					"txnr_recovery",
					"txnr_failure",
					"custom_data"
				],
				"type": "object",
				"x-label": "recoveries"
			},
			"refund-resp": {
				"additionalProperties": false,
				"properties": {
					"amounts": {
						"$ref": "#/components/schemas/refunds_amounts"
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the refund was created."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"failure_reason": {
						"$ref": "#/components/schemas/refunds_failure_reason_response"
					},
					"id": {
						"type": "string",
						"description": "ID of the refund, generated by WePay when the refund is created."
					},
					"order": {
						"$ref": "#/components/schemas/shared_order_response"
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"payment": {
						"$ref": "#/components/schemas/shared_payment_response"
					},
					"payment_method": {
						"$ref": "#/components/schemas/shared_payment_method_response"
					},
					"pending_reasons": {
						"items": {
							"$ref": "#/components/schemas/refunds_pending_reasons_response"
						},
						"type": "array",
						"nullable": true,
						"description": "Explains why refund is pending and may contain an array of reasons."
					},
					"refund_reason": {
						"type": "string",
						"description": "The reason for this refund."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-refunds"
					},
					"status": {
						"type": "string",
						"description": "Status of the refund. Possible values include: `pending`, `completed`, `failed`."
					},
					"txnr_app_fee_refund": {
						"$ref": "#/components/schemas/txnr_app_fee_refund"
					},
					"txnr_merchant_refund": {
						"$ref": "#/components/schemas/txnr_merchant_refund"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					}
				},
				"required": [
					"amounts",
					"id",
					"resource",
					"path",
					"create_time",
					"owner",
					"status",
					"order",
					"payment",
					"payment_method",
					"refund_reason",
					"pending_reasons",
					"failure_reason",
					"txnr_merchant_refund",
					"txnr_app_fee_refund",
					"custom_data"
				],
				"type": "object",
				"x-label": "refund-resp"
			},
			"reports_report": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"description": "The account ID associated with the transaction report record."
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The timestamp (in UNIX seconds) for the creation of the transaction report record."
					},
					"id": {
						"type": "string",
						"description": "The transaction report record ID, generated by WePay when the record is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"report_type": {
						"enum": [
							"payment",
							"refund",
							"adjustment",
							"dispute",
							"chargeback_reversal",
							"recovery",
							"payout",
							"payout_return"
						],
						"x-enumDescriptions": {
							"payment": "Transaction reports relating to incoming payments.",
							"refund": "Transaction reports relating to refunds issued.",
							"adjustment": "Transaction reports relating to any adjustments issued.",
							"dispute": "Transaction reports relating to disputes.",
							"chargeback_reversal": "Transaction reports relating to reversed chargebacks.",
							"recovery": "Transaction reports relating to recoveries made.",
							"payout": "Transaction reports relating to payouts made.",
							"payout_return": "Transaction reports relating to payouts returned."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of Transaction Report. Possible values: `payment`, `refund`, `adjustment`, `dispute`, `chargeback_reversal`, `recovery`, `payout`, `payout_return`."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-reports"
					},
					"adjustment": {
						"$ref": "#/components/schemas/reports_adjustment"
					},
					"chargeback_reversal": {
						"$ref": "#/components/schemas/reports_chargeback_reversal"
					},
					"dispute": {
						"$ref": "#/components/schemas/reports_dispute"
					},
					"payment": {
						"$ref": "#/components/schemas/reports_payment"
					},
					"payout": {
						"$ref": "#/components/schemas/reports_payout"
					},
					"payout_return": {
						"$ref": "#/components/schemas/reports_payout_return"
					},
					"recovery": {
						"$ref": "#/components/schemas/reports_recovery"
					},
					"refund": {
						"$ref": "#/components/schemas/reports_refund"
					},
					"terminal_id": {
						"type": "string",
						"description": "The terminal ID associated with the transaction report record."
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"create_time",
					"account_id",
					"report_type",
					"owner",
					"api_version"
				],
				"type": "object",
				"nullable": true,
				"x-label": "reports_report",
				"description": "Contains details relevant to the transaction report."
			},
			"contactless_payments-req": {
				"type": "object",
				"description": "The request schema for modifying contactless payments configuration settings.",
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Determines if contactless payments are enabled."
					},
					"credit_debit_preference": {
						"type": "string",
						"enum": [
							"credit",
							"debit"
						],
						"x-enumDescriptions": {
							"credit": "If a card allows credit and debit transactions, automatically process the authorization as credit.",
							"debit": "If a card allows credit and debit transactions, automatically process the authorization as debit."
						},
						"description": "Determines how the terminal should prefer to charge contactless cards. `credit` is the EMV default, selecting the highest priority application in the card (which is the credit application). Debit preferred attempts to select debit network application on the card first.",
						"default": "credit"
					}
				},
				"required": [
					"enabled"
				],
				"x-label": "contactless_payments-req"
			},
			"terminals_address_request": {
				"additionalProperties": false,
				"properties": {
					"city": {
						"maxLength": 30,
						"type": "string",
						"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"line1": {
						"maxLength": 60,
						"type": "string",
						"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					},
					"postal_code": {
						"maxLength": 14,
						"type": "string",
						"description": "Postal code associated with the address."
					},
					"region": {
						"maxLength": 30,
						"type": "string",
						"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
					},
					"line2": {
						"maxLength": 60,
						"type": "string",
						"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
					}
				},
				"required": [
					"line1",
					"city",
					"postal_code",
					"region",
					"country"
				],
				"type": "object",
				"x-isAddress": true,
				"x-label": "terminals_address_request"
			},
			"terminal-resp": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"id": {
						"$ref": "#/components/schemas/id"
					},
					"last_call_home": {
						"type": "integer",
						"format": "int64",
						"nullable": true,
						"minimum": 0,
						"description": "The epoch timestamp of the last time this terminal called home. Null if the terminal has never done so."
					},
					"model": {
						"type": "string",
						"description": "The model of the physical terminal. **Note:** Models `ingenico_lane3000` and `xac_at170r` are currently only usable in the stage environment. If you are interested in using these models, please reach out to your integration team or account manager at WePay.",
						"enum": [
							"verifone_p400",
							"verifone_v400m",
							"ingenico_lane3000",
							"xac_at170r"
						],
						"x-enumDescriptions": {
							"verifone_p400": "This terminal is a [VeriFone P400](/card-present/procure-terminals/#verifone-p400).",
							"verifone_v400m": "This terminal is a [VeriFone V400m](/card-present/procure-terminals/#verifone-v400m).",
							"ingenico_lane3000": "This terminal is a an Ingenico Lane 3000. **Note:** This model is not generally available.",
							"xac_at170r": "This terminal is a an XAC AT170R, used in WePay's [Smart POS](/card-present/procure-smartpos/#xac-at170r) solution."
						}
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"reference_id": {
						"type": "string",
						"example": "abc12345",
						"maxLength": 255,
						"minLength": 1,
						"nullable": true
					},
					"resource": {
						"$ref": "#/components/schemas/resource-terminals"
					},
					"serial_number": {
						"type": "string",
						"description": "The serial number of the terminal.",
						"minLength": 1,
						"maxLength": 32,
						"pattern": "^[a-zA-Z0-9-]+$",
						"example": "FA00332-1000138"
					},
					"status": {
						"$ref": "#/components/schemas/terminals_status"
					},
					"terminal_application_version": {
						"type": "string",
						"nullable": true,
						"description": "The version of the application running on the terminal."
					},
					"terminal_configuration": {
						"additionalProperties": false,
						"properties": {
							"address": {
								"$ref": "#/components/schemas/terminals_address_response"
							},
							"contactless_payments": {
								"type": "object",
								"description": "The response schema for contactless payments configuration.",
								"properties": {
									"credit_debit_preference": {
										"type": "string",
										"enum": [
											"credit",
											"debit"
										],
										"default": "credit",
										"x-enumDescriptions": {
											"credit": "If a card allows credit and debit transactions, automatically process the authorization as credit.",
											"debit": "If a card allows credit and debit transactions, automatically process the authorization as debit."
										},
										"description": "Determines how the terminal should prefer to charge contactless cards. `credit` is the EMV default, selecting the highest priority application in the card (which is the credit application). Debit preferred attempts to select debit network application on the card first."
									},
									"enabled": {
										"type": "boolean"
									}
								},
								"required": [
									"enabled",
									"credit_debit_preference"
								]
							},
							"credit_debit_preference": {
								"type": "string",
								"enum": [
									"credit",
									"debit",
									"prompt"
								],
								"default": "prompt",
								"description": "Determines how the terminal should prefer credit vs debit when a card is dipped. `credit` indicates credit is the preferred application selection, whereas `debit` would prefer the debit application. `prompt` will perform the EMV default behavior, which is to prompt if multiple applications exist.",
								"x-enumDescriptions": {
									"credit": "If a card allows credit and debit transactions, automatically process the authorization as credit.",
									"debit": "If a card allows credit and debit transactions, automatically process the authorization as debit.",
									"prompt": "If a card allows credit and debit transactions, prompt the user to make a selection on the terminal."
								}
							},
							"currency": {
								"$ref": "#/components/schemas/usd-currency"
							},
							"deferred_authorization": {
								"$ref": "#/components/schemas/terminals_deferred_authorization"
							},
							"maintenance_window": {
								"type": "object",
								"description": "Configuration settings for the maintenance window of the physical terminal. Omitting the maintenance window field will result in the use of default values for the field's start and duration.",
								"additionalProperties": false,
								"properties": {
									"duration": {
										"type": "integer",
										"description": "The duration of the maintenance window in hours.",
										"minimum": 1,
										"maximum": 24,
										"default": 4
									},
									"start": {
										"type": "integer",
										"description": "The hour of the day that the maintenance window begins.",
										"minimum": 0,
										"maximum": 23,
										"default": 2
									}
								},
								"required": [
									"start",
									"duration"
								]
							},
							"manual_entry_configuration": {
								"$ref": "#/components/schemas/terminals_manual_entry_configuration"
							},
							"name": {
								"type": "string",
								"description": "The human readable name used to help identify the physical terminal.",
								"example": "Front Desk",
								"maxLength": 255,
								"nullable": true
							},
							"quick_chip": {
								"$ref": "#/components/schemas/terminals_quick_chip"
							},
							"receipt_header_merchant_name": {
								"maxLength": 32,
								"minLength": 1,
								"type": "string",
								"nullable": true,
								"description": "Specify the merchant name to print on receipts. If left null, the account `name` will be used on receipts. **Note:** strings longer than 24 characters will wrap to two lines on receipts printed from Terminals with a built-in printer."
							},
							"signature_required": {
								"type": "boolean",
								"description": "Whether or not this terminal requires signature verification from payers."
							},
							"sim_card_id": {
								"type": "string",
								"example": "5aad45c2-d128-466a-aae3-d42fef57e2f7",
								"description": "The identifier of the SIM card installed in the terminal. Nullable if terminal does not have a SIM card.",
								"nullable": true,
								"minLength": 1
							},
							"supported_card_brands": {
								"$ref": "#/components/schemas/terminals-supported_card_brands"
							},
							"timezone": {
								"type": "string",
								"description": "Timezone of the terminal'",
								"enum": [
									"Africa/Abidjan",
									"Africa/Accra",
									"Africa/Addis_Ababa",
									"Africa/Algiers",
									"Africa/Asmara",
									"Africa/Asmera",
									"Africa/Bamako",
									"Africa/Bangui",
									"Africa/Banjul",
									"Africa/Bissau",
									"Africa/Blantyre",
									"Africa/Brazzaville",
									"Africa/Bujumbura",
									"Africa/Cairo",
									"Africa/Casablanca",
									"Africa/Ceuta",
									"Africa/Conakry",
									"Africa/Dakar",
									"Africa/Dar_es_Salaam",
									"Africa/Djibouti",
									"Africa/Douala",
									"Africa/El_Aaiun",
									"Africa/Freetown",
									"Africa/Gaborone",
									"Africa/Harare",
									"Africa/Johannesburg",
									"Africa/Juba",
									"Africa/Kampala",
									"Africa/Khartoum",
									"Africa/Kigali",
									"Africa/Kinshasa",
									"Africa/Lagos",
									"Africa/Libreville",
									"Africa/Lome",
									"Africa/Luanda",
									"Africa/Lubumbashi",
									"Africa/Lusaka",
									"Africa/Malabo",
									"Africa/Maputo",
									"Africa/Maseru",
									"Africa/Mbabane",
									"Africa/Mogadishu",
									"Africa/Monrovia",
									"Africa/Nairobi",
									"Africa/Ndjamena",
									"Africa/Niamey",
									"Africa/Nouakchott",
									"Africa/Ouagadougou",
									"Africa/Porto-Novo",
									"Africa/Sao_Tome",
									"Africa/Timbuktu",
									"Africa/Tripoli",
									"Africa/Tunis",
									"Africa/Windhoek",
									"America/Adak",
									"America/Anchorage",
									"America/Anguilla",
									"America/Antigua",
									"America/Araguaina",
									"America/Argentina/Buenos_Aires",
									"America/Argentina/Catamarca",
									"America/Argentina/ComodRivadavia",
									"America/Argentina/Cordoba",
									"America/Argentina/Jujuy",
									"America/Argentina/La_Rioja",
									"America/Argentina/Mendoza",
									"America/Argentina/Rio_Gallegos",
									"America/Argentina/Salta",
									"America/Argentina/San_Juan",
									"America/Argentina/San_Luis",
									"America/Argentina/Tucuman",
									"America/Argentina/Ushuaia",
									"America/Aruba",
									"America/Asuncion",
									"America/Atikokan",
									"America/Atka",
									"America/Bahia",
									"America/Bahia_Banderas",
									"America/Barbados",
									"America/Belem",
									"America/Belize",
									"America/Blanc-Sablon",
									"America/Boa_Vista",
									"America/Bogota",
									"America/Boise",
									"America/Buenos_Aires",
									"America/Cambridge_Bay",
									"America/Campo_Grande",
									"America/Cancun",
									"America/Caracas",
									"America/Catamarca",
									"America/Cayenne",
									"America/Cayman",
									"America/Chicago",
									"America/Chihuahua",
									"America/Coral_Harbour",
									"America/Cordoba",
									"America/Costa_Rica",
									"America/Creston",
									"America/Cuiaba",
									"America/Curacao",
									"America/Danmarkshavn",
									"America/Dawson",
									"America/Dawson_Creek",
									"America/Denver",
									"America/Detroit",
									"America/Dominica",
									"America/Edmonton",
									"America/Eirunepe",
									"America/El_Salvador",
									"America/Ensenada",
									"America/Fort_Nelson",
									"America/Fort_Wayne",
									"America/Fortaleza",
									"America/Glace_Bay",
									"America/Godthab",
									"America/Goose_Bay",
									"America/Grand_Turk",
									"America/Grenada",
									"America/Guadeloupe",
									"America/Guatemala",
									"America/Guayaquil",
									"America/Guyana",
									"America/Halifax",
									"America/Havana",
									"America/Hermosillo",
									"America/Indiana/Indianapolis",
									"America/Indiana/Knox",
									"America/Indiana/Marengo",
									"America/Indiana/Petersburg",
									"America/Indiana/Tell_City",
									"America/Indiana/Vevay",
									"America/Indiana/Vincennes",
									"America/Indiana/Winamac",
									"America/Indianapolis",
									"America/Inuvik",
									"America/Iqaluit",
									"America/Jamaica",
									"America/Jujuy",
									"America/Juneau",
									"America/Kentucky/Louisville",
									"America/Kentucky/Monticello",
									"America/Knox_IN",
									"America/Kralendijk",
									"America/La_Paz",
									"America/Lima",
									"America/Los_Angeles",
									"America/Louisville",
									"America/Lower_Princes",
									"America/Maceio",
									"America/Managua",
									"America/Manaus",
									"America/Marigot",
									"America/Martinique",
									"America/Matamoros",
									"America/Mazatlan",
									"America/Mendoza",
									"America/Menominee",
									"America/Merida",
									"America/Metlakatla",
									"America/Mexico_City",
									"America/Miquelon",
									"America/Moncton",
									"America/Monterrey",
									"America/Montevideo",
									"America/Montreal",
									"America/Montserrat",
									"America/Nassau",
									"America/New_York",
									"America/Nipigon",
									"America/Nome",
									"America/Noronha",
									"America/North_Dakota/Beulah",
									"America/North_Dakota/Center",
									"America/North_Dakota/New_Salem",
									"America/Ojinaga",
									"America/Panama",
									"America/Pangnirtung",
									"America/Paramaribo",
									"America/Phoenix",
									"America/Port-au-Prince",
									"America/Port_of_Spain",
									"America/Porto_Acre",
									"America/Porto_Velho",
									"America/Puerto_Rico",
									"America/Punta_Arenas",
									"America/Rainy_River",
									"America/Rankin_Inlet",
									"America/Recife",
									"America/Regina",
									"America/Resolute",
									"America/Rio_Branco",
									"America/Rosario",
									"America/Santa_Isabel",
									"America/Santarem",
									"America/Santiago",
									"America/Santo_Domingo",
									"America/Sao_Paulo",
									"America/Scoresbysund",
									"America/Shiprock",
									"America/Sitka",
									"America/St_Barthelemy",
									"America/St_Johns",
									"America/St_Kitts",
									"America/St_Lucia",
									"America/St_Thomas",
									"America/St_Vincent",
									"America/Swift_Current",
									"America/Tegucigalpa",
									"America/Thule",
									"America/Thunder_Bay",
									"America/Tijuana",
									"America/Toronto",
									"America/Tortola",
									"America/Vancouver",
									"America/Virgin",
									"America/Whitehorse",
									"America/Winnipeg",
									"America/Yakutat",
									"America/Yellowknife",
									"Antarctica/Casey",
									"Antarctica/Davis",
									"Antarctica/DumontDUrville",
									"Antarctica/Macquarie",
									"Antarctica/Mawson",
									"Antarctica/McMurdo",
									"Antarctica/Palmer",
									"Antarctica/Rothera",
									"Antarctica/South_Pole",
									"Antarctica/Syowa",
									"Antarctica/Troll",
									"Antarctica/Vostok",
									"Arctic/Longyearbyen",
									"Asia/Aden",
									"Asia/Almaty",
									"Asia/Amman",
									"Asia/Anadyr",
									"Asia/Aqtau",
									"Asia/Aqtobe",
									"Asia/Ashgabat",
									"Asia/Ashkhabad",
									"Asia/Atyrau",
									"Asia/Baghdad",
									"Asia/Bahrain",
									"Asia/Baku",
									"Asia/Bangkok",
									"Asia/Barnaul",
									"Asia/Beirut",
									"Asia/Bishkek",
									"Asia/Brunei",
									"Asia/Calcutta",
									"Asia/Chita",
									"Asia/Choibalsan",
									"Asia/Chongqing",
									"Asia/Chungking",
									"Asia/Colombo",
									"Asia/Dacca",
									"Asia/Damascus",
									"Asia/Dhaka",
									"Asia/Dili",
									"Asia/Dubai",
									"Asia/Dushanbe",
									"Asia/Famagusta",
									"Asia/Gaza",
									"Asia/Harbin",
									"Asia/Hebron",
									"Asia/Ho_Chi_Minh",
									"Asia/Hong_Kong",
									"Asia/Hovd",
									"Asia/Irkutsk",
									"Asia/Istanbul",
									"Asia/Jakarta",
									"Asia/Jayapura",
									"Asia/Jerusalem",
									"Asia/Kabul",
									"Asia/Kamchatka",
									"Asia/Karachi",
									"Asia/Kashgar",
									"Asia/Kathmandu",
									"Asia/Katmandu",
									"Asia/Khandyga",
									"Asia/Kolkata",
									"Asia/Krasnoyarsk",
									"Asia/Kuala_Lumpur",
									"Asia/Kuching",
									"Asia/Kuwait",
									"Asia/Macao",
									"Asia/Macau",
									"Asia/Magadan",
									"Asia/Makassar",
									"Asia/Manila",
									"Asia/Muscat",
									"Asia/Nicosia",
									"Asia/Novokuznetsk",
									"Asia/Novosibirsk",
									"Asia/Omsk",
									"Asia/Oral",
									"Asia/Phnom_Penh",
									"Asia/Pontianak",
									"Asia/Pyongyang",
									"Asia/Qatar",
									"Asia/Qostanay",
									"Asia/Qyzylorda",
									"Asia/Rangoon",
									"Asia/Riyadh",
									"Asia/Saigon",
									"Asia/Sakhalin",
									"Asia/Samarkand",
									"Asia/Seoul",
									"Asia/Shanghai",
									"Asia/Singapore",
									"Asia/Srednekolymsk",
									"Asia/Taipei",
									"Asia/Tashkent",
									"Asia/Tbilisi",
									"Asia/Tehran",
									"Asia/Tel_Aviv",
									"Asia/Thimbu",
									"Asia/Thimphu",
									"Asia/Tokyo",
									"Asia/Tomsk",
									"Asia/Ujung_Pandang",
									"Asia/Ulaanbaatar",
									"Asia/Ulan_Bator",
									"Asia/Urumqi",
									"Asia/Ust-Nera",
									"Asia/Vientiane",
									"Asia/Vladivostok",
									"Asia/Yakutsk",
									"Asia/Yangon",
									"Asia/Yekaterinburg",
									"Asia/Yerevan",
									"Atlantic/Azores",
									"Atlantic/Bermuda",
									"Atlantic/Canary",
									"Atlantic/Cape_Verde",
									"Atlantic/Faeroe",
									"Atlantic/Faroe",
									"Atlantic/Jan_Mayen",
									"Atlantic/Madeira",
									"Atlantic/Reykjavik",
									"Atlantic/South_Georgia",
									"Atlantic/St_Helena",
									"Atlantic/Stanley",
									"Australia/Adelaide",
									"Australia/Brisbane",
									"Australia/Broken_Hill",
									"Australia/Canberra",
									"Australia/Currie",
									"Australia/Darwin",
									"Australia/Eucla",
									"Australia/Hobart",
									"Australia/Lindeman",
									"Australia/Lord_Howe",
									"Australia/Melbourne",
									"Australia/Perth",
									"Australia/Sydney",
									"Australia/Yancowinna",
									"Etc/GMT",
									"Etc/GMT+0",
									"Etc/GMT+1",
									"Etc/GMT+10",
									"Etc/GMT+11",
									"Etc/GMT+12",
									"Etc/GMT+2",
									"Etc/GMT+3",
									"Etc/GMT+4",
									"Etc/GMT+5",
									"Etc/GMT+6",
									"Etc/GMT+7",
									"Etc/GMT+8",
									"Etc/GMT+9",
									"Etc/GMT-0",
									"Etc/GMT-1",
									"Etc/GMT-10",
									"Etc/GMT-11",
									"Etc/GMT-12",
									"Etc/GMT-13",
									"Etc/GMT-14",
									"Etc/GMT-2",
									"Etc/GMT-3",
									"Etc/GMT-4",
									"Etc/GMT-5",
									"Etc/GMT-6",
									"Etc/GMT-7",
									"Etc/GMT-8",
									"Etc/GMT-9",
									"Etc/GMT0",
									"Etc/UTC",
									"Europe/Amsterdam",
									"Europe/Andorra",
									"Europe/Astrakhan",
									"Europe/Athens",
									"Europe/Belfast",
									"Europe/Belgrade",
									"Europe/Berlin",
									"Europe/Bratislava",
									"Europe/Brussels",
									"Europe/Bucharest",
									"Europe/Budapest",
									"Europe/Busingen",
									"Europe/Chisinau",
									"Europe/Copenhagen",
									"Europe/Dublin",
									"Europe/Gibraltar",
									"Europe/Guernsey",
									"Europe/Helsinki",
									"Europe/Isle_of_Man",
									"Europe/Istanbul",
									"Europe/Jersey",
									"Europe/Kaliningrad",
									"Europe/Kiev",
									"Europe/Kirov",
									"Europe/Lisbon",
									"Europe/Ljubljana",
									"Europe/London",
									"Europe/Luxembourg",
									"Europe/Madrid",
									"Europe/Malta",
									"Europe/Mariehamn",
									"Europe/Minsk",
									"Europe/Monaco",
									"Europe/Moscow",
									"Europe/Nicosia",
									"Europe/Oslo",
									"Europe/Paris",
									"Europe/Podgorica",
									"Europe/Prague",
									"Europe/Riga",
									"Europe/Rome",
									"Europe/Samara",
									"Europe/San_Marino",
									"Europe/Sarajevo",
									"Europe/Saratov",
									"Europe/Simferopol",
									"Europe/Skopje",
									"Europe/Sofia",
									"Europe/Stockholm",
									"Europe/Tallinn",
									"Europe/Tirane",
									"Europe/Tiraspol",
									"Europe/Ulyanovsk",
									"Europe/Uzhgorod",
									"Europe/Vaduz",
									"Europe/Vatican",
									"Europe/Vienna",
									"Europe/Vilnius",
									"Europe/Volgograd",
									"Europe/Warsaw",
									"Europe/Zagreb",
									"Europe/Zaporozhye",
									"Europe/Zurich",
									"GMT",
									"Indian/Antananarivo",
									"Indian/Chagos",
									"Indian/Christmas",
									"Indian/Cocos",
									"Indian/Comoro",
									"Indian/Kerguelen",
									"Indian/Mahe",
									"Indian/Maldives",
									"Indian/Mauritius",
									"Indian/Mayotte",
									"Indian/Reunion",
									"Pacific/Apia",
									"Pacific/Auckland",
									"Pacific/Bougainville",
									"Pacific/Chatham",
									"Pacific/Chuuk",
									"Pacific/Easter",
									"Pacific/Efate",
									"Pacific/Enderbury",
									"Pacific/Fakaofo",
									"Pacific/Fiji",
									"Pacific/Funafuti",
									"Pacific/Galapagos",
									"Pacific/Gambier",
									"Pacific/Guadalcanal",
									"Pacific/Guam",
									"Pacific/Honolulu",
									"Pacific/Johnston",
									"Pacific/Kiritimati",
									"Pacific/Kosrae",
									"Pacific/Kwajalein",
									"Pacific/Majuro",
									"Pacific/Marquesas",
									"Pacific/Midway",
									"Pacific/Nauru",
									"Pacific/Niue",
									"Pacific/Norfolk",
									"Pacific/Noumea",
									"Pacific/Pago_Pago",
									"Pacific/Palau",
									"Pacific/Pitcairn",
									"Pacific/Pohnpei",
									"Pacific/Ponape",
									"Pacific/Port_Moresby",
									"Pacific/Rarotonga",
									"Pacific/Saipan",
									"Pacific/Samoa",
									"Pacific/Tahiti",
									"Pacific/Tarawa",
									"Pacific/Tongatapu",
									"Pacific/Truk",
									"Pacific/Wake",
									"Pacific/Wallis",
									"Pacific/Yap",
									"US/Alaska",
									"US/Aleutian",
									"US/Arizona",
									"US/Central",
									"US/East-Indiana",
									"US/Eastern",
									"US/Hawaii",
									"US/Indiana-Starke",
									"US/Michigan",
									"US/Mountain",
									"US/Pacific",
									"US/Pacific-New",
									"US/Samoa",
									"UTC"
								],
								"x-enumDescriptions": {
									"Africa/Abidjan": "",
									"Africa/Accra": "",
									"Africa/Addis_Ababa": "",
									"Africa/Algiers": "",
									"Africa/Asmara": "",
									"Africa/Asmera": "",
									"Africa/Bamako": "",
									"Africa/Bangui": "",
									"Africa/Banjul": "",
									"Africa/Bissau": "",
									"Africa/Blantyre": "",
									"Africa/Brazzaville": "",
									"Africa/Bujumbura": "",
									"Africa/Cairo": "",
									"Africa/Casablanca": "",
									"Africa/Ceuta": "",
									"Africa/Conakry": "",
									"Africa/Dakar": "",
									"Africa/Dar_es_Salaam": "",
									"Africa/Djibouti": "",
									"Africa/Douala": "",
									"Africa/El_Aaiun": "",
									"Africa/Freetown": "",
									"Africa/Gaborone": "",
									"Africa/Harare": "",
									"Africa/Johannesburg": "",
									"Africa/Juba": "",
									"Africa/Kampala": "",
									"Africa/Khartoum": "",
									"Africa/Kigali": "",
									"Africa/Kinshasa": "",
									"Africa/Lagos": "",
									"Africa/Libreville": "",
									"Africa/Lome": "",
									"Africa/Luanda": "",
									"Africa/Lubumbashi": "",
									"Africa/Lusaka": "",
									"Africa/Malabo": "",
									"Africa/Maputo": "",
									"Africa/Maseru": "",
									"Africa/Mbabane": "",
									"Africa/Mogadishu": "",
									"Africa/Monrovia": "",
									"Africa/Nairobi": "",
									"Africa/Ndjamena": "",
									"Africa/Niamey": "",
									"Africa/Nouakchott": "",
									"Africa/Ouagadougou": "",
									"Africa/Porto-Novo": "",
									"Africa/Sao_Tome": "",
									"Africa/Timbuktu": "",
									"Africa/Tripoli": "",
									"Africa/Tunis": "",
									"Africa/Windhoek": "",
									"America/Adak": "",
									"America/Anchorage": "",
									"America/Anguilla": "",
									"America/Antigua": "",
									"America/Araguaina": "",
									"America/Argentina/Buenos_Aires": "",
									"America/Argentina/Catamarca": "",
									"America/Argentina/ComodRivadavia": "",
									"America/Argentina/Cordoba": "",
									"America/Argentina/Jujuy": "",
									"America/Argentina/La_Rioja": "",
									"America/Argentina/Mendoza": "",
									"America/Argentina/Rio_Gallegos": "",
									"America/Argentina/Salta": "",
									"America/Argentina/San_Juan": "",
									"America/Argentina/San_Luis": "",
									"America/Argentina/Tucuman": "",
									"America/Argentina/Ushuaia": "",
									"America/Aruba": "",
									"America/Asuncion": "",
									"America/Atikokan": "",
									"America/Atka": "",
									"America/Bahia": "",
									"America/Bahia_Banderas": "",
									"America/Barbados": "",
									"America/Belem": "",
									"America/Belize": "",
									"America/Blanc-Sablon": "",
									"America/Boa_Vista": "",
									"America/Bogota": "",
									"America/Boise": "",
									"America/Buenos_Aires": "",
									"America/Cambridge_Bay": "",
									"America/Campo_Grande": "",
									"America/Cancun": "",
									"America/Caracas": "",
									"America/Catamarca": "",
									"America/Cayenne": "",
									"America/Cayman": "",
									"America/Chicago": "",
									"America/Chihuahua": "",
									"America/Coral_Harbour": "",
									"America/Cordoba": "",
									"America/Costa_Rica": "",
									"America/Creston": "",
									"America/Cuiaba": "",
									"America/Curacao": "",
									"America/Danmarkshavn": "",
									"America/Dawson": "",
									"America/Dawson_Creek": "",
									"America/Denver": "",
									"America/Detroit": "",
									"America/Dominica": "",
									"America/Edmonton": "",
									"America/Eirunepe": "",
									"America/El_Salvador": "",
									"America/Ensenada": "",
									"America/Fort_Nelson": "",
									"America/Fort_Wayne": "",
									"America/Fortaleza": "",
									"America/Glace_Bay": "",
									"America/Godthab": "",
									"America/Goose_Bay": "",
									"America/Grand_Turk": "",
									"America/Grenada": "",
									"America/Guadeloupe": "",
									"America/Guatemala": "",
									"America/Guayaquil": "",
									"America/Guyana": "",
									"America/Halifax": "",
									"America/Havana": "",
									"America/Hermosillo": "",
									"America/Indiana/Indianapolis": "",
									"America/Indiana/Knox": "",
									"America/Indiana/Marengo": "",
									"America/Indiana/Petersburg": "",
									"America/Indiana/Tell_City": "",
									"America/Indiana/Vevay": "",
									"America/Indiana/Vincennes": "",
									"America/Indiana/Winamac": "",
									"America/Indianapolis": "",
									"America/Inuvik": "",
									"America/Iqaluit": "",
									"America/Jamaica": "",
									"America/Jujuy": "",
									"America/Juneau": "",
									"America/Kentucky/Louisville": "",
									"America/Kentucky/Monticello": "",
									"America/Knox_IN": "",
									"America/Kralendijk": "",
									"America/La_Paz": "",
									"America/Lima": "",
									"America/Los_Angeles": "",
									"America/Louisville": "",
									"America/Lower_Princes": "",
									"America/Maceio": "",
									"America/Managua": "",
									"America/Manaus": "",
									"America/Marigot": "",
									"America/Martinique": "",
									"America/Matamoros": "",
									"America/Mazatlan": "",
									"America/Mendoza": "",
									"America/Menominee": "",
									"America/Merida": "",
									"America/Metlakatla": "",
									"America/Mexico_City": "",
									"America/Miquelon": "",
									"America/Moncton": "",
									"America/Monterrey": "",
									"America/Montevideo": "",
									"America/Montreal": "",
									"America/Montserrat": "",
									"America/Nassau": "",
									"America/New_York": "",
									"America/Nipigon": "",
									"America/Nome": "",
									"America/Noronha": "",
									"America/North_Dakota/Beulah": "",
									"America/North_Dakota/Center": "",
									"America/North_Dakota/New_Salem": "",
									"America/Ojinaga": "",
									"America/Panama": "",
									"America/Pangnirtung": "",
									"America/Paramaribo": "",
									"America/Phoenix": "",
									"America/Port-au-Prince": "",
									"America/Port_of_Spain": "",
									"America/Porto_Acre": "",
									"America/Porto_Velho": "",
									"America/Puerto_Rico": "",
									"America/Punta_Arenas": "",
									"America/Rainy_River": "",
									"America/Rankin_Inlet": "",
									"America/Recife": "",
									"America/Regina": "",
									"America/Resolute": "",
									"America/Rio_Branco": "",
									"America/Rosario": "",
									"America/Santa_Isabel": "",
									"America/Santarem": "",
									"America/Santiago": "",
									"America/Santo_Domingo": "",
									"America/Sao_Paulo": "",
									"America/Scoresbysund": "",
									"America/Shiprock": "",
									"America/Sitka": "",
									"America/St_Barthelemy": "",
									"America/St_Johns": "",
									"America/St_Kitts": "",
									"America/St_Lucia": "",
									"America/St_Thomas": "",
									"America/St_Vincent": "",
									"America/Swift_Current": "",
									"America/Tegucigalpa": "",
									"America/Thule": "",
									"America/Thunder_Bay": "",
									"America/Tijuana": "",
									"America/Toronto": "",
									"America/Tortola": "",
									"America/Vancouver": "",
									"America/Virgin": "",
									"America/Whitehorse": "",
									"America/Winnipeg": "",
									"America/Yakutat": "",
									"America/Yellowknife": "",
									"Antarctica/Casey": "",
									"Antarctica/Davis": "",
									"Antarctica/DumontDUrville": "",
									"Antarctica/Macquarie": "",
									"Antarctica/Mawson": "",
									"Antarctica/McMurdo": "",
									"Antarctica/Palmer": "",
									"Antarctica/Rothera": "",
									"Antarctica/South_Pole": "",
									"Antarctica/Syowa": "",
									"Antarctica/Troll": "",
									"Antarctica/Vostok": "",
									"Arctic/Longyearbyen": "",
									"Asia/Aden": "",
									"Asia/Almaty": "",
									"Asia/Amman": "",
									"Asia/Anadyr": "",
									"Asia/Aqtau": "",
									"Asia/Aqtobe": "",
									"Asia/Ashgabat": "",
									"Asia/Ashkhabad": "",
									"Asia/Atyrau": "",
									"Asia/Baghdad": "",
									"Asia/Bahrain": "",
									"Asia/Baku": "",
									"Asia/Bangkok": "",
									"Asia/Barnaul": "",
									"Asia/Beirut": "",
									"Asia/Bishkek": "",
									"Asia/Brunei": "",
									"Asia/Calcutta": "",
									"Asia/Chita": "",
									"Asia/Choibalsan": "",
									"Asia/Chongqing": "",
									"Asia/Chungking": "",
									"Asia/Colombo": "",
									"Asia/Dacca": "",
									"Asia/Damascus": "",
									"Asia/Dhaka": "",
									"Asia/Dili": "",
									"Asia/Dubai": "",
									"Asia/Dushanbe": "",
									"Asia/Famagusta": "",
									"Asia/Gaza": "",
									"Asia/Harbin": "",
									"Asia/Hebron": "",
									"Asia/Ho_Chi_Minh": "",
									"Asia/Hong_Kong": "",
									"Asia/Hovd": "",
									"Asia/Irkutsk": "",
									"Asia/Istanbul": "",
									"Asia/Jakarta": "",
									"Asia/Jayapura": "",
									"Asia/Jerusalem": "",
									"Asia/Kabul": "",
									"Asia/Kamchatka": "",
									"Asia/Karachi": "",
									"Asia/Kashgar": "",
									"Asia/Kathmandu": "",
									"Asia/Katmandu": "",
									"Asia/Khandyga": "",
									"Asia/Kolkata": "",
									"Asia/Krasnoyarsk": "",
									"Asia/Kuala_Lumpur": "",
									"Asia/Kuching": "",
									"Asia/Kuwait": "",
									"Asia/Macao": "",
									"Asia/Macau": "",
									"Asia/Magadan": "",
									"Asia/Makassar": "",
									"Asia/Manila": "",
									"Asia/Muscat": "",
									"Asia/Nicosia": "",
									"Asia/Novokuznetsk": "",
									"Asia/Novosibirsk": "",
									"Asia/Omsk": "",
									"Asia/Oral": "",
									"Asia/Phnom_Penh": "",
									"Asia/Pontianak": "",
									"Asia/Pyongyang": "",
									"Asia/Qatar": "",
									"Asia/Qostanay": "",
									"Asia/Qyzylorda": "",
									"Asia/Rangoon": "",
									"Asia/Riyadh": "",
									"Asia/Saigon": "",
									"Asia/Sakhalin": "",
									"Asia/Samarkand": "",
									"Asia/Seoul": "",
									"Asia/Shanghai": "",
									"Asia/Singapore": "",
									"Asia/Srednekolymsk": "",
									"Asia/Taipei": "",
									"Asia/Tashkent": "",
									"Asia/Tbilisi": "",
									"Asia/Tehran": "",
									"Asia/Tel_Aviv": "",
									"Asia/Thimbu": "",
									"Asia/Thimphu": "",
									"Asia/Tokyo": "",
									"Asia/Tomsk": "",
									"Asia/Ujung_Pandang": "",
									"Asia/Ulaanbaatar": "",
									"Asia/Ulan_Bator": "",
									"Asia/Urumqi": "",
									"Asia/Ust-Nera": "",
									"Asia/Vientiane": "",
									"Asia/Vladivostok": "",
									"Asia/Yakutsk": "",
									"Asia/Yangon": "",
									"Asia/Yekaterinburg": "",
									"Asia/Yerevan": "",
									"Atlantic/Azores": "",
									"Atlantic/Bermuda": "",
									"Atlantic/Canary": "",
									"Atlantic/Cape_Verde": "",
									"Atlantic/Faeroe": "",
									"Atlantic/Faroe": "",
									"Atlantic/Jan_Mayen": "",
									"Atlantic/Madeira": "",
									"Atlantic/Reykjavik": "",
									"Atlantic/South_Georgia": "",
									"Atlantic/St_Helena": "",
									"Atlantic/Stanley": "",
									"Australia/Adelaide": "",
									"Australia/Brisbane": "",
									"Australia/Broken_Hill": "",
									"Australia/Canberra": "",
									"Australia/Currie": "",
									"Australia/Darwin": "",
									"Australia/Eucla": "",
									"Australia/Hobart": "",
									"Australia/Lindeman": "",
									"Australia/Lord_Howe": "",
									"Australia/Melbourne": "",
									"Australia/Perth": "",
									"Australia/Sydney": "",
									"Australia/Yancowinna": "",
									"Etc/GMT": "",
									"Etc/GMT+0": "",
									"Etc/GMT+1": "",
									"Etc/GMT+10": "",
									"Etc/GMT+11": "",
									"Etc/GMT+12": "",
									"Etc/GMT+2": "",
									"Etc/GMT+3": "",
									"Etc/GMT+4": "",
									"Etc/GMT+5": "",
									"Etc/GMT+6": "",
									"Etc/GMT+7": "",
									"Etc/GMT+8": "",
									"Etc/GMT+9": "",
									"Etc/GMT-0": "",
									"Etc/GMT-1": "",
									"Etc/GMT-10": "",
									"Etc/GMT-11": "",
									"Etc/GMT-12": "",
									"Etc/GMT-13": "",
									"Etc/GMT-14": "",
									"Etc/GMT-2": "",
									"Etc/GMT-3": "",
									"Etc/GMT-4": "",
									"Etc/GMT-5": "",
									"Etc/GMT-6": "",
									"Etc/GMT-7": "",
									"Etc/GMT-8": "",
									"Etc/GMT-9": "",
									"Etc/GMT0": "",
									"Etc/UTC": "",
									"Europe/Amsterdam": "",
									"Europe/Andorra": "",
									"Europe/Astrakhan": "",
									"Europe/Athens": "",
									"Europe/Belfast": "",
									"Europe/Belgrade": "",
									"Europe/Berlin": "",
									"Europe/Bratislava": "",
									"Europe/Brussels": "",
									"Europe/Bucharest": "",
									"Europe/Budapest": "",
									"Europe/Busingen": "",
									"Europe/Chisinau": "",
									"Europe/Copenhagen": "",
									"Europe/Dublin": "",
									"Europe/Gibraltar": "",
									"Europe/Guernsey": "",
									"Europe/Helsinki": "",
									"Europe/Isle_of_Man": "",
									"Europe/Istanbul": "",
									"Europe/Jersey": "",
									"Europe/Kaliningrad": "",
									"Europe/Kiev": "",
									"Europe/Kirov": "",
									"Europe/Lisbon": "",
									"Europe/Ljubljana": "",
									"Europe/London": "",
									"Europe/Luxembourg": "",
									"Europe/Madrid": "",
									"Europe/Malta": "",
									"Europe/Mariehamn": "",
									"Europe/Minsk": "",
									"Europe/Monaco": "",
									"Europe/Moscow": "",
									"Europe/Nicosia": "",
									"Europe/Oslo": "",
									"Europe/Paris": "",
									"Europe/Podgorica": "",
									"Europe/Prague": "",
									"Europe/Riga": "",
									"Europe/Rome": "",
									"Europe/Samara": "",
									"Europe/San_Marino": "",
									"Europe/Sarajevo": "",
									"Europe/Saratov": "",
									"Europe/Simferopol": "",
									"Europe/Skopje": "",
									"Europe/Sofia": "",
									"Europe/Stockholm": "",
									"Europe/Tallinn": "",
									"Europe/Tirane": "",
									"Europe/Tiraspol": "",
									"Europe/Ulyanovsk": "",
									"Europe/Uzhgorod": "",
									"Europe/Vaduz": "",
									"Europe/Vatican": "",
									"Europe/Vienna": "",
									"Europe/Vilnius": "",
									"Europe/Volgograd": "",
									"Europe/Warsaw": "",
									"Europe/Zagreb": "",
									"Europe/Zaporozhye": "",
									"Europe/Zurich": "",
									"GMT": "",
									"Indian/Antananarivo": "",
									"Indian/Chagos": "",
									"Indian/Christmas": "",
									"Indian/Cocos": "",
									"Indian/Comoro": "",
									"Indian/Kerguelen": "",
									"Indian/Mahe": "",
									"Indian/Maldives": "",
									"Indian/Mauritius": "",
									"Indian/Mayotte": "",
									"Indian/Reunion": "",
									"Pacific/Apia": "",
									"Pacific/Auckland": "",
									"Pacific/Bougainville": "",
									"Pacific/Chatham": "",
									"Pacific/Chuuk": "",
									"Pacific/Easter": "",
									"Pacific/Efate": "",
									"Pacific/Enderbury": "",
									"Pacific/Fakaofo": "",
									"Pacific/Fiji": "",
									"Pacific/Funafuti": "",
									"Pacific/Galapagos": "",
									"Pacific/Gambier": "",
									"Pacific/Guadalcanal": "",
									"Pacific/Guam": "",
									"Pacific/Honolulu": "",
									"Pacific/Johnston": "",
									"Pacific/Kiritimati": "",
									"Pacific/Kosrae": "",
									"Pacific/Kwajalein": "",
									"Pacific/Majuro": "",
									"Pacific/Marquesas": "",
									"Pacific/Midway": "",
									"Pacific/Nauru": "",
									"Pacific/Niue": "",
									"Pacific/Norfolk": "",
									"Pacific/Noumea": "",
									"Pacific/Pago_Pago": "",
									"Pacific/Palau": "",
									"Pacific/Pitcairn": "",
									"Pacific/Pohnpei": "",
									"Pacific/Ponape": "",
									"Pacific/Port_Moresby": "",
									"Pacific/Rarotonga": "",
									"Pacific/Saipan": "",
									"Pacific/Samoa": "",
									"Pacific/Tahiti": "",
									"Pacific/Tarawa": "",
									"Pacific/Tongatapu": "",
									"Pacific/Truk": "",
									"Pacific/Wake": "",
									"Pacific/Wallis": "",
									"Pacific/Yap": "",
									"US/Alaska": "",
									"US/Aleutian": "",
									"US/Arizona": "",
									"US/Central": "",
									"US/East-Indiana": "",
									"US/Eastern": "",
									"US/Hawaii": "",
									"US/Indiana-Starke": "",
									"US/Michigan": "",
									"US/Mountain": "",
									"US/Pacific": "",
									"US/Pacific-New": "",
									"US/Samoa": "",
									"UTC": ""
								}
							},
							"tip": {
								"$ref": "#/components/schemas/terminals_tip"
							}
						},
						"type": "object",
						"required": [
							"name",
							"maintenance_window",
							"manual_entry_configuration",
							"currency",
							"address",
							"supported_card_brands",
							"credit_debit_preference",
							"sim_card_id",
							"timezone",
							"tip",
							"signature_required",
							"contactless_payments",
							"quick_chip",
							"deferred_authorization",
							"receipt_header_merchant_name"
						]
					},
					"gateway_id": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"description": "Unique identifier of the terminal used by our payment gateway"
					}
				},
				"type": "object",
				"x-label": "terminal-resp",
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"api_version",
					"status",
					"serial_number",
					"model",
					"reference_id",
					"last_call_home",
					"terminal_application_version",
					"terminal_configuration"
				]
			},
			"transaction_record": {
				"additionalProperties": false,
				"properties": {
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the transaction record was created."
					},
					"id": {
						"type": "string",
						"description": "ID of the transaction record, generated by WePay when the transaction record is created."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"fee_amount": {
						"type": "integer",
						"description": "The fee amount applied to the transaction."
					},
					"gross_amount": {
						"type": "integer",
						"description": "The gross amount associated with the transaction."
					},
					"net_amount": {
						"type": "integer",
						"description": "The net amount associated with the transaction (gross - fee = net)."
					},
					"owner": {
						"additionalProperties": false,
						"properties": {
							"custom_data": {
								"$ref": "#/components/schemas/custom_data"
							},
							"id": {
								"type": "string",
								"description": "The ID of the resource that the transaction record reports on. Possible ID resources include: `adjustments`, `disputes`, `payments`, `payouts`, `recoveries`, `refunds`."
							},
							"path": {
								"type": "string",
								"description": "Path of resource and resource ID."
							},
							"resource": {
								"enum": [
									"adjustments",
									"disputes",
									"payments",
									"payouts",
									"recoveries",
									"refunds"
								],
								"type": "string",
								"description": "Helps organize information by identifying the resource type of the object data.",
								"x-enumDescriptions": {
									"adjustments": "The owner object for this transaction record is an adjustment.",
									"disputes": "The owner object for this transaction record is a dispute.",
									"payments": "The owner object for this transaction record is a payment.",
									"payouts": "The owner object for this transaction record is a payout.",
									"recoveries": "The owner object for this transaction record is a recovery.",
									"refunds": "The owner object for this transaction record is a refund."
								}
							}
						},
						"required": [
							"id",
							"resource",
							"path",
							"custom_data"
						],
						"type": "object",
						"description": "Owner returns ID and path. Possible values include: `adjustments`, `disputes`, `payments`, `payouts`, `recoveries`, `refunds`."
					},
					"type": {
						"enum": [
							"merchant_payment",
							"app_fee",
							"merchant_payment_refund",
							"app_fee_refund",
							"merchant_chargeback",
							"app_fee_chargeback",
							"merchant_chargeback_fee",
							"merchant_chargeback_reversal",
							"app_fee_chargeback_reversal",
							"payout",
							"payout_return",
							"recovery",
							"recovery_return",
							"adjustment"
						],
						"x-enumDescriptions": {
							"merchant_payment": "The `net` value is the amount credited to the merchant, the `fee_amount` value is the amount credited the the platform, and the `gross` value is the amount debited from the payer.",
							"app_fee": "The `net` value is the amount kept by the platform, the `fee_amount` value is the amount credited to WePay, and the `gross` value is the amount total amount debited from the merchant.",
							"merchant_payment_refund": "The `net` value is the amount debited from the merchant, the `fee_amount` value is the amount debited from the platform, and the `gross` value is the amount credited back to the payer.",
							"app_fee_refund": "The `net` value is the amount debited from the platform, the `fee_amount` value is the amount debited from WePay, and the `gross` value is the total amount in fees credited back to the payer.",
							"merchant_chargeback": "The `net` value is the amount debited from the merchant, the `fee_amount` value is the amount debited from the platform, and the `gross` value is the amount credited back to the payer.",
							"app_fee_chargeback": "The `net` value is the amount debited from the platform, the `fee_amount` value the amount debited from WePay, and the `gross` value is the total amount of fees credited back to the payer.",
							"merchant_chargeback_fee": "The `net` and `fee_amount` values will be the same and show the amount debited from the merchant, gross will be `0`.",
							"merchant_chargeback_reversal": "The `net` value is the amount credited to the merchant, the `fee_amount` value is the amount debited from the merchant and credited to the platform account, and the `gross` value is the amount debited from the payer.",
							"app_fee_chargeback_reversal": "The `net` value is the amount credited to the platform account, the `fee_amount` value is the amount credited to WePay, and the `gross` value is total amount of fees debited from the payer and credited to the platform & WePay.",
							"payout": "The `net` value is the amount credited to the merchant's payout method, the `fee_amount` value is the amount debited from the merchant and credited to the platform account, and the `gross` value is the amount debited from the merchant's account.",
							"payout_return": "The `net` value is the amount credited to the merchant's account, the `fee_amount` value is the amount debited from the gross and credited to the platform account, and the `gross` value is the amount debited from the merchant's payout method.",
							"recovery": "The `net` value is the amount credited to the merchant's account, the `fee_amount` value is the amount debited from the gross and credited to the platform account, and the `gross` value is the amount debited from the merchant's payout method.",
							"recovery_return": "The `net` value is the amount debited from the merchant's account, the `fee_amount` value is the amount debited from the platform account & WePay and credited to , and the `gross` value is the total amount credited to the merchant's payout method.",
							"adjustment": "The `net` value is the amount debited or credited from/to the merchant, the `fee_amount` value is the amount debited or credited from/to the platform account, and the `gross` value is the total amount of the adjustment.."
						},
						"type": "string",
						"description": "The type of transaction record. Possible values include: `adjustment`, `app_fee`, `app_fee_chargeback`, `app_fee_chargeback_reversal`, `app_fee_refund`, `merchant_chargeback`, `merchant_chargeback_fee`, `merchant_chargeback_reversal`, `merchant_payment`, `merchant_payment_refund`, `payout`, `payout_return`, `recovery`, `recovery_return`."
					}
				},
				"required": [
					"id",
					"path",
					"resource",
					"create_time"
				],
				"type": "object",
				"nullable": true,
				"x-label": "transaction_record",
				"description": "The response to a [GET /transaction_records/{id}](/api/#/http/api-endpoints/payment-operations/get-a-transaction-record) request. **Note:** Generating transaction records may be delayed for up to 6 hours."
			},
			"resource-capabilities": {
				"enum": [
					"capabilities"
				],
				"x-enumDescriptions": {
					"capabilities": ""
				},
				"type": "string",
				"x-label": "resource-capabilities",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"legal_entities_id_verifications_additional_representatives_response": {
				"additionalProperties": false,
				"properties": {
					"representative_0": {
						"additionalProperties": false,
						"properties": {
							"personal_verification": {
								"additionalProperties": false,
								"properties": {
									"verified": {
										"type": "boolean",
										"description": "Indicates if the personal verification details of the controller have been verified."
									},
									"current_issues": {
										"items": {
											"additionalProperties": false,
											"properties": {
												"issue_type": {
													"enum": [
														"additional_documents_required",
														"errant_fields",
														"identity_verification",
														"in_review",
														"risk_outreach"
													],
													"x-enumDescriptions": {
														"additional_documents_required": "**Note:** This is the default value for additional information during merchant verification, but can be replaced by `identity_verification` by working with your integration team. This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [Example notification](https://gist.github.com/wehub/edcae2ecefbd76df9e3b3e6a97a954cf).",
														"errant_fields": "This value describes missing or invalid onboarding information.",
														"identity_verification": "**Note:** Work with your integration team to enable this value, which would then replace `additional_documents_required` and enhance the end user experience. The preferred method is `identity_verification`, so please work with your integration team to get this enabled to replace the `additional_documents_required` value. WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives.",
														"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete.",
														"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant."
													},
													"type": "string",
													"description": "Indicates the reason(s) the current issue has appeared."
												},
												"target": {
													"additionalProperties": false,
													"properties": {
														"id": {
															"type": "string",
															"nullable": true
														},
														"path": {
															"type": "string",
															"nullable": true
														},
														"resource": {
															"type": "string",
															"nullable": true
														}
													},
													"required": [
														"resource",
														"id",
														"path"
													],
													"type": "object",
													"description": "Indicates the resource associated with the current issue."
												},
												"additional_documents_required": {
													"items": {
														"type": "string"
													},
													"type": "array",
													"description": "Indicates if additional documentation is required for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, then any and all required documentation will be presented in this array."
												},
												"errant_fields": {
													"additionalProperties": {
														"items": {
															"enum": [
																"is_false",
																"is_null",
																"is_po_box",
																"is_unsupported_value",
																"includes_dba",
																"does_not_match_provided_doc",
																"does_not_match_government_sources",
																"invalid_url"
															],
															"x-enumDescriptions": {
																"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
																"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
																"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
																"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
																"includes_dba": "Business Legal Name should not include Doing Business As (DBA).",
																"does_not_match_provided_doc": "The value of the target does not match provided documentation.",
																"does_not_match_government_sources": "The value of the target does not match government sources.",
																"invalid_url": "WePay cannot verify the URL. The merchant should double check their website URL and submit it again."
															},
															"type": "string"
														},
														"minItems": 1,
														"type": "array",
														"uniqueItems": true
													},
													"type": "object",
													"description": "Indicates which fields need to be updated."
												},
												"identity_verification": {
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"message": {
															"type": "string",
															"nullable": true,
															"description": "Agent provided contextual message."
														},
														"path": {
															"type": "string",
															"description": "Path to targeted individual (controller, entity, or additional_representative)"
														},
														"requested_documents": {
															"items": {
																"enum": [
																	"articles_of_association",
																	"benefits_card",
																	"birth_certificate",
																	"canadian_citizenship",
																	"canadian_health_card",
																	"certificate_of_association",
																	"certificate_of_authority",
																	"certificate_of_citizenship",
																	"certificate_of_formation",
																	"certificate_of_incorporation",
																	"certificate_of_naturalization",
																	"certificate_of_organization",
																	"certified_copy_of_court_order",
																	"charity_license",
																	"credit_card_statement",
																	"current_bank_statement",
																	"current_lease_contract",
																	"current_local_tax_bill",
																	"current_utility_bill",
																	"dba_registration",
																	"divorce_decree",
																	"drivers_license",
																	"electoral_register_entry",
																	"employment_authorization_card",
																	"evidence_of_authority",
																	"evidence_of_corporate_registration",
																	"evidence_of_name_change",
																	"evidence_of_nonprofit_registration",
																	"firearms_certificate",
																	"foreign_passport",
																	"hud_statement",
																	"identity_card_northern_ireland",
																	"insurance_bill",
																	"insurance_card",
																	"insurance_declaration_page",
																	"irs_501c3_determination",
																	"irs_confirmation_of_tin",
																	"marriage_certificate",
																	"matricula_consular_card",
																	"military_orders",
																	"mortgage_closing_document",
																	"mortgage_statement",
																	"national_identity_card",
																	"order_of_creation",
																	"other_evidence_of_filings",
																	"other_government_issued_photo_id",
																	"other_supporting_docs",
																	"partnership_agreement",
																	"passport",
																	"paystub",
																	"permanent_resident_card",
																	"sentri_card",
																	"social_insurance_number_card",
																	"social_security_benefit_notice",
																	"social_security_card",
																	"tax_exemption_letter",
																	"trust_agreement",
																	"vehicle_registration"
																],
																"x-enumDescriptions": {
																	"articles_of_association": "",
																	"benefits_card": "",
																	"birth_certificate": "",
																	"canadian_citizenship": "",
																	"canadian_health_card": "",
																	"certificate_of_association": "",
																	"certificate_of_authority": "",
																	"certificate_of_citizenship": "",
																	"certificate_of_formation": "",
																	"certificate_of_incorporation": "",
																	"certificate_of_naturalization": "",
																	"certificate_of_organization": "",
																	"certified_copy_of_court_order": "",
																	"charity_license": "",
																	"credit_card_statement": "",
																	"current_bank_statement": "",
																	"current_lease_contract": "",
																	"current_local_tax_bill": "",
																	"current_utility_bill": "",
																	"dba_registration": "",
																	"divorce_decree": "",
																	"drivers_license": "",
																	"electoral_register_entry": "",
																	"employment_authorization_card": "",
																	"evidence_of_authority": "",
																	"evidence_of_corporate_registration": "",
																	"evidence_of_name_change": "",
																	"evidence_of_nonprofit_registration": "",
																	"firearms_certificate": "",
																	"foreign_passport": "",
																	"hud_statement": "",
																	"identity_card_northern_ireland": "",
																	"insurance_bill": "",
																	"insurance_card": "",
																	"insurance_declaration_page": "",
																	"irs_501c3_determination": "",
																	"irs_confirmation_of_tin": "",
																	"marriage_certificate": "",
																	"matricula_consular_card": "",
																	"military_orders": "",
																	"mortgage_closing_document": "",
																	"mortgage_statement": "",
																	"national_identity_card": "",
																	"order_of_creation": "",
																	"other_evidence_of_filings": "",
																	"other_government_issued_photo_id": "",
																	"other_supporting_docs": "",
																	"partnership_agreement": "",
																	"passport": "",
																	"paystub": "",
																	"permanent_resident_card": "",
																	"sentri_card": "",
																	"social_insurance_number_card": "",
																	"social_security_benefit_notice": "",
																	"social_security_card": "",
																	"tax_exemption_letter": "",
																	"trust_agreement": "",
																	"vehicle_registration": ""
																},
																"type": "string"
															},
															"type": "array",
															"description": "Types of documents that would fulfill request."
														}
													},
													"required": [
														"path",
														"requested_documents",
														"message"
													]
												},
												"in_review": {
													"items": {
														"type": "string"
													},
													"type": "array",
													"description": "Indicates if verification information is under review (if any) for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, and `in_review` is `true`, then this array will contain the path of the item(s) under review."
												},
												"risk_outreach": {
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"message": {
															"type": "string",
															"nullable": true,
															"description": "Agent provided contextual message."
														},
														"path": {
															"type": "string",
															"description": "Path to targeted individual (controller, entity, or additional_representative)"
														},
														"requested_documents": {
															"items": {
																"enum": [
																	"articles_of_association",
																	"benefits_card",
																	"birth_certificate",
																	"canadian_citizenship",
																	"canadian_health_card",
																	"certificate_of_association",
																	"certificate_of_authority",
																	"certificate_of_citizenship",
																	"certificate_of_formation",
																	"certificate_of_incorporation",
																	"certificate_of_naturalization",
																	"certificate_of_organization",
																	"certified_copy_of_court_order",
																	"charity_license",
																	"credit_card_statement",
																	"current_bank_statement",
																	"current_lease_contract",
																	"current_local_tax_bill",
																	"current_utility_bill",
																	"dba_registration",
																	"divorce_decree",
																	"drivers_license",
																	"electoral_register_entry",
																	"employment_authorization_card",
																	"evidence_of_authority",
																	"evidence_of_corporate_registration",
																	"evidence_of_name_change",
																	"evidence_of_nonprofit_registration",
																	"firearms_certificate",
																	"foreign_passport",
																	"hud_statement",
																	"identity_card_northern_ireland",
																	"insurance_bill",
																	"insurance_card",
																	"insurance_declaration_page",
																	"irs_501c3_determination",
																	"irs_confirmation_of_tin",
																	"marriage_certificate",
																	"matricula_consular_card",
																	"military_orders",
																	"mortgage_closing_document",
																	"mortgage_statement",
																	"national_identity_card",
																	"order_of_creation",
																	"other_evidence_of_filings",
																	"other_government_issued_photo_id",
																	"other_supporting_docs",
																	"partnership_agreement",
																	"passport",
																	"paystub",
																	"permanent_resident_card",
																	"sentri_card",
																	"social_insurance_number_card",
																	"social_security_benefit_notice",
																	"social_security_card",
																	"tax_exemption_letter",
																	"trust_agreement",
																	"vehicle_registration"
																],
																"x-enumDescriptions": {
																	"articles_of_association": "",
																	"benefits_card": "",
																	"birth_certificate": "",
																	"canadian_citizenship": "",
																	"canadian_health_card": "",
																	"certificate_of_association": "",
																	"certificate_of_authority": "",
																	"certificate_of_citizenship": "",
																	"certificate_of_formation": "",
																	"certificate_of_incorporation": "",
																	"certificate_of_naturalization": "",
																	"certificate_of_organization": "",
																	"certified_copy_of_court_order": "",
																	"charity_license": "",
																	"credit_card_statement": "",
																	"current_bank_statement": "",
																	"current_lease_contract": "",
																	"current_local_tax_bill": "",
																	"current_utility_bill": "",
																	"dba_registration": "",
																	"divorce_decree": "",
																	"drivers_license": "",
																	"electoral_register_entry": "",
																	"employment_authorization_card": "",
																	"evidence_of_authority": "",
																	"evidence_of_corporate_registration": "",
																	"evidence_of_name_change": "",
																	"evidence_of_nonprofit_registration": "",
																	"firearms_certificate": "",
																	"foreign_passport": "",
																	"hud_statement": "",
																	"identity_card_northern_ireland": "",
																	"insurance_bill": "",
																	"insurance_card": "",
																	"insurance_declaration_page": "",
																	"irs_501c3_determination": "",
																	"irs_confirmation_of_tin": "",
																	"marriage_certificate": "",
																	"matricula_consular_card": "",
																	"military_orders": "",
																	"mortgage_closing_document": "",
																	"mortgage_statement": "",
																	"national_identity_card": "",
																	"order_of_creation": "",
																	"other_evidence_of_filings": "",
																	"other_government_issued_photo_id": "",
																	"other_supporting_docs": "",
																	"partnership_agreement": "",
																	"passport": "",
																	"paystub": "",
																	"permanent_resident_card": "",
																	"sentri_card": "",
																	"social_insurance_number_card": "",
																	"social_security_benefit_notice": "",
																	"social_security_card": "",
																	"tax_exemption_letter": "",
																	"trust_agreement": "",
																	"vehicle_registration": ""
																},
																"type": "string"
															},
															"type": "array",
															"description": "Types of documents that would fulfill request."
														}
													},
													"required": [
														"path",
														"requested_documents",
														"message"
													]
												}
											},
											"required": [
												"issue_type",
												"target"
											],
											"type": "object",
											"description": "Returns an array of objects identifying why WePay is unable to verify an entity, controller, or additional representative. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type` and will be one of: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`."
										},
										"type": "array"
									},
									"documents": {
										"items": {
											"additionalProperties": false,
											"properties": {
												"create_time": {
													"$ref": "#/components/schemas/create_time"
												},
												"id": {
													"$ref": "#/components/schemas/id"
												},
												"owner": {
													"$ref": "#/components/schemas/shared_owner_response"
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"reject_reason": {
													"additionalProperties": false,
													"properties": {
														"details": {
															"items": {
																"additionalProperties": false,
																"properties": {
																	"detail_code": {
																		"enum": [
																			"illegible",
																			"corrupt_file",
																			"info_mismatch",
																			"doc_unsupported",
																			"incomplete"
																		],
																		"type": "string",
																		"nullable": true,
																		"x-enumDescriptions": {
																			"illegible": "Quality of the file or text in the file was such that the document content could not be read.",
																			"corrupt_file": "The file could not be used. The merchant must create a new file and try again.",
																			"info_mismatch": "The information in the document did not match the information on file for the merchant. The merchant must provide documents with information pertaining to the business, otherwise re-submit the data provided to WePay.",
																			"doc_unsupported": "The provided document does not satisfy the requirement from WePay.",
																			"incomplete": "The provided document does not completely satisfy the requirements. Additional documents may be requested."
																		}
																	},
																	"detail_message": {
																		"type": "string",
																		"nullable": true
																	}
																},
																"required": [
																	"detail_code",
																	"detail_message"
																],
																"type": "object"
															},
															"type": "array",
															"uniqueItems": true
														},
														"reason_code": {
															"enum": [
																"failed_risk_review"
															],
															"type": "string",
															"x-enumDescriptions": {
																"failed_risk_review": "The provided document failed WePay risk review."
															}
														},
														"reason_message": {
															"type": "string"
														}
													},
													"required": [
														"reason_code",
														"reason_message",
														"details"
													],
													"type": "object",
													"nullable": true,
													"description": "Describes the reasons a document was rejected."
												},
												"resource": {
													"enum": [
														"documents"
													],
													"x-enumDescriptions": {
														"documents": ""
													},
													"type": "string"
												},
												"status": {
													"enum": [
														"in_review",
														"verified",
														"rejected"
													],
													"x-enumDescriptions": {
														"in_review": "The document has been received and is currently being reviewed by WePay. Once review is complete, the status will be updated.",
														"verified": "WePay was able to verify the information in the document, and no further action is needed for this specific requirement.",
														"rejected": "WePay was unable to verify the document, so the merchant must address the issues listed in the `reject_reason.detail_code` parameter."
													},
													"type": "string"
												},
												"type": {
													"enum": [
														"articles_of_association",
														"benefits_card",
														"birth_certificate",
														"canadian_citizenship",
														"canadian_health_card",
														"certificate_of_association",
														"certificate_of_authority",
														"certificate_of_citizenship",
														"certificate_of_formation",
														"certificate_of_incorporation",
														"certificate_of_naturalization",
														"certificate_of_organization",
														"certified_copy_of_court_order",
														"charity_license",
														"credit_card_statement",
														"current_bank_statement",
														"current_lease_contract",
														"current_local_tax_bill",
														"current_utility_bill",
														"dba_registration",
														"divorce_decree",
														"drivers_license",
														"electoral_register_entry",
														"employment_authorization_card",
														"evidence_of_authority",
														"evidence_of_corporate_registration",
														"evidence_of_name_change",
														"evidence_of_nonprofit_registration",
														"firearms_certificate",
														"foreign_passport",
														"hud_statement",
														"identity_card_northern_ireland",
														"insurance_bill",
														"insurance_card",
														"insurance_declaration_page",
														"irs_501c3_determination",
														"irs_confirmation_of_tin",
														"marriage_certificate",
														"matricula_consular_card",
														"military_orders",
														"mortgage_closing_document",
														"mortgage_statement",
														"national_identity_card",
														"order_of_creation",
														"other_evidence_of_filings",
														"other_government_issued_photo_id",
														"other_supporting_docs",
														"partnership_agreement",
														"passport",
														"paystub",
														"permanent_resident_card",
														"sentri_card",
														"social_insurance_number_card",
														"social_security_benefit_notice",
														"social_security_card",
														"tax_exemption_letter",
														"trust_agreement",
														"vehicle_registration"
													],
													"x-enumDescriptions": {
														"articles_of_association": "",
														"benefits_card": "",
														"birth_certificate": "",
														"canadian_citizenship": "",
														"canadian_health_card": "",
														"certificate_of_association": "",
														"certificate_of_authority": "",
														"certificate_of_citizenship": "",
														"certificate_of_formation": "",
														"certificate_of_incorporation": "",
														"certificate_of_naturalization": "",
														"certificate_of_organization": "",
														"certified_copy_of_court_order": "",
														"charity_license": "",
														"credit_card_statement": "",
														"current_bank_statement": "",
														"current_lease_contract": "",
														"current_local_tax_bill": "",
														"current_utility_bill": "",
														"dba_registration": "",
														"divorce_decree": "",
														"drivers_license": "",
														"electoral_register_entry": "",
														"employment_authorization_card": "",
														"evidence_of_authority": "",
														"evidence_of_corporate_registration": "",
														"evidence_of_name_change": "",
														"evidence_of_nonprofit_registration": "",
														"firearms_certificate": "",
														"foreign_passport": "",
														"hud_statement": "",
														"identity_card_northern_ireland": "",
														"insurance_bill": "",
														"insurance_card": "",
														"insurance_declaration_page": "",
														"irs_501c3_determination": "",
														"irs_confirmation_of_tin": "",
														"marriage_certificate": "",
														"matricula_consular_card": "",
														"military_orders": "",
														"mortgage_closing_document": "",
														"mortgage_statement": "",
														"national_identity_card": "",
														"order_of_creation": "",
														"other_evidence_of_filings": "",
														"other_government_issued_photo_id": "",
														"other_supporting_docs": "",
														"partnership_agreement": "",
														"passport": "",
														"paystub": "",
														"permanent_resident_card": "",
														"sentri_card": "",
														"social_insurance_number_card": "",
														"social_security_benefit_notice": "",
														"social_security_card": "",
														"tax_exemption_letter": "",
														"trust_agreement": "",
														"vehicle_registration": ""
													},
													"type": "string"
												}
											},
											"required": [
												"resource",
												"id",
												"path",
												"owner",
												"create_time",
												"type",
												"status",
												"reject_reason"
											],
											"type": "object"
										},
										"type": "array",
										"description": "The document IDs are returned via the document upload feature in the JavaScript library. These documents will be used for identity verification. Check out Document Upload for more details."
									}
								},
								"required": [
									"verified"
								],
								"type": "object",
								"description": "Personal information for additional beneficial owners of the legal entity. **Note:** You can pass `{}` to signify that this legal entity does not have any additional representatives."
							},
							"reference_id": {
								"$ref": "#/components/schemas/beneficial_owner_reference_id"
							}
						},
						"required": [
							"personal_verification"
						],
						"type": "object",
						"nullable": true,
						"description": "Personal details of the additional representative."
					},
					"representative_1": {
						"additionalProperties": false,
						"properties": {
							"personal_verification": {
								"additionalProperties": false,
								"properties": {
									"verified": {
										"type": "boolean",
										"description": "Indicates if the personal verification details of the controller have been verified."
									},
									"current_issues": {
										"items": {
											"additionalProperties": false,
											"properties": {
												"issue_type": {
													"enum": [
														"additional_documents_required",
														"errant_fields",
														"identity_verification",
														"in_review",
														"risk_outreach"
													],
													"x-enumDescriptions": {
														"additional_documents_required": "**Note:** This is the default value for additional information during merchant verification, but can be replaced by `identity_verification` by working with your integration team. This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [Example notification](https://gist.github.com/wehub/edcae2ecefbd76df9e3b3e6a97a954cf).",
														"errant_fields": "This value describes missing or invalid onboarding information.",
														"identity_verification": "**Note:** Work with your integration team to enable this value, which would then replace `additional_documents_required` and enhance the end user experience. The preferred method is `identity_verification`, so please work with your integration team to get this enabled to replace the `additional_documents_required` value. WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives.",
														"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete.",
														"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant."
													},
													"type": "string",
													"description": "Indicates the reason(s) the current issue has appeared."
												},
												"target": {
													"additionalProperties": false,
													"properties": {
														"id": {
															"type": "string",
															"nullable": true
														},
														"path": {
															"type": "string",
															"nullable": true
														},
														"resource": {
															"type": "string",
															"nullable": true
														}
													},
													"required": [
														"resource",
														"id",
														"path"
													],
													"type": "object",
													"description": "Indicates the resource associated with the current issue."
												},
												"additional_documents_required": {
													"items": {
														"type": "string"
													},
													"type": "array",
													"description": "Indicates if additional documentation is required for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, then any and all required documentation will be presented in this array."
												},
												"errant_fields": {
													"additionalProperties": {
														"items": {
															"enum": [
																"is_false",
																"is_null",
																"is_po_box",
																"is_unsupported_value",
																"includes_dba",
																"does_not_match_provided_doc",
																"does_not_match_government_sources",
																"invalid_url"
															],
															"x-enumDescriptions": {
																"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
																"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
																"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
																"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
																"includes_dba": "Business Legal Name should not include Doing Business As (DBA).",
																"does_not_match_provided_doc": "The value of the target does not match provided documentation.",
																"does_not_match_government_sources": "The value of the target does not match government sources.",
																"invalid_url": "WePay cannot verify the URL. The merchant should double check their website URL and submit it again."
															},
															"type": "string"
														},
														"minItems": 1,
														"type": "array",
														"uniqueItems": true
													},
													"type": "object",
													"description": "Indicates which fields need to be updated."
												},
												"identity_verification": {
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"message": {
															"type": "string",
															"nullable": true,
															"description": "Agent provided contextual message."
														},
														"path": {
															"type": "string",
															"description": "Path to targeted individual (controller, entity, or additional_representative)"
														},
														"requested_documents": {
															"items": {
																"enum": [
																	"articles_of_association",
																	"benefits_card",
																	"birth_certificate",
																	"canadian_citizenship",
																	"canadian_health_card",
																	"certificate_of_association",
																	"certificate_of_authority",
																	"certificate_of_citizenship",
																	"certificate_of_formation",
																	"certificate_of_incorporation",
																	"certificate_of_naturalization",
																	"certificate_of_organization",
																	"certified_copy_of_court_order",
																	"charity_license",
																	"credit_card_statement",
																	"current_bank_statement",
																	"current_lease_contract",
																	"current_local_tax_bill",
																	"current_utility_bill",
																	"dba_registration",
																	"divorce_decree",
																	"drivers_license",
																	"electoral_register_entry",
																	"employment_authorization_card",
																	"evidence_of_authority",
																	"evidence_of_corporate_registration",
																	"evidence_of_name_change",
																	"evidence_of_nonprofit_registration",
																	"firearms_certificate",
																	"foreign_passport",
																	"hud_statement",
																	"identity_card_northern_ireland",
																	"insurance_bill",
																	"insurance_card",
																	"insurance_declaration_page",
																	"irs_501c3_determination",
																	"irs_confirmation_of_tin",
																	"marriage_certificate",
																	"matricula_consular_card",
																	"military_orders",
																	"mortgage_closing_document",
																	"mortgage_statement",
																	"national_identity_card",
																	"order_of_creation",
																	"other_evidence_of_filings",
																	"other_government_issued_photo_id",
																	"other_supporting_docs",
																	"partnership_agreement",
																	"passport",
																	"paystub",
																	"permanent_resident_card",
																	"sentri_card",
																	"social_insurance_number_card",
																	"social_security_benefit_notice",
																	"social_security_card",
																	"tax_exemption_letter",
																	"trust_agreement",
																	"vehicle_registration"
																],
																"x-enumDescriptions": {
																	"articles_of_association": "",
																	"benefits_card": "",
																	"birth_certificate": "",
																	"canadian_citizenship": "",
																	"canadian_health_card": "",
																	"certificate_of_association": "",
																	"certificate_of_authority": "",
																	"certificate_of_citizenship": "",
																	"certificate_of_formation": "",
																	"certificate_of_incorporation": "",
																	"certificate_of_naturalization": "",
																	"certificate_of_organization": "",
																	"certified_copy_of_court_order": "",
																	"charity_license": "",
																	"credit_card_statement": "",
																	"current_bank_statement": "",
																	"current_lease_contract": "",
																	"current_local_tax_bill": "",
																	"current_utility_bill": "",
																	"dba_registration": "",
																	"divorce_decree": "",
																	"drivers_license": "",
																	"electoral_register_entry": "",
																	"employment_authorization_card": "",
																	"evidence_of_authority": "",
																	"evidence_of_corporate_registration": "",
																	"evidence_of_name_change": "",
																	"evidence_of_nonprofit_registration": "",
																	"firearms_certificate": "",
																	"foreign_passport": "",
																	"hud_statement": "",
																	"identity_card_northern_ireland": "",
																	"insurance_bill": "",
																	"insurance_card": "",
																	"insurance_declaration_page": "",
																	"irs_501c3_determination": "",
																	"irs_confirmation_of_tin": "",
																	"marriage_certificate": "",
																	"matricula_consular_card": "",
																	"military_orders": "",
																	"mortgage_closing_document": "",
																	"mortgage_statement": "",
																	"national_identity_card": "",
																	"order_of_creation": "",
																	"other_evidence_of_filings": "",
																	"other_government_issued_photo_id": "",
																	"other_supporting_docs": "",
																	"partnership_agreement": "",
																	"passport": "",
																	"paystub": "",
																	"permanent_resident_card": "",
																	"sentri_card": "",
																	"social_insurance_number_card": "",
																	"social_security_benefit_notice": "",
																	"social_security_card": "",
																	"tax_exemption_letter": "",
																	"trust_agreement": "",
																	"vehicle_registration": ""
																},
																"type": "string"
															},
															"type": "array",
															"description": "Types of documents that would fulfill request."
														}
													},
													"required": [
														"path",
														"requested_documents",
														"message"
													]
												},
												"in_review": {
													"items": {
														"type": "string"
													},
													"type": "array",
													"description": "Indicates if verification information is under review (if any) for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, and `in_review` is `true`, then this array will contain the path of the item(s) under review."
												},
												"risk_outreach": {
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"message": {
															"type": "string",
															"nullable": true,
															"description": "Agent provided contextual message."
														},
														"path": {
															"type": "string",
															"description": "Path to targeted individual (controller, entity, or additional_representative)"
														},
														"requested_documents": {
															"items": {
																"enum": [
																	"articles_of_association",
																	"benefits_card",
																	"birth_certificate",
																	"canadian_citizenship",
																	"canadian_health_card",
																	"certificate_of_association",
																	"certificate_of_authority",
																	"certificate_of_citizenship",
																	"certificate_of_formation",
																	"certificate_of_incorporation",
																	"certificate_of_naturalization",
																	"certificate_of_organization",
																	"certified_copy_of_court_order",
																	"charity_license",
																	"credit_card_statement",
																	"current_bank_statement",
																	"current_lease_contract",
																	"current_local_tax_bill",
																	"current_utility_bill",
																	"dba_registration",
																	"divorce_decree",
																	"drivers_license",
																	"electoral_register_entry",
																	"employment_authorization_card",
																	"evidence_of_authority",
																	"evidence_of_corporate_registration",
																	"evidence_of_name_change",
																	"evidence_of_nonprofit_registration",
																	"firearms_certificate",
																	"foreign_passport",
																	"hud_statement",
																	"identity_card_northern_ireland",
																	"insurance_bill",
																	"insurance_card",
																	"insurance_declaration_page",
																	"irs_501c3_determination",
																	"irs_confirmation_of_tin",
																	"marriage_certificate",
																	"matricula_consular_card",
																	"military_orders",
																	"mortgage_closing_document",
																	"mortgage_statement",
																	"national_identity_card",
																	"order_of_creation",
																	"other_evidence_of_filings",
																	"other_government_issued_photo_id",
																	"other_supporting_docs",
																	"partnership_agreement",
																	"passport",
																	"paystub",
																	"permanent_resident_card",
																	"sentri_card",
																	"social_insurance_number_card",
																	"social_security_benefit_notice",
																	"social_security_card",
																	"tax_exemption_letter",
																	"trust_agreement",
																	"vehicle_registration"
																],
																"x-enumDescriptions": {
																	"articles_of_association": "",
																	"benefits_card": "",
																	"birth_certificate": "",
																	"canadian_citizenship": "",
																	"canadian_health_card": "",
																	"certificate_of_association": "",
																	"certificate_of_authority": "",
																	"certificate_of_citizenship": "",
																	"certificate_of_formation": "",
																	"certificate_of_incorporation": "",
																	"certificate_of_naturalization": "",
																	"certificate_of_organization": "",
																	"certified_copy_of_court_order": "",
																	"charity_license": "",
																	"credit_card_statement": "",
																	"current_bank_statement": "",
																	"current_lease_contract": "",
																	"current_local_tax_bill": "",
																	"current_utility_bill": "",
																	"dba_registration": "",
																	"divorce_decree": "",
																	"drivers_license": "",
																	"electoral_register_entry": "",
																	"employment_authorization_card": "",
																	"evidence_of_authority": "",
																	"evidence_of_corporate_registration": "",
																	"evidence_of_name_change": "",
																	"evidence_of_nonprofit_registration": "",
																	"firearms_certificate": "",
																	"foreign_passport": "",
																	"hud_statement": "",
																	"identity_card_northern_ireland": "",
																	"insurance_bill": "",
																	"insurance_card": "",
																	"insurance_declaration_page": "",
																	"irs_501c3_determination": "",
																	"irs_confirmation_of_tin": "",
																	"marriage_certificate": "",
																	"matricula_consular_card": "",
																	"military_orders": "",
																	"mortgage_closing_document": "",
																	"mortgage_statement": "",
																	"national_identity_card": "",
																	"order_of_creation": "",
																	"other_evidence_of_filings": "",
																	"other_government_issued_photo_id": "",
																	"other_supporting_docs": "",
																	"partnership_agreement": "",
																	"passport": "",
																	"paystub": "",
																	"permanent_resident_card": "",
																	"sentri_card": "",
																	"social_insurance_number_card": "",
																	"social_security_benefit_notice": "",
																	"social_security_card": "",
																	"tax_exemption_letter": "",
																	"trust_agreement": "",
																	"vehicle_registration": ""
																},
																"type": "string"
															},
															"type": "array",
															"description": "Types of documents that would fulfill request."
														}
													},
													"required": [
														"path",
														"requested_documents",
														"message"
													]
												}
											},
											"required": [
												"issue_type",
												"target"
											],
											"type": "object",
											"description": "Returns an array of objects identifying why WePay is unable to verify an entity, controller, or additional representative. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type` and will be one of: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`."
										},
										"type": "array"
									},
									"documents": {
										"items": {
											"additionalProperties": false,
											"properties": {
												"create_time": {
													"$ref": "#/components/schemas/create_time"
												},
												"id": {
													"$ref": "#/components/schemas/id"
												},
												"owner": {
													"$ref": "#/components/schemas/shared_owner_response"
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"reject_reason": {
													"additionalProperties": false,
													"properties": {
														"details": {
															"items": {
																"additionalProperties": false,
																"properties": {
																	"detail_code": {
																		"enum": [
																			"illegible",
																			"corrupt_file",
																			"info_mismatch",
																			"doc_unsupported",
																			"incomplete"
																		],
																		"type": "string",
																		"nullable": true,
																		"x-enumDescriptions": {
																			"illegible": "Quality of the file or text in the file was such that the document content could not be read.",
																			"corrupt_file": "The file could not be used. The merchant must create a new file and try again.",
																			"info_mismatch": "The information in the document did not match the information on file for the merchant. The merchant must provide documents with information pertaining to the business, otherwise re-submit the data provided to WePay.",
																			"doc_unsupported": "The provided document does not satisfy the requirement from WePay.",
																			"incomplete": "The provided document does not completely satisfy the requirements. Additional documents may be requested."
																		}
																	},
																	"detail_message": {
																		"type": "string",
																		"nullable": true
																	}
																},
																"required": [
																	"detail_code",
																	"detail_message"
																],
																"type": "object"
															},
															"type": "array",
															"uniqueItems": true
														},
														"reason_code": {
															"enum": [
																"failed_risk_review"
															],
															"type": "string",
															"x-enumDescriptions": {
																"failed_risk_review": "The provided document failed WePay risk review."
															}
														},
														"reason_message": {
															"type": "string"
														}
													},
													"required": [
														"reason_code",
														"reason_message",
														"details"
													],
													"type": "object",
													"nullable": true,
													"description": "Describes the reasons a document was rejected."
												},
												"resource": {
													"enum": [
														"documents"
													],
													"x-enumDescriptions": {
														"documents": ""
													},
													"type": "string"
												},
												"status": {
													"enum": [
														"in_review",
														"verified",
														"rejected"
													],
													"x-enumDescriptions": {
														"in_review": "The document has been received and is currently being reviewed by WePay. Once review is complete, the status will be updated.",
														"verified": "WePay was able to verify the information in the document, and no further action is needed for this specific requirement.",
														"rejected": "WePay was unable to verify the document, so the merchant must address the issues listed in the `reject_reason.detail_code` parameter."
													},
													"type": "string"
												},
												"type": {
													"enum": [
														"articles_of_association",
														"benefits_card",
														"birth_certificate",
														"canadian_citizenship",
														"canadian_health_card",
														"certificate_of_association",
														"certificate_of_authority",
														"certificate_of_citizenship",
														"certificate_of_formation",
														"certificate_of_incorporation",
														"certificate_of_naturalization",
														"certificate_of_organization",
														"certified_copy_of_court_order",
														"charity_license",
														"credit_card_statement",
														"current_bank_statement",
														"current_lease_contract",
														"current_local_tax_bill",
														"current_utility_bill",
														"dba_registration",
														"divorce_decree",
														"drivers_license",
														"electoral_register_entry",
														"employment_authorization_card",
														"evidence_of_authority",
														"evidence_of_corporate_registration",
														"evidence_of_name_change",
														"evidence_of_nonprofit_registration",
														"firearms_certificate",
														"foreign_passport",
														"hud_statement",
														"identity_card_northern_ireland",
														"insurance_bill",
														"insurance_card",
														"insurance_declaration_page",
														"irs_501c3_determination",
														"irs_confirmation_of_tin",
														"marriage_certificate",
														"matricula_consular_card",
														"military_orders",
														"mortgage_closing_document",
														"mortgage_statement",
														"national_identity_card",
														"order_of_creation",
														"other_evidence_of_filings",
														"other_government_issued_photo_id",
														"other_supporting_docs",
														"partnership_agreement",
														"passport",
														"paystub",
														"permanent_resident_card",
														"sentri_card",
														"social_insurance_number_card",
														"social_security_benefit_notice",
														"social_security_card",
														"tax_exemption_letter",
														"trust_agreement",
														"vehicle_registration"
													],
													"x-enumDescriptions": {
														"articles_of_association": "",
														"benefits_card": "",
														"birth_certificate": "",
														"canadian_citizenship": "",
														"canadian_health_card": "",
														"certificate_of_association": "",
														"certificate_of_authority": "",
														"certificate_of_citizenship": "",
														"certificate_of_formation": "",
														"certificate_of_incorporation": "",
														"certificate_of_naturalization": "",
														"certificate_of_organization": "",
														"certified_copy_of_court_order": "",
														"charity_license": "",
														"credit_card_statement": "",
														"current_bank_statement": "",
														"current_lease_contract": "",
														"current_local_tax_bill": "",
														"current_utility_bill": "",
														"dba_registration": "",
														"divorce_decree": "",
														"drivers_license": "",
														"electoral_register_entry": "",
														"employment_authorization_card": "",
														"evidence_of_authority": "",
														"evidence_of_corporate_registration": "",
														"evidence_of_name_change": "",
														"evidence_of_nonprofit_registration": "",
														"firearms_certificate": "",
														"foreign_passport": "",
														"hud_statement": "",
														"identity_card_northern_ireland": "",
														"insurance_bill": "",
														"insurance_card": "",
														"insurance_declaration_page": "",
														"irs_501c3_determination": "",
														"irs_confirmation_of_tin": "",
														"marriage_certificate": "",
														"matricula_consular_card": "",
														"military_orders": "",
														"mortgage_closing_document": "",
														"mortgage_statement": "",
														"national_identity_card": "",
														"order_of_creation": "",
														"other_evidence_of_filings": "",
														"other_government_issued_photo_id": "",
														"other_supporting_docs": "",
														"partnership_agreement": "",
														"passport": "",
														"paystub": "",
														"permanent_resident_card": "",
														"sentri_card": "",
														"social_insurance_number_card": "",
														"social_security_benefit_notice": "",
														"social_security_card": "",
														"tax_exemption_letter": "",
														"trust_agreement": "",
														"vehicle_registration": ""
													},
													"type": "string"
												}
											},
											"required": [
												"resource",
												"id",
												"path",
												"owner",
												"create_time",
												"type",
												"status",
												"reject_reason"
											],
											"type": "object"
										},
										"type": "array",
										"description": "The document IDs are returned via the document upload feature in the JavaScript library. These documents will be used for identity verification. Check out Document Upload for more details."
									}
								},
								"required": [
									"verified"
								],
								"type": "object",
								"description": "Personal information for additional beneficial owners of the legal entity. **Note:** You can pass `{}` to signify that this legal entity does not have any additional representatives."
							},
							"reference_id": {
								"$ref": "#/components/schemas/beneficial_owner_reference_id"
							}
						},
						"required": [
							"personal_verification"
						],
						"type": "object",
						"nullable": true,
						"description": "Personal details of the additional representative."
					},
					"representative_2": {
						"additionalProperties": false,
						"properties": {
							"personal_verification": {
								"additionalProperties": false,
								"properties": {
									"verified": {
										"type": "boolean",
										"description": "Indicates if the personal verification details of the controller have been verified."
									},
									"current_issues": {
										"items": {
											"additionalProperties": false,
											"properties": {
												"issue_type": {
													"enum": [
														"additional_documents_required",
														"errant_fields",
														"identity_verification",
														"in_review",
														"risk_outreach"
													],
													"x-enumDescriptions": {
														"additional_documents_required": "**Note:** This is the default value for additional information during merchant verification, but can be replaced by `identity_verification` by working with your integration team. This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [Example notification](https://gist.github.com/wehub/edcae2ecefbd76df9e3b3e6a97a954cf).",
														"errant_fields": "This value describes missing or invalid onboarding information.",
														"identity_verification": "**Note:** Work with your integration team to enable this value, which would then replace `additional_documents_required` and enhance the end user experience. The preferred method is `identity_verification`, so please work with your integration team to get this enabled to replace the `additional_documents_required` value. WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives.",
														"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete.",
														"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant."
													},
													"type": "string",
													"description": "Indicates the reason(s) the current issue has appeared."
												},
												"target": {
													"additionalProperties": false,
													"properties": {
														"id": {
															"type": "string",
															"nullable": true
														},
														"path": {
															"type": "string",
															"nullable": true
														},
														"resource": {
															"type": "string",
															"nullable": true
														}
													},
													"required": [
														"resource",
														"id",
														"path"
													],
													"type": "object",
													"description": "Indicates the resource associated with the current issue."
												},
												"additional_documents_required": {
													"items": {
														"type": "string"
													},
													"type": "array",
													"description": "Indicates if additional documentation is required for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, then any and all required documentation will be presented in this array."
												},
												"errant_fields": {
													"additionalProperties": {
														"items": {
															"enum": [
																"is_false",
																"is_null",
																"is_po_box",
																"is_unsupported_value",
																"includes_dba",
																"does_not_match_provided_doc",
																"does_not_match_government_sources",
																"invalid_url"
															],
															"x-enumDescriptions": {
																"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
																"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
																"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
																"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
																"includes_dba": "Business Legal Name should not include Doing Business As (DBA).",
																"does_not_match_provided_doc": "The value of the target does not match provided documentation.",
																"does_not_match_government_sources": "The value of the target does not match government sources.",
																"invalid_url": "WePay cannot verify the URL. The merchant should double check their website URL and submit it again."
															},
															"type": "string"
														},
														"minItems": 1,
														"type": "array",
														"uniqueItems": true
													},
													"type": "object",
													"description": "Indicates which fields need to be updated."
												},
												"identity_verification": {
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"message": {
															"type": "string",
															"nullable": true,
															"description": "Agent provided contextual message."
														},
														"path": {
															"type": "string",
															"description": "Path to targeted individual (controller, entity, or additional_representative)"
														},
														"requested_documents": {
															"items": {
																"enum": [
																	"articles_of_association",
																	"benefits_card",
																	"birth_certificate",
																	"canadian_citizenship",
																	"canadian_health_card",
																	"certificate_of_association",
																	"certificate_of_authority",
																	"certificate_of_citizenship",
																	"certificate_of_formation",
																	"certificate_of_incorporation",
																	"certificate_of_naturalization",
																	"certificate_of_organization",
																	"certified_copy_of_court_order",
																	"charity_license",
																	"credit_card_statement",
																	"current_bank_statement",
																	"current_lease_contract",
																	"current_local_tax_bill",
																	"current_utility_bill",
																	"dba_registration",
																	"divorce_decree",
																	"drivers_license",
																	"electoral_register_entry",
																	"employment_authorization_card",
																	"evidence_of_authority",
																	"evidence_of_corporate_registration",
																	"evidence_of_name_change",
																	"evidence_of_nonprofit_registration",
																	"firearms_certificate",
																	"foreign_passport",
																	"hud_statement",
																	"identity_card_northern_ireland",
																	"insurance_bill",
																	"insurance_card",
																	"insurance_declaration_page",
																	"irs_501c3_determination",
																	"irs_confirmation_of_tin",
																	"marriage_certificate",
																	"matricula_consular_card",
																	"military_orders",
																	"mortgage_closing_document",
																	"mortgage_statement",
																	"national_identity_card",
																	"order_of_creation",
																	"other_evidence_of_filings",
																	"other_government_issued_photo_id",
																	"other_supporting_docs",
																	"partnership_agreement",
																	"passport",
																	"paystub",
																	"permanent_resident_card",
																	"sentri_card",
																	"social_insurance_number_card",
																	"social_security_benefit_notice",
																	"social_security_card",
																	"tax_exemption_letter",
																	"trust_agreement",
																	"vehicle_registration"
																],
																"x-enumDescriptions": {
																	"articles_of_association": "",
																	"benefits_card": "",
																	"birth_certificate": "",
																	"canadian_citizenship": "",
																	"canadian_health_card": "",
																	"certificate_of_association": "",
																	"certificate_of_authority": "",
																	"certificate_of_citizenship": "",
																	"certificate_of_formation": "",
																	"certificate_of_incorporation": "",
																	"certificate_of_naturalization": "",
																	"certificate_of_organization": "",
																	"certified_copy_of_court_order": "",
																	"charity_license": "",
																	"credit_card_statement": "",
																	"current_bank_statement": "",
																	"current_lease_contract": "",
																	"current_local_tax_bill": "",
																	"current_utility_bill": "",
																	"dba_registration": "",
																	"divorce_decree": "",
																	"drivers_license": "",
																	"electoral_register_entry": "",
																	"employment_authorization_card": "",
																	"evidence_of_authority": "",
																	"evidence_of_corporate_registration": "",
																	"evidence_of_name_change": "",
																	"evidence_of_nonprofit_registration": "",
																	"firearms_certificate": "",
																	"foreign_passport": "",
																	"hud_statement": "",
																	"identity_card_northern_ireland": "",
																	"insurance_bill": "",
																	"insurance_card": "",
																	"insurance_declaration_page": "",
																	"irs_501c3_determination": "",
																	"irs_confirmation_of_tin": "",
																	"marriage_certificate": "",
																	"matricula_consular_card": "",
																	"military_orders": "",
																	"mortgage_closing_document": "",
																	"mortgage_statement": "",
																	"national_identity_card": "",
																	"order_of_creation": "",
																	"other_evidence_of_filings": "",
																	"other_government_issued_photo_id": "",
																	"other_supporting_docs": "",
																	"partnership_agreement": "",
																	"passport": "",
																	"paystub": "",
																	"permanent_resident_card": "",
																	"sentri_card": "",
																	"social_insurance_number_card": "",
																	"social_security_benefit_notice": "",
																	"social_security_card": "",
																	"tax_exemption_letter": "",
																	"trust_agreement": "",
																	"vehicle_registration": ""
																},
																"type": "string"
															},
															"type": "array",
															"description": "Types of documents that would fulfill request."
														}
													},
													"required": [
														"path",
														"requested_documents",
														"message"
													]
												},
												"in_review": {
													"items": {
														"type": "string"
													},
													"type": "array",
													"description": "Indicates if verification information is under review (if any) for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, and `in_review` is `true`, then this array will contain the path of the item(s) under review."
												},
												"risk_outreach": {
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"message": {
															"type": "string",
															"nullable": true,
															"description": "Agent provided contextual message."
														},
														"path": {
															"type": "string",
															"description": "Path to targeted individual (controller, entity, or additional_representative)"
														},
														"requested_documents": {
															"items": {
																"enum": [
																	"articles_of_association",
																	"benefits_card",
																	"birth_certificate",
																	"canadian_citizenship",
																	"canadian_health_card",
																	"certificate_of_association",
																	"certificate_of_authority",
																	"certificate_of_citizenship",
																	"certificate_of_formation",
																	"certificate_of_incorporation",
																	"certificate_of_naturalization",
																	"certificate_of_organization",
																	"certified_copy_of_court_order",
																	"charity_license",
																	"credit_card_statement",
																	"current_bank_statement",
																	"current_lease_contract",
																	"current_local_tax_bill",
																	"current_utility_bill",
																	"dba_registration",
																	"divorce_decree",
																	"drivers_license",
																	"electoral_register_entry",
																	"employment_authorization_card",
																	"evidence_of_authority",
																	"evidence_of_corporate_registration",
																	"evidence_of_name_change",
																	"evidence_of_nonprofit_registration",
																	"firearms_certificate",
																	"foreign_passport",
																	"hud_statement",
																	"identity_card_northern_ireland",
																	"insurance_bill",
																	"insurance_card",
																	"insurance_declaration_page",
																	"irs_501c3_determination",
																	"irs_confirmation_of_tin",
																	"marriage_certificate",
																	"matricula_consular_card",
																	"military_orders",
																	"mortgage_closing_document",
																	"mortgage_statement",
																	"national_identity_card",
																	"order_of_creation",
																	"other_evidence_of_filings",
																	"other_government_issued_photo_id",
																	"other_supporting_docs",
																	"partnership_agreement",
																	"passport",
																	"paystub",
																	"permanent_resident_card",
																	"sentri_card",
																	"social_insurance_number_card",
																	"social_security_benefit_notice",
																	"social_security_card",
																	"tax_exemption_letter",
																	"trust_agreement",
																	"vehicle_registration"
																],
																"x-enumDescriptions": {
																	"articles_of_association": "",
																	"benefits_card": "",
																	"birth_certificate": "",
																	"canadian_citizenship": "",
																	"canadian_health_card": "",
																	"certificate_of_association": "",
																	"certificate_of_authority": "",
																	"certificate_of_citizenship": "",
																	"certificate_of_formation": "",
																	"certificate_of_incorporation": "",
																	"certificate_of_naturalization": "",
																	"certificate_of_organization": "",
																	"certified_copy_of_court_order": "",
																	"charity_license": "",
																	"credit_card_statement": "",
																	"current_bank_statement": "",
																	"current_lease_contract": "",
																	"current_local_tax_bill": "",
																	"current_utility_bill": "",
																	"dba_registration": "",
																	"divorce_decree": "",
																	"drivers_license": "",
																	"electoral_register_entry": "",
																	"employment_authorization_card": "",
																	"evidence_of_authority": "",
																	"evidence_of_corporate_registration": "",
																	"evidence_of_name_change": "",
																	"evidence_of_nonprofit_registration": "",
																	"firearms_certificate": "",
																	"foreign_passport": "",
																	"hud_statement": "",
																	"identity_card_northern_ireland": "",
																	"insurance_bill": "",
																	"insurance_card": "",
																	"insurance_declaration_page": "",
																	"irs_501c3_determination": "",
																	"irs_confirmation_of_tin": "",
																	"marriage_certificate": "",
																	"matricula_consular_card": "",
																	"military_orders": "",
																	"mortgage_closing_document": "",
																	"mortgage_statement": "",
																	"national_identity_card": "",
																	"order_of_creation": "",
																	"other_evidence_of_filings": "",
																	"other_government_issued_photo_id": "",
																	"other_supporting_docs": "",
																	"partnership_agreement": "",
																	"passport": "",
																	"paystub": "",
																	"permanent_resident_card": "",
																	"sentri_card": "",
																	"social_insurance_number_card": "",
																	"social_security_benefit_notice": "",
																	"social_security_card": "",
																	"tax_exemption_letter": "",
																	"trust_agreement": "",
																	"vehicle_registration": ""
																},
																"type": "string"
															},
															"type": "array",
															"description": "Types of documents that would fulfill request."
														}
													},
													"required": [
														"path",
														"requested_documents",
														"message"
													]
												}
											},
											"required": [
												"issue_type",
												"target"
											],
											"type": "object",
											"description": "Returns an array of objects identifying why WePay is unable to verify an entity, controller, or additional representative. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type` and will be one of: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`."
										},
										"type": "array"
									},
									"documents": {
										"items": {
											"additionalProperties": false,
											"properties": {
												"create_time": {
													"$ref": "#/components/schemas/create_time"
												},
												"id": {
													"$ref": "#/components/schemas/id"
												},
												"owner": {
													"$ref": "#/components/schemas/shared_owner_response"
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"reject_reason": {
													"additionalProperties": false,
													"properties": {
														"details": {
															"items": {
																"additionalProperties": false,
																"properties": {
																	"detail_code": {
																		"enum": [
																			"illegible",
																			"corrupt_file",
																			"info_mismatch",
																			"doc_unsupported",
																			"incomplete"
																		],
																		"type": "string",
																		"nullable": true,
																		"x-enumDescriptions": {
																			"illegible": "Quality of the file or text in the file was such that the document content could not be read.",
																			"corrupt_file": "The file could not be used. The merchant must create a new file and try again.",
																			"info_mismatch": "The information in the document did not match the information on file for the merchant. The merchant must provide documents with information pertaining to the business, otherwise re-submit the data provided to WePay.",
																			"doc_unsupported": "The provided document does not satisfy the requirement from WePay.",
																			"incomplete": "The provided document does not completely satisfy the requirements. Additional documents may be requested."
																		}
																	},
																	"detail_message": {
																		"type": "string",
																		"nullable": true
																	}
																},
																"required": [
																	"detail_code",
																	"detail_message"
																],
																"type": "object"
															},
															"type": "array",
															"uniqueItems": true
														},
														"reason_code": {
															"enum": [
																"failed_risk_review"
															],
															"type": "string",
															"x-enumDescriptions": {
																"failed_risk_review": "The provided document failed WePay risk review."
															}
														},
														"reason_message": {
															"type": "string"
														}
													},
													"required": [
														"reason_code",
														"reason_message",
														"details"
													],
													"type": "object",
													"nullable": true,
													"description": "Describes the reasons a document was rejected."
												},
												"resource": {
													"enum": [
														"documents"
													],
													"x-enumDescriptions": {
														"documents": ""
													},
													"type": "string"
												},
												"status": {
													"enum": [
														"in_review",
														"verified",
														"rejected"
													],
													"x-enumDescriptions": {
														"in_review": "The document has been received and is currently being reviewed by WePay. Once review is complete, the status will be updated.",
														"verified": "WePay was able to verify the information in the document, and no further action is needed for this specific requirement.",
														"rejected": "WePay was unable to verify the document, so the merchant must address the issues listed in the `reject_reason.detail_code` parameter."
													},
													"type": "string"
												},
												"type": {
													"enum": [
														"articles_of_association",
														"benefits_card",
														"birth_certificate",
														"canadian_citizenship",
														"canadian_health_card",
														"certificate_of_association",
														"certificate_of_authority",
														"certificate_of_citizenship",
														"certificate_of_formation",
														"certificate_of_incorporation",
														"certificate_of_naturalization",
														"certificate_of_organization",
														"certified_copy_of_court_order",
														"charity_license",
														"credit_card_statement",
														"current_bank_statement",
														"current_lease_contract",
														"current_local_tax_bill",
														"current_utility_bill",
														"dba_registration",
														"divorce_decree",
														"drivers_license",
														"electoral_register_entry",
														"employment_authorization_card",
														"evidence_of_authority",
														"evidence_of_corporate_registration",
														"evidence_of_name_change",
														"evidence_of_nonprofit_registration",
														"firearms_certificate",
														"foreign_passport",
														"hud_statement",
														"identity_card_northern_ireland",
														"insurance_bill",
														"insurance_card",
														"insurance_declaration_page",
														"irs_501c3_determination",
														"irs_confirmation_of_tin",
														"marriage_certificate",
														"matricula_consular_card",
														"military_orders",
														"mortgage_closing_document",
														"mortgage_statement",
														"national_identity_card",
														"order_of_creation",
														"other_evidence_of_filings",
														"other_government_issued_photo_id",
														"other_supporting_docs",
														"partnership_agreement",
														"passport",
														"paystub",
														"permanent_resident_card",
														"sentri_card",
														"social_insurance_number_card",
														"social_security_benefit_notice",
														"social_security_card",
														"tax_exemption_letter",
														"trust_agreement",
														"vehicle_registration"
													],
													"x-enumDescriptions": {
														"articles_of_association": "",
														"benefits_card": "",
														"birth_certificate": "",
														"canadian_citizenship": "",
														"canadian_health_card": "",
														"certificate_of_association": "",
														"certificate_of_authority": "",
														"certificate_of_citizenship": "",
														"certificate_of_formation": "",
														"certificate_of_incorporation": "",
														"certificate_of_naturalization": "",
														"certificate_of_organization": "",
														"certified_copy_of_court_order": "",
														"charity_license": "",
														"credit_card_statement": "",
														"current_bank_statement": "",
														"current_lease_contract": "",
														"current_local_tax_bill": "",
														"current_utility_bill": "",
														"dba_registration": "",
														"divorce_decree": "",
														"drivers_license": "",
														"electoral_register_entry": "",
														"employment_authorization_card": "",
														"evidence_of_authority": "",
														"evidence_of_corporate_registration": "",
														"evidence_of_name_change": "",
														"evidence_of_nonprofit_registration": "",
														"firearms_certificate": "",
														"foreign_passport": "",
														"hud_statement": "",
														"identity_card_northern_ireland": "",
														"insurance_bill": "",
														"insurance_card": "",
														"insurance_declaration_page": "",
														"irs_501c3_determination": "",
														"irs_confirmation_of_tin": "",
														"marriage_certificate": "",
														"matricula_consular_card": "",
														"military_orders": "",
														"mortgage_closing_document": "",
														"mortgage_statement": "",
														"national_identity_card": "",
														"order_of_creation": "",
														"other_evidence_of_filings": "",
														"other_government_issued_photo_id": "",
														"other_supporting_docs": "",
														"partnership_agreement": "",
														"passport": "",
														"paystub": "",
														"permanent_resident_card": "",
														"sentri_card": "",
														"social_insurance_number_card": "",
														"social_security_benefit_notice": "",
														"social_security_card": "",
														"tax_exemption_letter": "",
														"trust_agreement": "",
														"vehicle_registration": ""
													},
													"type": "string"
												}
											},
											"required": [
												"resource",
												"id",
												"path",
												"owner",
												"create_time",
												"type",
												"status",
												"reject_reason"
											],
											"type": "object"
										},
										"type": "array",
										"description": "The document IDs are returned via the document upload feature in the JavaScript library. These documents will be used for identity verification. Check out Document Upload for more details."
									}
								},
								"required": [
									"verified"
								],
								"type": "object",
								"description": "Personal information for additional beneficial owners of the legal entity. **Note:** You can pass `{}` to signify that this legal entity does not have any additional representatives."
							},
							"reference_id": {
								"$ref": "#/components/schemas/beneficial_owner_reference_id"
							}
						},
						"required": [
							"personal_verification"
						],
						"type": "object",
						"nullable": true,
						"description": "Personal details of the additional representative."
					},
					"representative_3": {
						"additionalProperties": false,
						"properties": {
							"personal_verification": {
								"additionalProperties": false,
								"properties": {
									"verified": {
										"type": "boolean",
										"description": "Indicates if the personal verification details of the controller have been verified."
									},
									"current_issues": {
										"items": {
											"additionalProperties": false,
											"properties": {
												"issue_type": {
													"enum": [
														"additional_documents_required",
														"errant_fields",
														"identity_verification",
														"in_review",
														"risk_outreach"
													],
													"x-enumDescriptions": {
														"additional_documents_required": "**Note:** This is the default value for additional information during merchant verification, but can be replaced by `identity_verification` by working with your integration team. This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [Example notification](https://gist.github.com/wehub/edcae2ecefbd76df9e3b3e6a97a954cf).",
														"errant_fields": "This value describes missing or invalid onboarding information.",
														"identity_verification": "**Note:** Work with your integration team to enable this value, which would then replace `additional_documents_required` and enhance the end user experience. The preferred method is `identity_verification`, so please work with your integration team to get this enabled to replace the `additional_documents_required` value. WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives.",
														"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete.",
														"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant."
													},
													"type": "string",
													"description": "Indicates the reason(s) the current issue has appeared."
												},
												"target": {
													"additionalProperties": false,
													"properties": {
														"id": {
															"type": "string",
															"nullable": true
														},
														"path": {
															"type": "string",
															"nullable": true
														},
														"resource": {
															"type": "string",
															"nullable": true
														}
													},
													"required": [
														"resource",
														"id",
														"path"
													],
													"type": "object",
													"description": "Indicates the resource associated with the current issue."
												},
												"additional_documents_required": {
													"items": {
														"type": "string"
													},
													"type": "array",
													"description": "Indicates if additional documentation is required for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, then any and all required documentation will be presented in this array."
												},
												"errant_fields": {
													"additionalProperties": {
														"items": {
															"enum": [
																"is_false",
																"is_null",
																"is_po_box",
																"is_unsupported_value",
																"includes_dba",
																"does_not_match_provided_doc",
																"does_not_match_government_sources",
																"invalid_url"
															],
															"x-enumDescriptions": {
																"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
																"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
																"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
																"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
																"includes_dba": "Business Legal Name should not include Doing Business As (DBA).",
																"does_not_match_provided_doc": "The value of the target does not match provided documentation.",
																"does_not_match_government_sources": "The value of the target does not match government sources.",
																"invalid_url": "WePay cannot verify the URL. The merchant should double check their website URL and submit it again."
															},
															"type": "string"
														},
														"minItems": 1,
														"type": "array",
														"uniqueItems": true
													},
													"type": "object",
													"description": "Indicates which fields need to be updated."
												},
												"identity_verification": {
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"message": {
															"type": "string",
															"nullable": true,
															"description": "Agent provided contextual message."
														},
														"path": {
															"type": "string",
															"description": "Path to targeted individual (controller, entity, or additional_representative)"
														},
														"requested_documents": {
															"items": {
																"enum": [
																	"articles_of_association",
																	"benefits_card",
																	"birth_certificate",
																	"canadian_citizenship",
																	"canadian_health_card",
																	"certificate_of_association",
																	"certificate_of_authority",
																	"certificate_of_citizenship",
																	"certificate_of_formation",
																	"certificate_of_incorporation",
																	"certificate_of_naturalization",
																	"certificate_of_organization",
																	"certified_copy_of_court_order",
																	"charity_license",
																	"credit_card_statement",
																	"current_bank_statement",
																	"current_lease_contract",
																	"current_local_tax_bill",
																	"current_utility_bill",
																	"dba_registration",
																	"divorce_decree",
																	"drivers_license",
																	"electoral_register_entry",
																	"employment_authorization_card",
																	"evidence_of_authority",
																	"evidence_of_corporate_registration",
																	"evidence_of_name_change",
																	"evidence_of_nonprofit_registration",
																	"firearms_certificate",
																	"foreign_passport",
																	"hud_statement",
																	"identity_card_northern_ireland",
																	"insurance_bill",
																	"insurance_card",
																	"insurance_declaration_page",
																	"irs_501c3_determination",
																	"irs_confirmation_of_tin",
																	"marriage_certificate",
																	"matricula_consular_card",
																	"military_orders",
																	"mortgage_closing_document",
																	"mortgage_statement",
																	"national_identity_card",
																	"order_of_creation",
																	"other_evidence_of_filings",
																	"other_government_issued_photo_id",
																	"other_supporting_docs",
																	"partnership_agreement",
																	"passport",
																	"paystub",
																	"permanent_resident_card",
																	"sentri_card",
																	"social_insurance_number_card",
																	"social_security_benefit_notice",
																	"social_security_card",
																	"tax_exemption_letter",
																	"trust_agreement",
																	"vehicle_registration"
																],
																"x-enumDescriptions": {
																	"articles_of_association": "",
																	"benefits_card": "",
																	"birth_certificate": "",
																	"canadian_citizenship": "",
																	"canadian_health_card": "",
																	"certificate_of_association": "",
																	"certificate_of_authority": "",
																	"certificate_of_citizenship": "",
																	"certificate_of_formation": "",
																	"certificate_of_incorporation": "",
																	"certificate_of_naturalization": "",
																	"certificate_of_organization": "",
																	"certified_copy_of_court_order": "",
																	"charity_license": "",
																	"credit_card_statement": "",
																	"current_bank_statement": "",
																	"current_lease_contract": "",
																	"current_local_tax_bill": "",
																	"current_utility_bill": "",
																	"dba_registration": "",
																	"divorce_decree": "",
																	"drivers_license": "",
																	"electoral_register_entry": "",
																	"employment_authorization_card": "",
																	"evidence_of_authority": "",
																	"evidence_of_corporate_registration": "",
																	"evidence_of_name_change": "",
																	"evidence_of_nonprofit_registration": "",
																	"firearms_certificate": "",
																	"foreign_passport": "",
																	"hud_statement": "",
																	"identity_card_northern_ireland": "",
																	"insurance_bill": "",
																	"insurance_card": "",
																	"insurance_declaration_page": "",
																	"irs_501c3_determination": "",
																	"irs_confirmation_of_tin": "",
																	"marriage_certificate": "",
																	"matricula_consular_card": "",
																	"military_orders": "",
																	"mortgage_closing_document": "",
																	"mortgage_statement": "",
																	"national_identity_card": "",
																	"order_of_creation": "",
																	"other_evidence_of_filings": "",
																	"other_government_issued_photo_id": "",
																	"other_supporting_docs": "",
																	"partnership_agreement": "",
																	"passport": "",
																	"paystub": "",
																	"permanent_resident_card": "",
																	"sentri_card": "",
																	"social_insurance_number_card": "",
																	"social_security_benefit_notice": "",
																	"social_security_card": "",
																	"tax_exemption_letter": "",
																	"trust_agreement": "",
																	"vehicle_registration": ""
																},
																"type": "string"
															},
															"type": "array",
															"description": "Types of documents that would fulfill request."
														}
													},
													"required": [
														"path",
														"requested_documents",
														"message"
													]
												},
												"in_review": {
													"items": {
														"type": "string"
													},
													"type": "array",
													"description": "Indicates if verification information is under review (if any) for this specific path. For instance, if examining `controller.personal_verification.current_issues.additional_documents_required`, and `in_review` is `true`, then this array will contain the path of the item(s) under review."
												},
												"risk_outreach": {
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"message": {
															"type": "string",
															"nullable": true,
															"description": "Agent provided contextual message."
														},
														"path": {
															"type": "string",
															"description": "Path to targeted individual (controller, entity, or additional_representative)"
														},
														"requested_documents": {
															"items": {
																"enum": [
																	"articles_of_association",
																	"benefits_card",
																	"birth_certificate",
																	"canadian_citizenship",
																	"canadian_health_card",
																	"certificate_of_association",
																	"certificate_of_authority",
																	"certificate_of_citizenship",
																	"certificate_of_formation",
																	"certificate_of_incorporation",
																	"certificate_of_naturalization",
																	"certificate_of_organization",
																	"certified_copy_of_court_order",
																	"charity_license",
																	"credit_card_statement",
																	"current_bank_statement",
																	"current_lease_contract",
																	"current_local_tax_bill",
																	"current_utility_bill",
																	"dba_registration",
																	"divorce_decree",
																	"drivers_license",
																	"electoral_register_entry",
																	"employment_authorization_card",
																	"evidence_of_authority",
																	"evidence_of_corporate_registration",
																	"evidence_of_name_change",
																	"evidence_of_nonprofit_registration",
																	"firearms_certificate",
																	"foreign_passport",
																	"hud_statement",
																	"identity_card_northern_ireland",
																	"insurance_bill",
																	"insurance_card",
																	"insurance_declaration_page",
																	"irs_501c3_determination",
																	"irs_confirmation_of_tin",
																	"marriage_certificate",
																	"matricula_consular_card",
																	"military_orders",
																	"mortgage_closing_document",
																	"mortgage_statement",
																	"national_identity_card",
																	"order_of_creation",
																	"other_evidence_of_filings",
																	"other_government_issued_photo_id",
																	"other_supporting_docs",
																	"partnership_agreement",
																	"passport",
																	"paystub",
																	"permanent_resident_card",
																	"sentri_card",
																	"social_insurance_number_card",
																	"social_security_benefit_notice",
																	"social_security_card",
																	"tax_exemption_letter",
																	"trust_agreement",
																	"vehicle_registration"
																],
																"x-enumDescriptions": {
																	"articles_of_association": "",
																	"benefits_card": "",
																	"birth_certificate": "",
																	"canadian_citizenship": "",
																	"canadian_health_card": "",
																	"certificate_of_association": "",
																	"certificate_of_authority": "",
																	"certificate_of_citizenship": "",
																	"certificate_of_formation": "",
																	"certificate_of_incorporation": "",
																	"certificate_of_naturalization": "",
																	"certificate_of_organization": "",
																	"certified_copy_of_court_order": "",
																	"charity_license": "",
																	"credit_card_statement": "",
																	"current_bank_statement": "",
																	"current_lease_contract": "",
																	"current_local_tax_bill": "",
																	"current_utility_bill": "",
																	"dba_registration": "",
																	"divorce_decree": "",
																	"drivers_license": "",
																	"electoral_register_entry": "",
																	"employment_authorization_card": "",
																	"evidence_of_authority": "",
																	"evidence_of_corporate_registration": "",
																	"evidence_of_name_change": "",
																	"evidence_of_nonprofit_registration": "",
																	"firearms_certificate": "",
																	"foreign_passport": "",
																	"hud_statement": "",
																	"identity_card_northern_ireland": "",
																	"insurance_bill": "",
																	"insurance_card": "",
																	"insurance_declaration_page": "",
																	"irs_501c3_determination": "",
																	"irs_confirmation_of_tin": "",
																	"marriage_certificate": "",
																	"matricula_consular_card": "",
																	"military_orders": "",
																	"mortgage_closing_document": "",
																	"mortgage_statement": "",
																	"national_identity_card": "",
																	"order_of_creation": "",
																	"other_evidence_of_filings": "",
																	"other_government_issued_photo_id": "",
																	"other_supporting_docs": "",
																	"partnership_agreement": "",
																	"passport": "",
																	"paystub": "",
																	"permanent_resident_card": "",
																	"sentri_card": "",
																	"social_insurance_number_card": "",
																	"social_security_benefit_notice": "",
																	"social_security_card": "",
																	"tax_exemption_letter": "",
																	"trust_agreement": "",
																	"vehicle_registration": ""
																},
																"type": "string"
															},
															"type": "array",
															"description": "Types of documents that would fulfill request."
														}
													},
													"required": [
														"path",
														"requested_documents",
														"message"
													]
												}
											},
											"required": [
												"issue_type",
												"target"
											],
											"type": "object",
											"description": "Returns an array of objects identifying why WePay is unable to verify an entity, controller, or additional representative. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type` and will be one of: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `identity_verification`, or `risk_outreach`."
										},
										"type": "array"
									},
									"documents": {
										"items": {
											"additionalProperties": false,
											"properties": {
												"create_time": {
													"$ref": "#/components/schemas/create_time"
												},
												"id": {
													"$ref": "#/components/schemas/id"
												},
												"owner": {
													"$ref": "#/components/schemas/shared_owner_response"
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"reject_reason": {
													"additionalProperties": false,
													"properties": {
														"details": {
															"items": {
																"additionalProperties": false,
																"properties": {
																	"detail_code": {
																		"enum": [
																			"illegible",
																			"corrupt_file",
																			"info_mismatch",
																			"doc_unsupported",
																			"incomplete"
																		],
																		"type": "string",
																		"nullable": true,
																		"x-enumDescriptions": {
																			"illegible": "Quality of the file or text in the file was such that the document content could not be read.",
																			"corrupt_file": "The file could not be used. The merchant must create a new file and try again.",
																			"info_mismatch": "The information in the document did not match the information on file for the merchant. The merchant must provide documents with information pertaining to the business, otherwise re-submit the data provided to WePay.",
																			"doc_unsupported": "The provided document does not satisfy the requirement from WePay.",
																			"incomplete": "The provided document does not completely satisfy the requirements. Additional documents may be requested."
																		}
																	},
																	"detail_message": {
																		"type": "string",
																		"nullable": true
																	}
																},
																"required": [
																	"detail_code",
																	"detail_message"
																],
																"type": "object"
															},
															"type": "array",
															"uniqueItems": true
														},
														"reason_code": {
															"enum": [
																"failed_risk_review"
															],
															"type": "string",
															"x-enumDescriptions": {
																"failed_risk_review": "The provided document failed WePay risk review."
															}
														},
														"reason_message": {
															"type": "string"
														}
													},
													"required": [
														"reason_code",
														"reason_message",
														"details"
													],
													"type": "object",
													"nullable": true,
													"description": "Describes the reasons a document was rejected."
												},
												"resource": {
													"enum": [
														"documents"
													],
													"x-enumDescriptions": {
														"documents": ""
													},
													"type": "string"
												},
												"status": {
													"enum": [
														"in_review",
														"verified",
														"rejected"
													],
													"x-enumDescriptions": {
														"in_review": "The document has been received and is currently being reviewed by WePay. Once review is complete, the status will be updated.",
														"verified": "WePay was able to verify the information in the document, and no further action is needed for this specific requirement.",
														"rejected": "WePay was unable to verify the document, so the merchant must address the issues listed in the `reject_reason.detail_code` parameter."
													},
													"type": "string"
												},
												"type": {
													"enum": [
														"articles_of_association",
														"benefits_card",
														"birth_certificate",
														"canadian_citizenship",
														"canadian_health_card",
														"certificate_of_association",
														"certificate_of_authority",
														"certificate_of_citizenship",
														"certificate_of_formation",
														"certificate_of_incorporation",
														"certificate_of_naturalization",
														"certificate_of_organization",
														"certified_copy_of_court_order",
														"charity_license",
														"credit_card_statement",
														"current_bank_statement",
														"current_lease_contract",
														"current_local_tax_bill",
														"current_utility_bill",
														"dba_registration",
														"divorce_decree",
														"drivers_license",
														"electoral_register_entry",
														"employment_authorization_card",
														"evidence_of_authority",
														"evidence_of_corporate_registration",
														"evidence_of_name_change",
														"evidence_of_nonprofit_registration",
														"firearms_certificate",
														"foreign_passport",
														"hud_statement",
														"identity_card_northern_ireland",
														"insurance_bill",
														"insurance_card",
														"insurance_declaration_page",
														"irs_501c3_determination",
														"irs_confirmation_of_tin",
														"marriage_certificate",
														"matricula_consular_card",
														"military_orders",
														"mortgage_closing_document",
														"mortgage_statement",
														"national_identity_card",
														"order_of_creation",
														"other_evidence_of_filings",
														"other_government_issued_photo_id",
														"other_supporting_docs",
														"partnership_agreement",
														"passport",
														"paystub",
														"permanent_resident_card",
														"sentri_card",
														"social_insurance_number_card",
														"social_security_benefit_notice",
														"social_security_card",
														"tax_exemption_letter",
														"trust_agreement",
														"vehicle_registration"
													],
													"x-enumDescriptions": {
														"articles_of_association": "",
														"benefits_card": "",
														"birth_certificate": "",
														"canadian_citizenship": "",
														"canadian_health_card": "",
														"certificate_of_association": "",
														"certificate_of_authority": "",
														"certificate_of_citizenship": "",
														"certificate_of_formation": "",
														"certificate_of_incorporation": "",
														"certificate_of_naturalization": "",
														"certificate_of_organization": "",
														"certified_copy_of_court_order": "",
														"charity_license": "",
														"credit_card_statement": "",
														"current_bank_statement": "",
														"current_lease_contract": "",
														"current_local_tax_bill": "",
														"current_utility_bill": "",
														"dba_registration": "",
														"divorce_decree": "",
														"drivers_license": "",
														"electoral_register_entry": "",
														"employment_authorization_card": "",
														"evidence_of_authority": "",
														"evidence_of_corporate_registration": "",
														"evidence_of_name_change": "",
														"evidence_of_nonprofit_registration": "",
														"firearms_certificate": "",
														"foreign_passport": "",
														"hud_statement": "",
														"identity_card_northern_ireland": "",
														"insurance_bill": "",
														"insurance_card": "",
														"insurance_declaration_page": "",
														"irs_501c3_determination": "",
														"irs_confirmation_of_tin": "",
														"marriage_certificate": "",
														"matricula_consular_card": "",
														"military_orders": "",
														"mortgage_closing_document": "",
														"mortgage_statement": "",
														"national_identity_card": "",
														"order_of_creation": "",
														"other_evidence_of_filings": "",
														"other_government_issued_photo_id": "",
														"other_supporting_docs": "",
														"partnership_agreement": "",
														"passport": "",
														"paystub": "",
														"permanent_resident_card": "",
														"sentri_card": "",
														"social_insurance_number_card": "",
														"social_security_benefit_notice": "",
														"social_security_card": "",
														"tax_exemption_letter": "",
														"trust_agreement": "",
														"vehicle_registration": ""
													},
													"type": "string"
												}
											},
											"required": [
												"resource",
												"id",
												"path",
												"owner",
												"create_time",
												"type",
												"status",
												"reject_reason"
											],
											"type": "object"
										},
										"type": "array",
										"description": "The document IDs are returned via the document upload feature in the JavaScript library. These documents will be used for identity verification. Check out Document Upload for more details."
									}
								},
								"required": [
									"verified"
								],
								"type": "object",
								"description": "Personal information for additional beneficial owners of the legal entity. **Note:** You can pass `{}` to signify that this legal entity does not have any additional representatives."
							},
							"reference_id": {
								"$ref": "#/components/schemas/beneficial_owner_reference_id"
							}
						},
						"required": [
							"personal_verification"
						],
						"type": "object",
						"nullable": true,
						"description": "Personal details of the additional representative."
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "legal_entities_id_verifications_additional_representatives_response",
				"description": "Personal information for additional beneficial owners of the legal entity."
			},
			"resource-verifications": {
				"enum": [
					"verifications"
				],
				"x-enumDescriptions": {
					"verifications": ""
				},
				"type": "string",
				"x-label": "resource-verifications",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"resource-tokens": {
				"enum": [
					"tokens"
				],
				"x-enumDescriptions": {
					"tokens": ""
				},
				"type": "string",
				"x-label": "resource-tokens",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"accounts_incoming_payments_request": {
				"additionalProperties": false,
				"properties": {
					"amex": {
						"$ref": "#/components/schemas/accounts_amex_request"
					},
					"opted_out_methods": {
						"$ref": "#/components/schemas/accounts_opted_out_methods"
					}
				},
				"type": "object",
				"x-label": "accounts_incoming_payments_request",
				"description": "Identify the payment methods this merchant will accept, and describe this merchant's relationship with card association."
			},
			"v3.0.rc.1.1-accounts_payout_request": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.0.rc.1.1-accounts_payout_currency_request"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.0.rc.1.1-accounts_payout_currency_request"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.0.rc.1.1-accounts_payout_currency_request"
							}
						},
						"type": "object",
						"description": "Payout currency details."
					},
					"default_currency": {
						"enum": [
							"USD",
							"CAD",
							"GBP"
						],
						"x-enumDescriptions": {
							"USD": "Indicate that this account's default payout should be in US dollars.",
							"CAD": "Indicate that this account's default payout should be in Canadian dollars.",
							"GBP": "Indicate that this account's default payout should be in Great British pounds. **Note:** Not currently supported."
						},
						"type": "string"
					},
					"payout_purpose": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"adjustment_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"fees_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"refunds_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"sales_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.1.1-accounts_payout_request",
				"description": "Details the merchant’s payout method."
			},
			"pricing-create": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/pricing_by_currency-create-CAD"
							},
							"GBP": {
								"$ref": "#/components/schemas/pricing_by_currency-create-GBP"
							},
							"USD": {
								"$ref": "#/components/schemas/pricing_by_currency-create-USD"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "pricing-create",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"pricing-update": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/pricing_by_currency-update-CAD"
							},
							"GBP": {
								"$ref": "#/components/schemas/pricing_by_currency-update-GBP"
							},
							"USD": {
								"$ref": "#/components/schemas/pricing_by_currency-update-USD"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "pricing-update",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"reference_number": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"x-label": "reference_number",
				"description": "A custom reference number that the platform sets for data mapping."
			},
			"permissioned-currency": {
				"enum": [
					"USD",
					"CAD",
					"GBP"
				],
				"type": "string",
				"x-label": "permissioned-currency",
				"description": "ISO 4217 currency code. Possible values include: `CAD` & `USD`. **Note:** as of today, `currency` supports a single value.",
				"example": "USD",
				"x-enumDescriptions": {
					"USD": "United States Dollar",
					"CAD": "Canadian Dollar",
					"GBP": "Great Britain Pound"
				},
				"x-permission": {
					"type": "can_have_value",
					"phase": "post_token_expansion",
					"partner_config_key_path": "api.v3.payments.currencies_enabled",
					"feature_name": "currency type"
				}
			},
			"payments_payment_method_request": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"payment_method_id",
							"encoded_payment_method"
						],
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"payment_method_id": "This value is required if the `payment_method_id` parameter is being sent after a payment method has already been created.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK."
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "When raw credit card data is passed in the `payout_method` structure on a `POST /payments` request, WePay will always pre-authorize the card before requesting an authorization for payment. This means that this parameter *must* be set to `true`. The `trigger_verification` results in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this pre-authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"payment_method_id": {
						"$ref": "#/components/schemas/id"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "payments_payment_method_request",
				"description": "The payment method used to create this payment.**Note:** The payment method's top level data object corresponds with the payment method type. For example, if you set type to `credit_card`, then the payment method's top level data object must be `credit_card`."
			},
			"initiated_by-req": {
				"enum": [
					"customer",
					"merchant"
				],
				"x-enumDescriptions": {
					"customer": "",
					"merchant": ""
				},
				"type": "string",
				"x-label": "initiated_by-req",
				"description": "Indicates who initiated a payment. Possible values include: `customer`, `merchant`, null. **Note:** This parameter defaults to none when creating a payment unless a credit card payment method has `\"card_on_file\": \"true\"`. \"Card on file\" payments default to customer. For recurring credit card payments: this parameter should be set to `customer` on the first transaction, and then on subsequent recurring transactions, this parameter should be set to `merchant`. This parameter is not used for recurring ACH payments."
			},
			"payments_order_request": {
				"additionalProperties": false,
				"properties": {
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						},
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`."
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of alternate tax for the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						},
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`."
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						},
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`."
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"type",
					"short_description"
				],
				"type": "object",
				"x-label": "payments_order_request"
			},
			"id-order": {
				"maxLength": 255,
				"minLength": 1,
				"type": "string",
				"nullable": true,
				"x-label": "id-order",
				"description": "The resource ID of the [order](/api/#/http/api-endpoints/risk/create-an-order) that your app associated with this payment. If no order was associated, then the value will be `null`."
			},
			"payments_id_amounts_request": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"minimum": 100,
						"type": "integer"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"fee_amount": {
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"amount",
					"currency",
					"fee_amount"
				],
				"type": "object",
				"nullable": true,
				"x-label": "payments_id_amounts_request",
				"description": "For Card Present, we allow adjusting the amounts to **greater or less** than the auth amount. For Card Not Present, we allow adjusting the amounts to **less** than the auth amount **for delayed capture only**."
			},
			"payment_methods_create_data": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"encoded_payment_method",
							"google_pay"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data."
						}
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "payment_methods_create_data"
			},
			"payout_methods_create_data": {
				"additionalProperties": false,
				"properties": {
					"legal_entity_id": {
						"$ref": "#/components/schemas/id"
					},
					"nickname": {
						"type": "string",
						"maxLength": 64,
						"minLength": 1
					},
					"type": {
						"enum": [
							"payout_bank_ca",
							"payout_bank_gb",
							"payout_bank_us",
							"paper_check"
						],
						"x-enumDescriptions": {
							"payout_bank_ca": "Bank account in Canada.",
							"payout_bank_gb": "Bank account in the UK (not currently supported).",
							"payout_bank_us": "Bank account in the US.",
							"paper_check": "Paper check delivered to an address in the US."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Possible values: `payout_bank_ca`, `payout_bank_us` and `payout_bank_gb`. **Note:** The `paper_check` option requires permission from WePay to use. Reach out to your integration team for assistance."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"paper_check": {
						"additionalProperties": false,
						"properties": {
							"address": {
								"$ref": "#/components/schemas/payout_methods_paper_check_address"
							},
							"memo": {
								"description": "The memo that will be used on the check",
								"type": "string",
								"minLength": 1,
								"maxLength": 70
							}
						},
						"required": [
							"address"
						],
						"description": "Define how to payout a merchant based in the US via paper check. **Note:** Paper checks require permission from WePay, and only US-based merchants can receive payouts via paper check. Reach out to your integration team for further information.",
						"type": "object",
						"x-permission": {
							"type": "can_be_used",
							"phase": "post_token_expansion",
							"partner_config_key_path": "api.v3.payouts.paper_checks_enabled",
							"feature_name": "paper check"
						}
					},
					"payout_bank_ca": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"pattern": "^[0-9]{5,17}$",
								"type": "string"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"institution_number": {
								"pattern": "^[0-9]{3}$",
								"type": "string"
							},
							"transit_number": {
								"pattern": "^[0-9]{5}$",
								"type": "string"
							}
						},
						"required": [
							"transit_number",
							"institution_number",
							"account_number",
							"account_type"
						],
						"type": "object"
					},
					"payout_bank_gb": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"pattern": "^[0-9]{8}$",
								"type": "string"
							},
							"sort_code": {
								"pattern": "^[0-9]{6}$",
								"type": "string"
							}
						},
						"required": [
							"sort_code",
							"account_number"
						],
						"type": "object"
					},
					"payout_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"$ref": "#/components/schemas/us_bank_account_number"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"routing_number": {
								"$ref": "#/components/schemas/us_bank_routing_number"
							}
						},
						"required": [
							"routing_number",
							"account_number",
							"account_type"
						],
						"type": "object"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"legal_entity_id",
					"nickname",
					"type"
				],
				"type": "object",
				"x-label": "payout_methods_create_data"
			},
			"error_multiple_targets": {
				"additionalProperties": false,
				"properties": {
					"details": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"message": {
									"type": "string"
								},
								"reason_code": {
									"type": "string",
									"nullable": true
								},
								"target": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"nullable": true
								},
								"target_type": {
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"target",
								"reason_code",
								"message"
							],
							"type": "object"
						},
						"type": "array",
						"nullable": true
					},
					"error_code": {
						"type": "string"
					},
					"error_message": {
						"type": "string"
					}
				},
				"required": [
					"error_code",
					"error_message",
					"details"
				],
				"type": "object",
				"x-label": "error_multiple_targets"
			},
			"v3.0.rc.1.1-capabilities-resp": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"id": {
						"$ref": "#/components/schemas/id-nullable"
					},
					"owner": {
						"$ref": "#/components/schemas/accounts_id_capabilities_owner_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-capabilities"
					},
					"payments": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Payments capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable."
					},
					"payouts": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Payouts capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable."
					},
					"terminals": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Terminals capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable. **Note:** If your platform does not have permission from WePay to use Card Present, then your merchants' terminal capability will never be enabled. This will not impact their ability to process web-based, card-not-present transactions."
					},
					"transaction_division_setup": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's onboarding status with Chase Merchant Services."
					}
				},
				"required": [
					"resource",
					"id",
					"path",
					"owner",
					"api_version"
				],
				"type": "object",
				"x-label": "v3.0.rc.1.1-capabilities-resp",
				"description": "Outlines an account's payment, payout, and terminal capability status, and reasons for any disabled capabilities. **Note:** If your platform does not have permission from WePay to use Card Present, then your merchants' terminal capability will never be enabled. This will not impact their ability to process web-based, card-not-present transactions."
			},
			"item-req": {
				"additionalProperties": false,
				"properties": {
					"product_name": {
						"maxLength": 255,
						"type": "string",
						"description": "The name of the product or service your user signed up for on your platform."
					},
					"account_id": {
						"type": "string",
						"nullable": true,
						"description": "Merchant's account id associated with the item."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Description of the product or service."
					},
					"photos": {
						"items": {
							"$ref": "#/components/schemas/uri"
						},
						"type": "array",
						"nullable": true,
						"description": "URL for photo images."
					},
					"price": {
						"type": "integer",
						"nullable": true,
						"description": "Price of the item or service."
					},
					"product_code": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "SKU etc."
					},
					"product_details": {
						"type": "object",
						"nullable": true,
						"x-maxByteSize": 10240,
						"additionalProperties": true,
						"description": "Any product details your platform chooses to attach to this resource. The product detail data must be key-value pairs. For example, a pair of black running shoes could have \"category1\":\"Clothing, Shoes, and Accessories\", \"category2\":\"Women's shoes\", \"color\":\"black\"."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"$ref": "#/components/schemas/reference_number"
					},
					"shipping_options": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"uniqueItems": true,
						"description": "Description of each available shipping option."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"uri": {
						"$ref": "#/components/schemas/uri"
					},
					"weight": {
						"$ref": "#/components/schemas/shared_weight"
					}
				},
				"required": [
					"product_name"
				],
				"type": "object",
				"x-label": "item-req"
			},
			"item-id-req": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"$ref": "#/components/schemas/id"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Description of the product or service."
					},
					"photos": {
						"items": {
							"$ref": "#/components/schemas/uri"
						},
						"type": "array",
						"nullable": true,
						"description": "URL for photo images."
					},
					"price": {
						"type": "integer",
						"nullable": true,
						"description": "Price of the item or service."
					},
					"product_code": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "SKU etc."
					},
					"product_details": {
						"type": "object",
						"nullable": true,
						"x-maxByteSize": 10240,
						"additionalProperties": true,
						"description": "Any product details your platform chooses to attach to this resource. The product detail data must be key-value pairs. For example, a pair of black running shoes could have \"category1\":\"Clothing, Shoes, and Accessories\", \"category2\":\"Women's shoes\", \"color\":\"black\"."
					},
					"product_name": {
						"maxLength": 255,
						"type": "string",
						"description": "The name of the product or service your user signed up for on your platform."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"$ref": "#/components/schemas/id"
					},
					"shipping_options": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"uniqueItems": true,
						"description": "Description of each available shipping option."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"uri": {
						"$ref": "#/components/schemas/uri"
					},
					"weight": {
						"$ref": "#/components/schemas/shared_weight"
					}
				},
				"type": "object",
				"x-label": "item-id-req"
			},
			"order-req": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"nullable": true,
						"description": "Merchant's account id associated with the order."
					},
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`.",
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						}
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Merchant's Legal Entity ID associated with the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`.",
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						}
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`.",
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						}
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"account_id",
					"type",
					"short_description"
				],
				"type": "object",
				"x-label": "order-req"
			},
			"order-id-req": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"$ref": "#/components/schemas/id"
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of alternate tax for the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`.",
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						}
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`.",
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						}
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`.",
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						}
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"account_id"
				],
				"type": "object",
				"x-label": "order-id-req"
			},
			"refunds_create_data": {
				"additionalProperties": false,
				"properties": {
					"payment_id": {
						"$ref": "#/components/schemas/id"
					},
					"refund_reason": {
						"maxLength": 65535,
						"minLength": 1,
						"type": "string"
					},
					"amounts": {
						"$ref": "#/components/schemas/refunds_amounts"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"order_id": {
						"$ref": "#/components/schemas/id"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					}
				},
				"required": [
					"payment_id",
					"refund_reason"
				],
				"type": "object",
				"x-label": "refunds_create_data"
			},
			"v3.0.rc.1-accounts_payout_currency_response": {
				"additionalProperties": false,
				"properties": {
					"payout_method_id": {
						"maxLength": 255,
						"type": "string",
						"description": "ID of the payout method associated with the USD payout."
					},
					"period": {
						"enum": [
							"daily",
							"weekly",
							"monthly"
						],
						"x-enumDescriptions": {
							"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
							"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
							"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
						},
						"type": "string",
						"description": "Describes the how often a USD payout will occur."
					},
					"next_payout_time": {
						"type": "integer",
						"nullable": true,
						"description": "Describes when the next USD payout will occur."
					},
					"payout_purpose": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"adjustment_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"fees_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"refunds_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"sales_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"payout_method_id",
					"period"
				],
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.1-accounts_payout_currency_response",
				"description": "Payout currency details."
			},
			"v3.0.rc.1-accounts_payout_currency_request": {
				"additionalProperties": false,
				"properties": {
					"payout_method_id": {
						"maxLength": 255,
						"type": "string",
						"description": "ID of the payout method associated with the USD payout."
					},
					"period": {
						"enum": [
							"daily",
							"weekly",
							"monthly"
						],
						"x-enumDescriptions": {
							"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
							"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
							"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
						},
						"type": "string",
						"description": "Describes the how often a USD payout will occur."
					},
					"payout_purpose": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"adjustment_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"fees_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"refunds_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"sales_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"payout_method_id",
					"period"
				],
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.1-accounts_payout_currency_request",
				"description": "Payout currency details."
			},
			"v3.0.rc.1-accounts_payout_response": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.0.rc.1-accounts_payout_currency_response"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.0.rc.1-accounts_payout_currency_response"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.0.rc.1-accounts_payout_currency_response"
							}
						},
						"type": "object"
					},
					"default_currency": {
						"enum": [
							"USD",
							"CAD",
							"GBP"
						],
						"x-enumDescriptions": {
							"USD": "Indicate that this account's default payout should be in US dollars.",
							"CAD": "Indicate that this account's default payout should be in Canadian dollars.",
							"GBP": "Indicate that this account's default payout should be in Great British pounds. **Note:** Not currently supported."
						},
						"type": "string"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.1-accounts_payout_response",
				"description": "Details the merchant’s payout method."
			},
			"v3.0.rc.1-account-resp": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"balances": {
						"additionalProperties": false,
						"properties": {
							"currencies": {
								"additionalProperties": true,
								"properties": {
									"CAD": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									},
									"GBP": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									},
									"USD": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									}
								},
								"type": "object",
								"description": "Payout currency details."
							}
						},
						"type": "object",
						"description": "Displays balances pertaining to the merchant account."
					},
					"beneficiary": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 65535,
						"type": "string",
						"nullable": true,
						"description": "Short description of the merchant account."
					},
					"documents": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"create_time": {
									"$ref": "#/components/schemas/create_time"
								},
								"id": {
									"$ref": "#/components/schemas/id"
								},
								"owner": {
									"$ref": "#/components/schemas/shared_owner_response"
								},
								"path": {
									"type": "string",
									"nullable": true
								},
								"reject_reason": {
									"type": "string",
									"nullable": true
								},
								"resource": {
									"enum": [
										"documents"
									],
									"x-enumDescriptions": {
										"documents": ""
									},
									"type": "string"
								},
								"status": {
									"type": "string",
									"nullable": true
								},
								"type": {
									"enum": [
										"fee_disclosure",
										"invoice",
										"tracking",
										"drivers_license",
										"passport",
										"evidence_of_corporate_registration",
										"evidence_of_authority",
										"current_bank_statement",
										"evidence_of_nonprofit_registration",
										"social_security_card",
										"current_utility_bill",
										"other_government_issued_photo_id",
										"current_lease_contract",
										"birth_certificate",
										"not_applicable",
										"certificate_of_citizenship",
										"permanent_resident_card",
										"employment_authorization_card",
										"benefits_card",
										"social_insurance_number_card",
										"miscellaneous_compliance_doc",
										"business_report",
										"negative_media_searches",
										"person_report",
										"mortgage_statement",
										"certified_copy_of_court_order",
										"current_local_tax_bill",
										"certificate_of_naturalization"
									],
									"x-enumDescriptions": {
										"fee_disclosure": "Indicates that the document uploaded and associated with this account is the fee disclosure presented to the merchant.",
										"invoice": "Indicates that the document uploaded and associated with this account is an invoice presented to the merchant.",
										"tracking": "Indicates that the document uploaded and associated with this account is for general tracking purposes",
										"drivers_license": "Indicates that the document uploaded and associated with this account is the driver's license presented by the merchant.",
										"passport": "Indicates that the document uploaded and associated with this account is the passport presented by the merchant.",
										"evidence_of_corporate_registration": "Indicates that the document uploaded and associated with this account is the evidence of corporate registration presented by the merchant.",
										"evidence_of_authority": "Indicates that the document uploaded and associated with this account is the evidence of authority presented by the merchant.",
										"current_bank_statement": "Indicates that the document uploaded and associated with this account is the current bank statement presented by the merchant.",
										"evidence_of_nonprofit_registration": "Indicates that the document uploaded and associated with this account is the evidence of non profit registration presented by the merchant.",
										"social_security_card": "Indicates that the document uploaded and associated with this account is the social security card presented by the merchant.",
										"current_utility_bill": "Indicates that the document uploaded and associated with this account is the current utility bill presented by the merchant.",
										"other_government_issued_photo_id": "Indicates that the document uploaded and associated with this account is other government issued photo id presented by the merchant.",
										"current_lease_contract": "Indicates that the document uploaded and associated with this account is the current lease contract presented by the merchant.",
										"birth_certificate": "Indicates that the document uploaded and associated with this account is the birth certificate presented by the merchant.",
										"not_applicable": "Indicates that the document uploaded and associated with this account is not applicable.",
										"certificate_of_citizenship": "Indicates that the document uploaded and associated with this account is the certificate of citizenship presented by the merchant.",
										"permanent_resident_card": "Indicates that the document uploaded and associated with this account is the permanent resident card presented by the merchant.",
										"employment_authorization_card": "Indicates that the document uploaded and associated with this account is the employment authorization card presented by the merchant.",
										"benefits_card": "Indicates that the document uploaded and associated with this account is the benefits card presented by the merchant.",
										"social_insurance_number_card": "Indicates that the document uploaded and associated with this account is the social insurance number card presented by the merchant.",
										"miscellaneous_compliance_doc": "Indicates that the document uploaded and associated with this account is the miscellaneous compliance document presented by the merchant.",
										"business_report": "Indicates that the document uploaded and associated with this account is the business report presented by the merchant.",
										"negative_media_searches": "Indicates that the document uploaded and associated with this account is the negative media searches presented by the merchant.",
										"person_report": "Indicates that the document uploaded and associated with this account is the person report presented by the merchant.",
										"mortgage_statement": "Indicates that the document uploaded and associated with this account is the mortgage statement presented by the merchant.",
										"certified_copy_of_court_order": "Indicates that the document uploaded and associated with this account is the certified copy of the court order presented by the merchant.",
										"current_local_tax_bill": "Indicates that the document uploaded and associated with this account is the current local tax bill presented by the merchant.",
										"certificate_of_naturalization": "Indicates that the document uploaded and associated with this account is the certificate of naturalization presented by the merchant."
									},
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"resource",
								"id",
								"path",
								"owner",
								"create_time",
								"type",
								"status",
								"reject_reason"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An array of documents attached to this merchant to verify fee disclosure."
					},
					"id": {
						"$ref": "#/components/schemas/accounts_id"
					},
					"incoming_payments": {
						"$ref": "#/components/schemas/accounts_incoming_payments_response"
					},
					"industry": {
						"additionalProperties": false,
						"properties": {
							"category_detail": {
								"maxLength": 1024,
								"type": "string",
								"nullable": true,
								"description": "Details about the merchant's industry category."
							},
							"merchant_category_code": {
								"pattern": "^\\d{4}$",
								"type": "string",
								"description": "Category code associated with the merchant's industry.",
								"nullable": true
							}
						},
						"type": "object",
						"description": "Categorizes the type of service or item a merchant is providing."
					},
					"name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*\\w+.*$",
						"type": "string",
						"nullable": true,
						"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payout": {
						"$ref": "#/components/schemas/v3.0.rc.1-accounts_payout_response"
					},
					"platform_onboarding_time": {
						"type": "integer",
						"minimum": 0,
						"format": "int64",
						"nullable": true,
						"description": "The Unix epoch time (in seconds) when the account finished onboarding to the platform."
					},
					"pricing": {
						"$ref": "#/components/schemas/pricing-resp"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					},
					"statement_description": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"pattern": "^((?![Ww][Ee][Pp][Aa][Yy])[ -~ùûüÿàâæçéèêëïîôœÙÛÜŸÀÂÆÇÉÈÊËÏÎÔŒ«»‘“”—–€])*$",
						"description": "A non-empty, ASCII-printable string that does **not** contain the word WePay. This will appear on payers' credit card statements. **Note:** The API allows up to 255 characters, but card issuers will only print 12-14 characters on statements. Find more information [here](/clear/onboard-merchants/)."
					},
					"accepted_method_of_payments": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"countries": {
								"$ref": "#/components/schemas/accounts_accepted_method_of_payments_countries"
							}
						},
						"type": "object",
						"description": "Provide the merchant's identifiers with different card brands they accept as methods of payment."
					},
					"convenience_fee_amount": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"type": "integer",
						"nullable": true,
						"minimum": 0,
						"maximum": 9999999,
						"description": "Describe the [convenience fees](/clear/certify/card-network-rules/#convenience-fees) for [Merchant IC+](/pricing/merchant-interchange-plus/) accounts in cents."
					},
					"enhanced_review": {
						"type": "string",
						"nullable": true,
						"description": "Indicates if the account is under enhanced review by WePay."
					},
					"onboarding_location": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"city": {
								"maxLength": 30,
								"type": "string",
								"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							},
							"country": {
								"$ref": "#/components/schemas/country_code"
							},
							"line1": {
								"maxLength": 60,
								"type": "string",
								"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							},
							"postal_code": {
								"maxLength": 14,
								"type": "string",
								"description": "Postal code associated with the address."
							},
							"region": {
								"maxLength": 30,
								"type": "string",
								"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
							},
							"line2": {
								"maxLength": 60,
								"type": "string",
								"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							}
						},
						"required": [
							"line1",
							"city",
							"postal_code",
							"region",
							"country"
						],
						"type": "object",
						"nullable": true,
						"x-isAddress": true,
						"description": "Address of the legal entity, controller, or additional representatives. When representing the entity's address, send the entity's address of operation. When representing the controller or additional representative send the individual's residential address."
					},
					"projected_monthly_transaction_volume": {
						"type": "integer",
						"nullable": true,
						"description": "The projected monthly transaction volume, TPV, of an account."
					},
					"referral_details": {
						"type": "object",
						"description": "Information regarding the referring representative",
						"properties": {
							"email": {
								"$ref": "#/components/schemas/email"
							},
							"name": {
								"additionalProperties": false,
								"properties": {
									"first": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "First name."
									},
									"last": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "Last name."
									}
								},
								"required": [
									"first",
									"last"
								],
								"type": "object"
							},
							"standard_id": {
								"$ref": "#/components/schemas/standard_id"
							},
							"coupon_code": {
								"$ref": "#/components/schemas/coupon_code"
							}
						},
						"required": [
							"name",
							"email",
							"standard_id"
						]
					},
					"referral_partner": {
						"maxLength": 75,
						"minLength": 1,
						"type": "string",
						"description": "The non ISV partner/solution that refers merchants for payment processing services"
					},
					"transaction_division_mid": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"type": "integer",
						"nullable": true,
						"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_division_mid-nullable/description"
					},
					"transaction_type": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"type": "string",
						"enum": [
							"internet",
							"retail"
						],
						"x-enumDescriptions": {
							"internet": "The merchant will process card-not-present web transactions.",
							"retail": "The merchant will process card-present transactions."
						},
						"nullable": true,
						"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_type/description"
					}
				},
				"required": [
					"api_version",
					"balances",
					"beneficiary",
					"create_time",
					"custom_data",
					"description",
					"documents",
					"id",
					"incoming_payments",
					"industry",
					"name",
					"owner",
					"path",
					"payout",
					"platform_onboarding_time",
					"pricing",
					"reference_id",
					"resource",
					"statement_description"
				],
				"type": "object",
				"x-label": "v3.0.rc.1-account-resp"
			},
			"v3.0.rc.1-accounts_payout_request": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.0.rc.1-accounts_payout_currency_request"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.0.rc.1-accounts_payout_currency_request"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.0.rc.1-accounts_payout_currency_request"
							}
						},
						"type": "object",
						"description": "Payout currency details."
					},
					"default_currency": {
						"enum": [
							"USD",
							"CAD",
							"GBP"
						],
						"x-enumDescriptions": {
							"USD": "Indicate that this account's default payout should be in US dollars.",
							"CAD": "Indicate that this account's default payout should be in Canadian dollars.",
							"GBP": "Indicate that this account's default payout should be in Great British pounds. **Note:** Not currently supported."
						},
						"type": "string"
					},
					"payout_purpose": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"adjustment_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"fees_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"refunds_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							},
							"sales_payout": {
								"$ref": "#/components/schemas/accounts_payout_purpose_type"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.1-accounts_payout_request",
				"description": "Details the merchant’s payout method."
			},
			"v3.0.rc.1-capabilities-resp": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"id": {
						"$ref": "#/components/schemas/id-nullable"
					},
					"owner": {
						"$ref": "#/components/schemas/accounts_id_capabilities_owner_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-capabilities"
					},
					"payments": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Payments capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable."
					},
					"payouts": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Payouts capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable."
					},
					"terminals": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Terminals capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable. **Note:** If your platform does not have permission from WePay to use Card Present, then your merchants' terminal capability will never be enabled. This will not impact their ability to process web-based, card-not-present transactions."
					},
					"transaction_division_setup": {
						"x-versions": [
							"v3.0.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's onboarding status with Chase Merchant Services."
					}
				},
				"required": [
					"resource",
					"id",
					"path",
					"owner",
					"api_version"
				],
				"type": "object",
				"x-label": "v3.0.rc.1-capabilities-resp",
				"description": "Outlines an account's payment, payout, and terminal capability status, and reasons for any disabled capabilities. **Note:** If your platform does not have permission from WePay to use Card Present, then your merchants' terminal capability will never be enabled. This will not impact their ability to process web-based, card-not-present transactions."
			},
			"accounts_payout_currency_request": {
				"additionalProperties": false,
				"properties": {
					"payout_method_id": {
						"maxLength": 255,
						"type": "string",
						"description": "ID of the payout method associated with the USD payout."
					},
					"period": {
						"enum": [
							"daily",
							"weekly",
							"monthly"
						],
						"x-enumDescriptions": {
							"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
							"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
							"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
						},
						"type": "string",
						"description": "Describes the how often a USD payout will occur."
					}
				},
				"required": [
					"payout_method_id",
					"period"
				],
				"type": "object",
				"nullable": true,
				"x-label": "accounts_payout_currency_request",
				"description": "Payout currency details."
			},
			"account-resp": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"balances": {
						"additionalProperties": false,
						"properties": {
							"currencies": {
								"additionalProperties": true,
								"properties": {
									"CAD": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									},
									"GBP": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									},
									"USD": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									}
								},
								"type": "object",
								"description": "Payout currency details."
							}
						},
						"type": "object",
						"description": "Displays balances pertaining to the merchant account."
					},
					"beneficiary": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 65535,
						"type": "string",
						"nullable": true,
						"description": "Short description of the merchant account."
					},
					"documents": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"create_time": {
									"$ref": "#/components/schemas/create_time"
								},
								"id": {
									"$ref": "#/components/schemas/id"
								},
								"owner": {
									"$ref": "#/components/schemas/shared_owner_response"
								},
								"path": {
									"type": "string",
									"nullable": true
								},
								"reject_reason": {
									"type": "string",
									"nullable": true
								},
								"resource": {
									"enum": [
										"documents"
									],
									"x-enumDescriptions": {
										"documents": ""
									},
									"type": "string"
								},
								"status": {
									"type": "string",
									"nullable": true
								},
								"type": {
									"enum": [
										"fee_disclosure",
										"invoice",
										"tracking",
										"drivers_license",
										"passport",
										"evidence_of_corporate_registration",
										"evidence_of_authority",
										"current_bank_statement",
										"evidence_of_nonprofit_registration",
										"social_security_card",
										"current_utility_bill",
										"other_government_issued_photo_id",
										"current_lease_contract",
										"birth_certificate",
										"not_applicable",
										"certificate_of_citizenship",
										"permanent_resident_card",
										"employment_authorization_card",
										"benefits_card",
										"social_insurance_number_card",
										"miscellaneous_compliance_doc",
										"business_report",
										"negative_media_searches",
										"person_report",
										"mortgage_statement",
										"certified_copy_of_court_order",
										"current_local_tax_bill",
										"certificate_of_naturalization"
									],
									"x-enumDescriptions": {
										"fee_disclosure": "Indicates that the document uploaded and associated with this account is the fee disclosure presented to the merchant.",
										"invoice": "Indicates that the document uploaded and associated with this account is an invoice presented to the merchant.",
										"tracking": "Indicates that the document uploaded and associated with this account is for general tracking purposes",
										"drivers_license": "Indicates that the document uploaded and associated with this account is the driver's license presented by the merchant.",
										"passport": "Indicates that the document uploaded and associated with this account is the passport presented by the merchant.",
										"evidence_of_corporate_registration": "Indicates that the document uploaded and associated with this account is the evidence of corporate registration presented by the merchant.",
										"evidence_of_authority": "Indicates that the document uploaded and associated with this account is the evidence of authority presented by the merchant.",
										"current_bank_statement": "Indicates that the document uploaded and associated with this account is the current bank statement presented by the merchant.",
										"evidence_of_nonprofit_registration": "Indicates that the document uploaded and associated with this account is the evidence of non profit registration presented by the merchant.",
										"social_security_card": "Indicates that the document uploaded and associated with this account is the social security card presented by the merchant.",
										"current_utility_bill": "Indicates that the document uploaded and associated with this account is the current utility bill presented by the merchant.",
										"other_government_issued_photo_id": "Indicates that the document uploaded and associated with this account is other government issued photo id presented by the merchant.",
										"current_lease_contract": "Indicates that the document uploaded and associated with this account is the current lease contract presented by the merchant.",
										"birth_certificate": "Indicates that the document uploaded and associated with this account is the birth certificate presented by the merchant.",
										"not_applicable": "Indicates that the document uploaded and associated with this account is not applicable.",
										"certificate_of_citizenship": "Indicates that the document uploaded and associated with this account is the certificate of citizenship presented by the merchant.",
										"permanent_resident_card": "Indicates that the document uploaded and associated with this account is the permanent resident card presented by the merchant.",
										"employment_authorization_card": "Indicates that the document uploaded and associated with this account is the employment authorization card presented by the merchant.",
										"benefits_card": "Indicates that the document uploaded and associated with this account is the benefits card presented by the merchant.",
										"social_insurance_number_card": "Indicates that the document uploaded and associated with this account is the social insurance number card presented by the merchant.",
										"miscellaneous_compliance_doc": "Indicates that the document uploaded and associated with this account is the miscellaneous compliance document presented by the merchant.",
										"business_report": "Indicates that the document uploaded and associated with this account is the business report presented by the merchant.",
										"negative_media_searches": "Indicates that the document uploaded and associated with this account is the negative media searches presented by the merchant.",
										"person_report": "Indicates that the document uploaded and associated with this account is the person report presented by the merchant.",
										"mortgage_statement": "Indicates that the document uploaded and associated with this account is the mortgage statement presented by the merchant.",
										"certified_copy_of_court_order": "Indicates that the document uploaded and associated with this account is the certified copy of the court order presented by the merchant.",
										"current_local_tax_bill": "Indicates that the document uploaded and associated with this account is the current local tax bill presented by the merchant.",
										"certificate_of_naturalization": "Indicates that the document uploaded and associated with this account is the certificate of naturalization presented by the merchant."
									},
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"resource",
								"id",
								"path",
								"owner",
								"create_time",
								"type",
								"status",
								"reject_reason"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An array of documents attached to this merchant to verify fee disclosure."
					},
					"id": {
						"$ref": "#/components/schemas/accounts_id"
					},
					"incoming_payments": {
						"$ref": "#/components/schemas/accounts_incoming_payments_response"
					},
					"industry": {
						"additionalProperties": false,
						"properties": {
							"category_detail": {
								"maxLength": 1024,
								"type": "string",
								"nullable": true,
								"description": "Details about the merchant's industry category."
							},
							"merchant_category_code": {
								"pattern": "^\\d{4}$",
								"type": "string",
								"description": "Category code associated with the merchant's industry.",
								"nullable": true
							}
						},
						"type": "object",
						"description": "Categorizes the type of service or item a merchant is providing."
					},
					"name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*\\w+.*$",
						"type": "string",
						"nullable": true,
						"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payout": {
						"$ref": "#/components/schemas/accounts_payout_response"
					},
					"platform_onboarding_time": {
						"type": "integer",
						"minimum": 0,
						"format": "int64",
						"nullable": true,
						"description": "The Unix epoch time (in seconds) when the account finished onboarding to the platform."
					},
					"pricing": {
						"$ref": "#/components/schemas/pricing-resp"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					},
					"statement_description": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"pattern": "^((?![Ww][Ee][Pp][Aa][Yy])[ -~ùûüÿàâæçéèêëïîôœÙÛÜŸÀÂÆÇÉÈÊËÏÎÔŒ«»‘“”—–€])*$",
						"description": "A non-empty, ASCII-printable string that does **not** contain the word WePay. This will appear on payers' credit card statements. **Note:** The API allows up to 255 characters, but card issuers will only print 12-14 characters on statements. Find more information [here](/clear/onboard-merchants/)."
					},
					"enhanced_review": {
						"type": "string",
						"nullable": true,
						"description": "Indicates if the account is under enhanced review by WePay."
					},
					"projected_monthly_transaction_volume": {
						"type": "integer",
						"nullable": true,
						"description": "The projected monthly transaction volume, TPV, of an account."
					},
					"referral_details": {
						"type": "object",
						"description": "Information regarding the referring representative",
						"properties": {
							"email": {
								"$ref": "#/components/schemas/email"
							},
							"name": {
								"additionalProperties": false,
								"properties": {
									"first": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "First name."
									},
									"last": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "Last name."
									}
								},
								"required": [
									"first",
									"last"
								],
								"type": "object"
							},
							"standard_id": {
								"$ref": "#/components/schemas/standard_id"
							},
							"coupon_code": {
								"$ref": "#/components/schemas/coupon_code"
							}
						},
						"required": [
							"name",
							"email",
							"standard_id"
						]
					},
					"referral_partner": {
						"maxLength": 75,
						"minLength": 1,
						"type": "string",
						"description": "The non ISV partner/solution that refers merchants for payment processing services"
					}
				},
				"required": [
					"api_version",
					"balances",
					"beneficiary",
					"create_time",
					"custom_data",
					"description",
					"documents",
					"id",
					"incoming_payments",
					"industry",
					"name",
					"owner",
					"path",
					"payout",
					"platform_onboarding_time",
					"pricing",
					"reference_id",
					"resource",
					"statement_description"
				],
				"type": "object",
				"x-label": "account-resp"
			},
			"payment_bank_ca_holder-req": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"$ref": "#/components/schemas/email"
					},
					"holder_name": {
						"maxLength": 26,
						"minLength": 3,
						"type": "string",
						"pattern": "^[^\\x00-\\x1f]+$",
						"description": "Name of the person as it appears on the credit card or bank account statement."
					},
					"address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"phone": {
						"additionalProperties": false,
						"properties": {
							"country_code": {
								"pattern": "^\\+?[0-9]{1,3}$",
								"type": "string",
								"nullable": true,
								"description": "Country code associated with the legal entity."
							},
							"phone_number": {
								"pattern": "^[0-9]{7,14}$",
								"type": "string",
								"nullable": true,
								"description": "Phone number associated with the legal entity."
							},
							"type": {
								"enum": [
									"mobile",
									"personal",
									"business"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the phone number is for a mobile device.",
									"personal": "Indicates that the phone number is for a personal device.",
									"business": "Indicates that the phone number is for a business device."
								},
								"type": "string"
							}
						},
						"required": [
							"country_code",
							"phone_number"
						],
						"type": "object",
						"description": "Standard international phone structure."
					}
				},
				"required": [
					"holder_name",
					"email"
				],
				"type": "object",
				"x-label": "payment_bank_ca_holder-req",
				"description": "Personal details of the card or account holder."
			},
			"ca_bank_account_number": {
				"pattern": "^[0-9]{5,17}$",
				"type": "string",
				"x-label": "ca_bank_account_number",
				"description": "Account number of the bank account."
			},
			"ca_bank_branch_code": {
				"pattern": "^[0-9]{5}$",
				"type": "string",
				"x-label": "ca_bank_branch_code",
				"x-isTransitNumber": true,
				"description": "Branch code of the bank account."
			},
			"ca_bank_institution_code": {
				"pattern": "^[0-9]{3}$",
				"type": "string",
				"x-label": "ca_bank_institution_code",
				"x-isInstitutionNumber": true,
				"description": "Institution code of the bank account."
			},
			"accounts_payout_request": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/accounts_payout_currency_request"
							},
							"GBP": {
								"$ref": "#/components/schemas/accounts_payout_currency_request"
							},
							"USD": {
								"$ref": "#/components/schemas/accounts_payout_currency_request"
							}
						},
						"type": "object",
						"description": "Payout currency details."
					},
					"default_currency": {
						"enum": [
							"USD",
							"CAD",
							"GBP"
						],
						"x-enumDescriptions": {
							"USD": "Indicate that this account's default payout should be in US dollars.",
							"CAD": "Indicate that this account's default payout should be in Canadian dollars.",
							"GBP": "Indicate that this account's default payout should be in Great British pounds. **Note:** Not currently supported."
						},
						"type": "string"
					}
				},
				"type": "object",
				"x-label": "accounts_payout_request",
				"description": "Details the merchant’s payout method."
			},
			"shared_payment_bank_ca_request": {
				"x-versions": [
					"v3.0.rc.2.2"
				],
				"additionalProperties": false,
				"properties": {
					"account_holder": {
						"$ref": "#/components/schemas/payment_bank_ca_holder-req"
					},
					"account_number": {
						"$ref": "#/components/schemas/ca_bank_account_number"
					},
					"account_type": {
						"enum": [
							"checking",
							"savings"
						],
						"type": "string",
						"description": "Indicate if this is a checking or savings account.",
						"x-enumDescriptions": {
							"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
							"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
						}
					},
					"branch_code": {
						"$ref": "#/components/schemas/ca_bank_branch_code"
					},
					"institution_code": {
						"$ref": "#/components/schemas/ca_bank_institution_code"
					}
				},
				"required": [
					"institution_code",
					"branch_code",
					"account_number",
					"account_type",
					"account_holder"
				],
				"type": "object",
				"x-label": "shared_payment_bank_ca_request",
				"description": "Raw bank account information for an account based in Canada being used as a payment method."
			},
			"capabilities-resp": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"id": {
						"$ref": "#/components/schemas/id-nullable"
					},
					"owner": {
						"$ref": "#/components/schemas/accounts_id_capabilities_owner_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-capabilities"
					},
					"payments": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Payments capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable."
					},
					"payouts": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Payouts capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable."
					},
					"terminals": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Terminals capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable. **Note:** If your platform does not have permission from WePay to use Card Present, then your merchants' terminal capability will never be enabled. This will not impact their ability to process web-based, card-not-present transactions."
					}
				},
				"required": [
					"resource",
					"id",
					"path",
					"owner",
					"api_version"
				],
				"type": "object",
				"x-label": "capabilities-resp",
				"description": "Outlines an account's payment, payout, and terminal capability status, and reasons for any disabled capabilities. **Note:** If your platform does not have permission from WePay to use Card Present, then your merchants' terminal capability will never be enabled. This will not impact their ability to process web-based, card-not-present transactions."
			},
			"v3.0.rc.2.1-payment_methods_create_data": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"encoded_payment_method",
							"google_pay"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data."
						}
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"google_pay": {
						"x-versions": [
							"v3.0.rc.2.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) received from Google Pay APIs.",
								"type": "string"
							},
							"public_key": {
								"type": "string",
								"description": "Public key received from WePay during your application on-boarding."
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Google Pay."
					},
					"payment_bank_ca": {
						"$ref": "#/components/schemas/shared_payment_bank_ca_request"
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.0.rc.2.1-payment_methods_create_data"
			},
			"resource-pad_agreements": {
				"enum": [
					"pad_agreements"
				],
				"x-enumDescriptions": {
					"pad_agreements": "Helps organize information by identifying the resource type of the object data."
				},
				"type": "string",
				"x-label": "resource-pad_agreements",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"pad_agreements": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"nullable": false
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"category": {
						"type": "string",
						"nullable": false
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"id": {
						"type": "string",
						"nullable": false
					},
					"owner": {
						"additionalProperties": false,
						"properties": {
							"id": {
								"type": "string",
								"description": "The payment method ID. Your ID owns the pad agreements that you create."
							},
							"path": {
								"type": "string",
								"nullable": true,
								"description": "Path of resource and resource ID."
							},
							"resource": {
								"$ref": "#/components/schemas/resource-payment_methods"
							}
						},
						"required": [
							"resource",
							"id",
							"path"
						],
						"type": "object",
						"description": "Details the owner resource and owner path."
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payment_method_id": {
						"type": "string",
						"nullable": false
					},
					"resource": {
						"$ref": "#/components/schemas/resource-pad_agreements"
					},
					"revoked": {
						"type": "boolean"
					},
					"signature": {
						"additionalProperties": false,
						"properties": {
							"signatory_name": {
								"type": "string",
								"nullable": false
							},
							"signature_time": {
								"$ref": "#/components/schemas/create_time"
							}
						},
						"required": [
							"signatory_name",
							"signature_time"
						],
						"type": "object"
					},
					"type": {
						"type": "string",
						"nullable": false
					}
				},
				"required": [
					"payment_method_id",
					"account_id",
					"category",
					"type",
					"signature",
					"revoked",
					"id",
					"resource",
					"path",
					"create_time",
					"owner",
					"api_version"
				],
				"type": "object",
				"x-label": "pad_agreements"
			},
			"v3.0.rc.2.2-shared_payment_bank_ca_request": {
				"x-versions": [
					"v3.0.rc.2.2"
				],
				"additionalProperties": false,
				"properties": {
					"account_holder": {
						"$ref": "#/components/schemas/payment_bank_ca_holder-req"
					},
					"account_number": {
						"$ref": "#/components/schemas/ca_bank_account_number"
					},
					"account_type": {
						"enum": [
							"checking",
							"savings"
						],
						"type": "string",
						"description": "Indicate if this is a checking or savings account.",
						"x-enumDescriptions": {
							"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
							"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
						}
					},
					"branch_code": {
						"$ref": "#/components/schemas/ca_bank_branch_code"
					},
					"institution_code": {
						"$ref": "#/components/schemas/ca_bank_institution_code"
					}
				},
				"required": [
					"institution_code",
					"branch_code",
					"account_number",
					"account_type",
					"account_holder"
				],
				"type": "object",
				"x-label": "v3.0.rc.2.2-shared_payment_bank_ca_request",
				"description": "Raw bank account information for an account based in Canada being used as a payment method."
			},
			"v3.0.rc.2.2-payment_method-resp": {
				"additionalProperties": false,
				"properties": {
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"id": {
						"type": "string",
						"description": "ID of the payment method, generated by WePay when the payment method is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_payment_method_owner_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payment_methods"
					},
					"status": {
						"enum": [
							"unverified",
							"verified",
							"verification_failed",
							"deleted"
						],
						"x-enumDescriptions": {
							"unverified": "This payment method has not been verified yet and cannot be used to create payments until the status updates to `verified`.",
							"verified": "This payment method has successfully been verified and can now be used to create payments.",
							"verification_failed": "Verification attempt(s) for this payment method have failed. If this value returns, the payer should double check their payment details and re-submit them.",
							"deleted": "This payment method has been permanently deleted and cannot be used to create any further payments."
						},
						"type": "string",
						"description": "Possible values include: `deleted`, `unverified`, `verification_failed`, `verified`."
					},
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"encoded_payment_method",
							"google_pay"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data."
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv_provided": {
								"type": "boolean"
							},
							"expiration_month": {
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"description": "The year the credit card expires."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"backing_display_name": {
								"type": "string",
								"nullable": true,
								"description": "The backing display name for the credit card."
							},
							"bin": {
								"type": "string",
								"description": "Bank identification number. The initial six digits of a credit card number. Null is returned if BIN is not available."
							},
							"card_brand": {
								"enum": [
									"visa",
									"mastercard",
									"discover",
									"amex",
									"jcb",
									"diners"
								],
								"x-enumDescriptions": {
									"visa": "",
									"mastercard": "",
									"discover": "",
									"amex": "",
									"jcb": "",
									"diners": ""
								},
								"type": "string",
								"description": "Brand of the credit card. Possible values include: `amex`, `discover`, `diners`, `jcb`, `mastercard`, `visa`."
							},
							"card_entry_type": {
								"enum": [
									"card_keyed",
									"card_emv",
									"card_swiped",
									"card_manual",
									"card_emv_contactless"
								],
								"x-enumDescriptions": {
									"card_keyed": "",
									"card_emv": "",
									"card_swiped": "",
									"card_manual": "",
									"card_emv_contactless": ""
								},
								"type": "string",
								"description": "Possible values include: `card_keyed`, `card_transfer`."
							},
							"display_name": {
								"type": "string",
								"description": "The display name for the credit card."
							},
							"last_four": {
								"type": "string",
								"description": "The last four digits of the credit card number."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"expiration_month",
							"expiration_year",
							"card_on_file",
							"recurring",
							"cvv_provided"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"payment_bank_ca": {
						"x-versions": [
							"v3.0.rc.2.2"
						],
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "Indicate if this is a checking or savings account.",
								"x-enumDescriptions": {
									"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
									"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account."
							}
						},
						"required": [
							"account_type",
							"last_four",
							"account_holder"
						],
						"type": "object",
						"description": "Raw bank account information for an account based in Canada being used as a payment method."
					},
					"payment_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
									"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account. **Note:** If you have verified your account via Plaid, this might be the last four numbers of your tokenized bank account number (TAN)."
							}
						},
						"required": [
							"account_type",
							"last_four",
							"account_holder"
						],
						"type": "object",
						"description": "Raw bank account information."
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"type",
					"status"
				],
				"type": "object",
				"x-label": "v3.0.rc.2.2-payment_method-resp"
			},
			"v3.0.rc.2.2-payments_payment_method_request": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"payment_method_id",
							"encoded_payment_method"
						],
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"payment_method_id": "This value is required if the `payment_method_id` parameter is being sent after a payment method has already been created.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK."
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "When raw credit card data is passed in the `payout_method` structure on a `POST /payments` request, WePay will always pre-authorize the card before requesting an authorization for payment. This means that this parameter *must* be set to `true`. The `trigger_verification` results in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this pre-authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"payment_bank_ca": {
						"$ref": "#/components/schemas/v3.0.rc.2.2-shared_payment_bank_ca_request"
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"payment_method_id": {
						"$ref": "#/components/schemas/id"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.0.rc.2.2-payments_payment_method_request",
				"description": "The payment method used to create this payment.**Note:** The payment method's top level data object corresponds with the payment method type. For example, if you set type to `credit_card`, then the payment method's top level data object must be `credit_card`."
			},
			"v3.0.rc.2.2-payment_methods_create_data": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"encoded_payment_method",
							"google_pay"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data."
						}
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"google_pay": {
						"x-versions": [
							"v3.0.rc.2.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) received from Google Pay APIs.",
								"type": "string"
							},
							"public_key": {
								"type": "string",
								"description": "Public key received from WePay during your application on-boarding."
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Google Pay."
					},
					"payment_bank_ca": {
						"$ref": "#/components/schemas/v3.0.rc.2.2-shared_payment_bank_ca_request"
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.0.rc.2.2-payment_methods_create_data"
			},
			"v3.0.rc.2-shared_payment_bank_ca_request": {
				"x-versions": [
					"v3.0.rc.2.2"
				],
				"additionalProperties": false,
				"properties": {
					"account_holder": {
						"$ref": "#/components/schemas/payment_bank_ca_holder-req"
					},
					"account_number": {
						"$ref": "#/components/schemas/ca_bank_account_number"
					},
					"account_type": {
						"enum": [
							"checking",
							"savings"
						],
						"type": "string",
						"description": "Indicate if this is a checking or savings account.",
						"x-enumDescriptions": {
							"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
							"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
						}
					},
					"branch_code": {
						"$ref": "#/components/schemas/ca_bank_branch_code"
					},
					"institution_code": {
						"$ref": "#/components/schemas/ca_bank_institution_code"
					}
				},
				"required": [
					"institution_code",
					"branch_code",
					"account_number",
					"account_type",
					"account_holder"
				],
				"type": "object",
				"x-label": "v3.0.rc.2-shared_payment_bank_ca_request",
				"description": "Raw bank account information for an account based in Canada being used as a payment method."
			},
			"v3.0.rc.2-payment_method-resp": {
				"additionalProperties": false,
				"properties": {
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"id": {
						"type": "string",
						"description": "ID of the payment method, generated by WePay when the payment method is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_payment_method_owner_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payment_methods"
					},
					"status": {
						"enum": [
							"unverified",
							"verified",
							"verification_failed",
							"deleted"
						],
						"x-enumDescriptions": {
							"unverified": "This payment method has not been verified yet and cannot be used to create payments until the status updates to `verified`.",
							"verified": "This payment method has successfully been verified and can now be used to create payments.",
							"verification_failed": "Verification attempt(s) for this payment method have failed. If this value returns, the payer should double check their payment details and re-submit them.",
							"deleted": "This payment method has been permanently deleted and cannot be used to create any further payments."
						},
						"type": "string",
						"description": "Possible values include: `deleted`, `unverified`, `verification_failed`, `verified`."
					},
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"encoded_payment_method",
							"google_pay"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data."
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv_provided": {
								"type": "boolean"
							},
							"expiration_month": {
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"description": "The year the credit card expires."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"backing_display_name": {
								"type": "string",
								"nullable": true,
								"description": "The backing display name for the credit card."
							},
							"bin": {
								"type": "string",
								"description": "Bank identification number. The initial six digits of a credit card number. Null is returned if BIN is not available."
							},
							"card_brand": {
								"enum": [
									"visa",
									"mastercard",
									"discover",
									"amex",
									"jcb",
									"diners"
								],
								"x-enumDescriptions": {
									"visa": "",
									"mastercard": "",
									"discover": "",
									"amex": "",
									"jcb": "",
									"diners": ""
								},
								"type": "string",
								"description": "Brand of the credit card. Possible values include: `amex`, `discover`, `diners`, `jcb`, `mastercard`, `visa`."
							},
							"card_entry_type": {
								"enum": [
									"card_keyed",
									"card_emv",
									"card_swiped",
									"card_manual",
									"card_emv_contactless"
								],
								"x-enumDescriptions": {
									"card_keyed": "",
									"card_emv": "",
									"card_swiped": "",
									"card_manual": "",
									"card_emv_contactless": ""
								},
								"type": "string",
								"description": "Possible values include: `card_keyed`, `card_transfer`."
							},
							"display_name": {
								"type": "string",
								"description": "The display name for the credit card."
							},
							"last_four": {
								"type": "string",
								"description": "The last four digits of the credit card number."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"expiration_month",
							"expiration_year",
							"card_on_file",
							"recurring",
							"cvv_provided"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"payment_bank_ca": {
						"x-versions": [
							"v3.0.rc.2.2"
						],
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "Indicate if this is a checking or savings account.",
								"x-enumDescriptions": {
									"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
									"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account."
							}
						},
						"required": [
							"account_type",
							"last_four",
							"account_holder"
						],
						"type": "object",
						"description": "Raw bank account information for an account based in Canada being used as a payment method."
					},
					"payment_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
									"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account. **Note:** If you have verified your account via Plaid, this might be the last four numbers of your tokenized bank account number (TAN)."
							}
						},
						"required": [
							"account_type",
							"last_four",
							"account_holder"
						],
						"type": "object",
						"description": "Raw bank account information."
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"type",
					"status"
				],
				"type": "object",
				"x-label": "v3.0.rc.2-payment_method-resp"
			},
			"v3.0.rc.2-payments_payment_method_request": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"payment_method_id",
							"encoded_payment_method"
						],
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"payment_method_id": "This value is required if the `payment_method_id` parameter is being sent after a payment method has already been created.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK."
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "When raw credit card data is passed in the `payout_method` structure on a `POST /payments` request, WePay will always pre-authorize the card before requesting an authorization for payment. This means that this parameter *must* be set to `true`. The `trigger_verification` results in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this pre-authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"payment_bank_ca": {
						"$ref": "#/components/schemas/v3.0.rc.2-shared_payment_bank_ca_request"
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"payment_method_id": {
						"$ref": "#/components/schemas/id"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.0.rc.2-payments_payment_method_request",
				"description": "The payment method used to create this payment.**Note:** The payment method's top level data object corresponds with the payment method type. For example, if you set type to `credit_card`, then the payment method's top level data object must be `credit_card`."
			},
			"v3.0.rc.2-payment_methods_create_data": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_bank_ca",
							"encoded_payment_method",
							"google_pay"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_bank_ca": "This value is required if the `payment_bank_ca` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data."
						}
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"google_pay": {
						"x-versions": [
							"v3.0.rc.2.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) received from Google Pay APIs.",
								"type": "string"
							},
							"public_key": {
								"type": "string",
								"description": "Public key received from WePay during your application on-boarding."
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Google Pay."
					},
					"payment_bank_ca": {
						"$ref": "#/components/schemas/v3.0.rc.2-shared_payment_bank_ca_request"
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.0.rc.2-payment_methods_create_data"
			},
			"v3.0.rc.4.1-shared_legal_entity_request": {
				"additionalProperties": false,
				"properties": {
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"account_controller": {
						"$ref": "#/components/schemas/shared_account_controller"
					},
					"additional_representatives": {
						"$ref": "#/components/schemas/shared_additional_representatives_request"
					},
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"annual_sales_volume": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "integer",
						"nullable": true,
						"description": "Annual sales volume in dollars of the merchant, using the currency specified in annual_sales_volume_currency."
					},
					"annual_sales_volume_currency": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"enum": [
							"USD",
							"CAD"
						],
						"x-enumDescriptions": {
							"USD": "United States Dollar",
							"CAD": "Canadian Dollar"
						},
						"description": "The currency used in annual sales volume. Possible values include: CAD, USD"
					},
					"average_ticket_size": {
						"x-versions": [
							"v3.0.rc.4.1"
						],
						"type": "integer",
						"nullable": true,
						"description": "Actual sales per transaction on an average. It's in dollars."
					},
					"controller": {
						"$ref": "#/components/schemas/shared_controller_request"
					},
					"controller_type": {
						"$ref": "#/components/schemas/controller_type"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 1024,
						"type": "string",
						"nullable": true,
						"description": "Description of the Legal Entity. WePay uses this information for underwriting purposes."
					},
					"email": {
						"$ref": "#/components/schemas/entity-email-nullable"
					},
					"entity_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_entity_country_info_CA"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_entity_country_info_GB"
							},
							"US": {
								"$ref": "#/components/schemas/shared_entity_country_info_US"
							},
							"country_of_formation": {
								"$ref": "#/components/schemas/country_code-nullable"
							},
							"operates_in_sanctioned_countries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"enum": [
										"CU",
										"IR",
										"KP",
										"SY",
										"XX"
									],
									"x-enumDescriptions": {
										"CU": "Cuba",
										"IR": "Iran",
										"KP": "North Korea",
										"SY": "Syria",
										"XX": "WePay's custom 2-digit ISO code for Crimea Region, as a 2-digit code does not exist."
									},
									"type": "string"
								},
								"nullable": true,
								"description": "An array of sanctioned countries where the Legal Entity operates. Possible values include `CU`, `IR`, `KP`, `XX`, `SY`. Note that `XX` is used to represent Crimea, as it does not have its own 2-digit ISO code. If the merchant indicates they do not have operations in one of the sanctioned countries listed above, then pass an empty array: `[]`. This field is required, if the value is left `null`, capabilities (payments and payouts) will be disabled."
							},
							"year_of_formation": {
								"type": "integer",
								"minimum": 0,
								"nullable": true,
								"description": "The year when the Legal Entity originated."
							}
						},
						"type": "object",
						"description": "Information about the Legal Entity."
					},
					"entity_name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*$",
						"type": "string",
						"nullable": true,
						"description": "The name of the legal entity. This should **not** contain a merchant's DBA; DBAs can be included on the Account resource. Must not contain the word `wepay`."
					},
					"non_delivery_days": {
						"x-versions": [
							"v3.0.rc.4.1"
						],
						"type": "integer",
						"nullable": true,
						"description": "Non delivery days specified by the merchant."
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"primary_url": {
						"$ref": "#/components/schemas/uri-nullable"
					},
					"public_ownership": {
						"$ref": "#/components/schemas/shared_public_ownership_request"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"terms_of_service": {
						"additionalProperties": false,
						"properties": {
							"acceptance_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "Time (in UNIX) when WePay's Terms of Service was accepted."
							},
							"original_ip": {
								"maxLength": 45,
								"pattern": "^[A-F0-9a-f:\\.]*$",
								"type": "string",
								"nullable": true,
								"description": "The IP address in use when WePay's Terms of Service was accepted."
							},
							"terms_of_service_version": {
								"maxLength": 20,
								"pattern": "^[A-Za-z0-9_]+$",
								"type": "string",
								"nullable": true,
								"description": "The version of WePay's Terms of Service that was accepted."
							}
						},
						"type": "object",
						"description": "Data regarding the legal entity's acceptance of the WePay terms of service."
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"country"
				],
				"type": "object",
				"x-label": "v3.0.rc.4.1-shared_legal_entity_request",
				"description": "Inline legal entity information associated with the buyer of the order."
			},
			"v3.0.rc.4.1-legal_entity-resp": {
				"additionalProperties": false,
				"properties": {
					"additional_representatives": {
						"$ref": "#/components/schemas/legal_entities_additional_representatives_response"
					},
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"controller": {
						"$ref": "#/components/schemas/legal_entities_controller_response"
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"description": {
						"maxLength": 1024,
						"type": "string",
						"nullable": true,
						"description": "Description of the Legal Entity. WePay uses this information for underwriting purposes."
					},
					"entity_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_entity_country_info_CA"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_entity_country_info_GB"
							},
							"US": {
								"$ref": "#/components/schemas/shared_entity_country_info_US"
							},
							"country_of_formation": {
								"$ref": "#/components/schemas/country_code-nullable"
							},
							"operates_in_sanctioned_countries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"enum": [
										"CU",
										"IR",
										"KP",
										"SY",
										"XX"
									],
									"x-enumDescriptions": {
										"CU": "Cuba",
										"IR": "Iran",
										"KP": "North Korea",
										"SY": "Syria",
										"XX": "WePay's custom 2-digit ISO code for Crimea Region, as a 2-digit code does not exist."
									},
									"type": "string"
								},
								"nullable": true,
								"description": "An array of sanctioned countries where the Legal Entity operates. Possible values include `CU`, `IR`, `KP`, `XX`, `SY`. Note that `XX` is used to represent Crimea, as it does not have its own 2-digit ISO code. If the merchant indicates they do not have operations in one of the sanctioned countries listed above, then pass an empty array: `[]`. This field is required, if the value is left `null`, capabilities (payments and payouts) will be disabled."
							},
							"year_of_formation": {
								"type": "integer",
								"minimum": 0,
								"nullable": true,
								"description": "The year when the Legal Entity originated."
							}
						},
						"type": "object",
						"description": "Information about the Legal Entity."
					},
					"entity_name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*$",
						"type": "string",
						"nullable": true,
						"description": "The name of the legal entity. This should **not** contain a merchant's DBA; DBAs can be included on the Account resource. Must not contain the word `wepay`."
					},
					"id": {
						"type": "string",
						"nullable": true,
						"description": "ID of the legal entity, generated by WePay when the legal entity is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_application_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"primary_url": {
						"$ref": "#/components/schemas/uri-nullable"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-legal_entities"
					},
					"terms_of_service": {
						"additionalProperties": false,
						"properties": {
							"acceptance_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "Time (in UNIX) when WePay's Terms of Service was accepted."
							},
							"original_ip": {
								"maxLength": 45,
								"pattern": "^[A-F0-9a-f:\\.]*$",
								"type": "string",
								"nullable": true,
								"description": "The IP address in use when WePay's Terms of Service was accepted."
							},
							"terms_of_service_version": {
								"maxLength": 20,
								"pattern": "^[A-Za-z0-9_]+$",
								"type": "string",
								"nullable": true,
								"description": "The version of WePay's Terms of Service that was accepted."
							}
						},
						"type": "object",
						"description": "Data regarding the legal entity's acceptance of the WePay terms of service."
					},
					"account_controller": {
						"$ref": "#/components/schemas/shared_account_controller"
					},
					"annual_sales_volume": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "integer",
						"nullable": true,
						"description": "Annual sales volume in dollars of the merchant, using the currency specified in annual_sales_volume_currency."
					},
					"annual_sales_volume_currency": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"enum": [
							"USD",
							"CAD"
						],
						"x-enumDescriptions": {
							"USD": "United States Dollar",
							"CAD": "Canadian Dollar"
						},
						"description": "The currency used in annual sales volume. Possible values include: CAD, USD"
					},
					"attestation": {
						"additionalProperties": false,
						"properties": {
							"attester_type": {
								"enum": [
									"additional_representative",
									"controller",
									"other_representative"
								],
								"type": "string",
								"x-isOneOfKey": true,
								"description": "Describes by whom a legal entity is attested. The value will be `controller` unless your platform has permission from WePay to collect attestation from other representatives.",
								"x-enumDescriptions": {
									"additional_representative": "**This option requires permission.** The legal entity is attested by one of the additional representatives.",
									"controller": "The legal entity is attested by the controller.",
									"other_representative": "**This option requires permission.** The legal entity is attested by other representative."
								}
							},
							"additional_representative": {
								"$ref": "#/components/schemas/legal_entities_attestation_additional_representative"
							},
							"controller": {
								"$ref": "#/components/schemas/legal_entities_attestation_controller"
							},
							"other_representative": {
								"$ref": "#/components/schemas/legal_entities_attestation_other_representative"
							}
						},
						"required": [
							"attester_type"
						],
						"type": "object",
						"nullable": true,
						"description": "Indicate that the controller has attested to the validity of CIP/KYC details submitted. Find more information [here](/clear/options/kyc-and-cip-certification/#attestation)."
					},
					"average_ticket_size": {
						"x-versions": [
							"v3.0.rc.4.1"
						],
						"type": "integer",
						"nullable": true,
						"description": "Actual sales per transaction on an average. It's in dollars."
					},
					"controller_type": {
						"$ref": "#/components/schemas/controller_type"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"email": {
						"$ref": "#/components/schemas/entity-email-nullable"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"non_delivery_days": {
						"x-versions": [
							"v3.0.rc.4.1"
						],
						"type": "integer",
						"nullable": true,
						"description": "Non delivery days specified by the merchant."
					},
					"preferred_locale": {
						"description": "The preferred locale of the legal entity. For merchants using the WePay Merchant Center, or receiving payments emails from WePay, this option will set the language preference.",
						"enum": [
							"en_US",
							"es_US",
							"en_CA",
							"fr_CA"
						],
						"x-enumDescriptions": {
							"en_US": "Locale string representing English - United States",
							"es_US": "Locale string representing Spanish - United States",
							"en_CA": "Locale string representing English - Canada",
							"fr_CA": "Locale string representing French - Canada"
						},
						"nullable": true,
						"type": "string"
					},
					"public_ownership": {
						"$ref": "#/components/schemas/legal_entities_public_ownership_response"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"referral_details": {
						"type": "object",
						"description": "Information regarding the referring representative",
						"properties": {
							"email": {
								"$ref": "#/components/schemas/email"
							},
							"name": {
								"additionalProperties": false,
								"properties": {
									"first": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "First name."
									},
									"last": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "Last name."
									}
								},
								"required": [
									"first",
									"last"
								],
								"type": "object"
							},
							"standard_id": {
								"$ref": "#/components/schemas/standard_id"
							},
							"coupon_code": {
								"$ref": "#/components/schemas/coupon_code"
							}
						},
						"required": [
							"name",
							"email",
							"standard_id"
						]
					},
					"significant_beneficiaries": {
						"additionalProperties": false,
						"properties": {
							"affiliations": {
								"additionalProperties": false,
								"properties": {
									"affiliation_0": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_1": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_2": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_3": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_4": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_5": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_6": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_7": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_8": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_9": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Information about all of the significant beneficiaries' affiliations. 10 affiliations are allowed at most."
							},
							"entities": {
								"additionalProperties": false,
								"properties": {
									"art_and_culture": {
										"type": "boolean",
										"default": false
									},
									"education": {
										"type": "boolean",
										"default": false
									},
									"individual": {
										"type": "boolean",
										"default": false
									},
									"labor_union": {
										"type": "boolean",
										"default": false
									},
									"other": {
										"type": "string",
										"maxLength": 255,
										"minLength": 1,
										"nullable": true
									},
									"political_organization": {
										"type": "boolean",
										"default": false
									},
									"religious": {
										"type": "boolean",
										"default": false
									},
									"social_service_and_economic_development": {
										"type": "boolean",
										"default": false
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Describe significant beneficiaries' entity type."
							},
							"geographies": {
								"additionalProperties": false,
								"properties": {
									"international": {
										"type": "array",
										"minItems": 1,
										"uniqueItems": true,
										"items": {
											"$ref": "#/components/schemas/country_code"
										}
									},
									"local": {
										"type": "boolean",
										"default": true
									},
									"national": {
										"type": "boolean",
										"default": false
									},
									"regional": {
										"type": "boolean",
										"default": false
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Information about significant beneficiaries' geographic locations, including `regional` and `international` details."
							},
							"non_domestic_location_beneficiaries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"$ref": "#/components/schemas/country_code"
								},
								"nullable": true,
								"description": "**Note:** Although this is nested in the `significant_beneficiaries` object, this information must be collected for all non-domestic beneficiaries, even if they receive or control less than 10% of the organization's funds."
							}
						},
						"type": "object",
						"description": "Identify significant beneficiaries. **Note:** A significant beneficiary either receives or is responsible for 10% or more of the organization's funds."
					},
					"significant_donors": {
						"additionalProperties": false,
						"properties": {
							"corporate_entity": {
								"type": "boolean",
								"default": false
							},
							"endowment_fund": {
								"type": "boolean",
								"default": false
							},
							"government": {
								"type": "boolean",
								"default": false
							},
							"individual": {
								"type": "boolean",
								"default": false
							},
							"institutional": {
								"type": "boolean",
								"default": false
							},
							"other": {
								"type": "string",
								"maxLength": 255,
								"minLength": 1,
								"nullable": true
							},
							"other_charitable_organization": {
								"type": "boolean",
								"default": false
							}
						},
						"type": "object",
						"nullable": true,
						"description": "Identify significant donors. **Note:** A significant donor contributes 10% or more of the organization's total volume."
					}
				},
				"required": [
					"additional_representatives",
					"address",
					"api_version",
					"controller",
					"country",
					"create_time",
					"description",
					"entity_country_info",
					"entity_name",
					"id",
					"owner",
					"path",
					"phone",
					"primary_url",
					"resource",
					"terms_of_service"
				],
				"type": "object",
				"x-label": "v3.0.rc.4.1-legal_entity-resp"
			},
			"v3.0.rc.4.1-shared_buyer_request": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"legal_entity",
							"legal_entity_id"
						],
						"x-enumDescriptions": {
							"legal_entity": "",
							"legal_entity_id": ""
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Your platform can only provide two entries. If you embed legal entity information inline set type to `legal_entity_id`."
					},
					"legal_entity": {
						"$ref": "#/components/schemas/v3.0.rc.4.1-shared_legal_entity_request"
					},
					"legal_entity_id": {
						"type": "string",
						"nullable": true,
						"description": "Merchant's Legal Entity ID associated with the order."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"description": "Buyer of the order. **Required** if the order is not created in-line with a /payment_methods request.",
				"x-label": "v3.0.rc.4.1-shared_buyer_request"
			},
			"v3.0.rc.4.1-payments_order_request": {
				"additionalProperties": false,
				"properties": {
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						},
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`."
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of alternate tax for the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/v3.0.rc.4.1-shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						},
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`."
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						},
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`."
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"type",
					"short_description"
				],
				"type": "object",
				"x-label": "v3.0.rc.4.1-payments_order_request"
			},
			"v3.0.rc.4.1-order-req": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"nullable": true,
						"description": "Merchant's account id associated with the order."
					},
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`.",
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						}
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Merchant's Legal Entity ID associated with the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/v3.0.rc.4.1-shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`.",
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						}
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`.",
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						}
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"account_id",
					"type",
					"short_description"
				],
				"type": "object",
				"x-label": "v3.0.rc.4.1-order-req"
			},
			"v3.0.rc.4.1-order-id-req": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"$ref": "#/components/schemas/id"
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of alternate tax for the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/v3.0.rc.4.1-shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`.",
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						}
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`.",
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						}
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`.",
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						}
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"account_id"
				],
				"type": "object",
				"x-label": "v3.0.rc.4.1-order-id-req"
			},
			"v3.0.rc.4.2-shared_representative_request": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"date_of_birth": {
						"additionalProperties": false,
						"properties": {
							"day": {
								"maximum": 31,
								"minimum": 1,
								"type": "integer",
								"description": "Day of birth."
							},
							"month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "Month of birth."
							},
							"year": {
								"minimum": 1900,
								"type": "integer",
								"description": "Year of birth."
							}
						},
						"required": [
							"year",
							"month",
							"day"
						],
						"type": "object",
						"nullable": true,
						"x-isDate": true,
						"description": "Date of birth details."
					},
					"email": {
						"$ref": "#/components/schemas/email-nullable"
					},
					"email_is_verified": {
						"type": "boolean"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"is_auxiliary_controller": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative is a auxiliary controller for the legal entity."
					},
					"is_beneficial_owner": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative or controller is a beneficial owner for the legal entity."
					},
					"job_title": {
						"maxLength": 64,
						"minLength": 2,
						"type": "string",
						"nullable": true,
						"description": "The job title of the controller."
					},
					"managerial_role": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"enum": [
							"not_manager",
							"senior_manager",
							"general_partner",
							"managing_member"
						],
						"x-enumDescriptions": {
							"not_manager": "The role type of the representative is not manager.",
							"senior_manager": "The role type of the representative is senior manager.",
							"general_partner": "The role type of the representative is general partner.",
							"managing_member": "The role type of the representative is managing member."
						},
						"type": "string",
						"description": "The role type of the representative"
					},
					"name": {
						"$ref": "#/components/schemas/shared_full_name"
					},
					"personal_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_personal_country_info_CA_request"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_personal_country_info_GB_request"
							},
							"US": {
								"$ref": "#/components/schemas/shared_personal_country_info_US_request"
							}
						},
						"type": "object"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"reference_id": {
						"$ref": "#/components/schemas/beneficial_owner_reference_id"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.4.2-shared_representative_request",
				"description": "Personal details of the additional representative."
			},
			"v3.0.rc.4.2-shared_representative_response": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"date_of_birth_is_present": {
						"type": "boolean",
						"description": "Indicates if the date of birth of the controller is present."
					},
					"email": {
						"$ref": "#/components/schemas/email-nullable"
					},
					"email_is_verified": {
						"type": "boolean"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"is_auxiliary_controller": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative is a auxiliary controller for the legal entity."
					},
					"is_beneficial_owner": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative or controller is a beneficial owner for the legal entity."
					},
					"job_title": {
						"maxLength": 64,
						"minLength": 2,
						"type": "string",
						"nullable": true,
						"description": "The job title of the controller."
					},
					"managerial_role": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"enum": [
							"not_manager",
							"senior_manager",
							"general_partner",
							"managing_member"
						],
						"x-enumDescriptions": {
							"not_manager": "The role type of the representative is not manager.",
							"senior_manager": "The role type of the representative is senior manager.",
							"general_partner": "The role type of the representative is general partner.",
							"managing_member": "The role type of the representative is managing member."
						},
						"type": "string",
						"description": "The role type of the representative"
					},
					"name": {
						"$ref": "#/components/schemas/shared_full_name"
					},
					"personal_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_CA_response"
							},
							"GB": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_GB_response"
							},
							"US": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_US_response"
							}
						},
						"type": "object"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"reference_id": {
						"$ref": "#/components/schemas/beneficial_owner_reference_id"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.4.2-shared_representative_response",
				"description": "Personal details of the additional representative."
			},
			"v3.0.rc.4.2-shared_additional_representatives_request": {
				"additionalProperties": false,
				"properties": {
					"representative_0": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_representative_request"
					},
					"representative_1": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_representative_request"
					},
					"representative_2": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_representative_request"
					},
					"representative_3": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_representative_request"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.4.2-shared_additional_representatives_request",
				"description": "Personal information for additional representatives of the legal entity. WePay collects additional representatives information for businesses. The additional representatives could a beneficial owners or an auxiliary controller.  This is determined by setting the parameters on the representative. **Note:** You can pass `{}` to signify that this legal entity does not have any additional representatives."
			},
			"v3.0.rc.4.2-legal_entities_additional_representatives_response": {
				"additionalProperties": false,
				"properties": {
					"representative_0": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_representative_response"
					},
					"representative_1": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_representative_response"
					},
					"representative_2": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_representative_response"
					},
					"representative_3": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_representative_response"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.4.2-legal_entities_additional_representatives_response",
				"description": "Personal information for additional representatives of the legal entity."
			},
			"v3.0.rc.4.2-shared_legal_entity_request": {
				"additionalProperties": false,
				"properties": {
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"account_controller": {
						"$ref": "#/components/schemas/shared_account_controller"
					},
					"additional_representatives": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_additional_representatives_request"
					},
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"annual_sales_volume": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "integer",
						"nullable": true,
						"description": "Annual sales volume in dollars of the merchant, using the currency specified in annual_sales_volume_currency."
					},
					"annual_sales_volume_currency": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"enum": [
							"USD",
							"CAD"
						],
						"x-enumDescriptions": {
							"USD": "United States Dollar",
							"CAD": "Canadian Dollar"
						},
						"description": "The currency used in annual sales volume. Possible values include: CAD, USD"
					},
					"annual_sales_volume_type": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"enum": [
							"actual",
							"expected"
						],
						"x-enumDescriptions": {
							"actual": "Annual sales volume is used as an actual value for embedded banking service.",
							"expected": "Annual sales volume is used as an expected value for embedded banking service."
						},
						"description": "Specifies whether the annual sales volume specified is actual or expected value."
					},
					"controller": {
						"$ref": "#/components/schemas/shared_controller_request"
					},
					"controller_type": {
						"$ref": "#/components/schemas/controller_type"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 1024,
						"type": "string",
						"nullable": true,
						"description": "Description of the Legal Entity. WePay uses this information for underwriting purposes."
					},
					"email": {
						"$ref": "#/components/schemas/entity-email-nullable"
					},
					"entity_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_entity_country_info_CA"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_entity_country_info_GB"
							},
							"US": {
								"$ref": "#/components/schemas/shared_entity_country_info_US"
							},
							"country_of_formation": {
								"$ref": "#/components/schemas/country_code-nullable"
							},
							"operates_in_sanctioned_countries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"enum": [
										"CU",
										"IR",
										"KP",
										"SY",
										"XX"
									],
									"x-enumDescriptions": {
										"CU": "Cuba",
										"IR": "Iran",
										"KP": "North Korea",
										"SY": "Syria",
										"XX": "WePay's custom 2-digit ISO code for Crimea Region, as a 2-digit code does not exist."
									},
									"type": "string"
								},
								"nullable": true,
								"description": "An array of sanctioned countries where the Legal Entity operates. Possible values include `CU`, `IR`, `KP`, `XX`, `SY`. Note that `XX` is used to represent Crimea, as it does not have its own 2-digit ISO code. If the merchant indicates they do not have operations in one of the sanctioned countries listed above, then pass an empty array: `[]`. This field is required, if the value is left `null`, capabilities (payments and payouts) will be disabled."
							},
							"year_of_formation": {
								"type": "integer",
								"minimum": 0,
								"nullable": true,
								"description": "The year when the Legal Entity originated."
							}
						},
						"type": "object",
						"description": "Information about the Legal Entity."
					},
					"entity_name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*$",
						"type": "string",
						"nullable": true,
						"description": "The name of the legal entity. This should **not** contain a merchant's DBA; DBAs can be included on the Account resource. Must not contain the word `wepay`."
					},
					"fiscal_year_end_date": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"additionalProperties": false,
						"type": "object",
						"properties": {
							"day": {
								"maximum": 31,
								"minimum": 1,
								"type": "integer",
								"description": "Day of birth."
							},
							"month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "Month of birth."
							},
							"year": {
								"minimum": 1900,
								"type": "integer",
								"description": "Year of birth."
							}
						},
						"required": [
							"year",
							"month",
							"day"
						],
						"nullable": true,
						"x-isDate": true,
						"description": "Specifies fiscal year end date for the legal entity."
					},
					"has_intermediary_owners": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the merchant has the parent intermediary owners"
					},
					"naics_code": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"pattern": "^\\d{6}$",
						"description": "North American Industry Classification System code."
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"primary_url": {
						"$ref": "#/components/schemas/uri-nullable"
					},
					"public_ownership": {
						"$ref": "#/components/schemas/shared_public_ownership_request"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"significant_customer_countries": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "The list of countries in which this legal entity conducts business."
					},
					"terms_of_service": {
						"additionalProperties": false,
						"properties": {
							"acceptance_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "Time (in UNIX) when WePay's Terms of Service was accepted."
							},
							"original_ip": {
								"maxLength": 45,
								"pattern": "^[A-F0-9a-f:\\.]*$",
								"type": "string",
								"nullable": true,
								"description": "The IP address in use when WePay's Terms of Service was accepted."
							},
							"terms_of_service_version": {
								"maxLength": 20,
								"pattern": "^[A-Za-z0-9_]+$",
								"type": "string",
								"nullable": true,
								"description": "The version of WePay's Terms of Service that was accepted."
							}
						},
						"type": "object",
						"description": "Data regarding the legal entity's acceptance of the WePay terms of service."
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"country"
				],
				"type": "object",
				"x-label": "v3.0.rc.4.2-shared_legal_entity_request",
				"description": "Inline legal entity information associated with the buyer of the order."
			},
			"v3.0.rc.4.2-legal_entity-resp": {
				"additionalProperties": false,
				"properties": {
					"additional_representatives": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-legal_entities_additional_representatives_response"
					},
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"controller": {
						"$ref": "#/components/schemas/legal_entities_controller_response"
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"description": {
						"maxLength": 1024,
						"type": "string",
						"nullable": true,
						"description": "Description of the Legal Entity. WePay uses this information for underwriting purposes."
					},
					"entity_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_entity_country_info_CA"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_entity_country_info_GB"
							},
							"US": {
								"$ref": "#/components/schemas/shared_entity_country_info_US"
							},
							"country_of_formation": {
								"$ref": "#/components/schemas/country_code-nullable"
							},
							"operates_in_sanctioned_countries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"enum": [
										"CU",
										"IR",
										"KP",
										"SY",
										"XX"
									],
									"x-enumDescriptions": {
										"CU": "Cuba",
										"IR": "Iran",
										"KP": "North Korea",
										"SY": "Syria",
										"XX": "WePay's custom 2-digit ISO code for Crimea Region, as a 2-digit code does not exist."
									},
									"type": "string"
								},
								"nullable": true,
								"description": "An array of sanctioned countries where the Legal Entity operates. Possible values include `CU`, `IR`, `KP`, `XX`, `SY`. Note that `XX` is used to represent Crimea, as it does not have its own 2-digit ISO code. If the merchant indicates they do not have operations in one of the sanctioned countries listed above, then pass an empty array: `[]`. This field is required, if the value is left `null`, capabilities (payments and payouts) will be disabled."
							},
							"year_of_formation": {
								"type": "integer",
								"minimum": 0,
								"nullable": true,
								"description": "The year when the Legal Entity originated."
							}
						},
						"type": "object",
						"description": "Information about the Legal Entity."
					},
					"entity_name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*$",
						"type": "string",
						"nullable": true,
						"description": "The name of the legal entity. This should **not** contain a merchant's DBA; DBAs can be included on the Account resource. Must not contain the word `wepay`."
					},
					"id": {
						"type": "string",
						"nullable": true,
						"description": "ID of the legal entity, generated by WePay when the legal entity is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_application_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"primary_url": {
						"$ref": "#/components/schemas/uri-nullable"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-legal_entities"
					},
					"terms_of_service": {
						"additionalProperties": false,
						"properties": {
							"acceptance_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "Time (in UNIX) when WePay's Terms of Service was accepted."
							},
							"original_ip": {
								"maxLength": 45,
								"pattern": "^[A-F0-9a-f:\\.]*$",
								"type": "string",
								"nullable": true,
								"description": "The IP address in use when WePay's Terms of Service was accepted."
							},
							"terms_of_service_version": {
								"maxLength": 20,
								"pattern": "^[A-Za-z0-9_]+$",
								"type": "string",
								"nullable": true,
								"description": "The version of WePay's Terms of Service that was accepted."
							}
						},
						"type": "object",
						"description": "Data regarding the legal entity's acceptance of the WePay terms of service."
					},
					"account_controller": {
						"$ref": "#/components/schemas/shared_account_controller"
					},
					"annual_sales_volume": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "integer",
						"nullable": true,
						"description": "Annual sales volume in dollars of the merchant, using the currency specified in annual_sales_volume_currency."
					},
					"annual_sales_volume_currency": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"enum": [
							"USD",
							"CAD"
						],
						"x-enumDescriptions": {
							"USD": "United States Dollar",
							"CAD": "Canadian Dollar"
						},
						"description": "The currency used in annual sales volume. Possible values include: CAD, USD"
					},
					"annual_sales_volume_type": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"enum": [
							"actual",
							"expected"
						],
						"x-enumDescriptions": {
							"actual": "Annual sales volume is used as an actual value for embedded banking service.",
							"expected": "Annual sales volume is used as an expected value for embedded banking service."
						},
						"description": "Specifies whether the annual sales volume specified is actual or expected value."
					},
					"attestation": {
						"additionalProperties": false,
						"properties": {
							"attester_type": {
								"enum": [
									"additional_representative",
									"controller",
									"other_representative"
								],
								"type": "string",
								"x-isOneOfKey": true,
								"description": "Describes by whom a legal entity is attested. The value will be `controller` unless your platform has permission from WePay to collect attestation from other representatives.",
								"x-enumDescriptions": {
									"additional_representative": "**This option requires permission.** The legal entity is attested by one of the additional representatives.",
									"controller": "The legal entity is attested by the controller.",
									"other_representative": "**This option requires permission.** The legal entity is attested by other representative."
								}
							},
							"additional_representative": {
								"$ref": "#/components/schemas/legal_entities_attestation_additional_representative"
							},
							"controller": {
								"$ref": "#/components/schemas/legal_entities_attestation_controller"
							},
							"other_representative": {
								"$ref": "#/components/schemas/legal_entities_attestation_other_representative"
							}
						},
						"required": [
							"attester_type"
						],
						"type": "object",
						"nullable": true,
						"description": "Indicate that the controller has attested to the validity of CIP/KYC details submitted. Find more information [here](/clear/options/kyc-and-cip-certification/#attestation)."
					},
					"controller_type": {
						"$ref": "#/components/schemas/controller_type"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"email": {
						"$ref": "#/components/schemas/entity-email-nullable"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"fiscal_year_end_date": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"additionalProperties": false,
						"type": "object",
						"properties": {
							"day": {
								"maximum": 31,
								"minimum": 1,
								"type": "integer",
								"description": "Day of birth."
							},
							"month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "Month of birth."
							},
							"year": {
								"minimum": 1900,
								"type": "integer",
								"description": "Year of birth."
							}
						},
						"required": [
							"year",
							"month",
							"day"
						],
						"nullable": true,
						"x-isDate": true,
						"description": "Specifies fiscal year end date for the legal entity."
					},
					"has_intermediary_owners": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the merchant has the parent intermediary owners"
					},
					"naics_code": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"pattern": "^\\d{6}$",
						"description": "North American Industry Classification System code."
					},
					"preferred_locale": {
						"description": "The preferred locale of the legal entity. For merchants using the WePay Merchant Center, or receiving payments emails from WePay, this option will set the language preference.",
						"enum": [
							"en_US",
							"es_US",
							"en_CA",
							"fr_CA"
						],
						"x-enumDescriptions": {
							"en_US": "Locale string representing English - United States",
							"es_US": "Locale string representing Spanish - United States",
							"en_CA": "Locale string representing English - Canada",
							"fr_CA": "Locale string representing French - Canada"
						},
						"nullable": true,
						"type": "string"
					},
					"public_ownership": {
						"$ref": "#/components/schemas/legal_entities_public_ownership_response"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"referral_details": {
						"type": "object",
						"description": "Information regarding the referring representative",
						"properties": {
							"email": {
								"$ref": "#/components/schemas/email"
							},
							"name": {
								"additionalProperties": false,
								"properties": {
									"first": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "First name."
									},
									"last": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "Last name."
									}
								},
								"required": [
									"first",
									"last"
								],
								"type": "object"
							},
							"standard_id": {
								"$ref": "#/components/schemas/standard_id"
							},
							"coupon_code": {
								"$ref": "#/components/schemas/coupon_code"
							}
						},
						"required": [
							"name",
							"email",
							"standard_id"
						]
					},
					"significant_beneficiaries": {
						"additionalProperties": false,
						"properties": {
							"affiliations": {
								"additionalProperties": false,
								"properties": {
									"affiliation_0": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_1": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_2": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_3": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_4": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_5": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_6": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_7": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_8": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_9": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Information about all of the significant beneficiaries' affiliations. 10 affiliations are allowed at most."
							},
							"entities": {
								"additionalProperties": false,
								"properties": {
									"art_and_culture": {
										"type": "boolean",
										"default": false
									},
									"education": {
										"type": "boolean",
										"default": false
									},
									"individual": {
										"type": "boolean",
										"default": false
									},
									"labor_union": {
										"type": "boolean",
										"default": false
									},
									"other": {
										"type": "string",
										"maxLength": 255,
										"minLength": 1,
										"nullable": true
									},
									"political_organization": {
										"type": "boolean",
										"default": false
									},
									"religious": {
										"type": "boolean",
										"default": false
									},
									"social_service_and_economic_development": {
										"type": "boolean",
										"default": false
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Describe significant beneficiaries' entity type."
							},
							"geographies": {
								"additionalProperties": false,
								"properties": {
									"international": {
										"type": "array",
										"minItems": 1,
										"uniqueItems": true,
										"items": {
											"$ref": "#/components/schemas/country_code"
										}
									},
									"local": {
										"type": "boolean",
										"default": true
									},
									"national": {
										"type": "boolean",
										"default": false
									},
									"regional": {
										"type": "boolean",
										"default": false
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Information about significant beneficiaries' geographic locations, including `regional` and `international` details."
							},
							"non_domestic_location_beneficiaries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"$ref": "#/components/schemas/country_code"
								},
								"nullable": true,
								"description": "**Note:** Although this is nested in the `significant_beneficiaries` object, this information must be collected for all non-domestic beneficiaries, even if they receive or control less than 10% of the organization's funds."
							}
						},
						"type": "object",
						"description": "Identify significant beneficiaries. **Note:** A significant beneficiary either receives or is responsible for 10% or more of the organization's funds."
					},
					"significant_customer_countries": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "The list of countries in which this legal entity conducts business."
					},
					"significant_donors": {
						"additionalProperties": false,
						"properties": {
							"corporate_entity": {
								"type": "boolean",
								"default": false
							},
							"endowment_fund": {
								"type": "boolean",
								"default": false
							},
							"government": {
								"type": "boolean",
								"default": false
							},
							"individual": {
								"type": "boolean",
								"default": false
							},
							"institutional": {
								"type": "boolean",
								"default": false
							},
							"other": {
								"type": "string",
								"maxLength": 255,
								"minLength": 1,
								"nullable": true
							},
							"other_charitable_organization": {
								"type": "boolean",
								"default": false
							}
						},
						"type": "object",
						"nullable": true,
						"description": "Identify significant donors. **Note:** A significant donor contributes 10% or more of the organization's total volume."
					}
				},
				"required": [
					"additional_representatives",
					"address",
					"api_version",
					"controller",
					"country",
					"create_time",
					"description",
					"entity_country_info",
					"entity_name",
					"id",
					"owner",
					"path",
					"phone",
					"primary_url",
					"resource",
					"terms_of_service"
				],
				"type": "object",
				"x-label": "v3.0.rc.4.2-legal_entity-resp"
			},
			"v3.0.rc.4.2-shared_buyer_request": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"legal_entity",
							"legal_entity_id"
						],
						"x-enumDescriptions": {
							"legal_entity": "",
							"legal_entity_id": ""
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Your platform can only provide two entries. If you embed legal entity information inline set type to `legal_entity_id`."
					},
					"legal_entity": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_legal_entity_request"
					},
					"legal_entity_id": {
						"type": "string",
						"nullable": true,
						"description": "Merchant's Legal Entity ID associated with the order."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"description": "Buyer of the order. **Required** if the order is not created in-line with a /payment_methods request.",
				"x-label": "v3.0.rc.4.2-shared_buyer_request"
			},
			"v3.0.rc.4.2-payments_order_request": {
				"additionalProperties": false,
				"properties": {
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						},
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`."
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of alternate tax for the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						},
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`."
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						},
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`."
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"type",
					"short_description"
				],
				"type": "object",
				"x-label": "v3.0.rc.4.2-payments_order_request"
			},
			"v3.0.rc.4.2-order-req": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"nullable": true,
						"description": "Merchant's account id associated with the order."
					},
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`.",
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						}
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Merchant's Legal Entity ID associated with the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`.",
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						}
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`.",
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						}
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"account_id",
					"type",
					"short_description"
				],
				"type": "object",
				"x-label": "v3.0.rc.4.2-order-req"
			},
			"v3.0.rc.4.2-order-id-req": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"$ref": "#/components/schemas/id"
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of alternate tax for the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/v3.0.rc.4.2-shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`.",
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						}
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`.",
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						}
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`.",
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						}
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"account_id"
				],
				"type": "object",
				"x-label": "v3.0.rc.4.2-order-id-req"
			},
			"v3.0.rc.4-shared_representative_request": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"date_of_birth": {
						"additionalProperties": false,
						"properties": {
							"day": {
								"maximum": 31,
								"minimum": 1,
								"type": "integer",
								"description": "Day of birth."
							},
							"month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "Month of birth."
							},
							"year": {
								"minimum": 1900,
								"type": "integer",
								"description": "Year of birth."
							}
						},
						"required": [
							"year",
							"month",
							"day"
						],
						"type": "object",
						"nullable": true,
						"x-isDate": true,
						"description": "Date of birth details."
					},
					"email": {
						"$ref": "#/components/schemas/email-nullable"
					},
					"email_is_verified": {
						"type": "boolean"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"is_auxiliary_controller": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative is a auxiliary controller for the legal entity."
					},
					"is_beneficial_owner": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative or controller is a beneficial owner for the legal entity."
					},
					"job_title": {
						"maxLength": 64,
						"minLength": 2,
						"type": "string",
						"nullable": true,
						"description": "The job title of the controller."
					},
					"managerial_role": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"enum": [
							"not_manager",
							"senior_manager",
							"general_partner",
							"managing_member"
						],
						"x-enumDescriptions": {
							"not_manager": "The role type of the representative is not manager.",
							"senior_manager": "The role type of the representative is senior manager.",
							"general_partner": "The role type of the representative is general partner.",
							"managing_member": "The role type of the representative is managing member."
						},
						"type": "string",
						"description": "The role type of the representative"
					},
					"name": {
						"$ref": "#/components/schemas/shared_full_name"
					},
					"personal_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_personal_country_info_CA_request"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_personal_country_info_GB_request"
							},
							"US": {
								"$ref": "#/components/schemas/shared_personal_country_info_US_request"
							}
						},
						"type": "object"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"reference_id": {
						"$ref": "#/components/schemas/beneficial_owner_reference_id"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.4-shared_representative_request",
				"description": "Personal details of the additional representative."
			},
			"v3.0.rc.4-shared_representative_response": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"date_of_birth_is_present": {
						"type": "boolean",
						"description": "Indicates if the date of birth of the controller is present."
					},
					"email": {
						"$ref": "#/components/schemas/email-nullable"
					},
					"email_is_verified": {
						"type": "boolean"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"is_auxiliary_controller": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative is a auxiliary controller for the legal entity."
					},
					"is_beneficial_owner": {
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the additional representative or controller is a beneficial owner for the legal entity."
					},
					"job_title": {
						"maxLength": 64,
						"minLength": 2,
						"type": "string",
						"nullable": true,
						"description": "The job title of the controller."
					},
					"managerial_role": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"enum": [
							"not_manager",
							"senior_manager",
							"general_partner",
							"managing_member"
						],
						"x-enumDescriptions": {
							"not_manager": "The role type of the representative is not manager.",
							"senior_manager": "The role type of the representative is senior manager.",
							"general_partner": "The role type of the representative is general partner.",
							"managing_member": "The role type of the representative is managing member."
						},
						"type": "string",
						"description": "The role type of the representative"
					},
					"name": {
						"$ref": "#/components/schemas/shared_full_name"
					},
					"personal_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_CA_response"
							},
							"GB": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_GB_response"
							},
							"US": {
								"$ref": "#/components/schemas/legal_entities_personal_country_info_US_response"
							}
						},
						"type": "object"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"reference_id": {
						"$ref": "#/components/schemas/beneficial_owner_reference_id"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.4-shared_representative_response",
				"description": "Personal details of the additional representative."
			},
			"v3.0.rc.4-shared_additional_representatives_request": {
				"additionalProperties": false,
				"properties": {
					"representative_0": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_representative_request"
					},
					"representative_1": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_representative_request"
					},
					"representative_2": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_representative_request"
					},
					"representative_3": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_representative_request"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.4-shared_additional_representatives_request",
				"description": "Personal information for additional representatives of the legal entity. WePay collects additional representatives information for businesses. The additional representatives could a beneficial owners or an auxiliary controller.  This is determined by setting the parameters on the representative. **Note:** You can pass `{}` to signify that this legal entity does not have any additional representatives."
			},
			"v3.0.rc.4-legal_entities_additional_representatives_response": {
				"additionalProperties": false,
				"properties": {
					"representative_0": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_representative_response"
					},
					"representative_1": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_representative_response"
					},
					"representative_2": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_representative_response"
					},
					"representative_3": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_representative_response"
					}
				},
				"type": "object",
				"nullable": true,
				"x-label": "v3.0.rc.4-legal_entities_additional_representatives_response",
				"description": "Personal information for additional representatives of the legal entity."
			},
			"v3.0.rc.4-shared_legal_entity_request": {
				"additionalProperties": false,
				"properties": {
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"account_controller": {
						"$ref": "#/components/schemas/shared_account_controller"
					},
					"additional_representatives": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_additional_representatives_request"
					},
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"annual_sales_volume": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "integer",
						"nullable": true,
						"description": "Annual sales volume in dollars of the merchant, using the currency specified in annual_sales_volume_currency."
					},
					"annual_sales_volume_currency": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"enum": [
							"USD",
							"CAD"
						],
						"x-enumDescriptions": {
							"USD": "United States Dollar",
							"CAD": "Canadian Dollar"
						},
						"description": "The currency used in annual sales volume. Possible values include: CAD, USD"
					},
					"annual_sales_volume_type": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"enum": [
							"actual",
							"expected"
						],
						"x-enumDescriptions": {
							"actual": "Annual sales volume is used as an actual value for embedded banking service.",
							"expected": "Annual sales volume is used as an expected value for embedded banking service."
						},
						"description": "Specifies whether the annual sales volume specified is actual or expected value."
					},
					"average_ticket_size": {
						"x-versions": [
							"v3.0.rc.4.1"
						],
						"type": "integer",
						"nullable": true,
						"description": "Actual sales per transaction on an average. It's in dollars."
					},
					"controller": {
						"$ref": "#/components/schemas/shared_controller_request"
					},
					"controller_type": {
						"$ref": "#/components/schemas/controller_type"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 1024,
						"type": "string",
						"nullable": true,
						"description": "Description of the Legal Entity. WePay uses this information for underwriting purposes."
					},
					"email": {
						"$ref": "#/components/schemas/entity-email-nullable"
					},
					"entity_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_entity_country_info_CA"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_entity_country_info_GB"
							},
							"US": {
								"$ref": "#/components/schemas/shared_entity_country_info_US"
							},
							"country_of_formation": {
								"$ref": "#/components/schemas/country_code-nullable"
							},
							"operates_in_sanctioned_countries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"enum": [
										"CU",
										"IR",
										"KP",
										"SY",
										"XX"
									],
									"x-enumDescriptions": {
										"CU": "Cuba",
										"IR": "Iran",
										"KP": "North Korea",
										"SY": "Syria",
										"XX": "WePay's custom 2-digit ISO code for Crimea Region, as a 2-digit code does not exist."
									},
									"type": "string"
								},
								"nullable": true,
								"description": "An array of sanctioned countries where the Legal Entity operates. Possible values include `CU`, `IR`, `KP`, `XX`, `SY`. Note that `XX` is used to represent Crimea, as it does not have its own 2-digit ISO code. If the merchant indicates they do not have operations in one of the sanctioned countries listed above, then pass an empty array: `[]`. This field is required, if the value is left `null`, capabilities (payments and payouts) will be disabled."
							},
							"year_of_formation": {
								"type": "integer",
								"minimum": 0,
								"nullable": true,
								"description": "The year when the Legal Entity originated."
							}
						},
						"type": "object",
						"description": "Information about the Legal Entity."
					},
					"entity_name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*$",
						"type": "string",
						"nullable": true,
						"description": "The name of the legal entity. This should **not** contain a merchant's DBA; DBAs can be included on the Account resource. Must not contain the word `wepay`."
					},
					"fiscal_year_end_date": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"additionalProperties": false,
						"type": "object",
						"properties": {
							"day": {
								"maximum": 31,
								"minimum": 1,
								"type": "integer",
								"description": "Day of birth."
							},
							"month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "Month of birth."
							},
							"year": {
								"minimum": 1900,
								"type": "integer",
								"description": "Year of birth."
							}
						},
						"required": [
							"year",
							"month",
							"day"
						],
						"nullable": true,
						"x-isDate": true,
						"description": "Specifies fiscal year end date for the legal entity."
					},
					"has_intermediary_owners": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the merchant has the parent intermediary owners"
					},
					"naics_code": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"pattern": "^\\d{6}$",
						"description": "North American Industry Classification System code."
					},
					"non_delivery_days": {
						"x-versions": [
							"v3.0.rc.4.1"
						],
						"type": "integer",
						"nullable": true,
						"description": "Non delivery days specified by the merchant."
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"primary_url": {
						"$ref": "#/components/schemas/uri-nullable"
					},
					"public_ownership": {
						"$ref": "#/components/schemas/shared_public_ownership_request"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"significant_customer_countries": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "The list of countries in which this legal entity conducts business."
					},
					"terms_of_service": {
						"additionalProperties": false,
						"properties": {
							"acceptance_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "Time (in UNIX) when WePay's Terms of Service was accepted."
							},
							"original_ip": {
								"maxLength": 45,
								"pattern": "^[A-F0-9a-f:\\.]*$",
								"type": "string",
								"nullable": true,
								"description": "The IP address in use when WePay's Terms of Service was accepted."
							},
							"terms_of_service_version": {
								"maxLength": 20,
								"pattern": "^[A-Za-z0-9_]+$",
								"type": "string",
								"nullable": true,
								"description": "The version of WePay's Terms of Service that was accepted."
							}
						},
						"type": "object",
						"description": "Data regarding the legal entity's acceptance of the WePay terms of service."
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"country"
				],
				"type": "object",
				"x-label": "v3.0.rc.4-shared_legal_entity_request",
				"description": "Inline legal entity information associated with the buyer of the order."
			},
			"v3.0.rc.4-legal_entity-resp": {
				"additionalProperties": false,
				"properties": {
					"additional_representatives": {
						"$ref": "#/components/schemas/v3.0.rc.4-legal_entities_additional_representatives_response"
					},
					"address": {
						"$ref": "#/components/schemas/legal_entities_address"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"controller": {
						"$ref": "#/components/schemas/legal_entities_controller_response"
					},
					"country": {
						"$ref": "#/components/schemas/country_code"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"description": {
						"maxLength": 1024,
						"type": "string",
						"nullable": true,
						"description": "Description of the Legal Entity. WePay uses this information for underwriting purposes."
					},
					"entity_country_info": {
						"additionalProperties": false,
						"properties": {
							"CA": {
								"$ref": "#/components/schemas/shared_entity_country_info_CA"
							},
							"GB": {
								"$ref": "#/components/schemas/shared_entity_country_info_GB"
							},
							"US": {
								"$ref": "#/components/schemas/shared_entity_country_info_US"
							},
							"country_of_formation": {
								"$ref": "#/components/schemas/country_code-nullable"
							},
							"operates_in_sanctioned_countries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"enum": [
										"CU",
										"IR",
										"KP",
										"SY",
										"XX"
									],
									"x-enumDescriptions": {
										"CU": "Cuba",
										"IR": "Iran",
										"KP": "North Korea",
										"SY": "Syria",
										"XX": "WePay's custom 2-digit ISO code for Crimea Region, as a 2-digit code does not exist."
									},
									"type": "string"
								},
								"nullable": true,
								"description": "An array of sanctioned countries where the Legal Entity operates. Possible values include `CU`, `IR`, `KP`, `XX`, `SY`. Note that `XX` is used to represent Crimea, as it does not have its own 2-digit ISO code. If the merchant indicates they do not have operations in one of the sanctioned countries listed above, then pass an empty array: `[]`. This field is required, if the value is left `null`, capabilities (payments and payouts) will be disabled."
							},
							"year_of_formation": {
								"type": "integer",
								"minimum": 0,
								"nullable": true,
								"description": "The year when the Legal Entity originated."
							}
						},
						"type": "object",
						"description": "Information about the Legal Entity."
					},
					"entity_name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*$",
						"type": "string",
						"nullable": true,
						"description": "The name of the legal entity. This should **not** contain a merchant's DBA; DBAs can be included on the Account resource. Must not contain the word `wepay`."
					},
					"id": {
						"type": "string",
						"nullable": true,
						"description": "ID of the legal entity, generated by WePay when the legal entity is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_application_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"phone": {
						"$ref": "#/components/schemas/phone-legal_entities-nullable"
					},
					"primary_url": {
						"$ref": "#/components/schemas/uri-nullable"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-legal_entities"
					},
					"terms_of_service": {
						"additionalProperties": false,
						"properties": {
							"acceptance_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"nullable": true,
								"description": "Time (in UNIX) when WePay's Terms of Service was accepted."
							},
							"original_ip": {
								"maxLength": 45,
								"pattern": "^[A-F0-9a-f:\\.]*$",
								"type": "string",
								"nullable": true,
								"description": "The IP address in use when WePay's Terms of Service was accepted."
							},
							"terms_of_service_version": {
								"maxLength": 20,
								"pattern": "^[A-Za-z0-9_]+$",
								"type": "string",
								"nullable": true,
								"description": "The version of WePay's Terms of Service that was accepted."
							}
						},
						"type": "object",
						"description": "Data regarding the legal entity's acceptance of the WePay terms of service."
					},
					"account_controller": {
						"$ref": "#/components/schemas/shared_account_controller"
					},
					"annual_sales_volume": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "integer",
						"nullable": true,
						"description": "Annual sales volume in dollars of the merchant, using the currency specified in annual_sales_volume_currency."
					},
					"annual_sales_volume_currency": {
						"x-versions": [
							"v3.0.rc.4.1",
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"enum": [
							"USD",
							"CAD"
						],
						"x-enumDescriptions": {
							"USD": "United States Dollar",
							"CAD": "Canadian Dollar"
						},
						"description": "The currency used in annual sales volume. Possible values include: CAD, USD"
					},
					"annual_sales_volume_type": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"enum": [
							"actual",
							"expected"
						],
						"x-enumDescriptions": {
							"actual": "Annual sales volume is used as an actual value for embedded banking service.",
							"expected": "Annual sales volume is used as an expected value for embedded banking service."
						},
						"description": "Specifies whether the annual sales volume specified is actual or expected value."
					},
					"attestation": {
						"additionalProperties": false,
						"properties": {
							"attester_type": {
								"enum": [
									"additional_representative",
									"controller",
									"other_representative"
								],
								"type": "string",
								"x-isOneOfKey": true,
								"description": "Describes by whom a legal entity is attested. The value will be `controller` unless your platform has permission from WePay to collect attestation from other representatives.",
								"x-enumDescriptions": {
									"additional_representative": "**This option requires permission.** The legal entity is attested by one of the additional representatives.",
									"controller": "The legal entity is attested by the controller.",
									"other_representative": "**This option requires permission.** The legal entity is attested by other representative."
								}
							},
							"additional_representative": {
								"$ref": "#/components/schemas/legal_entities_attestation_additional_representative"
							},
							"controller": {
								"$ref": "#/components/schemas/legal_entities_attestation_controller"
							},
							"other_representative": {
								"$ref": "#/components/schemas/legal_entities_attestation_other_representative"
							}
						},
						"required": [
							"attester_type"
						],
						"type": "object",
						"nullable": true,
						"description": "Indicate that the controller has attested to the validity of CIP/KYC details submitted. Find more information [here](/clear/options/kyc-and-cip-certification/#attestation)."
					},
					"average_ticket_size": {
						"x-versions": [
							"v3.0.rc.4.1"
						],
						"type": "integer",
						"nullable": true,
						"description": "Actual sales per transaction on an average. It's in dollars."
					},
					"controller_type": {
						"$ref": "#/components/schemas/controller_type"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"email": {
						"$ref": "#/components/schemas/entity-email-nullable"
					},
					"enterprise_customer_id": {
						"$ref": "#/components/schemas/enterprise_customer_id"
					},
					"fiscal_year_end_date": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"additionalProperties": false,
						"type": "object",
						"properties": {
							"day": {
								"maximum": 31,
								"minimum": 1,
								"type": "integer",
								"description": "Day of birth."
							},
							"month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "Month of birth."
							},
							"year": {
								"minimum": 1900,
								"type": "integer",
								"description": "Year of birth."
							}
						},
						"required": [
							"year",
							"month",
							"day"
						],
						"nullable": true,
						"x-isDate": true,
						"description": "Specifies fiscal year end date for the legal entity."
					},
					"has_intermediary_owners": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "boolean",
						"nullable": true,
						"description": "Specifies if the merchant has the parent intermediary owners"
					},
					"naics_code": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"type": "string",
						"nullable": true,
						"pattern": "^\\d{6}$",
						"description": "North American Industry Classification System code."
					},
					"non_delivery_days": {
						"x-versions": [
							"v3.0.rc.4.1"
						],
						"type": "integer",
						"nullable": true,
						"description": "Non delivery days specified by the merchant."
					},
					"preferred_locale": {
						"description": "The preferred locale of the legal entity. For merchants using the WePay Merchant Center, or receiving payments emails from WePay, this option will set the language preference.",
						"enum": [
							"en_US",
							"es_US",
							"en_CA",
							"fr_CA"
						],
						"x-enumDescriptions": {
							"en_US": "Locale string representing English - United States",
							"es_US": "Locale string representing Spanish - United States",
							"en_CA": "Locale string representing English - Canada",
							"fr_CA": "Locale string representing French - Canada"
						},
						"nullable": true,
						"type": "string"
					},
					"public_ownership": {
						"$ref": "#/components/schemas/legal_entities_public_ownership_response"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"referral_details": {
						"type": "object",
						"description": "Information regarding the referring representative",
						"properties": {
							"email": {
								"$ref": "#/components/schemas/email"
							},
							"name": {
								"additionalProperties": false,
								"properties": {
									"first": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "First name."
									},
									"last": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "Last name."
									}
								},
								"required": [
									"first",
									"last"
								],
								"type": "object"
							},
							"standard_id": {
								"$ref": "#/components/schemas/standard_id"
							},
							"coupon_code": {
								"$ref": "#/components/schemas/coupon_code"
							}
						},
						"required": [
							"name",
							"email",
							"standard_id"
						]
					},
					"significant_beneficiaries": {
						"additionalProperties": false,
						"properties": {
							"affiliations": {
								"additionalProperties": false,
								"properties": {
									"affiliation_0": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_1": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_2": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_3": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_4": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_5": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_6": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_7": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_8": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									},
									"affiliation_9": {
										"$ref": "#/components/schemas/legal_entities_affiliation"
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Information about all of the significant beneficiaries' affiliations. 10 affiliations are allowed at most."
							},
							"entities": {
								"additionalProperties": false,
								"properties": {
									"art_and_culture": {
										"type": "boolean",
										"default": false
									},
									"education": {
										"type": "boolean",
										"default": false
									},
									"individual": {
										"type": "boolean",
										"default": false
									},
									"labor_union": {
										"type": "boolean",
										"default": false
									},
									"other": {
										"type": "string",
										"maxLength": 255,
										"minLength": 1,
										"nullable": true
									},
									"political_organization": {
										"type": "boolean",
										"default": false
									},
									"religious": {
										"type": "boolean",
										"default": false
									},
									"social_service_and_economic_development": {
										"type": "boolean",
										"default": false
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Describe significant beneficiaries' entity type."
							},
							"geographies": {
								"additionalProperties": false,
								"properties": {
									"international": {
										"type": "array",
										"minItems": 1,
										"uniqueItems": true,
										"items": {
											"$ref": "#/components/schemas/country_code"
										}
									},
									"local": {
										"type": "boolean",
										"default": true
									},
									"national": {
										"type": "boolean",
										"default": false
									},
									"regional": {
										"type": "boolean",
										"default": false
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Information about significant beneficiaries' geographic locations, including `regional` and `international` details."
							},
							"non_domestic_location_beneficiaries": {
								"type": "array",
								"uniqueItems": true,
								"items": {
									"$ref": "#/components/schemas/country_code"
								},
								"nullable": true,
								"description": "**Note:** Although this is nested in the `significant_beneficiaries` object, this information must be collected for all non-domestic beneficiaries, even if they receive or control less than 10% of the organization's funds."
							}
						},
						"type": "object",
						"description": "Identify significant beneficiaries. **Note:** A significant beneficiary either receives or is responsible for 10% or more of the organization's funds."
					},
					"significant_customer_countries": {
						"x-versions": [
							"v3.0.rc.4.2"
						],
						"items": {
							"type": "string"
						},
						"type": "array",
						"nullable": true,
						"description": "The list of countries in which this legal entity conducts business."
					},
					"significant_donors": {
						"additionalProperties": false,
						"properties": {
							"corporate_entity": {
								"type": "boolean",
								"default": false
							},
							"endowment_fund": {
								"type": "boolean",
								"default": false
							},
							"government": {
								"type": "boolean",
								"default": false
							},
							"individual": {
								"type": "boolean",
								"default": false
							},
							"institutional": {
								"type": "boolean",
								"default": false
							},
							"other": {
								"type": "string",
								"maxLength": 255,
								"minLength": 1,
								"nullable": true
							},
							"other_charitable_organization": {
								"type": "boolean",
								"default": false
							}
						},
						"type": "object",
						"nullable": true,
						"description": "Identify significant donors. **Note:** A significant donor contributes 10% or more of the organization's total volume."
					}
				},
				"required": [
					"additional_representatives",
					"address",
					"api_version",
					"controller",
					"country",
					"create_time",
					"description",
					"entity_country_info",
					"entity_name",
					"id",
					"owner",
					"path",
					"phone",
					"primary_url",
					"resource",
					"terms_of_service"
				],
				"type": "object",
				"x-label": "v3.0.rc.4-legal_entity-resp"
			},
			"v3.0.rc.4-shared_buyer_request": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"legal_entity",
							"legal_entity_id"
						],
						"x-enumDescriptions": {
							"legal_entity": "",
							"legal_entity_id": ""
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Your platform can only provide two entries. If you embed legal entity information inline set type to `legal_entity_id`."
					},
					"legal_entity": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_legal_entity_request"
					},
					"legal_entity_id": {
						"type": "string",
						"nullable": true,
						"description": "Merchant's Legal Entity ID associated with the order."
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"description": "Buyer of the order. **Required** if the order is not created in-line with a /payment_methods request.",
				"x-label": "v3.0.rc.4-shared_buyer_request"
			},
			"v3.0.rc.4-payments_order_request": {
				"additionalProperties": false,
				"properties": {
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						},
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`."
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of alternate tax for the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						},
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`."
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						},
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`."
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"type",
					"short_description"
				],
				"type": "object",
				"x-label": "v3.0.rc.4-payments_order_request"
			},
			"v3.0.rc.4-order-req": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"nullable": true,
						"description": "Merchant's account id associated with the order."
					},
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`.",
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						}
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Merchant's Legal Entity ID associated with the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`.",
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						}
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`.",
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						}
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"account_id",
					"type",
					"short_description"
				],
				"type": "object",
				"x-label": "v3.0.rc.4-order-req"
			},
			"v3.0.rc.4-order-id-req": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"$ref": "#/components/schemas/id"
					},
					"alternate_tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of alternate tax for the order."
					},
					"alternate_tax_id": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "Your platform's tax ID number to use for the alternate tax amount. **Required** if you set `alternate_tax_amount` to any value. However, you may fill out this field without setting `alternate_tax_amount`."
					},
					"buyer": {
						"$ref": "#/components/schemas/v3.0.rc.4-shared_buyer_request"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"customer_reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "The ID used to identify the order instance between a merchant and payer."
					},
					"delivery_type": {
						"enum": [
							"none",
							"fully_delivered",
							"point_of_sale",
							"donation",
							"subscription",
							"partial_prepayment",
							"full_prepayment"
						],
						"type": "string",
						"nullable": true,
						"description": "Describes how an order is delivered. Possible values: `donation`, `full_prepayment`, `fully_delivered`, `none`, `partial_prepayment`, `point_of_sale`, `subscription`.",
						"x-enumDescriptions": {
							"none": "Indicates that the order does not contain shippable goods.",
							"fully_delivered": "Indicates that all components of an order have been delivered and received by the payer.",
							"point_of_sale": "Indicates that the transaction took place in a Card Present environment, and the payer received goods or services in-person at the time of transaction.",
							"donation": "Indicates that the transaction was a donation, and no delivery of goods or services is expected.",
							"subscription": "",
							"partial_prepayment": "",
							"full_prepayment": ""
						}
					},
					"discount_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Discount (if any) on order."
					},
					"discount_program_name": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The name of the discount program applied to the transaction. This allows tracking if a merchant offers multiple discount programs at once or over time."
					},
					"duty_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total charges for any import or export duties included in the order."
					},
					"freight_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total freight must also include `grand_total_amount`."
					},
					"grand_total_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Grand total for the entire order or credit request."
					},
					"line_items": {
						"items": {
							"properties": {
								"currency": {
									"$ref": "#/components/schemas/currency"
								},
								"quantity": {
									"type": "integer",
									"description": "The number of items ordered."
								},
								"total_amount": {
									"type": "integer",
									"description": "The total amount due for the line item."
								},
								"unit_price": {
									"type": "integer",
									"description": "Price per unit."
								},
								"commodity_code": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "Code used to classify imported and exported items."
								},
								"description": {
									"maxLength": 2047,
									"type": "string",
									"nullable": true,
									"description": "Text description (especially for services and invoices). **Required** if Item is not provided."
								},
								"discount_amount": {
									"type": "integer",
									"description": "Discount (if any) on the order."
								},
								"discount_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"gross_net_indicator": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": ""
								},
								"item": {
									"$ref": "#/components/schemas/item-nullable-req"
								},
								"tax_amount": {
									"type": "integer",
									"description": "The total tax amount associated with the line item."
								},
								"tax_rate": {
									"type": "number",
									"description": "The tax rate applied to the line item total."
								},
								"tax_type_applied": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The type of tax applied for the line item. Possible values include: `personal`, `business`."
								},
								"unit_of_measure": {
									"maxLength": 255,
									"type": "string",
									"nullable": true,
									"description": "The unit of measure relative to the line item."
								}
							},
							"required": [
								"quantity",
								"total_amount",
								"unit_price",
								"currency"
							],
							"type": "object"
						},
						"type": "array",
						"uniqueItems": false,
						"description": "An array of line items. Not a top level resource."
					},
					"long_description": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "A long description of the order."
					},
					"notes": {
						"maxLength": 2047,
						"type": "string",
						"nullable": true,
						"description": "Notes field from the invoice or order."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"reference_number": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A reference number your platform assigns to the order to help you identify it."
					},
					"service_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_from_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"ship_to_address": {
						"$ref": "#/components/schemas/shared_holder_address_request"
					},
					"shipping_status": {
						"additionalProperties": false,
						"properties": {
							"actual_delivery_time": {
								"type": "integer",
								"nullable": true,
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when goods or services were actually delivered."
							},
							"carrier": {
								"maxLength": 255,
								"type": "string",
								"description": "The shipping carrier (USPS etc.)."
							},
							"expected_delivery_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items or services are expected to be delivered."
							},
							"shipping_time": {
								"type": "integer",
								"format": "int64",
								"minimum": 0,
								"description": "The timestamp (in UNIX) when items were shipped."
							},
							"tracking_number": {
								"maxLength": 1024,
								"type": "string",
								"description": "The tracking number for the shipping carrier."
							},
							"tracking_uri": {
								"$ref": "#/components/schemas/uri"
							}
						},
						"type": "object",
						"description": "Shipping status details associated with the order."
					},
					"short_description": {
						"maxLength": 255,
						"type": "string",
						"nullable": true,
						"description": "A short description of the order. **Required** if `line_items` are not provided."
					},
					"status": {
						"enum": [
							"unpaid",
							"paid",
							"disputed"
						],
						"type": "string",
						"nullable": true,
						"description": "Status of the order. Possible values: `disputed`, `paid`, `unpaid`, `deleted`.",
						"x-enumDescriptions": {
							"unpaid": "The order has not yet been paid.",
							"paid": "The order has been paid.",
							"disputed": "The order was paid, but the transaction has since received a chargeback."
						}
					},
					"tax_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total tax amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"terms": {
						"$ref": "#/components/schemas/shared_terms"
					},
					"tip_amount": {
						"type": "integer",
						"minimum": 0,
						"nullable": true,
						"description": "Total Tip amount applied to the transaction. Must be greater than `0` to qualify for Level 2 Interchange for Visa."
					},
					"type": {
						"enum": [
							"goods",
							"service",
							"donation",
							"event",
							"personal"
						],
						"type": "string",
						"description": "Type of order. Possible values: `donation`, `event`, `goods`, `personal`, `service`.",
						"x-enumDescriptions": {
							"goods": "This order contains goods.",
							"service": "This order outlines services being paid for.",
							"donation": "This order is a donation.",
							"event": "This order contains event tickets.",
							"personal": "This order contains personal goods."
						}
					},
					"vat_amount": {
						"type": "integer",
						"nullable": true,
						"description": "Total amount of VAT or other tax included in the order."
					},
					"vat_rate": {
						"type": "number",
						"nullable": true,
						"description": "Rate of VAT or other tax for the order. The valid range is 0.01 to 0.99 (1% to 99%)."
					}
				},
				"required": [
					"account_id"
				],
				"type": "object",
				"x-label": "v3.0.rc.4-order-id-req"
			},
			"v3.0.rc.5.1-accounts_CAD_blended": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-accounts_CAD_blended",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"v3.0.rc.5.1-accounts_blended": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-accounts_blended",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"v3.0.rc.5.1-pricing_by_currency-resp-CAD": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5.1-accounts_CAD_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing_by_currency-resp-CAD"
			},
			"v3.0.rc.5.1-pricing_by_currency-resp-GBP": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5.1-accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing_by_currency-resp-GBP"
			},
			"v3.0.rc.5.1-pricing_by_currency-resp-USD": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5.1-accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing_by_currency-resp-USD"
			},
			"v3.0.rc.5.1-accounts_id_CAD_blended_request": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction"
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction"
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)"
							}
						},
						"type": "object",
						"nullable": true
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-accounts_id_CAD_blended_request",
				"description": "The blended pricing model to collect platform fees."
			},
			"v3.0.rc.5.1-accounts_id_blended_request": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-accounts_id_blended_request",
				"description": "The blended pricing model to collect platform fees."
			},
			"v3.0.rc.5.1-pricing_by_currency-create-CAD": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5.1-accounts_CAD_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing_by_currency-create-CAD"
			},
			"v3.0.rc.5.1-pricing_by_currency-create-GBP": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5.1-accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing_by_currency-create-GBP"
			},
			"v3.0.rc.5.1-pricing_by_currency-create-USD": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5.1-accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing_by_currency-create-USD"
			},
			"v3.0.rc.5.1-pricing-resp": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.0.rc.5.1-pricing_by_currency-resp-CAD"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.0.rc.5.1-pricing_by_currency-resp-GBP"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.0.rc.5.1-pricing_by_currency-resp-USD"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing-resp",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.0.rc.5.1-pricing_by_currency-update-CAD": {
				"additionalProperties": false,
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5.1-accounts_id_CAD_blended_request"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction"
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction"
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)"
							}
						},
						"type": "object",
						"nullable": true
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing_by_currency-update-CAD"
			},
			"v3.0.rc.5.1-pricing_by_currency-update-GBP": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5.1-accounts_id_blended_request"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing_by_currency-update-GBP"
			},
			"v3.0.rc.5.1-pricing_by_currency-update-USD": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5.1-accounts_id_blended_request"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing_by_currency-update-USD"
			},
			"v3.0.rc.5.1-account-resp": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"balances": {
						"additionalProperties": false,
						"properties": {
							"currencies": {
								"additionalProperties": true,
								"properties": {
									"CAD": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									},
									"GBP": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									},
									"USD": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									}
								},
								"type": "object",
								"description": "Payout currency details."
							}
						},
						"type": "object",
						"description": "Displays balances pertaining to the merchant account."
					},
					"beneficiary": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 65535,
						"type": "string",
						"nullable": true,
						"description": "Short description of the merchant account."
					},
					"documents": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"create_time": {
									"$ref": "#/components/schemas/create_time"
								},
								"id": {
									"$ref": "#/components/schemas/id"
								},
								"owner": {
									"$ref": "#/components/schemas/shared_owner_response"
								},
								"path": {
									"type": "string",
									"nullable": true
								},
								"reject_reason": {
									"type": "string",
									"nullable": true
								},
								"resource": {
									"enum": [
										"documents"
									],
									"x-enumDescriptions": {
										"documents": ""
									},
									"type": "string"
								},
								"status": {
									"type": "string",
									"nullable": true
								},
								"type": {
									"enum": [
										"fee_disclosure",
										"invoice",
										"tracking",
										"drivers_license",
										"passport",
										"evidence_of_corporate_registration",
										"evidence_of_authority",
										"current_bank_statement",
										"evidence_of_nonprofit_registration",
										"social_security_card",
										"current_utility_bill",
										"other_government_issued_photo_id",
										"current_lease_contract",
										"birth_certificate",
										"not_applicable",
										"certificate_of_citizenship",
										"permanent_resident_card",
										"employment_authorization_card",
										"benefits_card",
										"social_insurance_number_card",
										"miscellaneous_compliance_doc",
										"business_report",
										"negative_media_searches",
										"person_report",
										"mortgage_statement",
										"certified_copy_of_court_order",
										"current_local_tax_bill",
										"certificate_of_naturalization"
									],
									"x-enumDescriptions": {
										"fee_disclosure": "Indicates that the document uploaded and associated with this account is the fee disclosure presented to the merchant.",
										"invoice": "Indicates that the document uploaded and associated with this account is an invoice presented to the merchant.",
										"tracking": "Indicates that the document uploaded and associated with this account is for general tracking purposes",
										"drivers_license": "Indicates that the document uploaded and associated with this account is the driver's license presented by the merchant.",
										"passport": "Indicates that the document uploaded and associated with this account is the passport presented by the merchant.",
										"evidence_of_corporate_registration": "Indicates that the document uploaded and associated with this account is the evidence of corporate registration presented by the merchant.",
										"evidence_of_authority": "Indicates that the document uploaded and associated with this account is the evidence of authority presented by the merchant.",
										"current_bank_statement": "Indicates that the document uploaded and associated with this account is the current bank statement presented by the merchant.",
										"evidence_of_nonprofit_registration": "Indicates that the document uploaded and associated with this account is the evidence of non profit registration presented by the merchant.",
										"social_security_card": "Indicates that the document uploaded and associated with this account is the social security card presented by the merchant.",
										"current_utility_bill": "Indicates that the document uploaded and associated with this account is the current utility bill presented by the merchant.",
										"other_government_issued_photo_id": "Indicates that the document uploaded and associated with this account is other government issued photo id presented by the merchant.",
										"current_lease_contract": "Indicates that the document uploaded and associated with this account is the current lease contract presented by the merchant.",
										"birth_certificate": "Indicates that the document uploaded and associated with this account is the birth certificate presented by the merchant.",
										"not_applicable": "Indicates that the document uploaded and associated with this account is not applicable.",
										"certificate_of_citizenship": "Indicates that the document uploaded and associated with this account is the certificate of citizenship presented by the merchant.",
										"permanent_resident_card": "Indicates that the document uploaded and associated with this account is the permanent resident card presented by the merchant.",
										"employment_authorization_card": "Indicates that the document uploaded and associated with this account is the employment authorization card presented by the merchant.",
										"benefits_card": "Indicates that the document uploaded and associated with this account is the benefits card presented by the merchant.",
										"social_insurance_number_card": "Indicates that the document uploaded and associated with this account is the social insurance number card presented by the merchant.",
										"miscellaneous_compliance_doc": "Indicates that the document uploaded and associated with this account is the miscellaneous compliance document presented by the merchant.",
										"business_report": "Indicates that the document uploaded and associated with this account is the business report presented by the merchant.",
										"negative_media_searches": "Indicates that the document uploaded and associated with this account is the negative media searches presented by the merchant.",
										"person_report": "Indicates that the document uploaded and associated with this account is the person report presented by the merchant.",
										"mortgage_statement": "Indicates that the document uploaded and associated with this account is the mortgage statement presented by the merchant.",
										"certified_copy_of_court_order": "Indicates that the document uploaded and associated with this account is the certified copy of the court order presented by the merchant.",
										"current_local_tax_bill": "Indicates that the document uploaded and associated with this account is the current local tax bill presented by the merchant.",
										"certificate_of_naturalization": "Indicates that the document uploaded and associated with this account is the certificate of naturalization presented by the merchant."
									},
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"resource",
								"id",
								"path",
								"owner",
								"create_time",
								"type",
								"status",
								"reject_reason"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An array of documents attached to this merchant to verify fee disclosure."
					},
					"id": {
						"$ref": "#/components/schemas/accounts_id"
					},
					"incoming_payments": {
						"$ref": "#/components/schemas/accounts_incoming_payments_response"
					},
					"industry": {
						"additionalProperties": false,
						"properties": {
							"category_detail": {
								"maxLength": 1024,
								"type": "string",
								"nullable": true,
								"description": "Details about the merchant's industry category."
							},
							"merchant_category_code": {
								"pattern": "^\\d{4}$",
								"type": "string",
								"description": "Category code associated with the merchant's industry.",
								"nullable": true
							}
						},
						"type": "object",
						"description": "Categorizes the type of service or item a merchant is providing."
					},
					"name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*\\w+.*$",
						"type": "string",
						"nullable": true,
						"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payout": {
						"$ref": "#/components/schemas/accounts_payout_response"
					},
					"platform_onboarding_time": {
						"type": "integer",
						"minimum": 0,
						"format": "int64",
						"nullable": true,
						"description": "The Unix epoch time (in seconds) when the account finished onboarding to the platform."
					},
					"pricing": {
						"$ref": "#/components/schemas/v3.0.rc.5.1-pricing-resp"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					},
					"statement_description": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"pattern": "^((?![Ww][Ee][Pp][Aa][Yy])[ -~ùûüÿàâæçéèêëïîôœÙÛÜŸÀÂÆÇÉÈÊËÏÎÔŒ«»‘“”—–€])*$",
						"description": "A non-empty, ASCII-printable string that does **not** contain the word WePay. This will appear on payers' credit card statements. **Note:** The API allows up to 255 characters, but card issuers will only print 12-14 characters on statements. Find more information [here](/clear/onboard-merchants/)."
					},
					"enhanced_review": {
						"type": "string",
						"nullable": true,
						"description": "Indicates if the account is under enhanced review by WePay."
					},
					"projected_monthly_transaction_volume": {
						"type": "integer",
						"nullable": true,
						"description": "The projected monthly transaction volume, TPV, of an account."
					},
					"referral_details": {
						"type": "object",
						"description": "Information regarding the referring representative",
						"properties": {
							"email": {
								"$ref": "#/components/schemas/email"
							},
							"name": {
								"additionalProperties": false,
								"properties": {
									"first": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "First name."
									},
									"last": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "Last name."
									}
								},
								"required": [
									"first",
									"last"
								],
								"type": "object"
							},
							"standard_id": {
								"$ref": "#/components/schemas/standard_id"
							},
							"coupon_code": {
								"$ref": "#/components/schemas/coupon_code"
							}
						},
						"required": [
							"name",
							"email",
							"standard_id"
						]
					},
					"referral_partner": {
						"maxLength": 75,
						"minLength": 1,
						"type": "string",
						"description": "The non ISV partner/solution that refers merchants for payment processing services"
					}
				},
				"required": [
					"api_version",
					"balances",
					"beneficiary",
					"create_time",
					"custom_data",
					"description",
					"documents",
					"id",
					"incoming_payments",
					"industry",
					"name",
					"owner",
					"path",
					"payout",
					"platform_onboarding_time",
					"pricing",
					"reference_id",
					"resource",
					"statement_description"
				],
				"type": "object",
				"x-label": "v3.0.rc.5.1-account-resp"
			},
			"v3.0.rc.5.1-pricing-create": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.0.rc.5.1-pricing_by_currency-create-CAD"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.0.rc.5.1-pricing_by_currency-create-GBP"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.0.rc.5.1-pricing_by_currency-create-USD"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing-create",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.0.rc.5.1-pricing-update": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.0.rc.5.1-pricing_by_currency-update-CAD"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.0.rc.5.1-pricing_by_currency-update-GBP"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.0.rc.5.1-pricing_by_currency-update-USD"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5.1-pricing-update",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.0.rc.5-accounts_CAD_blended": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-accounts_CAD_blended",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"v3.0.rc.5-accounts_blended": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-accounts_blended",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"v3.0.rc.5-pricing_by_currency-resp-CAD": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5-accounts_CAD_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing_by_currency-resp-CAD"
			},
			"v3.0.rc.5-pricing_by_currency-resp-GBP": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5-accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing_by_currency-resp-GBP"
			},
			"v3.0.rc.5-pricing_by_currency-resp-USD": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5-accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing_by_currency-resp-USD"
			},
			"v3.0.rc.5-accounts_id_CAD_blended_request": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction"
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction"
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)"
							}
						},
						"type": "object",
						"nullable": true
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-accounts_id_CAD_blended_request",
				"description": "The blended pricing model to collect platform fees."
			},
			"v3.0.rc.5-accounts_id_blended_request": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-accounts_id_blended_request",
				"description": "The blended pricing model to collect platform fees."
			},
			"v3.0.rc.5-pricing_by_currency-create-CAD": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5-accounts_CAD_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing_by_currency-create-CAD"
			},
			"v3.0.rc.5-pricing_by_currency-create-GBP": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5-accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing_by_currency-create-GBP"
			},
			"v3.0.rc.5-pricing_by_currency-create-USD": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5-accounts_blended"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"required": [
							"hardware"
						],
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing_by_currency-create-USD"
			},
			"v3.0.rc.5-pricing-resp": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.0.rc.5-pricing_by_currency-resp-CAD"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.0.rc.5-pricing_by_currency-resp-GBP"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.0.rc.5-pricing_by_currency-resp-USD"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing-resp",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.0.rc.5-pricing_by_currency-update-CAD": {
				"additionalProperties": false,
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5-accounts_id_CAD_blended_request"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction"
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction"
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)"
							}
						},
						"type": "object",
						"nullable": true
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing_by_currency-update-CAD"
			},
			"v3.0.rc.5-pricing_by_currency-update-GBP": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5-accounts_id_blended_request"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing_by_currency-update-GBP"
			},
			"v3.0.rc.5-pricing_by_currency-update-USD": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.0.rc.5-accounts_id_blended_request"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.0.rc.5.1"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.0.rc.5.1"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"equipment_fees": {
						"x-versions": [
							"v3.0.rc.5.1"
						],
						"additionalProperties": false,
						"properties": {
							"hardware": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"model": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "This model is used to specify the model number of the equipment being shipped to the merchant."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the hardware fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "This is the amount that will be charged for each equipment unit.  This integer value describes the fee in cents, so a value of `2` describes $0.02."
										}
									},
									"required": [
										"model",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the POS equipment and its pricing being shipped to the merchant."
							},
							"services": {
								"x-versions": [
									"v3.0.rc.5.1"
								],
								"items": {
									"additionalProperties": false,
									"properties": {
										"name": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"maxLength": 255,
											"minLength": 1,
											"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
										},
										"period": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "string",
											"enum": [
												"monthly"
											],
											"description": "This is the period over which the unit amount will be charged. This can be “daily”, “weekly”, “monthly”, “quarterly”, or “annual“. This field is required if the unit_amount is greater than zero.",
											"x-enumDescriptions": {
												"monthly": "Indicates that the service fee is charged monthly."
											}
										},
										"unit_amount": {
											"x-versions": [
												"v3.0.rc.5.1"
											],
											"type": "integer",
											"minimum": 0,
											"maximum": 999999999,
											"description": "Specify the name of the service being provided to the merchant"
										}
									},
									"required": [
										"name",
										"unit_amount",
										"period"
									],
									"type": "object"
								},
								"type": "array",
								"description": "This model is used to specify the services and its pricing being rendered to the merchant."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This model is used to specify pricing of equipment and services provided to the merchant."
					},
					"other_fees": {
						"$ref": "#/components/schemas/accounts_other_fees"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing_by_currency-update-USD"
			},
			"v3.0.rc.5-account-resp": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"balances": {
						"additionalProperties": false,
						"properties": {
							"currencies": {
								"additionalProperties": true,
								"properties": {
									"CAD": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									},
									"GBP": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									},
									"USD": {
										"$ref": "#/components/schemas/accounts_balances_currency_response"
									}
								},
								"type": "object",
								"description": "Payout currency details."
							}
						},
						"type": "object",
						"description": "Displays balances pertaining to the merchant account."
					},
					"beneficiary": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 65535,
						"type": "string",
						"nullable": true,
						"description": "Short description of the merchant account."
					},
					"documents": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"create_time": {
									"$ref": "#/components/schemas/create_time"
								},
								"id": {
									"$ref": "#/components/schemas/id"
								},
								"owner": {
									"$ref": "#/components/schemas/shared_owner_response"
								},
								"path": {
									"type": "string",
									"nullable": true
								},
								"reject_reason": {
									"type": "string",
									"nullable": true
								},
								"resource": {
									"enum": [
										"documents"
									],
									"x-enumDescriptions": {
										"documents": ""
									},
									"type": "string"
								},
								"status": {
									"type": "string",
									"nullable": true
								},
								"type": {
									"enum": [
										"fee_disclosure",
										"invoice",
										"tracking",
										"drivers_license",
										"passport",
										"evidence_of_corporate_registration",
										"evidence_of_authority",
										"current_bank_statement",
										"evidence_of_nonprofit_registration",
										"social_security_card",
										"current_utility_bill",
										"other_government_issued_photo_id",
										"current_lease_contract",
										"birth_certificate",
										"not_applicable",
										"certificate_of_citizenship",
										"permanent_resident_card",
										"employment_authorization_card",
										"benefits_card",
										"social_insurance_number_card",
										"miscellaneous_compliance_doc",
										"business_report",
										"negative_media_searches",
										"person_report",
										"mortgage_statement",
										"certified_copy_of_court_order",
										"current_local_tax_bill",
										"certificate_of_naturalization"
									],
									"x-enumDescriptions": {
										"fee_disclosure": "Indicates that the document uploaded and associated with this account is the fee disclosure presented to the merchant.",
										"invoice": "Indicates that the document uploaded and associated with this account is an invoice presented to the merchant.",
										"tracking": "Indicates that the document uploaded and associated with this account is for general tracking purposes",
										"drivers_license": "Indicates that the document uploaded and associated with this account is the driver's license presented by the merchant.",
										"passport": "Indicates that the document uploaded and associated with this account is the passport presented by the merchant.",
										"evidence_of_corporate_registration": "Indicates that the document uploaded and associated with this account is the evidence of corporate registration presented by the merchant.",
										"evidence_of_authority": "Indicates that the document uploaded and associated with this account is the evidence of authority presented by the merchant.",
										"current_bank_statement": "Indicates that the document uploaded and associated with this account is the current bank statement presented by the merchant.",
										"evidence_of_nonprofit_registration": "Indicates that the document uploaded and associated with this account is the evidence of non profit registration presented by the merchant.",
										"social_security_card": "Indicates that the document uploaded and associated with this account is the social security card presented by the merchant.",
										"current_utility_bill": "Indicates that the document uploaded and associated with this account is the current utility bill presented by the merchant.",
										"other_government_issued_photo_id": "Indicates that the document uploaded and associated with this account is other government issued photo id presented by the merchant.",
										"current_lease_contract": "Indicates that the document uploaded and associated with this account is the current lease contract presented by the merchant.",
										"birth_certificate": "Indicates that the document uploaded and associated with this account is the birth certificate presented by the merchant.",
										"not_applicable": "Indicates that the document uploaded and associated with this account is not applicable.",
										"certificate_of_citizenship": "Indicates that the document uploaded and associated with this account is the certificate of citizenship presented by the merchant.",
										"permanent_resident_card": "Indicates that the document uploaded and associated with this account is the permanent resident card presented by the merchant.",
										"employment_authorization_card": "Indicates that the document uploaded and associated with this account is the employment authorization card presented by the merchant.",
										"benefits_card": "Indicates that the document uploaded and associated with this account is the benefits card presented by the merchant.",
										"social_insurance_number_card": "Indicates that the document uploaded and associated with this account is the social insurance number card presented by the merchant.",
										"miscellaneous_compliance_doc": "Indicates that the document uploaded and associated with this account is the miscellaneous compliance document presented by the merchant.",
										"business_report": "Indicates that the document uploaded and associated with this account is the business report presented by the merchant.",
										"negative_media_searches": "Indicates that the document uploaded and associated with this account is the negative media searches presented by the merchant.",
										"person_report": "Indicates that the document uploaded and associated with this account is the person report presented by the merchant.",
										"mortgage_statement": "Indicates that the document uploaded and associated with this account is the mortgage statement presented by the merchant.",
										"certified_copy_of_court_order": "Indicates that the document uploaded and associated with this account is the certified copy of the court order presented by the merchant.",
										"current_local_tax_bill": "Indicates that the document uploaded and associated with this account is the current local tax bill presented by the merchant.",
										"certificate_of_naturalization": "Indicates that the document uploaded and associated with this account is the certificate of naturalization presented by the merchant."
									},
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"resource",
								"id",
								"path",
								"owner",
								"create_time",
								"type",
								"status",
								"reject_reason"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An array of documents attached to this merchant to verify fee disclosure."
					},
					"id": {
						"$ref": "#/components/schemas/accounts_id"
					},
					"incoming_payments": {
						"$ref": "#/components/schemas/accounts_incoming_payments_response"
					},
					"industry": {
						"additionalProperties": false,
						"properties": {
							"category_detail": {
								"maxLength": 1024,
								"type": "string",
								"nullable": true,
								"description": "Details about the merchant's industry category."
							},
							"merchant_category_code": {
								"pattern": "^\\d{4}$",
								"type": "string",
								"description": "Category code associated with the merchant's industry.",
								"nullable": true
							}
						},
						"type": "object",
						"description": "Categorizes the type of service or item a merchant is providing."
					},
					"name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*\\w+.*$",
						"type": "string",
						"nullable": true,
						"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payout": {
						"$ref": "#/components/schemas/accounts_payout_response"
					},
					"platform_onboarding_time": {
						"type": "integer",
						"minimum": 0,
						"format": "int64",
						"nullable": true,
						"description": "The Unix epoch time (in seconds) when the account finished onboarding to the platform."
					},
					"pricing": {
						"$ref": "#/components/schemas/v3.0.rc.5-pricing-resp"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					},
					"statement_description": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"pattern": "^((?![Ww][Ee][Pp][Aa][Yy])[ -~ùûüÿàâæçéèêëïîôœÙÛÜŸÀÂÆÇÉÈÊËÏÎÔŒ«»‘“”—–€])*$",
						"description": "A non-empty, ASCII-printable string that does **not** contain the word WePay. This will appear on payers' credit card statements. **Note:** The API allows up to 255 characters, but card issuers will only print 12-14 characters on statements. Find more information [here](/clear/onboard-merchants/)."
					},
					"enhanced_review": {
						"type": "string",
						"nullable": true,
						"description": "Indicates if the account is under enhanced review by WePay."
					},
					"projected_monthly_transaction_volume": {
						"type": "integer",
						"nullable": true,
						"description": "The projected monthly transaction volume, TPV, of an account."
					},
					"referral_details": {
						"type": "object",
						"description": "Information regarding the referring representative",
						"properties": {
							"email": {
								"$ref": "#/components/schemas/email"
							},
							"name": {
								"additionalProperties": false,
								"properties": {
									"first": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "First name."
									},
									"last": {
										"maxLength": 30,
										"minLength": 2,
										"type": "string",
										"description": "Last name."
									}
								},
								"required": [
									"first",
									"last"
								],
								"type": "object"
							},
							"standard_id": {
								"$ref": "#/components/schemas/standard_id"
							},
							"coupon_code": {
								"$ref": "#/components/schemas/coupon_code"
							}
						},
						"required": [
							"name",
							"email",
							"standard_id"
						]
					},
					"referral_partner": {
						"maxLength": 75,
						"minLength": 1,
						"type": "string",
						"description": "The non ISV partner/solution that refers merchants for payment processing services"
					}
				},
				"required": [
					"api_version",
					"balances",
					"beneficiary",
					"create_time",
					"custom_data",
					"description",
					"documents",
					"id",
					"incoming_payments",
					"industry",
					"name",
					"owner",
					"path",
					"payout",
					"platform_onboarding_time",
					"pricing",
					"reference_id",
					"resource",
					"statement_description"
				],
				"type": "object",
				"x-label": "v3.0.rc.5-account-resp"
			},
			"v3.0.rc.5-pricing-create": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.0.rc.5-pricing_by_currency-create-CAD"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.0.rc.5-pricing_by_currency-create-GBP"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.0.rc.5-pricing_by_currency-create-USD"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing-create",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.0.rc.5-pricing-update": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.0.rc.5-pricing_by_currency-update-CAD"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.0.rc.5-pricing_by_currency-update-GBP"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.0.rc.5-pricing_by_currency-update-USD"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.0.rc.5-pricing-update",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"amex_seller_id-v3_1": {
				"type": "string",
				"minLength": 1,
				"maxLength": 255,
				"description": "Seller id assigned by by American Express.",
				"x-label": "amex_seller_id-v3_1"
			},
			"amex_seller_number-v3_1": {
				"type": "integer",
				"format": "int64",
				"minimum": 0,
				"description": "Service Establishment Number (a.k.a. SE Number) is a unique ten-digit number assigned by American Express to a merchant that accepts American Express cards.",
				"x-label": "amex_seller_number-v3_1"
			},
			"opt_into_marketing-v3_1": {
				"type": "boolean",
				"description": "A form of permission marketing in which there is a formal opt-in process for receiving follow-up communication, offers, etc.",
				"x-label": "opt_into_marketing-v3_1"
			},
			"accounts_tier-v3_1": {
				"additionalProperties": false,
				"properties": {
					"fixed_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"maximum": 5000,
						"description": "The fixed fee amount.",
						"example": 50
					},
					"max_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The maximum value of total fee amount.",
						"example": 1000
					},
					"min_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The minimum value of total fee amount.",
						"example": 100
					},
					"upper_threshold_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The value of upper threshold.",
						"example": 999999999
					},
					"variable_fee_bps": {
						"type": "integer",
						"minimum": 0,
						"maximum": 500,
						"description": "The basis points to calculate variable fee amount.",
						"example": 500
					}
				},
				"type": "object",
				"x-label": "accounts_tier-v3_1",
				"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
				"required": [
					"upper_threshold_amount",
					"max_fee_amount",
					"min_fee_amount",
					"fixed_fee_amount",
					"variable_fee_bps"
				],
				"nullable": true
			},
			"amex_opt_blue-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"amex_seller_id": {
						"$ref": "#/components/schemas/amex_seller_id-v3_1"
					},
					"amex_seller_number": {
						"$ref": "#/components/schemas/amex_seller_number-v3_1"
					},
					"opt_into_marketing": {
						"$ref": "#/components/schemas/opt_into_marketing-v3_1"
					}
				},
				"type": "object",
				"nullable": true,
				"description": "OptBlue is a payment processing option that allows smaller businesses to accept American Express credit cards.",
				"x-label": "amex_opt_blue-resp-v3_1"
			},
			"incoming_payments_amex_US-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"opt_blue": {
						"$ref": "#/components/schemas/amex_opt_blue-resp-v3_1"
					}
				},
				"required": [
					"opt_blue"
				],
				"type": "object",
				"x-label": "incoming_payments_amex_US-resp-v3_1"
			},
			"country_opted_out_methods-v3_1": {
				"additionalProperties": false,
				"properties": {
					"debit_cards": {
						"type": "boolean"
					}
				},
				"type": "object",
				"x-label": "country_opted_out_methods-v3_1"
			},
			"accounts_CAD_blended-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					}
				},
				"type": "object",
				"x-label": "accounts_CAD_blended-v3_1",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"other_fees-v3_1": {
				"additionalProperties": false,
				"properties": {
					"debit_failure_fee": {
						"type": "integer",
						"nullable": true,
						"minimum": 0,
						"description": "Charge merchants a fee when IC+ fees cannot be debited from their balance or linked payout method."
					}
				},
				"type": "object",
				"x-label": "other_fees-v3_1",
				"description": "Describe any one-off fees charged to the merchant by your platform."
			},
			"accounts_blended-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					}
				},
				"type": "object",
				"x-label": "accounts_blended-v3_1",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"accounts_id_tier_request-v3_1": {
				"additionalProperties": false,
				"properties": {
					"fixed_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"maximum": 5000,
						"description": "The fixed fee amount.",
						"example": 50
					},
					"max_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The maximum value of total fee amount.",
						"example": 1000
					},
					"min_fee_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The minimum value of total fee amount.",
						"example": 100
					},
					"upper_threshold_amount": {
						"type": "integer",
						"minimum": 0,
						"description": "The value of upper threshold.",
						"example": 999999999
					},
					"variable_fee_bps": {
						"type": "integer",
						"minimum": 0,
						"maximum": 500,
						"description": "The basis points to calculate variable fee amount.",
						"example": 500
					}
				},
				"type": "object",
				"x-label": "accounts_id_tier_request-v3_1",
				"description": "The tier pricing model to collect platform fees when the payment method is a payment bank."
			},
			"amex_opt_blue-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"opt_into_marketing": {
						"$ref": "#/components/schemas/opt_into_marketing-v3_1"
					}
				},
				"x-label": "amex_opt_blue-req-v3_1",
				"type": "object",
				"nullable": true,
				"x-permission": {
					"type": "can_be_used",
					"phase": "post_token_expansion",
					"partner_config_key_path": "merchant_settings.allow_merchant_switch_to_opt_blue",
					"feature_name": "amex opt_blue"
				},
				"required": [
					"opt_into_marketing"
				],
				"description": "OptBlue is a payment processing option that allows smaller businesses to accept American Express credit cards."
			},
			"countries_opted_out_methods-v3_1": {
				"additionalProperties": false,
				"properties": {
					"CA": {
						"$ref": "#/components/schemas/country_opted_out_methods-v3_1"
					}
				},
				"type": "object",
				"x-label": "countries_opted_out_methods-v3_1"
			},
			"pricing_by_currency-resp-CAD-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_CAD_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-resp-CAD-v3_1"
			},
			"pricing_by_currency-resp-GBP-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-resp-GBP-v3_1"
			},
			"pricing_by_currency-resp-USD-v3_1": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-resp-USD-v3_1"
			},
			"incoming_payments_amex_US-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"opt_blue": {
						"$ref": "#/components/schemas/amex_opt_blue-req-v3_1"
					}
				},
				"type": "object",
				"x-label": "incoming_payments_amex_US-req-v3_1"
			},
			"incoming_payments_amex-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"countries": {
						"type": "object",
						"properties": {
							"US": {
								"$ref": "#/components/schemas/incoming_payments_amex_US-resp-v3_1"
							}
						}
					}
				},
				"required": [
					"countries"
				],
				"type": "object",
				"x-label": "incoming_payments_amex-resp-v3_1",
				"description": "American Express payment processing options."
			},
			"opted_out_methods-v3_1": {
				"additionalProperties": false,
				"properties": {
					"countries": {
						"$ref": "#/components/schemas/countries_opted_out_methods-v3_1"
					}
				},
				"type": "object",
				"x-label": "opted_out_methods-v3_1"
			},
			"accounts_id_CAD_blended_request-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request-v3_1"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "accounts_id_CAD_blended_request-v3_1",
				"description": "The blended pricing model to collect platform fees."
			},
			"accounts_id_blended_request-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request-v3_1"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "accounts_id_blended_request-v3_1",
				"description": "The blended pricing model to collect platform fees."
			},
			"pricing_by_currency-create-CAD-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_CAD_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-create-CAD-v3_1"
			},
			"pricing_by_currency-create-GBP-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-create-GBP-v3_1"
			},
			"pricing_by_currency-create-USD-v3_1": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-create-USD-v3_1"
			},
			"incoming_payments-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"accepted_methods": {
						"items": {
							"maxLength": 255,
							"type": "string"
						},
						"type": "array",
						"uniqueItems": true,
						"description": "An array of accepted payment methods. Possible values include: `american_express`, `discover`, `diners_club`, `jcb`, `mastercard`, `payment_bank`, `visa`."
					},
					"amex": {
						"$ref": "#/components/schemas/incoming_payments_amex-resp-v3_1"
					},
					"opted_out_methods": {
						"$ref": "#/components/schemas/opted_out_methods-v3_1"
					}
				},
				"required": [
					"accepted_methods"
				],
				"type": "object",
				"x-label": "incoming_payments-resp-v3_1",
				"description": "Identify the payment methods this merchant will accept, and describe this merchant's relationship with card association."
			},
			"payout-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"additionalProperties": false,
								"properties": {
									"payout_method_id": {
										"maxLength": 255,
										"type": "string",
										"description": "ID of the payout method associated with the USD payout."
									},
									"period": {
										"enum": [
											"daily",
											"weekly",
											"monthly"
										],
										"x-enumDescriptions": {
											"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
											"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
											"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
										},
										"type": "string",
										"description": "Describes the how often a USD payout will occur."
									},
									"next_payout_time": {
										"type": "integer",
										"nullable": true,
										"description": "Describes when the next USD payout will occur."
									},
									"payout_purpose": {
										"additionalProperties": false,
										"properties": {
											"adjustment_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"fees_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"refunds_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"sales_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											}
										},
										"type": "object"
									}
								},
								"required": [
									"payout_method_id",
									"period"
								],
								"type": "object",
								"nullable": true,
								"description": "Payout currency details."
							},
							"GBP": {
								"additionalProperties": false,
								"properties": {
									"payout_method_id": {
										"maxLength": 255,
										"type": "string",
										"description": "ID of the payout method associated with the USD payout."
									},
									"period": {
										"enum": [
											"daily",
											"weekly",
											"monthly"
										],
										"x-enumDescriptions": {
											"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
											"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
											"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
										},
										"type": "string",
										"description": "Describes the how often a USD payout will occur."
									},
									"next_payout_time": {
										"type": "integer",
										"nullable": true,
										"description": "Describes when the next USD payout will occur."
									},
									"payout_purpose": {
										"additionalProperties": false,
										"properties": {
											"adjustment_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"fees_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"refunds_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"sales_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											}
										},
										"type": "object"
									}
								},
								"required": [
									"payout_method_id",
									"period"
								],
								"type": "object",
								"nullable": true,
								"description": "Payout currency details."
							},
							"USD": {
								"additionalProperties": false,
								"properties": {
									"payout_method_id": {
										"maxLength": 255,
										"type": "string",
										"description": "ID of the payout method associated with the USD payout."
									},
									"period": {
										"enum": [
											"daily",
											"weekly",
											"monthly"
										],
										"x-enumDescriptions": {
											"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
											"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
											"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
										},
										"type": "string",
										"description": "Describes the how often a USD payout will occur."
									},
									"next_payout_time": {
										"type": "integer",
										"nullable": true,
										"description": "Describes when the next USD payout will occur."
									},
									"payout_purpose": {
										"additionalProperties": false,
										"properties": {
											"adjustment_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"fees_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"refunds_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"sales_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											}
										},
										"type": "object"
									}
								},
								"required": [
									"payout_method_id",
									"period"
								],
								"type": "object",
								"nullable": true,
								"description": "Payout currency details."
							}
						},
						"type": "object"
					},
					"default_currency": {
						"enum": [
							"USD",
							"CAD",
							"GBP"
						],
						"x-enumDescriptions": {
							"USD": "Indicate that this account's default payout should be in US dollars.",
							"CAD": "Indicate that this account's default payout should be in Canadian dollars.",
							"GBP": "Indicate that this account's default payout should be in Great British pounds. **Note:** Not currently supported."
						},
						"type": "string"
					}
				},
				"type": "object",
				"x-label": "payout-resp-v3_1",
				"description": "Details the merchant’s payout method."
			},
			"pricing-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/pricing_by_currency-resp-CAD-v3_1"
							},
							"GBP": {
								"$ref": "#/components/schemas/pricing_by_currency-resp-GBP-v3_1"
							},
							"USD": {
								"$ref": "#/components/schemas/pricing_by_currency-resp-USD-v3_1"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "pricing-resp-v3_1",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"pricing_by_currency-update-CAD-v3_1": {
				"additionalProperties": false,
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_id_CAD_blended_request-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-update-CAD-v3_1"
			},
			"pricing_by_currency-update-GBP-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_id_blended_request-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-update-GBP-v3_1"
			},
			"pricing_by_currency-update-USD-v3_1": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/accounts_id_blended_request-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "pricing_by_currency-update-USD-v3_1"
			},
			"payment_method_non_expanded": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payment_methods"
					}
				},
				"required": [
					"id",
					"resource",
					"path"
				],
				"type": "object",
				"x-label": "payment_method_non_expanded",
				"description": "The payment method used to create this payment or refund. Payment methods represent payment data like credit cards and bank accounts"
			},
			"transaction_record_non_expanded": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The app ID assigned to your platform in the Partner Center."
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-transaction_records"
					}
				},
				"required": [
					"id",
					"path",
					"resource"
				],
				"type": "object",
				"nullable": true,
				"x-label": "transaction_record_non_expanded",
				"description": "THIS SHOULD NOT SHOW UP"
			},
			"rbit-types-v3_1": {
				"enum": [
					"address",
					"auto_billing",
					"business_description",
					"business_name",
					"external_account",
					"fundraising_event",
					"fundraising_update",
					"industry_code",
					"landlord",
					"partner_service",
					"person",
					"phone",
					"transaction_details",
					"mfa",
					"project",
					"property",
					"rental",
					"revenue",
					"website"
				],
				"x-enumDescriptions": {
					"address": "Send this enum value when the rBit is describing an address related to the merchant or transaction.",
					"auto_billing": "Send this enum value when the rBit is describing auto billing related to a transaction.",
					"business_description": "Send this enum value when the rBit is the business description related to the merchant.",
					"business_name": "Send this enum value when the rBit is the business name related to the merchant.",
					"external_account": "Send this enum value when the rBit is describing an external account associated with the merchant or payer.",
					"fundraising_event": "Send this enum value when the rBit is providing information about a fundraising event.",
					"fundraising_update": "Send this enum value when the rBit is providing an update about a fundraising campaign or event.",
					"industry_code": "Send this enum value when the rBit is providing an industry code for the merchant.",
					"landlord": "Information about the landlord on rental marketplace platform who has rental property listings.",
					"partner_service": "Send this enum value when the rBit is describing a transaction related to services provided by the partner to end users.",
					"person": "Send this enum value when the rBit is describing a person related to the merchant or transaction.",
					"phone": "Send this enum value when the rBit is describing a phone number related to the merchant or transaction.",
					"transaction_details": "Send this enum value when the rBit is providing details about the transaction.",
					"mfa": "Send this enum value when the rBit is providing information about an end user's MFA status.",
					"project": "Information about a project that an invoice or transaction is related to.",
					"property": "Information about a rented/owned home/commercial property that a payment is made for.",
					"rental": "Information about a rental contract for a rented property.",
					"revenue": "Information about revenue.",
					"website": "The URI to the campaign/website for the associated object."
				},
				"type": "string",
				"x-isOneOfKey": true,
				"x-label": "rbit-types-v3_1",
				"description": "The type of rBit. Use `type` to define how the rBit will be used."
			},
			"incoming_payments_amex-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"countries": {
						"additionalProperties": false,
						"type": "object",
						"properties": {
							"US": {
								"$ref": "#/components/schemas/incoming_payments_amex_US-req-v3_1"
							}
						}
					}
				},
				"type": "object",
				"x-label": "incoming_payments_amex-req-v3_1",
				"description": "American Express payment processing options."
			},
			"account-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"balances": {
						"additionalProperties": false,
						"properties": {
							"currencies": {
								"additionalProperties": true,
								"properties": {
									"CAD": {
										"additionalProperties": false,
										"properties": {
											"balance": {
												"type": "integer",
												"description": "A sum of payments, in the given currency, currently available for the next payout. Possible values include: `USD`, `CAD`."
											},
											"incoming_pending": {
												"type": "integer",
												"description": "The payment amount received from the payer to be processed or reviewed by WePay."
											},
											"outgoing_pending": {
												"type": "integer",
												"description": "The payout balance being processed or reviewed by WePay."
											},
											"reserve": {
												"type": "integer",
												"description": "Reserved USD balance."
											}
										},
										"type": "object"
									},
									"GBP": {
										"additionalProperties": false,
										"properties": {
											"balance": {
												"type": "integer",
												"description": "A sum of payments, in the given currency, currently available for the next payout. Possible values include: `USD`, `CAD`."
											},
											"incoming_pending": {
												"type": "integer",
												"description": "The payment amount received from the payer to be processed or reviewed by WePay."
											},
											"outgoing_pending": {
												"type": "integer",
												"description": "The payout balance being processed or reviewed by WePay."
											},
											"reserve": {
												"type": "integer",
												"description": "Reserved USD balance."
											}
										},
										"type": "object"
									},
									"USD": {
										"additionalProperties": false,
										"properties": {
											"balance": {
												"type": "integer",
												"description": "A sum of payments, in the given currency, currently available for the next payout. Possible values include: `USD`, `CAD`."
											},
											"incoming_pending": {
												"type": "integer",
												"description": "The payment amount received from the payer to be processed or reviewed by WePay."
											},
											"outgoing_pending": {
												"type": "integer",
												"description": "The payout balance being processed or reviewed by WePay."
											},
											"reserve": {
												"type": "integer",
												"description": "Reserved USD balance."
											}
										},
										"type": "object"
									}
								},
								"type": "object",
								"description": "Payout currency details."
							}
						},
						"type": "object",
						"description": "Displays balances pertaining to the merchant account."
					},
					"beneficiary": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 65535,
						"type": "string",
						"nullable": true,
						"description": "Short description of the merchant account."
					},
					"documents": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"create_time": {
									"$ref": "#/components/schemas/create_time"
								},
								"id": {
									"$ref": "#/components/schemas/id"
								},
								"owner": {
									"$ref": "#/components/schemas/shared_owner_response"
								},
								"path": {
									"type": "string",
									"nullable": true
								},
								"reject_reason": {
									"type": "string",
									"nullable": true
								},
								"resource": {
									"enum": [
										"documents"
									],
									"x-enumDescriptions": {
										"documents": ""
									},
									"type": "string"
								},
								"status": {
									"type": "string",
									"nullable": true
								},
								"type": {
									"enum": [
										"fee_disclosure",
										"invoice",
										"tracking",
										"drivers_license",
										"passport",
										"evidence_of_corporate_registration",
										"evidence_of_authority",
										"current_bank_statement",
										"evidence_of_nonprofit_registration",
										"social_security_card",
										"current_utility_bill",
										"other_government_issued_photo_id",
										"current_lease_contract",
										"birth_certificate",
										"not_applicable",
										"certificate_of_citizenship",
										"permanent_resident_card",
										"employment_authorization_card",
										"benefits_card",
										"social_insurance_number_card",
										"miscellaneous_compliance_doc",
										"business_report",
										"negative_media_searches",
										"person_report",
										"mortgage_statement",
										"certified_copy_of_court_order",
										"current_local_tax_bill",
										"certificate_of_naturalization"
									],
									"x-enumDescriptions": {
										"fee_disclosure": "Indicates that the document uploaded and associated with this account is the fee disclosure presented to the merchant.",
										"invoice": "Indicates that the document uploaded and associated with this account is an invoice presented to the merchant.",
										"tracking": "Indicates that the document uploaded and associated with this account is for general tracking purposes",
										"drivers_license": "Indicates that the document uploaded and associated with this account is the driver's license presented by the merchant.",
										"passport": "Indicates that the document uploaded and associated with this account is the passport presented by the merchant.",
										"evidence_of_corporate_registration": "Indicates that the document uploaded and associated with this account is the evidence of corporate registration presented by the merchant.",
										"evidence_of_authority": "Indicates that the document uploaded and associated with this account is the evidence of authority presented by the merchant.",
										"current_bank_statement": "Indicates that the document uploaded and associated with this account is the current bank statement presented by the merchant.",
										"evidence_of_nonprofit_registration": "Indicates that the document uploaded and associated with this account is the evidence of non profit registration presented by the merchant.",
										"social_security_card": "Indicates that the document uploaded and associated with this account is the social security card presented by the merchant.",
										"current_utility_bill": "Indicates that the document uploaded and associated with this account is the current utility bill presented by the merchant.",
										"other_government_issued_photo_id": "Indicates that the document uploaded and associated with this account is other government issued photo id presented by the merchant.",
										"current_lease_contract": "Indicates that the document uploaded and associated with this account is the current lease contract presented by the merchant.",
										"birth_certificate": "Indicates that the document uploaded and associated with this account is the birth certificate presented by the merchant.",
										"not_applicable": "Indicates that the document uploaded and associated with this account is not applicable.",
										"certificate_of_citizenship": "Indicates that the document uploaded and associated with this account is the certificate of citizenship presented by the merchant.",
										"permanent_resident_card": "Indicates that the document uploaded and associated with this account is the permanent resident card presented by the merchant.",
										"employment_authorization_card": "Indicates that the document uploaded and associated with this account is the employment authorization card presented by the merchant.",
										"benefits_card": "Indicates that the document uploaded and associated with this account is the benefits card presented by the merchant.",
										"social_insurance_number_card": "Indicates that the document uploaded and associated with this account is the social insurance number card presented by the merchant.",
										"miscellaneous_compliance_doc": "Indicates that the document uploaded and associated with this account is the miscellaneous compliance document presented by the merchant.",
										"business_report": "Indicates that the document uploaded and associated with this account is the business report presented by the merchant.",
										"negative_media_searches": "Indicates that the document uploaded and associated with this account is the negative media searches presented by the merchant.",
										"person_report": "Indicates that the document uploaded and associated with this account is the person report presented by the merchant.",
										"mortgage_statement": "Indicates that the document uploaded and associated with this account is the mortgage statement presented by the merchant.",
										"certified_copy_of_court_order": "Indicates that the document uploaded and associated with this account is the certified copy of the court order presented by the merchant.",
										"current_local_tax_bill": "Indicates that the document uploaded and associated with this account is the current local tax bill presented by the merchant.",
										"certificate_of_naturalization": "Indicates that the document uploaded and associated with this account is the certificate of naturalization presented by the merchant."
									},
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"resource",
								"id",
								"path",
								"owner",
								"create_time",
								"type",
								"status",
								"reject_reason"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An array of documents attached to this merchant to verify fee disclosure."
					},
					"id": {
						"$ref": "#/components/schemas/accounts_id"
					},
					"incoming_payments": {
						"$ref": "#/components/schemas/incoming_payments-resp-v3_1"
					},
					"industry": {
						"additionalProperties": false,
						"properties": {
							"category_detail": {
								"maxLength": 1024,
								"type": "string",
								"nullable": true,
								"description": "Details about the merchant's industry category."
							},
							"merchant_category_code": {
								"pattern": "^\\d{4}$",
								"type": "string",
								"description": "Category code associated with the merchant's industry.",
								"nullable": true
							}
						},
						"type": "object",
						"description": "Categorizes the type of service or item a merchant is providing."
					},
					"name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*\\w+.*$",
						"type": "string",
						"nullable": true,
						"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payout": {
						"$ref": "#/components/schemas/payout-resp-v3_1"
					},
					"platform_onboarding_time": {
						"type": "integer",
						"minimum": 0,
						"format": "int64",
						"nullable": true,
						"description": "The Unix epoch time (in seconds) when the account finished onboarding to the platform."
					},
					"pricing": {
						"$ref": "#/components/schemas/pricing-resp-v3_1"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					},
					"statement_description": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"pattern": "^((?![Ww][Ee][Pp][Aa][Yy])[ -~ùûüÿàâæçéèêëïîôœÙÛÜŸÀÆÇÉÈÊËÏÎÔŒ«»‘“”—–€])*$",
						"description": "A non-empty, ASCII-printable string that does **not** contain the word WePay. This will appear on payers' credit card statements. **Note:** The API allows up to 255 characters, but card issuers will only print 12-14 characters on statements. Find more information [here](/clear/onboard-merchants/)."
					},
					"accepted_method_of_payments": {
						"additionalProperties": false,
						"properties": {
							"countries": {
								"additionalProperties": false,
								"properties": {
									"CA": {
										"additionalProperties": false,
										"properties": {
											"american_express": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"se_number": {
																"type": "string",
																"maxLength": 10,
																"minLength": 10
															},
															"transaction_code": {
																"enum": [
																	"conveyed"
																],
																"x-enumDescriptions": {
																	"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
																},
																"type": "string"
															},
															"seller_id": {
																"type": "string"
															}
														},
														"required": [
															"transaction_code",
															"se_number"
														],
														"type": "object"
													}
												},
												"type": "object"
											},
											"apple_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"diners_club": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"discover": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"electronic_check": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"company_name": {
																"type": "string",
																"maxLength": 16,
																"minLength": 1
															},
															"description": {
																"type": "string",
																"maxLength": 10,
																"minLength": 1
															}
														},
														"type": "object",
														"required": [
															"company_name",
															"description"
														]
													}
												},
												"type": "object"
											},
											"google_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"interac": {
												"additionalProperties": false,
												"properties": {
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"debit": {
																		"type": "boolean",
																		"default": true,
																		"description": "The contactless payment functionality of Interac® Debit is also called Interac Flash."
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"jcb": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"master_card": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"visa": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									},
									"US": {
										"additionalProperties": false,
										"properties": {
											"accel": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"american_express": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"se_number": {
																"type": "string",
																"maxLength": 10,
																"minLength": 10
															},
															"transaction_code": {
																"enum": [
																	"conveyed"
																],
																"x-enumDescriptions": {
																	"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
																},
																"type": "string"
															},
															"seller_id": {
																"type": "string"
															}
														},
														"required": [
															"transaction_code",
															"se_number"
														],
														"type": "object"
													}
												},
												"type": "object"
											},
											"apple_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"diners_club": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"discover": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"electronic_check": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"company_name": {
																"type": "string",
																"maxLength": 16,
																"minLength": 1
															},
															"description": {
																"type": "string",
																"maxLength": 10,
																"minLength": 1
															}
														},
														"type": "object",
														"required": [
															"company_name",
															"description"
														]
													}
												},
												"type": "object"
											},
											"google_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"jcb": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"master_card": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"nyce": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"pulse": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"star": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"visa": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						},
						"type": "object",
						"description": "Provide the merchant's identifiers with different card brands they accept as methods of payment."
					},
					"convenience_fee_amount": {
						"type": "integer",
						"nullable": true,
						"minimum": 0,
						"maximum": 9999999,
						"description": "Describe the [convenience fees](/clear/certify/card-network-rules/#convenience-fees) for [Merchant IC+](/pricing/merchant-interchange-plus/) accounts in cents."
					},
					"enhanced_review": {
						"type": "string",
						"nullable": true,
						"description": "Indicates if the account is under enhanced review by WePay."
					},
					"onboarding_location": {
						"additionalProperties": false,
						"properties": {
							"city": {
								"maxLength": 30,
								"type": "string",
								"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							},
							"country": {
								"$ref": "#/components/schemas/country_code"
							},
							"line1": {
								"maxLength": 60,
								"type": "string",
								"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							},
							"postal_code": {
								"maxLength": 14,
								"type": "string",
								"description": "Postal code associated with the address."
							},
							"region": {
								"maxLength": 30,
								"type": "string",
								"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
							},
							"line2": {
								"maxLength": 60,
								"type": "string",
								"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							}
						},
						"required": [
							"line1",
							"city",
							"postal_code",
							"region",
							"country"
						],
						"type": "object",
						"nullable": true,
						"x-isAddress": true,
						"description": "Address of the legal entity, controller, or additional representatives. When representing the entity's address, send the entity's address of operation. When representing the controller or additional representative send the individual's residential address."
					},
					"projected_monthly_transaction_volume": {
						"type": "integer",
						"nullable": true,
						"description": "The projected monthly transaction volume, TPV, of an account."
					},
					"referral_partner": {
						"maxLength": 75,
						"minLength": 1,
						"type": "string",
						"description": "The non ISV partner/solution that refers merchants for payment processing services"
					},
					"transaction_division_mid": {
						"type": "integer",
						"nullable": true,
						"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_division_mid-nullable/description"
					},
					"transaction_type": {
						"type": "string",
						"enum": [
							"internet",
							"retail"
						],
						"x-enumDescriptions": {
							"internet": "The merchant will process card-not-present web transactions.",
							"retail": "The merchant will process card-present transactions."
						},
						"nullable": true,
						"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_type/description"
					}
				},
				"required": [
					"api_version",
					"balances",
					"beneficiary",
					"create_time",
					"custom_data",
					"description",
					"documents",
					"id",
					"incoming_payments",
					"industry",
					"name",
					"owner",
					"path",
					"payout",
					"platform_onboarding_time",
					"pricing",
					"reference_id",
					"resource",
					"statement_description"
				],
				"type": "object",
				"x-label": "account-resp-v3_1"
			},
			"payments-v3_1": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer"
					},
					"amount_disputed": {
						"type": "integer"
					},
					"amount_refunded": {
						"type": "integer"
					},
					"authorization_code": {
						"$ref": "#/components/schemas/cc-authorization_code"
					},
					"capture_at": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"nullable": true
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"id": {
						"$ref": "#/components/schemas/id"
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payment_method": {
						"$ref": "#/components/schemas/payment_method_non_expanded"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payments"
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"failed",
							"canceled"
						],
						"type": "string",
						"x-enumDescriptions": {
							"pending": "This payment is processing, but is not yet included in the account's available or reserve balance. Find more information in the `pending_reasons` structure.",
							"completed": "This payment has finished processing, and is now available in either the account's available or reserved balance. **Note:** A payment can have a completed status and simultaneously have a refund or dispute issued against it.",
							"failed": "This payment has failed to process, and cannot be made available to the merchant. Find more information in the `failure_reason` structure.",
							"canceled": "This payment was canceled. If the cancellation was inadvertent, a new payment will need to be created."
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"auto_capture": {
						"type": "boolean"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"failure_reason": {
						"$ref": "#/components/schemas/payments_failure_reason_response"
					},
					"fee_amount": {
						"type": "integer"
					},
					"fee_amount_refundable": {
						"type": "integer"
					},
					"initiated_by": {
						"$ref": "#/components/schemas/initiated_by-resp"
					},
					"order": {
						"$ref": "#/components/schemas/shared_order_response"
					},
					"pending_reasons": {
						"items": {
							"$ref": "#/components/schemas/payments_pending_reasons_response"
						},
						"type": "array",
						"nullable": true
					},
					"txnr_app_fee": {
						"$ref": "#/components/schemas/transaction_record_non_expanded"
					},
					"txnr_merchant": {
						"$ref": "#/components/schemas/transaction_record_non_expanded"
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"status",
					"amount",
					"amount_refunded",
					"amount_disputed",
					"currency",
					"payment_method",
					"reference_id",
					"capture_at",
					"authorization_code"
				],
				"type": "object",
				"x-label": "payments-v3_1"
			},
			"v3.1.rc.1.1-payment_method-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"id": {
						"type": "string",
						"description": "ID of the payment method, generated by WePay when the payment method is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_payment_method_owner_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payment_methods"
					},
					"status": {
						"enum": [
							"unverified",
							"verified",
							"verification_failed",
							"deleted"
						],
						"x-enumDescriptions": {
							"unverified": "This payment method has not been verified yet and cannot be used to create payments until the status updates to `verified`.",
							"verified": "This payment method has successfully been verified and can now be used to create payments.",
							"verification_failed": "Verification attempt(s) for this payment method have failed. If this value returns, the payer should double check their payment details and re-submit them.",
							"deleted": "This payment method has been permanently deleted and cannot be used to create any further payments."
						},
						"type": "string",
						"description": "Possible values include: `deleted`, `unverified`, `verification_failed`, `verified`."
					},
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"encoded_payment_method",
							"google_pay",
							"apple_pay",
							"plaid_processor_token"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						},
						"x-version-enum-values": {
							"apple_pay": {
								"x-versions": [
									"v3.1.rc.1.1"
								]
							},
							"plaid_processor_token": {
								"x-versions": [
									"v3.1.rc.1.3"
								]
							}
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv_provided": {
								"type": "boolean"
							},
							"expiration_month": {
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"description": "The year the credit card expires."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"backing_display_name": {
								"type": "string",
								"nullable": true,
								"description": "The backing display name for the credit card."
							},
							"bin": {
								"type": "string",
								"description": "Bank identification number. The initial six digits of a credit card number. Null is returned if BIN is not available."
							},
							"card_brand": {
								"enum": [
									"visa",
									"mastercard",
									"discover",
									"amex",
									"jcb",
									"diners"
								],
								"x-enumDescriptions": {
									"visa": "",
									"mastercard": "",
									"discover": "",
									"amex": "",
									"jcb": "",
									"diners": ""
								},
								"type": "string",
								"description": "Brand of the credit card. Possible values include: `amex`, `discover`, `diners`, `jcb`, `mastercard`, `visa`."
							},
							"card_entry_type": {
								"enum": [
									"card_keyed",
									"card_emv",
									"card_swiped",
									"card_manual",
									"card_emv_contactless"
								],
								"x-enumDescriptions": {
									"card_keyed": "",
									"card_emv": "",
									"card_swiped": "",
									"card_manual": "",
									"card_emv_contactless": ""
								},
								"type": "string",
								"description": "Possible values include: `card_keyed`, `card_transfer`."
							},
							"display_name": {
								"type": "string",
								"description": "The display name for the credit card."
							},
							"last_four": {
								"type": "string",
								"description": "The last four digits of the credit card number."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"expiration_month",
							"expiration_year",
							"card_on_file",
							"recurring",
							"cvv_provided"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"payment_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
									"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account. **Note:** If you have verified your account via Plaid, this might be the last four numbers of your tokenized bank account number (TAN)."
							}
						},
						"required": [
							"account_type",
							"last_four",
							"account_holder"
						],
						"type": "object",
						"description": "Raw bank account information."
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"type",
					"status"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.1-payment_method-resp-v3_1"
			},
			"resource-method_of_payments": {
				"enum": [
					"method_of_payments"
				],
				"x-enumDescriptions": {
					"method_of_payments": "Payment methods registration"
				},
				"type": "string",
				"x-label": "resource-method_of_payments",
				"description": "Helps organize information by identifying the resource type of the object data."
			},
			"incoming_payments-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"amex": {
						"$ref": "#/components/schemas/incoming_payments_amex-req-v3_1"
					},
					"opted_out_methods": {
						"$ref": "#/components/schemas/opted_out_methods-v3_1"
					}
				},
				"type": "object",
				"x-label": "incoming_payments-req-v3_1",
				"description": "Identify the payment methods this merchant will accept, and describe this merchant's relationship with card association."
			},
			"payout-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"additionalProperties": false,
								"properties": {
									"payout_method_id": {
										"maxLength": 255,
										"type": "string",
										"description": "ID of the payout method associated with the USD payout."
									},
									"period": {
										"enum": [
											"daily",
											"weekly",
											"monthly"
										],
										"x-enumDescriptions": {
											"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
											"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
											"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
										},
										"type": "string",
										"description": "Describes the how often a USD payout will occur."
									},
									"payout_purpose": {
										"additionalProperties": false,
										"properties": {
											"adjustment_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"fees_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"refunds_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"sales_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											}
										},
										"type": "object"
									}
								},
								"required": [
									"payout_method_id",
									"period"
								],
								"type": "object",
								"nullable": true,
								"description": "Payout currency details."
							},
							"GBP": {
								"additionalProperties": false,
								"properties": {
									"payout_method_id": {
										"maxLength": 255,
										"type": "string",
										"description": "ID of the payout method associated with the USD payout."
									},
									"period": {
										"enum": [
											"daily",
											"weekly",
											"monthly"
										],
										"x-enumDescriptions": {
											"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
											"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
											"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
										},
										"type": "string",
										"description": "Describes the how often a USD payout will occur."
									},
									"payout_purpose": {
										"additionalProperties": false,
										"properties": {
											"adjustment_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"fees_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"refunds_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"sales_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											}
										},
										"type": "object"
									}
								},
								"required": [
									"payout_method_id",
									"period"
								],
								"type": "object",
								"nullable": true,
								"description": "Payout currency details."
							},
							"USD": {
								"additionalProperties": false,
								"properties": {
									"payout_method_id": {
										"maxLength": 255,
										"type": "string",
										"description": "ID of the payout method associated with the USD payout."
									},
									"period": {
										"enum": [
											"daily",
											"weekly",
											"monthly"
										],
										"x-enumDescriptions": {
											"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
											"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
											"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
										},
										"type": "string",
										"description": "Describes the how often a USD payout will occur."
									},
									"payout_purpose": {
										"additionalProperties": false,
										"properties": {
											"adjustment_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"fees_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"refunds_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											},
											"sales_payout": {
												"additionalProperties": false,
												"properties": {
													"payout_method_id": {
														"maxLength": 255,
														"type": "string",
														"description": "ID of the payout method associated with the USD payout."
													},
													"period": {
														"enum": [
															"daily",
															"weekly",
															"monthly"
														],
														"type": "string",
														"x-enumDescriptions": {
															"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
															"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
															"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
														},
														"description": "Describes the how often a USD payout will occur."
													}
												},
												"required": [
													"payout_method_id",
													"period"
												],
												"type": "object",
												"nullable": true,
												"description": "Payout currency details."
											}
										},
										"type": "object"
									}
								},
								"required": [
									"payout_method_id",
									"period"
								],
								"type": "object",
								"nullable": true,
								"description": "Payout currency details."
							}
						},
						"type": "object",
						"description": "Payout currency details."
					},
					"default_currency": {
						"enum": [
							"USD",
							"CAD",
							"GBP"
						],
						"x-enumDescriptions": {
							"USD": "Indicate that this account's default payout should be in US dollars.",
							"CAD": "Indicate that this account's default payout should be in Canadian dollars.",
							"GBP": "Indicate that this account's default payout should be in Great British pounds. **Note:** Not currently supported."
						},
						"type": "string"
					},
					"payout_purpose": {
						"additionalProperties": false,
						"properties": {
							"adjustment_payout": {
								"additionalProperties": false,
								"properties": {
									"payout_method_id": {
										"maxLength": 255,
										"type": "string",
										"description": "ID of the payout method associated with the USD payout."
									},
									"period": {
										"enum": [
											"daily",
											"weekly",
											"monthly"
										],
										"type": "string",
										"x-enumDescriptions": {
											"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
											"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
											"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
										},
										"description": "Describes the how often a USD payout will occur."
									}
								},
								"required": [
									"payout_method_id",
									"period"
								],
								"type": "object",
								"nullable": true,
								"description": "Payout currency details."
							},
							"fees_payout": {
								"additionalProperties": false,
								"properties": {
									"payout_method_id": {
										"maxLength": 255,
										"type": "string",
										"description": "ID of the payout method associated with the USD payout."
									},
									"period": {
										"enum": [
											"daily",
											"weekly",
											"monthly"
										],
										"type": "string",
										"x-enumDescriptions": {
											"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
											"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
											"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
										},
										"description": "Describes the how often a USD payout will occur."
									}
								},
								"required": [
									"payout_method_id",
									"period"
								],
								"type": "object",
								"nullable": true,
								"description": "Payout currency details."
							},
							"refunds_payout": {
								"additionalProperties": false,
								"properties": {
									"payout_method_id": {
										"maxLength": 255,
										"type": "string",
										"description": "ID of the payout method associated with the USD payout."
									},
									"period": {
										"enum": [
											"daily",
											"weekly",
											"monthly"
										],
										"type": "string",
										"x-enumDescriptions": {
											"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
											"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
											"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
										},
										"description": "Describes the how often a USD payout will occur."
									}
								},
								"required": [
									"payout_method_id",
									"period"
								],
								"type": "object",
								"nullable": true,
								"description": "Payout currency details."
							},
							"sales_payout": {
								"additionalProperties": false,
								"properties": {
									"payout_method_id": {
										"maxLength": 255,
										"type": "string",
										"description": "ID of the payout method associated with the USD payout."
									},
									"period": {
										"enum": [
											"daily",
											"weekly",
											"monthly"
										],
										"type": "string",
										"x-enumDescriptions": {
											"daily": "WePay will pay out an Account for its available balance every day. If an Account's available balance is $0, then a Payout will not be sent.",
											"weekly": "WePay will pay out an Account for its available balance every week on Monday. If an Account's available balance is $0, then a Payout will not be sent.",
											"monthly": "WePay will send the value of an Account's available balance to the linked Payout Method every month on the 1st, and the available balance will then become $0. If an Account's available balance is already $0, then no Payout will be sent."
										},
										"description": "Describes the how often a USD payout will occur."
									}
								},
								"required": [
									"payout_method_id",
									"period"
								],
								"type": "object",
								"nullable": true,
								"description": "Payout currency details."
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "payout-req-v3_1",
				"description": "Details the merchant’s payout method."
			},
			"pricing-create-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/pricing_by_currency-create-CAD-v3_1"
							},
							"GBP": {
								"$ref": "#/components/schemas/pricing_by_currency-create-GBP-v3_1"
							},
							"USD": {
								"$ref": "#/components/schemas/pricing_by_currency-create-USD-v3_1"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "pricing-create-v3_1",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"embedded-rbits-v3_1": {
				"items": {
					"additionalProperties": false,
					"properties": {
						"receive_time": {
							"type": "integer",
							"format": "int64",
							"minimum": 0,
							"description": "The timestamp the embedded rbit was received indicated by a UNIX timestamp. eg. 1623263544"
						},
						"source": {
							"$ref": "#/components/schemas/rbit-source"
						},
						"type": {
							"$ref": "#/components/schemas/rbit-types-v3_1"
						},
						"address": {
							"$ref": "#/components/schemas/rbits_address"
						},
						"auto_billing": {
							"$ref": "#/components/schemas/shared_auto_billing"
						},
						"business_description": {
							"$ref": "#/components/schemas/shared_business_description"
						},
						"business_name": {
							"$ref": "#/components/schemas/shared_business_name"
						},
						"external_account": {
							"$ref": "#/components/schemas/shared_external_account"
						},
						"fundraising_event": {
							"$ref": "#/components/schemas/shared_fundraising_event"
						},
						"fundraising_update": {
							"$ref": "#/components/schemas/shared_fundraising_update"
						},
						"industry_code": {
							"$ref": "#/components/schemas/shared_industry_code"
						},
						"mfa": {
							"$ref": "#/components/schemas/shared_mfa"
						},
						"partner_service": {
							"$ref": "#/components/schemas/shared_partner_service"
						},
						"person": {
							"$ref": "#/components/schemas/shared_person"
						},
						"phone": {
							"$ref": "#/components/schemas/shared_rbits_phone"
						},
						"project": {
							"$ref": "#/components/schemas/shared_project"
						},
						"revenue": {
							"$ref": "#/components/schemas/shared_revenue"
						},
						"transaction_details": {
							"$ref": "#/components/schemas/shared_transaction_details"
						},
						"website": {
							"$ref": "#/components/schemas/shared_website"
						}
					},
					"required": [
						"receive_time",
						"type",
						"source"
					],
					"type": "object"
				},
				"type": "array",
				"nullable": true,
				"x-label": "embedded-rbits-v3_1",
				"description": "Any rbit data your platform chooses to attach to this resource. The rbit data must be key-value pairs and can be an array of rbit objects."
			},
			"pricing-update-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/pricing_by_currency-update-CAD-v3_1"
							},
							"GBP": {
								"$ref": "#/components/schemas/pricing_by_currency-update-GBP-v3_1"
							},
							"USD": {
								"$ref": "#/components/schemas/pricing_by_currency-update-USD-v3_1"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "pricing-update-v3_1",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.1.rc.1.1-payment_method_for_payments_v3_1": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_method_id",
							"encoded_payment_method",
							"google_pay",
							"apple_pay",
							"plaid_processor_token"
						],
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_method_id": "This value is required if the `payment_method_id` parameter is being sent after a payment method has already been created.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"x-version-enum-values": {
							"apple_pay": {
								"x-versions": [
									"v3.1.rc.1.1"
								]
							},
							"plaid_processor_token": {
								"x-versions": [
									"v3.1.rc.1.3"
								]
							}
						}
					},
					"apple_pay": {
						"x-versions": [
							"v3.1.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest) received from Apple Pay APIs.",
								"type": "string"
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Apple Pay."
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"google_pay": {
						"x-versions": [
							"v3.0.rc.2.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) received from Google Pay APIs.",
								"type": "string"
							},
							"public_key": {
								"type": "string",
								"description": "Public key received from WePay during your application on-boarding."
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Google Pay."
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"payment_method_id": {
						"$ref": "#/components/schemas/id"
					},
					"plaid_processor_token": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/payment_bank_us_holder-req"
							},
							"processor_token": {
								"description": "Holds Plaid verification token on POST /payment_methods request.",
								"type": "string"
							},
							"plaid_account_id": {
								"description": "Optional field which holds the account id of a Plaid verification request when creating a payment method.",
								"type": "string"
							}
						},
						"required": [
							"processor_token",
							"account_holder"
						],
						"type": "object",
						"description": "A Plaid processor token to make Plaid API calls."
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.1-payment_method_for_payments_v3_1",
				"description": "The payment method used to create this payment.**Note:** The payment method's top level data object corresponds with the payment method type. For example, if you set type to `credit_card`, then the payment method's top level data object must be `credit_card`."
			},
			"capabilities-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"id": {
						"$ref": "#/components/schemas/id-nullable"
					},
					"owner": {
						"$ref": "#/components/schemas/accounts_id_capabilities_owner_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-capabilities"
					},
					"payments": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Payments capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable."
					},
					"payouts": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Payouts capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable."
					},
					"terminals": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's Terminals capability status, and reasons for a disabled status (i.e. `enabled : false`), if applicable. **Note:** If your platform does not have permission from WePay to use Card Present, then your merchants' terminal capability will never be enabled. This will not impact their ability to process web-based, card-not-present transactions."
					},
					"transaction_division_setup": {
						"additionalProperties": false,
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Indicates if the capability is enabled."
							},
							"current_issues": {
								"items": {
									"additionalProperties": false,
									"properties": {
										"issue_type": {
											"enum": [
												"account_closed",
												"account_deleted",
												"additional_documents_required",
												"application_block",
												"closed_for_loss",
												"compliance",
												"country_not_supported",
												"errant_fields",
												"extended_review",
												"fraud",
												"high_risk_cb_rate",
												"identity_verification",
												"in_review",
												"reported_user",
												"risk_outreach",
												"tos_violation",
												"unsupported"
											],
											"type": "string",
											"x-enumDescriptions": {
												"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
												"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
												"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
												"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
												"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
												"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
												"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
												"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
												"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
												"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
												"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
												"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
												"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
												"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
												"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
												"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
												"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
											}
										},
										"target": {
											"additionalProperties": false,
											"properties": {
												"id": {
													"type": "string",
													"nullable": true
												},
												"path": {
													"type": "string",
													"nullable": true
												},
												"resource": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"resource",
												"id",
												"path"
											],
											"type": "object"
										},
										"additional_documents_required": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"application_block": {
											"type": "object",
											"properties": {
												"reason": {
													"type": "string",
													"maxLength": 255,
													"description": "A brief description of why the capabilities block is required."
												}
											},
											"additionalProperties": false
										},
										"errant_fields": {
											"additionalProperties": {
												"items": {
													"enum": [
														"is_false",
														"is_null",
														"is_po_box",
														"is_unsupported_value",
														"is_empty"
													],
													"type": "string",
													"x-enumDescriptions": {
														"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
														"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
														"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
														"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
														"is_empty": "This will return if the JSON path not exist or JSON object is empty"
													}
												},
												"minItems": 1,
												"type": "array",
												"uniqueItems": true
											},
											"type": "object",
											"description": "Indicates which fields need to be updated."
										},
										"identity_verification": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										},
										"in_review": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"risk_outreach": {
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"message": {
													"type": "string",
													"nullable": true,
													"description": "Agent provided contextual message."
												},
												"path": {
													"type": "string",
													"description": "Path to targeted individual (controller, entity, or additional_representative)"
												},
												"requested_documents": {
													"items": {
														"enum": [
															"articles_of_association",
															"benefits_card",
															"birth_certificate",
															"canadian_citizenship",
															"canadian_health_card",
															"certificate_of_association",
															"certificate_of_authority",
															"certificate_of_citizenship",
															"certificate_of_formation",
															"certificate_of_incorporation",
															"certificate_of_naturalization",
															"certificate_of_organization",
															"certified_copy_of_court_order",
															"charity_license",
															"credit_card_statement",
															"current_bank_statement",
															"current_lease_contract",
															"current_local_tax_bill",
															"current_utility_bill",
															"dba_registration",
															"divorce_decree",
															"drivers_license",
															"electoral_register_entry",
															"employment_authorization_card",
															"evidence_of_authority",
															"evidence_of_corporate_registration",
															"evidence_of_name_change",
															"evidence_of_nonprofit_registration",
															"firearms_certificate",
															"foreign_passport",
															"hud_statement",
															"identity_card_northern_ireland",
															"insurance_bill",
															"insurance_card",
															"insurance_declaration_page",
															"irs_501c3_determination",
															"irs_confirmation_of_tin",
															"marriage_certificate",
															"matricula_consular_card",
															"military_orders",
															"mortgage_closing_document",
															"mortgage_statement",
															"national_identity_card",
															"order_of_creation",
															"other_evidence_of_filings",
															"other_government_issued_photo_id",
															"other_supporting_docs",
															"partnership_agreement",
															"passport",
															"paystub",
															"permanent_resident_card",
															"sentri_card",
															"social_insurance_number_card",
															"social_security_benefit_notice",
															"social_security_card",
															"tax_exemption_letter",
															"trust_agreement",
															"vehicle_registration"
														],
														"x-enumDescriptions": {
															"articles_of_association": "",
															"benefits_card": "",
															"birth_certificate": "",
															"canadian_citizenship": "",
															"canadian_health_card": "",
															"certificate_of_association": "",
															"certificate_of_authority": "",
															"certificate_of_citizenship": "",
															"certificate_of_formation": "",
															"certificate_of_incorporation": "",
															"certificate_of_naturalization": "",
															"certificate_of_organization": "",
															"certified_copy_of_court_order": "",
															"charity_license": "",
															"credit_card_statement": "",
															"current_bank_statement": "",
															"current_lease_contract": "",
															"current_local_tax_bill": "",
															"current_utility_bill": "",
															"dba_registration": "",
															"divorce_decree": "",
															"drivers_license": "",
															"electoral_register_entry": "",
															"employment_authorization_card": "",
															"evidence_of_authority": "",
															"evidence_of_corporate_registration": "",
															"evidence_of_name_change": "",
															"evidence_of_nonprofit_registration": "",
															"firearms_certificate": "",
															"foreign_passport": "",
															"hud_statement": "",
															"identity_card_northern_ireland": "",
															"insurance_bill": "",
															"insurance_card": "",
															"insurance_declaration_page": "",
															"irs_501c3_determination": "",
															"irs_confirmation_of_tin": "",
															"marriage_certificate": "",
															"matricula_consular_card": "",
															"military_orders": "",
															"mortgage_closing_document": "",
															"mortgage_statement": "",
															"national_identity_card": "",
															"order_of_creation": "",
															"other_evidence_of_filings": "",
															"other_government_issued_photo_id": "",
															"other_supporting_docs": "",
															"partnership_agreement": "",
															"passport": "",
															"paystub": "",
															"permanent_resident_card": "",
															"sentri_card": "",
															"social_insurance_number_card": "",
															"social_security_benefit_notice": "",
															"social_security_card": "",
															"tax_exemption_letter": "",
															"trust_agreement": "",
															"vehicle_registration": ""
														},
														"type": "string"
													},
													"type": "array",
													"description": "Types of documents that would fulfill request."
												}
											},
											"required": [
												"path",
												"requested_documents",
												"message"
											]
										}
									},
									"required": [
										"issue_type",
										"target"
									],
									"type": "object"
								},
								"type": "array",
								"description": "Returns an array of objects identifying why a capability is not enabled. If there is a single issue, the array will contain an `issue_type`; a `target` array with identifying details about the object, path, and/or parameter(s) relevant to the issue; and another array containing further details from the value of `issue_type`. This last array's key will match the value from `issue_type`. If there are multiple issues, then the above collection of objects and parameters will be returned for each issue.  *Note:* Only *one* of the following object will be present, depending on the value of the `issue_type`: `additional_documents_required`, `errant_fields`, `in_review`, `application_block`, `identity_verification`, or `risk_outreach`."
							},
							"upcoming_issues": {
								"additionalProperties": {
									"items": {
										"additionalProperties": false,
										"properties": {
											"issue_type": {
												"enum": [
													"account_closed",
													"account_deleted",
													"additional_documents_required",
													"application_block",
													"closed_for_loss",
													"compliance",
													"country_not_supported",
													"errant_fields",
													"extended_review",
													"fraud",
													"high_risk_cb_rate",
													"identity_verification",
													"in_review",
													"reported_user",
													"risk_outreach",
													"tos_violation",
													"unsupported"
												],
												"type": "string",
												"x-enumDescriptions": {
													"account_closed": "WePay closed the account. Reach out to WePay for further information. [See example notification JSON](https://gist.github.com/wehub/f35f0b3bb3a8857fb9523cc75c2d56b4).",
													"account_deleted": "This account has been deleted and off-boarded from a platform due to merchants request. Payments and Payout capabilities are disabled. [See example notification JSON](https://gist.github.com/wehub/213175f37d147951e2b2a3e299c31e50).",
													"additional_documents_required": "This value indicates that the merchant must [upload documentation](/api/#/http/guides/document-upload) to allow WePay to complete verification. [See example notification JSON](https://gist.github.com/wehub/d251f07f6527155225f87b00e353a029).",
													"application_block": "This issue type will only return if your app has permission to use the application block feature, **and** you have blocked an account's payment or payout capability. The `reason` value will be the string submitted by your app when the block was set. [See example notification JSON](https://gist.github.com/wehub/d9e54b7ae580f0e5152dbac6cfaab852).",
													"closed_for_loss": "WePay has closed this merchant because they maintained a negative account balance for more than 60 days. [See example notification JSON](https://gist.github.com/wehub/0562f0a5f7f961d662a1d32c66dcc981).",
													"compliance": "WePay has closed this merchant due to regulations which prohibit processing for this merchant. [See example notification JSON](https://gist.github.com/wehub/857bd478f8126bb0593a3dcfb591b8c6).",
													"country_not_supported": "WePay has closed this merchant due to operations in an unsupported country. [See example notification JSON](https://gist.github.com/wehub/ae635444f872391e08c7bb5d9e7c2277).",
													"errant_fields": "This value describes missing or invalid onboarding information, and may return any of the following values: `is_null`, `is_po_box`, `is_false`, and `is_unsupported_value`. [See example notification JSON](https://gist.github.com/wehub/8f77660cc06b3923af5c8e07dd2f38be).",
													"extended_review": "WePay must perform an extensive review of this merchant before considering re-enabling a capability. [See example notification JSON](https://gist.github.com/wehub/d60a4a5539841d0d04c727435966a58c).",
													"fraud": "WePay has closed this merchant due to fraudulent activity on their account. **Do NOT disclose fraud to any users.** [See example notification JSON](https://gist.github.com/wehub/bbb300da4539ebdd4d07cf281dd89851).",
													"high_risk_cb_rate": "WePay has closed this merchant due to high risk or a high rate of [disputes](/api/#/http/api-endpoints/payment-operations/get-a-dispute) (also called charge backs). [See example notification JSON](https://gist.github.com/wehub/415c6342dd348a2d4ac1c988aeda7de1).",
													"identity_verification": "WePay requires documentation in order to verify the identity of the entity, controller, or one of the additional representatives. Find exactly which documents are required in the `identity_verification` object. [See example notification JSON](https://gist.github.com/wehub/c9628ed7085ddc063484d299ce67244b).",
													"in_review": "WePay must review this merchant, and the capability must be disabled until that review is complete. [See example notification JSON](https://gist.github.com/wehub/2cda740d2644741cc6fc6f4965ff2d4d).",
													"reported_user": "WePay has closed this merchant due to a report received from your platform. [See example notification JSON](https://gist.github.com/wehub/5fe5fe8bd39e99f5eaa844de4cffbb97).",
													"risk_outreach": "WePay requires documentation in order to properly implement fraud protection for the merchant. Find exactly which documents are required in the `risk_outreach` object. [See example notification JSON](https://gist.github.com/wehub/6f923c62a95d2c9e9d83b105296749ce).",
													"tos_violation": "WePay has closed this merchant due to activity against [Terms of Service](https://go.wepay.com/terms-of-service-us/). [See example notification JSON](https://gist.github.com/wehub/301b57d1094ad11d529b35f263a29cda).",
													"unsupported": "WePay cannot support this merchant. [See example notification JSON](https://gist.github.com/wehub/733eb21e30e7e823c942b575331da5ec)."
												}
											},
											"target": {
												"additionalProperties": false,
												"properties": {
													"id": {
														"type": "string",
														"nullable": true
													},
													"path": {
														"type": "string",
														"nullable": true
													},
													"resource": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"resource",
													"id",
													"path"
												],
												"type": "object"
											},
											"additional_documents_required": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"application_block": {
												"type": "object",
												"properties": {
													"reason": {
														"type": "string",
														"maxLength": 255,
														"description": "A brief description of why the capabilities block is required."
													}
												},
												"additionalProperties": false
											},
											"errant_fields": {
												"additionalProperties": {
													"items": {
														"enum": [
															"is_false",
															"is_null",
															"is_po_box",
															"is_unsupported_value",
															"is_empty"
														],
														"type": "string",
														"x-enumDescriptions": {
															"is_false": "This will return if the `controller.email_is_verified` value is `false`. Find out when a controller's email address must be verified [here](/clear/onboard-merchants/#invite-the-controller), and [here](/clear/options/enable-merchants/#enable-payments) for merchants onboarded without the WePay Merchant Center.",
															"is_null": "The target is required information for onboarding, and the merchant must provide this information to continue processing. Find more information in the [Enable Merchants](/clear/options/enable-merchants/) article.",
															"is_po_box": "Addresses must not be a PO box, but rather a residential or business address.",
															"is_unsupported_value": "If a merchant's category code or currency are not supported for a given capability, this issue type will return.",
															"is_empty": "This will return if the JSON path not exist or JSON object is empty"
														}
													},
													"minItems": 1,
													"type": "array",
													"uniqueItems": true
												},
												"type": "object",
												"description": "Indicates which fields need to be updated."
											},
											"identity_verification": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											},
											"in_review": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"risk_outreach": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"message": {
														"type": "string",
														"nullable": true,
														"description": "Agent provided contextual message."
													},
													"path": {
														"type": "string",
														"description": "Path to targeted individual (controller, entity, or additional_representative)"
													},
													"requested_documents": {
														"items": {
															"enum": [
																"articles_of_association",
																"benefits_card",
																"birth_certificate",
																"canadian_citizenship",
																"canadian_health_card",
																"certificate_of_association",
																"certificate_of_authority",
																"certificate_of_citizenship",
																"certificate_of_formation",
																"certificate_of_incorporation",
																"certificate_of_naturalization",
																"certificate_of_organization",
																"certified_copy_of_court_order",
																"charity_license",
																"credit_card_statement",
																"current_bank_statement",
																"current_lease_contract",
																"current_local_tax_bill",
																"current_utility_bill",
																"dba_registration",
																"divorce_decree",
																"drivers_license",
																"electoral_register_entry",
																"employment_authorization_card",
																"evidence_of_authority",
																"evidence_of_corporate_registration",
																"evidence_of_name_change",
																"evidence_of_nonprofit_registration",
																"firearms_certificate",
																"foreign_passport",
																"hud_statement",
																"identity_card_northern_ireland",
																"insurance_bill",
																"insurance_card",
																"insurance_declaration_page",
																"irs_501c3_determination",
																"irs_confirmation_of_tin",
																"marriage_certificate",
																"matricula_consular_card",
																"military_orders",
																"mortgage_closing_document",
																"mortgage_statement",
																"national_identity_card",
																"order_of_creation",
																"other_evidence_of_filings",
																"other_government_issued_photo_id",
																"other_supporting_docs",
																"partnership_agreement",
																"passport",
																"paystub",
																"permanent_resident_card",
																"sentri_card",
																"social_insurance_number_card",
																"social_security_benefit_notice",
																"social_security_card",
																"tax_exemption_letter",
																"trust_agreement",
																"vehicle_registration"
															],
															"x-enumDescriptions": {
																"articles_of_association": "",
																"benefits_card": "",
																"birth_certificate": "",
																"canadian_citizenship": "",
																"canadian_health_card": "",
																"certificate_of_association": "",
																"certificate_of_authority": "",
																"certificate_of_citizenship": "",
																"certificate_of_formation": "",
																"certificate_of_incorporation": "",
																"certificate_of_naturalization": "",
																"certificate_of_organization": "",
																"certified_copy_of_court_order": "",
																"charity_license": "",
																"credit_card_statement": "",
																"current_bank_statement": "",
																"current_lease_contract": "",
																"current_local_tax_bill": "",
																"current_utility_bill": "",
																"dba_registration": "",
																"divorce_decree": "",
																"drivers_license": "",
																"electoral_register_entry": "",
																"employment_authorization_card": "",
																"evidence_of_authority": "",
																"evidence_of_corporate_registration": "",
																"evidence_of_name_change": "",
																"evidence_of_nonprofit_registration": "",
																"firearms_certificate": "",
																"foreign_passport": "",
																"hud_statement": "",
																"identity_card_northern_ireland": "",
																"insurance_bill": "",
																"insurance_card": "",
																"insurance_declaration_page": "",
																"irs_501c3_determination": "",
																"irs_confirmation_of_tin": "",
																"marriage_certificate": "",
																"matricula_consular_card": "",
																"military_orders": "",
																"mortgage_closing_document": "",
																"mortgage_statement": "",
																"national_identity_card": "",
																"order_of_creation": "",
																"other_evidence_of_filings": "",
																"other_government_issued_photo_id": "",
																"other_supporting_docs": "",
																"partnership_agreement": "",
																"passport": "",
																"paystub": "",
																"permanent_resident_card": "",
																"sentri_card": "",
																"social_insurance_number_card": "",
																"social_security_benefit_notice": "",
																"social_security_card": "",
																"tax_exemption_letter": "",
																"trust_agreement": "",
																"vehicle_registration": ""
															},
															"type": "string"
														},
														"type": "array",
														"description": "Types of documents that would fulfill request."
													}
												},
												"required": [
													"path",
													"requested_documents",
													"message"
												]
											}
										},
										"required": [
											"issue_type",
											"target"
										],
										"type": "object"
									},
									"type": "array"
								},
								"type": "object",
								"description": "Provides information on upcoming issues."
							}
						},
						"required": [
							"enabled"
						],
						"type": "object",
						"description": "Details an Account's onboarding status with Chase Merchant Services."
					}
				},
				"required": [
					"resource",
					"id",
					"path",
					"owner",
					"api_version"
				],
				"type": "object",
				"x-label": "capabilities-resp-v3_1",
				"description": "Outlines an account's payment, payout, and terminal capability status, and reasons for any disabled capabilities. **Note:** If your platform does not have permission from WePay to use Card Present, then your merchants' terminal capability will never be enabled. This will not impact their ability to process web-based, card-not-present transactions."
			},
			"v3.1.rc.1.1-payments-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"description": "Merchant's account id associated with the payment."
					},
					"amount": {
						"minimum": 100,
						"type": "integer",
						"description": "Amount in the lowest denomination. For example, $1.00 is represented as 100. This applies to all currencies WePay supports."
					},
					"currency": {
						"$ref": "#/components/schemas/permissioned-currency"
					},
					"payment_method": {
						"$ref": "#/components/schemas/v3.1.rc.1.1-payment_method_for_payments_v3_1"
					},
					"auto_capture": {
						"type": "boolean",
						"description": "For payments with a credit card payment method, set to `false` to create a delayed-capture payment. Capture the payment within 7 days with the [POST /payments/{id}/capture](/api/latest/operation/POST_payments-id-capture/) endpoint. Alternatively, cancel the payment with the [POST /payments/{id}/cancel](/api/latest/operation/POST_payments-id-cancel/) endpoint."
					},
					"capture_at": {
						"type": "integer",
						"nullable": true,
						"description": "Designate the time at which this payment will capture using a UNIX epoch timestamp. The capture time cannot be more than 7 days in the future. Note that epoch timestamps use the UTC timezone."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"fee_amount": {
						"minimum": 0,
						"type": "integer",
						"description": "Specifies the fee amount your platform will collect from the payment. The amount should be in the lowest denomination. For example, $1.00 is represented as 100. This applies to all currencies WePay supports. Note: The upper limit for the fee amount is 20% of the payment. If this field is blank and the merchant is on blended pricing, $0 will be debited from the merchant and credited to your platform account, but WePay’s fees will still be debited from your platform account. Remember to appropriately [calculate fees](/clear/process-payments/#calculate-fees). Payments for merchants on [MIC+](/pricing/merchant-interchange-plus/) should leave this field blank as fees are assessed monthly rather than per transaction. If any number other than 0 is passed it will be ignored, and 0 will be applied and returned."
					},
					"initiated_by": {
						"$ref": "#/components/schemas/initiated_by-req"
					},
					"order": {
						"$ref": "#/components/schemas/payments_order_request"
					},
					"order_id": {
						"$ref": "#/components/schemas/id-order"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits-v3_1"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					}
				},
				"required": [
					"amount",
					"currency",
					"account_id",
					"payment_method"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.1-payments-req-v3_1"
			},
			"v3.1.rc.1.1-payment_method-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"encoded_payment_method",
							"google_pay",
							"apple_pay",
							"plaid_processor_token"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						},
						"x-version-enum-values": {
							"apple_pay": {
								"x-versions": [
									"v3.1.rc.1.1"
								]
							},
							"plaid_processor_token": {
								"x-versions": [
									"v3.1.rc.1.3"
								]
							}
						}
					},
					"apple_pay": {
						"x-versions": [
							"v3.1.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest) received from Apple Pay APIs.",
								"type": "string"
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Apple Pay."
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"google_pay": {
						"x-versions": [
							"v3.0.rc.2.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) received from Google Pay APIs.",
								"type": "string"
							},
							"public_key": {
								"type": "string",
								"description": "Public key received from WePay during your application on-boarding."
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Google Pay."
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"plaid_processor_token": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/payment_bank_us_holder-req"
							},
							"processor_token": {
								"description": "Holds Plaid verification token on POST /payment_methods request.",
								"type": "string"
							},
							"plaid_account_id": {
								"description": "Optional field which holds the account id of a Plaid verification request when creating a payment method.",
								"type": "string"
							}
						},
						"required": [
							"processor_token",
							"account_holder"
						],
						"type": "object",
						"description": "A Plaid processor token to make Plaid API calls."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits-v3_1"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.1-payment_method-req-v3_1"
			},
			"payout_methods_create_data-v3_1": {
				"additionalProperties": false,
				"properties": {
					"legal_entity_id": {
						"$ref": "#/components/schemas/id"
					},
					"nickname": {
						"type": "string",
						"maxLength": 64,
						"minLength": 1
					},
					"type": {
						"enum": [
							"payout_bank_ca",
							"payout_bank_gb",
							"payout_bank_us",
							"paper_check",
							"plaid_processor_token"
						],
						"x-enumDescriptions": {
							"payout_bank_ca": "Bank account in Canada.",
							"payout_bank_gb": "Bank account in the UK (not currently supported).",
							"payout_bank_us": "Bank account in the US.",
							"paper_check": "Paper check delivered to an address in the US.",
							"plaid_processor_token": "Token used by WePay to communicate with Plaid and retrieve bank account information from Plaid."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Possible values: `payout_bank_ca`, `payout_bank_us` and `payout_bank_gb`. **Note:** The `paper_check` option requires permission from WePay to use. Reach out to your integration team for assistance."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"paper_check": {
						"additionalProperties": false,
						"properties": {
							"address": {
								"$ref": "#/components/schemas/payout_methods_paper_check_address"
							},
							"memo": {
								"description": "The memo that will be used on the check",
								"type": "string",
								"minLength": 1,
								"maxLength": 70
							}
						},
						"required": [
							"address"
						],
						"description": "Define how to payout a merchant based in the US via paper check. **Note:** Paper checks require permission from WePay, and only US-based merchants can receive payouts via paper check. Reach out to your integration team for further information.",
						"type": "object",
						"x-permission": {
							"type": "can_be_used",
							"phase": "post_token_expansion",
							"partner_config_key_path": "api.v3.payouts.paper_checks_enabled",
							"feature_name": "paper check"
						}
					},
					"payout_bank_ca": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"pattern": "^[0-9]{5,17}$",
								"type": "string"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"institution_number": {
								"pattern": "^[0-9]{3}$",
								"type": "string"
							},
							"transit_number": {
								"pattern": "^[0-9]{5}$",
								"type": "string"
							}
						},
						"required": [
							"transit_number",
							"institution_number",
							"account_number",
							"account_type"
						],
						"type": "object"
					},
					"payout_bank_gb": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"pattern": "^[0-9]{8}$",
								"type": "string"
							},
							"sort_code": {
								"pattern": "^[0-9]{6}$",
								"type": "string"
							}
						},
						"required": [
							"sort_code",
							"account_number"
						],
						"type": "object"
					},
					"payout_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"$ref": "#/components/schemas/us_bank_account_number"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"routing_number": {
								"$ref": "#/components/schemas/us_bank_routing_number"
							}
						},
						"required": [
							"routing_number",
							"account_number",
							"account_type"
						],
						"type": "object"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"legal_entity_id",
					"nickname",
					"type"
				],
				"type": "object",
				"x-label": "payout_methods_create_data-v3_1"
			},
			"v3.1.rc.1.3-accounts_CAD_blended-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-accounts_CAD_blended-v3_1",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"v3.1.rc.1.3-accounts_blended-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-accounts_blended-v3_1",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"v3.1.rc.1.3-pricing_by_currency-resp-CAD-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-accounts_CAD_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing_by_currency-resp-CAD-v3_1"
			},
			"v3.1.rc.1.3-pricing_by_currency-resp-GBP-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing_by_currency-resp-GBP-v3_1"
			},
			"v3.1.rc.1.3-pricing_by_currency-resp-USD-v3_1": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing_by_currency-resp-USD-v3_1"
			},
			"contract_amount": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer",
						"description": "Amount in the lowest denomination of the currency (in cents in case of USD)."
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					}
				},
				"type": "object",
				"description": "The rental contract amount in the specified currency.",
				"x-label": "contract_amount"
			},
			"v3.1.rc.1.3-accounts_id_CAD_blended_request-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction"
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction"
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)"
							}
						},
						"type": "object",
						"nullable": true
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request-v3_1"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-accounts_id_CAD_blended_request-v3_1",
				"description": "The blended pricing model to collect platform fees."
			},
			"v3.1.rc.1.3-accounts_id_blended_request-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request-v3_1"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-accounts_id_blended_request-v3_1",
				"description": "The blended pricing model to collect platform fees."
			},
			"v3.1.rc.1.3-bin_details": {
				"additionalProperties": false,
				"properties": {
					"is_giftcard": {
						"type": "boolean",
						"default": false,
						"description": "Indicates whether the card is a gift card or not.",
						"nullable": true
					},
					"is_prepaid": {
						"type": "boolean",
						"default": false,
						"description": "Indicates whether the card is pre-paid or not.",
						"nullable": true
					}
				},
				"x-versions": [
					"v3.1.rc.1.3"
				],
				"type": "object",
				"description": "Bank Identification Number details of the funding card.",
				"x-label": "v3.1.rc.1.3-bin_details"
			},
			"v3.1.rc.1.3-shared_landlord": {
				"x-versions": [
					"v3.1.rc.1.3"
				],
				"additionalProperties": false,
				"properties": {
					"sign_up_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time landlord signed up for an account on the platform."
					},
					"number_of_property_listings": {
						"type": "integer",
						"minimum": 0,
						"description": "file:./descriptions/argument_info.shared.json#/rbits_landlord_rbit/number_of_property_listings/description"
					},
					"number_of_properties_rented": {
						"type": "integer",
						"minimum": 0,
						"description": "file:./descriptions/argument_info.shared.json#/rbits_landlord_rbit/number_of_properties_rented/description"
					},
					"is_rental_insured": {
						"type": "boolean",
						"description": "file:./descriptions/argument_info.shared.json#/rbits_landlord_rbit/is_rental_insured/description"
					},
					"risk_score": {
						"type": "integer",
						"minimum": 0,
						"description": "file:./descriptions/argument_info.shared.json#/rbits_landlord_rbit/risk_score/description"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-shared_landlord",
				"description": "Information about the landlord of the property listed in the rental marketplace platform.",
				"example": {
					"landlord": {
						"sign_up_time": 1567958263,
						"number_of_property_listings": 12,
						"number_of_properties_rented": 5,
						"is_rental_insured": true,
						"risk_score": 30
					}
				}
			},
			"v3.1.rc.1.3-shared_property": {
				"x-versions": [
					"v3.1.rc.1.3"
				],
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/address-rbits"
					},
					"listing_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The Unix epoch time (in seconds) when the property is initially listed on the platform."
					},
					"listing_uri": {
						"$ref": "#/components/schemas/uri"
					},
					"managed_by": {
						"enum": [
							"landlord",
							"property_management"
						],
						"type": "string",
						"x-enumDescriptions": {
							"landlord": "The property is managed by landlord directly",
							"property_management": "The propery is managed by a realtor/property management company"
						},
						"description": "Information about property management - if it is directly managed by the landlord or a company."
					},
					"type": {
						"enum": [
							"residential",
							"commercial"
						],
						"type": "string",
						"x-enumDescriptions": {
							"residential": "A living home that is rented by an individual.",
							"commercial": "A commercial space rented/owned by an individual or a company."
						},
						"description": "Type of property that indicates whether it is a residential, commercial space, etc."
					}
				},
				"required": [
					"address"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.3-shared_property",
				"description": "Information about a rented/owned home/commercial property that a payment is made for.",
				"example": {
					"property": {
						"managed_by": "Example",
						"listing_time": 1567958263,
						"listing_uri": "http://Example.com",
						"type": "home_rental",
						"address": {
							"postal_code": "37547",
							"city": "Gardena",
							"country": "US",
							"line1": "6351 Fringilla Avenue",
							"line2": "",
							"region": "CO"
						}
					}
				}
			},
			"v3.1.rc.1.3-shared_rental": {
				"x-versions": [
					"v3.1.rc.1.3"
				],
				"additionalProperties": false,
				"properties": {
					"contract_amount": {
						"$ref": "#/components/schemas/contract_amount"
					},
					"contract_end_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The rental contract end time."
					},
					"contract_start_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The rental contract start time."
					},
					"is_first_payment": {
						"type": "boolean",
						"description": "Indicates if this the first payment of the rental contract."
					},
					"payment_frequency": {
						"enum": [
							"annually",
							"quarterly",
							"monthly",
							"weekly"
						],
						"type": "string",
						"x-enumDescriptions": {
							"annually": "The rent is paid yearly",
							"quarterly": "The rent is paid quarterly",
							"monthly": "The rent is paid monthly",
							"weekly": "The rent is paid weekly"
						},
						"description": "The frequency at which the rent is paid - examples: annually, monthly, weekly, etc."
					},
					"sign_up_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The renter’s time boarded onto the platform indicated by a UNIX timestamp"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-shared_rental",
				"description": "rbit to store rental contract information",
				"example": {
					"rental": {
						"sign_up_time": 1567958263,
						"contract_amount": {
							"amount": 10000,
							"currency": "USD"
						},
						"payment_frequency": "monthly",
						"is_first_payment": true,
						"contract_start_time": 1567958264,
						"contract_end_time": 15679582635
					}
				}
			},
			"v3.1.rc.1.3-pricing_by_currency-create-CAD-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-accounts_CAD_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing_by_currency-create-CAD-v3_1"
			},
			"v3.1.rc.1.3-pricing_by_currency-create-GBP-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing_by_currency-create-GBP-v3_1"
			},
			"v3.1.rc.1.3-pricing_by_currency-create-USD-v3_1": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing_by_currency-create-USD-v3_1"
			},
			"v3.1.rc.1.3-pricing-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-pricing_by_currency-resp-CAD-v3_1"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-pricing_by_currency-resp-GBP-v3_1"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-pricing_by_currency-resp-USD-v3_1"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing-resp-v3_1",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.1.rc.1.3-pricing_by_currency-update-CAD-v3_1": {
				"additionalProperties": false,
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-accounts_id_CAD_blended_request-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction"
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction"
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)"
							}
						},
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing_by_currency-update-CAD-v3_1"
			},
			"v3.1.rc.1.3-pricing_by_currency-update-GBP-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-accounts_id_blended_request-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing_by_currency-update-GBP-v3_1"
			},
			"v3.1.rc.1.3-pricing_by_currency-update-USD-v3_1": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-accounts_id_blended_request-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing_by_currency-update-USD-v3_1"
			},
			"v3.1.rc.1.3-account-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"balances": {
						"additionalProperties": false,
						"properties": {
							"currencies": {
								"additionalProperties": true,
								"properties": {
									"CAD": {
										"additionalProperties": false,
										"properties": {
											"balance": {
												"type": "integer",
												"description": "A sum of payments, in the given currency, currently available for the next payout. Possible values include: `USD`, `CAD`."
											},
											"incoming_pending": {
												"type": "integer",
												"description": "The payment amount received from the payer to be processed or reviewed by WePay."
											},
											"outgoing_pending": {
												"type": "integer",
												"description": "The payout balance being processed or reviewed by WePay."
											},
											"reserve": {
												"type": "integer",
												"description": "Reserved USD balance."
											}
										},
										"type": "object"
									},
									"GBP": {
										"additionalProperties": false,
										"properties": {
											"balance": {
												"type": "integer",
												"description": "A sum of payments, in the given currency, currently available for the next payout. Possible values include: `USD`, `CAD`."
											},
											"incoming_pending": {
												"type": "integer",
												"description": "The payment amount received from the payer to be processed or reviewed by WePay."
											},
											"outgoing_pending": {
												"type": "integer",
												"description": "The payout balance being processed or reviewed by WePay."
											},
											"reserve": {
												"type": "integer",
												"description": "Reserved USD balance."
											}
										},
										"type": "object"
									},
									"USD": {
										"additionalProperties": false,
										"properties": {
											"balance": {
												"type": "integer",
												"description": "A sum of payments, in the given currency, currently available for the next payout. Possible values include: `USD`, `CAD`."
											},
											"incoming_pending": {
												"type": "integer",
												"description": "The payment amount received from the payer to be processed or reviewed by WePay."
											},
											"outgoing_pending": {
												"type": "integer",
												"description": "The payout balance being processed or reviewed by WePay."
											},
											"reserve": {
												"type": "integer",
												"description": "Reserved USD balance."
											}
										},
										"type": "object"
									}
								},
								"type": "object",
								"description": "Payout currency details."
							}
						},
						"type": "object",
						"description": "Displays balances pertaining to the merchant account."
					},
					"beneficiary": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 65535,
						"type": "string",
						"nullable": true,
						"description": "Short description of the merchant account."
					},
					"documents": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"create_time": {
									"$ref": "#/components/schemas/create_time"
								},
								"id": {
									"$ref": "#/components/schemas/id"
								},
								"owner": {
									"$ref": "#/components/schemas/shared_owner_response"
								},
								"path": {
									"type": "string",
									"nullable": true
								},
								"reject_reason": {
									"type": "string",
									"nullable": true
								},
								"resource": {
									"enum": [
										"documents"
									],
									"x-enumDescriptions": {
										"documents": ""
									},
									"type": "string"
								},
								"status": {
									"type": "string",
									"nullable": true
								},
								"type": {
									"enum": [
										"fee_disclosure",
										"invoice",
										"tracking",
										"drivers_license",
										"passport",
										"evidence_of_corporate_registration",
										"evidence_of_authority",
										"current_bank_statement",
										"evidence_of_nonprofit_registration",
										"social_security_card",
										"current_utility_bill",
										"other_government_issued_photo_id",
										"current_lease_contract",
										"birth_certificate",
										"not_applicable",
										"certificate_of_citizenship",
										"permanent_resident_card",
										"employment_authorization_card",
										"benefits_card",
										"social_insurance_number_card",
										"miscellaneous_compliance_doc",
										"business_report",
										"negative_media_searches",
										"person_report",
										"mortgage_statement",
										"certified_copy_of_court_order",
										"current_local_tax_bill",
										"certificate_of_naturalization"
									],
									"x-enumDescriptions": {
										"fee_disclosure": "Indicates that the document uploaded and associated with this account is the fee disclosure presented to the merchant.",
										"invoice": "Indicates that the document uploaded and associated with this account is an invoice presented to the merchant.",
										"tracking": "Indicates that the document uploaded and associated with this account is for general tracking purposes",
										"drivers_license": "Indicates that the document uploaded and associated with this account is the driver's license presented by the merchant.",
										"passport": "Indicates that the document uploaded and associated with this account is the passport presented by the merchant.",
										"evidence_of_corporate_registration": "Indicates that the document uploaded and associated with this account is the evidence of corporate registration presented by the merchant.",
										"evidence_of_authority": "Indicates that the document uploaded and associated with this account is the evidence of authority presented by the merchant.",
										"current_bank_statement": "Indicates that the document uploaded and associated with this account is the current bank statement presented by the merchant.",
										"evidence_of_nonprofit_registration": "Indicates that the document uploaded and associated with this account is the evidence of non profit registration presented by the merchant.",
										"social_security_card": "Indicates that the document uploaded and associated with this account is the social security card presented by the merchant.",
										"current_utility_bill": "Indicates that the document uploaded and associated with this account is the current utility bill presented by the merchant.",
										"other_government_issued_photo_id": "Indicates that the document uploaded and associated with this account is other government issued photo id presented by the merchant.",
										"current_lease_contract": "Indicates that the document uploaded and associated with this account is the current lease contract presented by the merchant.",
										"birth_certificate": "Indicates that the document uploaded and associated with this account is the birth certificate presented by the merchant.",
										"not_applicable": "Indicates that the document uploaded and associated with this account is not applicable.",
										"certificate_of_citizenship": "Indicates that the document uploaded and associated with this account is the certificate of citizenship presented by the merchant.",
										"permanent_resident_card": "Indicates that the document uploaded and associated with this account is the permanent resident card presented by the merchant.",
										"employment_authorization_card": "Indicates that the document uploaded and associated with this account is the employment authorization card presented by the merchant.",
										"benefits_card": "Indicates that the document uploaded and associated with this account is the benefits card presented by the merchant.",
										"social_insurance_number_card": "Indicates that the document uploaded and associated with this account is the social insurance number card presented by the merchant.",
										"miscellaneous_compliance_doc": "Indicates that the document uploaded and associated with this account is the miscellaneous compliance document presented by the merchant.",
										"business_report": "Indicates that the document uploaded and associated with this account is the business report presented by the merchant.",
										"negative_media_searches": "Indicates that the document uploaded and associated with this account is the negative media searches presented by the merchant.",
										"person_report": "Indicates that the document uploaded and associated with this account is the person report presented by the merchant.",
										"mortgage_statement": "Indicates that the document uploaded and associated with this account is the mortgage statement presented by the merchant.",
										"certified_copy_of_court_order": "Indicates that the document uploaded and associated with this account is the certified copy of the court order presented by the merchant.",
										"current_local_tax_bill": "Indicates that the document uploaded and associated with this account is the current local tax bill presented by the merchant.",
										"certificate_of_naturalization": "Indicates that the document uploaded and associated with this account is the certificate of naturalization presented by the merchant."
									},
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"resource",
								"id",
								"path",
								"owner",
								"create_time",
								"type",
								"status",
								"reject_reason"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An array of documents attached to this merchant to verify fee disclosure."
					},
					"id": {
						"$ref": "#/components/schemas/accounts_id"
					},
					"incoming_payments": {
						"$ref": "#/components/schemas/incoming_payments-resp-v3_1"
					},
					"industry": {
						"additionalProperties": false,
						"properties": {
							"category_detail": {
								"maxLength": 1024,
								"type": "string",
								"nullable": true,
								"description": "Details about the merchant's industry category."
							},
							"merchant_category_code": {
								"pattern": "^\\d{4}$",
								"type": "string",
								"description": "Category code associated with the merchant's industry.",
								"nullable": true
							}
						},
						"type": "object",
						"description": "Categorizes the type of service or item a merchant is providing."
					},
					"name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*\\w+.*$",
						"type": "string",
						"nullable": true,
						"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
					},
					"organization": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"maxLength": 500,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The managed account's organization in the partner's hierarchy."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payout": {
						"$ref": "#/components/schemas/payout-resp-v3_1"
					},
					"platform_onboarding_time": {
						"type": "integer",
						"minimum": 0,
						"format": "int64",
						"nullable": true,
						"description": "The Unix epoch time (in seconds) when the account finished onboarding to the platform."
					},
					"pricing": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-pricing-resp-v3_1"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					},
					"statement_description": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"pattern": "^((?![Ww][Ee][Pp][Aa][Yy])[ -~ùûüÿàâæçéèêëïîôœÙÛÜŸÀÆÇÉÈÊËÏÎÔŒ«»‘“”—–€])*$",
						"description": "A non-empty, ASCII-printable string that does **not** contain the word WePay. This will appear on payers' credit card statements. **Note:** The API allows up to 255 characters, but card issuers will only print 12-14 characters on statements. Find more information [here](/clear/onboard-merchants/)."
					},
					"accepted_method_of_payments": {
						"additionalProperties": false,
						"properties": {
							"countries": {
								"additionalProperties": false,
								"properties": {
									"CA": {
										"additionalProperties": false,
										"properties": {
											"american_express": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"se_number": {
																"type": "string",
																"maxLength": 10,
																"minLength": 10
															},
															"transaction_code": {
																"enum": [
																	"conveyed"
																],
																"x-enumDescriptions": {
																	"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
																},
																"type": "string"
															},
															"seller_id": {
																"type": "string"
															}
														},
														"required": [
															"transaction_code",
															"se_number"
														],
														"type": "object"
													}
												},
												"type": "object"
											},
											"apple_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"diners_club": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"discover": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"electronic_check": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"company_name": {
																"type": "string",
																"maxLength": 16,
																"minLength": 1
															},
															"description": {
																"type": "string",
																"maxLength": 10,
																"minLength": 1
															}
														},
														"type": "object",
														"required": [
															"company_name",
															"description"
														]
													}
												},
												"type": "object"
											},
											"google_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"interac": {
												"additionalProperties": false,
												"properties": {
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"debit": {
																		"type": "boolean",
																		"default": true,
																		"description": "The contactless payment functionality of Interac® Debit is also called Interac Flash."
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"jcb": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"master_card": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"visa": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									},
									"US": {
										"additionalProperties": false,
										"properties": {
											"accel": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"american_express": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"se_number": {
																"type": "string",
																"maxLength": 10,
																"minLength": 10
															},
															"transaction_code": {
																"enum": [
																	"conveyed"
																],
																"x-enumDescriptions": {
																	"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
																},
																"type": "string"
															},
															"seller_id": {
																"type": "string"
															}
														},
														"required": [
															"transaction_code",
															"se_number"
														],
														"type": "object"
													}
												},
												"type": "object"
											},
											"apple_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"diners_club": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"discover": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"electronic_check": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"company_name": {
																"type": "string",
																"maxLength": 16,
																"minLength": 1
															},
															"description": {
																"type": "string",
																"maxLength": 10,
																"minLength": 1
															}
														},
														"type": "object",
														"required": [
															"company_name",
															"description"
														]
													}
												},
												"type": "object"
											},
											"google_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"jcb": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"master_card": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"nyce": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"pulse": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"star": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"visa": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						},
						"type": "object",
						"description": "Provide the merchant's identifiers with different card brands they accept as methods of payment."
					},
					"convenience_fee_amount": {
						"type": "integer",
						"nullable": true,
						"minimum": 0,
						"maximum": 9999999,
						"description": "Describe the [convenience fees](/clear/certify/card-network-rules/#convenience-fees) for [Merchant IC+](/pricing/merchant-interchange-plus/) accounts in cents."
					},
					"enhanced_review": {
						"type": "string",
						"nullable": true,
						"description": "Indicates if the account is under enhanced review by WePay."
					},
					"onboarding_location": {
						"additionalProperties": false,
						"properties": {
							"city": {
								"maxLength": 30,
								"type": "string",
								"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							},
							"country": {
								"$ref": "#/components/schemas/country_code"
							},
							"line1": {
								"maxLength": 60,
								"type": "string",
								"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							},
							"postal_code": {
								"maxLength": 14,
								"type": "string",
								"description": "Postal code associated with the address."
							},
							"region": {
								"maxLength": 30,
								"type": "string",
								"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
							},
							"line2": {
								"maxLength": 60,
								"type": "string",
								"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							}
						},
						"required": [
							"line1",
							"city",
							"postal_code",
							"region",
							"country"
						],
						"type": "object",
						"nullable": true,
						"x-isAddress": true,
						"description": "Address of the legal entity, controller, or additional representatives. When representing the entity's address, send the entity's address of operation. When representing the controller or additional representative send the individual's residential address."
					},
					"projected_monthly_transaction_volume": {
						"type": "integer",
						"nullable": true,
						"description": "The projected monthly transaction volume, TPV, of an account."
					},
					"referral_partner": {
						"maxLength": 75,
						"minLength": 1,
						"type": "string",
						"description": "The non ISV partner/solution that refers merchants for payment processing services"
					},
					"transaction_division_mid": {
						"type": "integer",
						"nullable": true,
						"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_division_mid-nullable/description"
					},
					"transaction_type": {
						"type": "string",
						"enum": [
							"internet",
							"retail"
						],
						"x-enumDescriptions": {
							"internet": "The merchant will process card-not-present web transactions.",
							"retail": "The merchant will process card-present transactions."
						},
						"nullable": true,
						"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_type/description"
					}
				},
				"required": [
					"api_version",
					"balances",
					"beneficiary",
					"create_time",
					"custom_data",
					"description",
					"documents",
					"id",
					"incoming_payments",
					"industry",
					"name",
					"owner",
					"path",
					"payout",
					"platform_onboarding_time",
					"pricing",
					"reference_id",
					"resource",
					"statement_description"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.3-account-resp-v3_1"
			},
			"v3.1.rc.1.3-payments-v3_1": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer"
					},
					"amount_disputed": {
						"type": "integer"
					},
					"amount_refunded": {
						"type": "integer"
					},
					"authorization_code": {
						"$ref": "#/components/schemas/cc-authorization_code"
					},
					"capture_at": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"nullable": true
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"id": {
						"$ref": "#/components/schemas/id"
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payment_method": {
						"$ref": "#/components/schemas/payment_method_non_expanded"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payments"
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"failed",
							"canceled"
						],
						"type": "string",
						"x-enumDescriptions": {
							"pending": "This payment is processing, but is not yet included in the account's available or reserve balance. Find more information in the `pending_reasons` structure.",
							"completed": "This payment has finished processing, and is now available in either the account's available or reserved balance. **Note:** A payment can have a completed status and simultaneously have a refund or dispute issued against it.",
							"failed": "This payment has failed to process, and cannot be made available to the merchant. Find more information in the `failure_reason` structure.",
							"canceled": "This payment was canceled. If the cancellation was inadvertent, a new payment will need to be created."
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"auto_capture": {
						"type": "boolean"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"failure_reason": {
						"$ref": "#/components/schemas/payments_failure_reason_response"
					},
					"fee_amount": {
						"type": "integer"
					},
					"fee_amount_refundable": {
						"type": "integer"
					},
					"fee_type": {
						"enum": [
							"rent_surcharge",
							"platform_fee"
						],
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"x-enumDescriptions": {
							"rent_surcharge": "rent surcharge fee type for which collect net income and corresponding taxes for the merchant(landlord), i.e direct tax ONLY on the rent amount(amount - fee_amount)",
							"platform_fee": "platform fee type"
						},
						"type": "string",
						"description": "Specifies the fee type your platform will use to collect fee from the payment."
					},
					"initiated_by": {
						"$ref": "#/components/schemas/initiated_by-resp"
					},
					"order": {
						"$ref": "#/components/schemas/shared_order_response"
					},
					"pending_reasons": {
						"items": {
							"$ref": "#/components/schemas/payments_pending_reasons_response"
						},
						"type": "array",
						"nullable": true
					},
					"txnr_app_fee": {
						"$ref": "#/components/schemas/transaction_record_non_expanded"
					},
					"txnr_merchant": {
						"$ref": "#/components/schemas/transaction_record_non_expanded"
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"status",
					"amount",
					"amount_refunded",
					"amount_disputed",
					"currency",
					"payment_method",
					"reference_id",
					"capture_at",
					"authorization_code"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.3-payments-v3_1"
			},
			"v3.1.rc.1.3-payment_method-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"id": {
						"type": "string",
						"description": "ID of the payment method, generated by WePay when the payment method is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_payment_method_owner_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payment_methods"
					},
					"status": {
						"enum": [
							"unverified",
							"verified",
							"verification_failed",
							"deleted"
						],
						"x-enumDescriptions": {
							"unverified": "This payment method has not been verified yet and cannot be used to create payments until the status updates to `verified`.",
							"verified": "This payment method has successfully been verified and can now be used to create payments.",
							"verification_failed": "Verification attempt(s) for this payment method have failed. If this value returns, the payer should double check their payment details and re-submit them.",
							"deleted": "This payment method has been permanently deleted and cannot be used to create any further payments."
						},
						"type": "string",
						"description": "Possible values include: `deleted`, `unverified`, `verification_failed`, `verified`."
					},
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"encoded_payment_method",
							"google_pay",
							"apple_pay",
							"plaid_processor_token"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						},
						"x-version-enum-values": {
							"apple_pay": {
								"x-versions": [
									"v3.1.rc.1.1"
								]
							},
							"plaid_processor_token": {
								"x-versions": [
									"v3.1.rc.1.3"
								]
							}
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv_provided": {
								"type": "boolean"
							},
							"expiration_month": {
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"description": "The year the credit card expires."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"backing_display_name": {
								"type": "string",
								"nullable": true,
								"description": "The backing display name for the credit card."
							},
							"bin": {
								"type": "string",
								"description": "Bank identification number. The initial six digits of a credit card number. Null is returned if BIN is not available."
							},
							"bin_details": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-bin_details"
							},
							"card_brand": {
								"enum": [
									"visa",
									"mastercard",
									"discover",
									"amex",
									"jcb",
									"diners"
								],
								"x-enumDescriptions": {
									"visa": "",
									"mastercard": "",
									"discover": "",
									"amex": "",
									"jcb": "",
									"diners": ""
								},
								"type": "string",
								"description": "Brand of the credit card. Possible values include: `amex`, `discover`, `diners`, `jcb`, `mastercard`, `visa`."
							},
							"card_entry_type": {
								"enum": [
									"card_keyed",
									"card_emv",
									"card_swiped",
									"card_manual",
									"card_emv_contactless"
								],
								"x-enumDescriptions": {
									"card_keyed": "",
									"card_emv": "",
									"card_swiped": "",
									"card_manual": "",
									"card_emv_contactless": ""
								},
								"type": "string",
								"description": "Possible values include: `card_keyed`, `card_transfer`."
							},
							"card_funding": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"enum": [
									"credit",
									"debit"
								],
								"x-enumDescriptions": {
									"credit": "Determines if Credit Card processing fees are charged to the merchant/payer.",
									"debit": "Determines if Debit Card processing fees are charged to the merchant/payer."
								},
								"type": "string",
								"nullable": true,
								"description": "This field is used to determine which processing fees are charged to the merchant/payer. Possible values include: `credit`, `debit`."
							},
							"display_name": {
								"type": "string",
								"description": "The display name for the credit card."
							},
							"last_four": {
								"type": "string",
								"description": "The last four digits of the credit card number."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"expiration_month",
							"expiration_year",
							"card_on_file",
							"recurring",
							"cvv_provided"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"payment_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
									"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account. **Note:** If you have verified your account via Plaid, this might be the last four numbers of your tokenized bank account number (TAN)."
							}
						},
						"required": [
							"account_type",
							"last_four",
							"account_holder"
						],
						"type": "object",
						"description": "Raw bank account information."
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"type",
					"status"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.3-payment_method-resp-v3_1"
			},
			"v3.1.rc.1.3-embedded-rbits-v3_1": {
				"items": {
					"additionalProperties": false,
					"properties": {
						"receive_time": {
							"type": "integer",
							"format": "int64",
							"minimum": 0,
							"description": "The timestamp the embedded rbit was received indicated by a UNIX timestamp. eg. 1623263544"
						},
						"source": {
							"$ref": "#/components/schemas/rbit-source"
						},
						"type": {
							"$ref": "#/components/schemas/rbit-types-v3_1"
						},
						"address": {
							"$ref": "#/components/schemas/rbits_address"
						},
						"auto_billing": {
							"$ref": "#/components/schemas/shared_auto_billing"
						},
						"business_description": {
							"$ref": "#/components/schemas/shared_business_description"
						},
						"business_name": {
							"$ref": "#/components/schemas/shared_business_name"
						},
						"external_account": {
							"$ref": "#/components/schemas/shared_external_account"
						},
						"fundraising_event": {
							"$ref": "#/components/schemas/shared_fundraising_event"
						},
						"fundraising_update": {
							"$ref": "#/components/schemas/shared_fundraising_update"
						},
						"industry_code": {
							"$ref": "#/components/schemas/shared_industry_code"
						},
						"landlord": {
							"$ref": "#/components/schemas/v3.1.rc.1.3-shared_landlord"
						},
						"mfa": {
							"$ref": "#/components/schemas/shared_mfa"
						},
						"partner_service": {
							"$ref": "#/components/schemas/shared_partner_service"
						},
						"person": {
							"$ref": "#/components/schemas/shared_person"
						},
						"phone": {
							"$ref": "#/components/schemas/shared_rbits_phone"
						},
						"project": {
							"$ref": "#/components/schemas/shared_project"
						},
						"property": {
							"$ref": "#/components/schemas/v3.1.rc.1.3-shared_property"
						},
						"rental": {
							"$ref": "#/components/schemas/v3.1.rc.1.3-shared_rental"
						},
						"revenue": {
							"$ref": "#/components/schemas/shared_revenue"
						},
						"transaction_details": {
							"$ref": "#/components/schemas/shared_transaction_details"
						},
						"website": {
							"$ref": "#/components/schemas/shared_website"
						}
					},
					"required": [
						"receive_time",
						"type",
						"source"
					],
					"type": "object"
				},
				"type": "array",
				"nullable": true,
				"x-label": "v3.1.rc.1.3-embedded-rbits-v3_1",
				"description": "Any rbit data your platform chooses to attach to this resource. The rbit data must be key-value pairs and can be an array of rbit objects."
			},
			"v3.1.rc.1.3-pricing-create-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-pricing_by_currency-create-CAD-v3_1"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-pricing_by_currency-create-GBP-v3_1"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-pricing_by_currency-create-USD-v3_1"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing-create-v3_1",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.1.rc.1.3-pricing-update-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-pricing_by_currency-update-CAD-v3_1"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-pricing_by_currency-update-GBP-v3_1"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-pricing_by_currency-update-USD-v3_1"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1.3-pricing-update-v3_1",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.1.rc.1.3-payment_method_for_payments_v3_1": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_method_id",
							"encoded_payment_method",
							"google_pay",
							"apple_pay",
							"plaid_processor_token"
						],
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_method_id": "This value is required if the `payment_method_id` parameter is being sent after a payment method has already been created.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"x-version-enum-values": {
							"apple_pay": {
								"x-versions": [
									"v3.1.rc.1.1"
								]
							},
							"plaid_processor_token": {
								"x-versions": [
									"v3.1.rc.1.3"
								]
							}
						}
					},
					"apple_pay": {
						"x-versions": [
							"v3.1.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest) received from Apple Pay APIs.",
								"type": "string"
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Apple Pay."
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"bin_details": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-bin_details"
							},
							"card_funding": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"enum": [
									"credit",
									"debit"
								],
								"x-enumDescriptions": {
									"credit": "Determines if Credit Card processing fees are charged to the merchant/payer.",
									"debit": "Determines if Debit Card processing fees are charged to the merchant/payer."
								},
								"type": "string",
								"nullable": true,
								"description": "This field is used to determine which processing fees are charged to the merchant/payer. Possible values include: `credit`, `debit`."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"google_pay": {
						"x-versions": [
							"v3.0.rc.2.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) received from Google Pay APIs.",
								"type": "string"
							},
							"public_key": {
								"type": "string",
								"description": "Public key received from WePay during your application on-boarding."
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Google Pay."
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"payment_method_id": {
						"$ref": "#/components/schemas/id"
					},
					"plaid_processor_token": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/payment_bank_us_holder-req"
							},
							"processor_token": {
								"description": "Holds Plaid verification token on POST /payment_methods request.",
								"type": "string"
							},
							"plaid_account_id": {
								"description": "Optional field which holds the account id of a Plaid verification request when creating a payment method.",
								"type": "string"
							}
						},
						"required": [
							"processor_token",
							"account_holder"
						],
						"type": "object",
						"description": "A Plaid processor token to make Plaid API calls."
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.3-payment_method_for_payments_v3_1",
				"description": "The payment method used to create this payment.**Note:** The payment method's top level data object corresponds with the payment method type. For example, if you set type to `credit_card`, then the payment method's top level data object must be `credit_card`."
			},
			"v3.1.rc.1.3-payment_method-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"encoded_payment_method",
							"google_pay",
							"apple_pay",
							"plaid_processor_token"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						},
						"x-version-enum-values": {
							"apple_pay": {
								"x-versions": [
									"v3.1.rc.1.1"
								]
							},
							"plaid_processor_token": {
								"x-versions": [
									"v3.1.rc.1.3"
								]
							}
						}
					},
					"apple_pay": {
						"x-versions": [
							"v3.1.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest) received from Apple Pay APIs.",
								"type": "string"
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Apple Pay."
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"bin_details": {
								"$ref": "#/components/schemas/v3.1.rc.1.3-bin_details"
							},
							"card_funding": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"enum": [
									"credit",
									"debit"
								],
								"x-enumDescriptions": {
									"credit": "Determines if Credit Card processing fees are charged to the merchant/payer.",
									"debit": "Determines if Debit Card processing fees are charged to the merchant/payer."
								},
								"type": "string",
								"nullable": true,
								"description": "This field is used to determine which processing fees are charged to the merchant/payer. Possible values include: `credit`, `debit`."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"google_pay": {
						"x-versions": [
							"v3.0.rc.2.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) received from Google Pay APIs.",
								"type": "string"
							},
							"public_key": {
								"type": "string",
								"description": "Public key received from WePay during your application on-boarding."
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Google Pay."
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"plaid_processor_token": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/payment_bank_us_holder-req"
							},
							"processor_token": {
								"description": "Holds Plaid verification token on POST /payment_methods request.",
								"type": "string"
							},
							"plaid_account_id": {
								"description": "Optional field which holds the account id of a Plaid verification request when creating a payment method.",
								"type": "string"
							}
						},
						"required": [
							"processor_token",
							"account_holder"
						],
						"type": "object",
						"description": "A Plaid processor token to make Plaid API calls."
					},
					"rbits": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-embedded-rbits-v3_1"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.3-payment_method-req-v3_1"
			},
			"v3.1.rc.1.3-payout_method-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The ID of the payout method, generated by WePay when the payout method is created."
					},
					"path": {
						"type": "string",
						"description": "The path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payout_methods"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the payout method was created."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"nickname": {
						"type": "string",
						"maxLength": 64,
						"minLength": 1,
						"description": "The nickname of the payout method."
					},
					"owner": {
						"$ref": "#/components/schemas/payout_methods_owner_response"
					},
					"paper_check": {
						"additionalProperties": false,
						"properties": {
							"address": {
								"$ref": "#/components/schemas/payout_methods_paper_check_address"
							},
							"memo": {
								"description": "The memo that will be used on the check",
								"type": "string",
								"minLength": 1,
								"maxLength": 70
							}
						},
						"required": [
							"address"
						],
						"description": "Define how to payout a merchant based in the US via paper check. **Note:** Paper checks require permission from WePay, and only US-based merchants can receive payouts via paper check. Reach out to your integration team for further information.",
						"type": "object",
						"x-permission": {
							"type": "can_be_used",
							"phase": "post_token_expansion",
							"partner_config_key_path": "api.v3.payouts.paper_checks_enabled",
							"feature_name": "paper check"
						}
					},
					"payout_bank_ca": {
						"additionalProperties": false,
						"properties": {
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the credit card."
							}
						},
						"required": [
							"account_type",
							"last_four"
						],
						"type": "object",
						"description": "Contains parameters relevant to the payout method."
					},
					"payout_bank_gb": {
						"additionalProperties": false,
						"properties": {
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account."
							}
						},
						"required": [
							"last_four"
						],
						"type": "object",
						"description": "Contains parameters relevant to the payout method."
					},
					"payout_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account."
							}
						},
						"required": [
							"account_type",
							"last_four"
						],
						"type": "object",
						"description": "Contains parameters relevant to the payout method."
					},
					"type": {
						"enum": [
							"payout_bank_ca",
							"payout_bank_gb",
							"payout_bank_us",
							"paper_check"
						],
						"x-enumDescriptions": {
							"payout_bank_ca": "Bank account in Canada.",
							"payout_bank_gb": "Bank account in the UK (not currently supported).",
							"payout_bank_us": "Bank account in the US.",
							"paper_check": "Paper check delivered to an address in the US."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Possible values: `payout_bank_ca`, `payout_bank_us` and `payout_bank_gb`. **Note:** The `paper_check` option requires permission from WePay to use. Reach out to your integration team for assistance."
					},
					"status": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"enum": [
							"active",
							"verified",
							"unverified",
							"pending_verification",
							"disabled",
							"deleted"
						],
						"x-enumDescriptions": {
							"active": "This payout method is active, so it can be queried via the APIs and used as a merchant's payout method.",
							"verified": "This payout method has successfully been verified and can now be used to create payouts.",
							"unverified": "This payout method has not been verified yet and cannot be used to create payouts until the status updates to `verified`.",
							"pending_verification": "This payout method is waiting on micro deposits confirmation and cannot be used to create payouts until the status updates to `verified`",
							"disabled": "Due to three (3) failed attempts to send payouts to this payout method, it has been disabled. Find more information on the failed payouts by examining the `failure_reason` [object](/api/latest/operation/GET_payouts-id/#!c=200&path=failure_reason&t=response) of the payout resource. Note that disabled payout methods cannot be queried via the APIs or used as a merchant's payout method.",
							"deleted": "This payout method has been deleted, so it cannot be queried via the APIs or used as a merchant's payout method. If the payout method was being used as an account's payout method, a new payout method must be provided before the account's payout capability will be enabled again."
						},
						"type": "string",
						"description": "Describes the status of the payout method. Possible values include: `active`, `verified`, `unverified`, `pending_verification`, `disabled`, and `deleted`"
					}
				},
				"required": [
					"resource",
					"id",
					"path"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.3-payout_method-resp-v3_1"
			},
			"v3.1.rc.1.3-payments-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"description": "Merchant's account id associated with the payment."
					},
					"amount": {
						"minimum": 100,
						"type": "integer",
						"description": "Amount in the lowest denomination. For example, $1.00 is represented as 100. This applies to all currencies WePay supports."
					},
					"currency": {
						"$ref": "#/components/schemas/permissioned-currency"
					},
					"payment_method": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-payment_method_for_payments_v3_1"
					},
					"auto_capture": {
						"type": "boolean",
						"description": "For payments with a credit card payment method, set to `false` to create a delayed-capture payment. Capture the payment within 7 days with the [POST /payments/{id}/capture](/api/latest/operation/POST_payments-id-capture/) endpoint. Alternatively, cancel the payment with the [POST /payments/{id}/cancel](/api/latest/operation/POST_payments-id-cancel/) endpoint."
					},
					"capture_at": {
						"type": "integer",
						"nullable": true,
						"description": "Designate the time at which this payment will capture using a UNIX epoch timestamp. The capture time cannot be more than 7 days in the future. Note that epoch timestamps use the UTC timezone."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"fee_amount": {
						"minimum": 0,
						"type": "integer",
						"description": "Specifies the fee amount your platform will collect from the payment. The amount should be in the lowest denomination. For example, $1.00 is represented as 100. This applies to all currencies WePay supports. Note: The upper limit for the fee amount is 20% of the payment. If this field is blank and the merchant is on blended pricing, $0 will be debited from the merchant and credited to your platform account, but WePay’s fees will still be debited from your platform account. Remember to appropriately [calculate fees](/clear/process-payments/#calculate-fees). Payments for merchants on [MIC+](/pricing/merchant-interchange-plus/) should leave this field blank as fees are assessed monthly rather than per transaction. If any number other than 0 is passed it will be ignored, and 0 will be applied and returned."
					},
					"fee_type": {
						"enum": [
							"rent_surcharge",
							"platform_fee"
						],
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"type": "string",
						"x-enumDescriptions": {
							"rent_surcharge": "rent surcharge fee type for which collect net income and corresponding taxes for the merchant(landlord), i.e direct tax ONLY on the rent amount(amount - fee_amount)",
							"platform_fee": "platform fee type"
						},
						"description": "Specifies the fee type your platform will use to collect fee from the payment."
					},
					"initiated_by": {
						"$ref": "#/components/schemas/initiated_by-req"
					},
					"order": {
						"$ref": "#/components/schemas/payments_order_request"
					},
					"order_id": {
						"$ref": "#/components/schemas/id-order"
					},
					"rbits": {
						"$ref": "#/components/schemas/v3.1.rc.1.3-embedded-rbits-v3_1"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					}
				},
				"required": [
					"amount",
					"currency",
					"account_id",
					"payment_method"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.3-payments-req-v3_1"
			},
			"v3.1.rc.1.3-payout_methods_create_data-v3_1": {
				"additionalProperties": false,
				"properties": {
					"legal_entity_id": {
						"$ref": "#/components/schemas/id"
					},
					"nickname": {
						"type": "string",
						"maxLength": 64,
						"minLength": 1
					},
					"type": {
						"enum": [
							"payout_bank_ca",
							"payout_bank_gb",
							"payout_bank_us",
							"paper_check",
							"plaid_processor_token"
						],
						"x-enumDescriptions": {
							"payout_bank_ca": "Bank account in Canada.",
							"payout_bank_gb": "Bank account in the UK (not currently supported).",
							"payout_bank_us": "Bank account in the US.",
							"paper_check": "Paper check delivered to an address in the US.",
							"plaid_processor_token": "Token used by WePay to communicate with Plaid and retrieve bank account information from Plaid."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Possible values: `payout_bank_ca`, `payout_bank_us` and `payout_bank_gb`. **Note:** The `paper_check` option requires permission from WePay to use. Reach out to your integration team for assistance."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"paper_check": {
						"additionalProperties": false,
						"properties": {
							"address": {
								"$ref": "#/components/schemas/payout_methods_paper_check_address"
							},
							"memo": {
								"description": "The memo that will be used on the check",
								"type": "string",
								"minLength": 1,
								"maxLength": 70
							}
						},
						"required": [
							"address"
						],
						"description": "Define how to payout a merchant based in the US via paper check. **Note:** Paper checks require permission from WePay, and only US-based merchants can receive payouts via paper check. Reach out to your integration team for further information.",
						"type": "object",
						"x-permission": {
							"type": "can_be_used",
							"phase": "post_token_expansion",
							"partner_config_key_path": "api.v3.payouts.paper_checks_enabled",
							"feature_name": "paper check"
						}
					},
					"payout_bank_ca": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"pattern": "^[0-9]{5,17}$",
								"type": "string"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"institution_number": {
								"pattern": "^[0-9]{3}$",
								"type": "string"
							},
							"transit_number": {
								"pattern": "^[0-9]{5}$",
								"type": "string"
							}
						},
						"required": [
							"transit_number",
							"institution_number",
							"account_number",
							"account_type"
						],
						"type": "object"
					},
					"payout_bank_gb": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"pattern": "^[0-9]{8}$",
								"type": "string"
							},
							"sort_code": {
								"pattern": "^[0-9]{6}$",
								"type": "string"
							}
						},
						"required": [
							"sort_code",
							"account_number"
						],
						"type": "object"
					},
					"payout_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"$ref": "#/components/schemas/us_bank_account_number"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"routing_number": {
								"$ref": "#/components/schemas/us_bank_routing_number"
							}
						},
						"required": [
							"routing_number",
							"account_number",
							"account_type"
						],
						"type": "object"
					},
					"plaid_processor_token": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"processor_token": {
								"description": "Holds Plaid verification token on POST /payout_methods request.",
								"type": "string"
							},
							"plaid_account_id": {
								"description": "Optional field which holds the account ID of a Plaid verification request when creating a payout method.",
								"type": "string"
							}
						},
						"required": [
							"processor_token"
						],
						"type": "object",
						"description": "A Plaid processor token to make Plaid API calls."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"legal_entity_id",
					"nickname",
					"type"
				],
				"type": "object",
				"x-label": "v3.1.rc.1.3-payout_methods_create_data-v3_1"
			},
			"v3.1.rc.1-accounts_CAD_blended-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-accounts_CAD_blended-v3_1",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"v3.1.rc.1-accounts_blended-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"american_express"
						]
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"tier_1": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_2": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_3": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_4": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							},
							"tier_5": {
								"$ref": "#/components/schemas/accounts_tier-v3_1"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"tier_1"
						]
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-accounts_blended-v3_1",
				"description": "The blended pricing model to collect platform fees.",
				"required": [
					"credit_card"
				]
			},
			"v3.1.rc.1-pricing_by_currency-resp-CAD-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1-accounts_CAD_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing_by_currency-resp-CAD-v3_1"
			},
			"v3.1.rc.1-pricing_by_currency-resp-GBP-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1-accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing_by_currency-resp-GBP-v3_1"
			},
			"v3.1.rc.1-pricing_by_currency-resp-USD-v3_1": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1-accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing_by_currency-resp-USD-v3_1"
			},
			"v3.1.rc.1-accounts_id_CAD_blended_request-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction"
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction"
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)"
							}
						},
						"type": "object",
						"nullable": true
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request-v3_1"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-accounts_id_CAD_blended_request-v3_1",
				"description": "The blended pricing model to collect platform fees."
			},
			"v3.1.rc.1-accounts_id_blended_request-v3_1": {
				"additionalProperties": false,
				"properties": {
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"american_express": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Credit card type: American Express."
							},
							"chargeback_fee_amount": {
								"type": "integer",
								"nullable": true,
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									},
									"manual_input": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is manual input."
									}
								},
								"type": "object",
								"nullable": true,
								"description": "Default credit card brand, Possible values can be `visa`, `mastercard` or `discover`."
							}
						},
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"ach_return_fee": {
								"type": "integer",
								"minimum": 0,
								"description": "Set a fixed amount to charge merchants per ACH return, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02. An ACH return happens when an eCheck/ACH payment fails (possibly due to insufficient bank funds, decline by bank, etc.)",
								"nullable": true
							},
							"tier_1": {
								"$ref": "#/components/schemas/accounts_id_tier_request-v3_1"
							},
							"tier_2": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_3": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_4": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							},
							"tier_5": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"upper_threshold_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The value of upper threshold.",
										"example": 999999999
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The tier pricing model to collect platform fees when the payment method is a payment bank.",
								"nullable": true
							}
						},
						"type": "object",
						"nullable": true
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-accounts_id_blended_request-v3_1",
				"description": "The blended pricing model to collect platform fees."
			},
			"v3.1.rc.1-bin_details": {
				"additionalProperties": false,
				"properties": {
					"is_giftcard": {
						"type": "boolean",
						"default": false,
						"description": "Indicates whether the card is a gift card or not.",
						"nullable": true
					},
					"is_prepaid": {
						"type": "boolean",
						"default": false,
						"description": "Indicates whether the card is pre-paid or not.",
						"nullable": true
					}
				},
				"x-versions": [
					"v3.1.rc.1.3"
				],
				"type": "object",
				"description": "Bank Identification Number details of the funding card.",
				"x-label": "v3.1.rc.1-bin_details"
			},
			"v3.1.rc.1-shared_landlord": {
				"x-versions": [
					"v3.1.rc.1.3"
				],
				"additionalProperties": false,
				"properties": {
					"sign_up_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time landlord signed up for an account on the platform."
					},
					"number_of_property_listings": {
						"type": "integer",
						"minimum": 0,
						"description": "file:./descriptions/argument_info.shared.json#/rbits_landlord_rbit/number_of_property_listings/description"
					},
					"number_of_properties_rented": {
						"type": "integer",
						"minimum": 0,
						"description": "file:./descriptions/argument_info.shared.json#/rbits_landlord_rbit/number_of_properties_rented/description"
					},
					"is_rental_insured": {
						"type": "boolean",
						"description": "file:./descriptions/argument_info.shared.json#/rbits_landlord_rbit/is_rental_insured/description"
					},
					"risk_score": {
						"type": "integer",
						"minimum": 0,
						"description": "file:./descriptions/argument_info.shared.json#/rbits_landlord_rbit/risk_score/description"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-shared_landlord",
				"description": "Information about the landlord of the property listed in the rental marketplace platform.",
				"example": {
					"landlord": {
						"sign_up_time": 1567958263,
						"number_of_property_listings": 12,
						"number_of_properties_rented": 5,
						"is_rental_insured": true,
						"risk_score": 30
					}
				}
			},
			"v3.1.rc.1-shared_property": {
				"x-versions": [
					"v3.1.rc.1.3"
				],
				"additionalProperties": false,
				"properties": {
					"address": {
						"$ref": "#/components/schemas/address-rbits"
					},
					"listing_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The Unix epoch time (in seconds) when the property is initially listed on the platform."
					},
					"listing_uri": {
						"$ref": "#/components/schemas/uri"
					},
					"managed_by": {
						"enum": [
							"landlord",
							"property_management"
						],
						"type": "string",
						"x-enumDescriptions": {
							"landlord": "The property is managed by landlord directly",
							"property_management": "The propery is managed by a realtor/property management company"
						},
						"description": "Information about property management - if it is directly managed by the landlord or a company."
					},
					"type": {
						"enum": [
							"residential",
							"commercial"
						],
						"type": "string",
						"x-enumDescriptions": {
							"residential": "A living home that is rented by an individual.",
							"commercial": "A commercial space rented/owned by an individual or a company."
						},
						"description": "Type of property that indicates whether it is a residential, commercial space, etc."
					}
				},
				"required": [
					"address"
				],
				"type": "object",
				"x-label": "v3.1.rc.1-shared_property",
				"description": "Information about a rented/owned home/commercial property that a payment is made for.",
				"example": {
					"property": {
						"managed_by": "Example",
						"listing_time": 1567958263,
						"listing_uri": "http://Example.com",
						"type": "home_rental",
						"address": {
							"postal_code": "37547",
							"city": "Gardena",
							"country": "US",
							"line1": "6351 Fringilla Avenue",
							"line2": "",
							"region": "CO"
						}
					}
				}
			},
			"v3.1.rc.1-shared_rental": {
				"x-versions": [
					"v3.1.rc.1.3"
				],
				"additionalProperties": false,
				"properties": {
					"contract_amount": {
						"$ref": "#/components/schemas/contract_amount"
					},
					"contract_end_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The rental contract end time."
					},
					"contract_start_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The rental contract start time."
					},
					"is_first_payment": {
						"type": "boolean",
						"description": "Indicates if this the first payment of the rental contract."
					},
					"payment_frequency": {
						"enum": [
							"annually",
							"quarterly",
							"monthly",
							"weekly"
						],
						"type": "string",
						"x-enumDescriptions": {
							"annually": "The rent is paid yearly",
							"quarterly": "The rent is paid quarterly",
							"monthly": "The rent is paid monthly",
							"weekly": "The rent is paid weekly"
						},
						"description": "The frequency at which the rent is paid - examples: annually, monthly, weekly, etc."
					},
					"sign_up_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The renter’s time boarded onto the platform indicated by a UNIX timestamp"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-shared_rental",
				"description": "rbit to store rental contract information",
				"example": {
					"rental": {
						"sign_up_time": 1567958263,
						"contract_amount": {
							"amount": 10000,
							"currency": "USD"
						},
						"payment_frequency": "monthly",
						"is_first_payment": true,
						"contract_start_time": 1567958264,
						"contract_end_time": 15679582635
					}
				}
			},
			"v3.1.rc.1-pricing_by_currency-create-CAD-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1-accounts_CAD_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)",
								"required": [
									"insert_or_swipe",
									"contactless"
								]
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands",
							"interac"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing_by_currency-create-CAD-v3_1"
			},
			"v3.1.rc.1-pricing_by_currency-create-GBP-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1-accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing_by_currency-create-GBP-v3_1"
			},
			"v3.1.rc.1-pricing_by_currency-create-USD-v3_1": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1-accounts_blended-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline.",
										"required": [
											"fixed_fee_markup_amount"
										]
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees.",
								"required": [
									"transaction"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present.",
										"required": [
											"fixed_fee_markup_amount",
											"variable_fee_markup_bps"
										]
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true,
						"required": [
							"chargeback_fee_amount",
							"default_brands"
						]
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank.",
								"required": [
									"fixed_fee_amount",
									"variable_fee_bps",
									"max_fee_amount",
									"min_fee_amount"
								]
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing_by_currency-create-USD-v3_1"
			},
			"v3.1.rc.1-pricing-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.1.rc.1-pricing_by_currency-resp-CAD-v3_1"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.1.rc.1-pricing_by_currency-resp-GBP-v3_1"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.1.rc.1-pricing_by_currency-resp-USD-v3_1"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing-resp-v3_1",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.1.rc.1-pricing_by_currency-update-CAD-v3_1": {
				"additionalProperties": false,
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in Canada.",
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1-accounts_id_CAD_blended_request-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							},
							"interac": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"contactless": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for contactless interaction"
									},
									"insert_or_swipe": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "Describe fixed and variable fees to charge merchants per card-present transaction for the insert or swipe interaction"
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with Interac (CAD only)"
							}
						},
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.CAD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing_by_currency-update-CAD-v3_1"
			},
			"v3.1.rc.1-pricing_by_currency-update-GBP-v3_1": {
				"description": "The Merchant IC+ pricing model is not currently supported for merchants based in the UK.",
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1-accounts_id_blended_request-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.GBP.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing_by_currency-update-GBP-v3_1"
			},
			"v3.1.rc.1-pricing_by_currency-update-USD-v3_1": {
				"additionalProperties": false,
				"properties": {
					"blended": {
						"$ref": "#/components/schemas/v3.1.rc.1-accounts_id_blended_request-v3_1"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"interchange_plus"
								],
								"x-enumDescriptions": {
									"interchange_plus": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.credit_card",
									"feature_name": "pricing type"
								}
							},
							"interchange_plus": {
								"additionalProperties": false,
								"properties": {
									"auth": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Set a fixed amount to charge merchants per credit card authorization attempt, regardless of down-stream approval or decline. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed fees to charge merchants per authorization, regardless of success or decline."
									},
									"chargeback_amount": {
										"type": "integer",
										"nullable": true,
										"minimum": 0,
										"description": "A fixed amount to charge the merchant per credit card chargeback they receive, defined by the Partner."
									},
									"refund_fee_for_transaction_markup": {
										"type": "boolean",
										"default": true,
										"description": "Flag to charge Merchant IC+ merchants for refund. If set to true, merchants are charged the fixed markup (the value of `transaction.fixed_fee_markup_amount`) of the original transaction per refund."
									},
									"transaction": {
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"nullable": true,
										"description": "Describe fixed and variable fees to charge merchants per transaction."
									}
								},
								"type": "object",
								"description": "The interchange plus pricing model for credit cards to collect platform markup fees."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"debit_card": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"chargeback_fee_amount": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"type": "integer",
								"minimum": 0,
								"description": "A fixed amount to charge the merchant per debit card chargeback they receive, defined by the Partner."
							},
							"default_brands": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"additionalProperties": false,
								"properties": {
									"card_not_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card not present."
									},
									"card_present": {
										"x-versions": [
											"v3.1.rc.1.3"
										],
										"additionalProperties": false,
										"properties": {
											"fixed_fee_markup_amount": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 200,
												"description": "Define a fixed dollar amount to charge per transaction. This integer value describes the fee in cents, so a value of `2` describes $0.02."
											},
											"variable_fee_markup_bps": {
												"x-versions": [
													"v3.1.rc.1.3"
												],
												"type": "integer",
												"minimum": 0,
												"maximum": 500,
												"description": "Basis points to calculate variable markup fee amount. Basis points translate directly to percent, so a value of `20` here will be calculated as 0.2%, this percentage is charged per transaction."
											}
										},
										"type": "object",
										"description": "The pricing model to collect platform fees when the payment method is card present."
									}
								},
								"type": "object",
								"description": "Use this model to describe platform fees associated with all card brands except Interac"
							}
						},
						"type": "object",
						"nullable": true
					},
					"other_fees": {
						"$ref": "#/components/schemas/other_fees-v3_1"
					},
					"payment_bank": {
						"additionalProperties": false,
						"properties": {
							"type": {
								"enum": [
									"standard"
								],
								"x-enumDescriptions": {
									"standard": ""
								},
								"type": "string",
								"x-isOneOfKey": true,
								"x-permission": {
									"type": "can_have_value",
									"phase": "post_token_expansion",
									"partner_config_key_path": "merchant_settings.pricing.USD.payment_bank",
									"feature_name": "pricing type"
								}
							},
							"standard": {
								"additionalProperties": false,
								"properties": {
									"fixed_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"maximum": 5000,
										"description": "The fixed fee amount.",
										"example": 50
									},
									"max_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The maximum value of total fee amount.",
										"example": 1000
									},
									"min_fee_amount": {
										"type": "integer",
										"minimum": 0,
										"description": "The minimum value of total fee amount.",
										"example": 100
									},
									"refund_fee_for_standard": {
										"type": "boolean",
										"description": "Flag to charge Merchant IC+ merchants refunds against ACH/eCheck transactions. If set to `true`, merchants are charged the `fixed_fee_amount` of the original transaction per refund."
									},
									"variable_fee_bps": {
										"type": "integer",
										"minimum": 0,
										"maximum": 500,
										"description": "The basis points to calculate variable fee amount.",
										"example": 500
									}
								},
								"type": "object",
								"description": "The standard pricing model to collect platform fees when the payment method is a payment bank."
							}
						},
						"required": [
							"type"
						],
						"type": "object",
						"nullable": true
					},
					"pricing_type": {
						"enum": [
							"blended"
						],
						"x-enumDescriptions": {
							"blended": ""
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"recurring_fee": {
						"additionalProperties": false,
						"properties": {
							"amount": {
								"description": "Describe the amount of fees to be charged at each interval.",
								"example": 1500,
								"type": "integer",
								"minimum": 0
							},
							"period": {
								"description": "Describe the interval as which recurring fees should be charged.",
								"type": "string",
								"enum": [
									"monthly"
								],
								"x-enumDescriptions": {
									"monthly": ""
								}
							}
						},
						"required": [
							"period",
							"amount"
						],
						"type": "object",
						"nullable": true,
						"description": "Describe any regularly recurring fees charged to the merchant by your platform. These are typically fees charged for services rendered by your platform. **This fee is only to be charged while the merchant is active on your platform. You must provide merchants a method to close their account and stop incurring this fee.**"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing_by_currency-update-USD-v3_1"
			},
			"v3.1.rc.1-account-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"balances": {
						"additionalProperties": false,
						"properties": {
							"currencies": {
								"additionalProperties": true,
								"properties": {
									"CAD": {
										"additionalProperties": false,
										"properties": {
											"balance": {
												"type": "integer",
												"description": "A sum of payments, in the given currency, currently available for the next payout. Possible values include: `USD`, `CAD`."
											},
											"incoming_pending": {
												"type": "integer",
												"description": "The payment amount received from the payer to be processed or reviewed by WePay."
											},
											"outgoing_pending": {
												"type": "integer",
												"description": "The payout balance being processed or reviewed by WePay."
											},
											"reserve": {
												"type": "integer",
												"description": "Reserved USD balance."
											}
										},
										"type": "object"
									},
									"GBP": {
										"additionalProperties": false,
										"properties": {
											"balance": {
												"type": "integer",
												"description": "A sum of payments, in the given currency, currently available for the next payout. Possible values include: `USD`, `CAD`."
											},
											"incoming_pending": {
												"type": "integer",
												"description": "The payment amount received from the payer to be processed or reviewed by WePay."
											},
											"outgoing_pending": {
												"type": "integer",
												"description": "The payout balance being processed or reviewed by WePay."
											},
											"reserve": {
												"type": "integer",
												"description": "Reserved USD balance."
											}
										},
										"type": "object"
									},
									"USD": {
										"additionalProperties": false,
										"properties": {
											"balance": {
												"type": "integer",
												"description": "A sum of payments, in the given currency, currently available for the next payout. Possible values include: `USD`, `CAD`."
											},
											"incoming_pending": {
												"type": "integer",
												"description": "The payment amount received from the payer to be processed or reviewed by WePay."
											},
											"outgoing_pending": {
												"type": "integer",
												"description": "The payout balance being processed or reviewed by WePay."
											},
											"reserve": {
												"type": "integer",
												"description": "Reserved USD balance."
											}
										},
										"type": "object"
									}
								},
								"type": "object",
								"description": "Payout currency details."
							}
						},
						"type": "object",
						"description": "Displays balances pertaining to the merchant account."
					},
					"beneficiary": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"description": {
						"maxLength": 65535,
						"type": "string",
						"nullable": true,
						"description": "Short description of the merchant account."
					},
					"documents": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"create_time": {
									"$ref": "#/components/schemas/create_time"
								},
								"id": {
									"$ref": "#/components/schemas/id"
								},
								"owner": {
									"$ref": "#/components/schemas/shared_owner_response"
								},
								"path": {
									"type": "string",
									"nullable": true
								},
								"reject_reason": {
									"type": "string",
									"nullable": true
								},
								"resource": {
									"enum": [
										"documents"
									],
									"x-enumDescriptions": {
										"documents": ""
									},
									"type": "string"
								},
								"status": {
									"type": "string",
									"nullable": true
								},
								"type": {
									"enum": [
										"fee_disclosure",
										"invoice",
										"tracking",
										"drivers_license",
										"passport",
										"evidence_of_corporate_registration",
										"evidence_of_authority",
										"current_bank_statement",
										"evidence_of_nonprofit_registration",
										"social_security_card",
										"current_utility_bill",
										"other_government_issued_photo_id",
										"current_lease_contract",
										"birth_certificate",
										"not_applicable",
										"certificate_of_citizenship",
										"permanent_resident_card",
										"employment_authorization_card",
										"benefits_card",
										"social_insurance_number_card",
										"miscellaneous_compliance_doc",
										"business_report",
										"negative_media_searches",
										"person_report",
										"mortgage_statement",
										"certified_copy_of_court_order",
										"current_local_tax_bill",
										"certificate_of_naturalization"
									],
									"x-enumDescriptions": {
										"fee_disclosure": "Indicates that the document uploaded and associated with this account is the fee disclosure presented to the merchant.",
										"invoice": "Indicates that the document uploaded and associated with this account is an invoice presented to the merchant.",
										"tracking": "Indicates that the document uploaded and associated with this account is for general tracking purposes",
										"drivers_license": "Indicates that the document uploaded and associated with this account is the driver's license presented by the merchant.",
										"passport": "Indicates that the document uploaded and associated with this account is the passport presented by the merchant.",
										"evidence_of_corporate_registration": "Indicates that the document uploaded and associated with this account is the evidence of corporate registration presented by the merchant.",
										"evidence_of_authority": "Indicates that the document uploaded and associated with this account is the evidence of authority presented by the merchant.",
										"current_bank_statement": "Indicates that the document uploaded and associated with this account is the current bank statement presented by the merchant.",
										"evidence_of_nonprofit_registration": "Indicates that the document uploaded and associated with this account is the evidence of non profit registration presented by the merchant.",
										"social_security_card": "Indicates that the document uploaded and associated with this account is the social security card presented by the merchant.",
										"current_utility_bill": "Indicates that the document uploaded and associated with this account is the current utility bill presented by the merchant.",
										"other_government_issued_photo_id": "Indicates that the document uploaded and associated with this account is other government issued photo id presented by the merchant.",
										"current_lease_contract": "Indicates that the document uploaded and associated with this account is the current lease contract presented by the merchant.",
										"birth_certificate": "Indicates that the document uploaded and associated with this account is the birth certificate presented by the merchant.",
										"not_applicable": "Indicates that the document uploaded and associated with this account is not applicable.",
										"certificate_of_citizenship": "Indicates that the document uploaded and associated with this account is the certificate of citizenship presented by the merchant.",
										"permanent_resident_card": "Indicates that the document uploaded and associated with this account is the permanent resident card presented by the merchant.",
										"employment_authorization_card": "Indicates that the document uploaded and associated with this account is the employment authorization card presented by the merchant.",
										"benefits_card": "Indicates that the document uploaded and associated with this account is the benefits card presented by the merchant.",
										"social_insurance_number_card": "Indicates that the document uploaded and associated with this account is the social insurance number card presented by the merchant.",
										"miscellaneous_compliance_doc": "Indicates that the document uploaded and associated with this account is the miscellaneous compliance document presented by the merchant.",
										"business_report": "Indicates that the document uploaded and associated with this account is the business report presented by the merchant.",
										"negative_media_searches": "Indicates that the document uploaded and associated with this account is the negative media searches presented by the merchant.",
										"person_report": "Indicates that the document uploaded and associated with this account is the person report presented by the merchant.",
										"mortgage_statement": "Indicates that the document uploaded and associated with this account is the mortgage statement presented by the merchant.",
										"certified_copy_of_court_order": "Indicates that the document uploaded and associated with this account is the certified copy of the court order presented by the merchant.",
										"current_local_tax_bill": "Indicates that the document uploaded and associated with this account is the current local tax bill presented by the merchant.",
										"certificate_of_naturalization": "Indicates that the document uploaded and associated with this account is the certificate of naturalization presented by the merchant."
									},
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"resource",
								"id",
								"path",
								"owner",
								"create_time",
								"type",
								"status",
								"reject_reason"
							],
							"type": "object"
						},
						"type": "array",
						"description": "An array of documents attached to this merchant to verify fee disclosure."
					},
					"id": {
						"$ref": "#/components/schemas/accounts_id"
					},
					"incoming_payments": {
						"$ref": "#/components/schemas/incoming_payments-resp-v3_1"
					},
					"industry": {
						"additionalProperties": false,
						"properties": {
							"category_detail": {
								"maxLength": 1024,
								"type": "string",
								"nullable": true,
								"description": "Details about the merchant's industry category."
							},
							"merchant_category_code": {
								"pattern": "^\\d{4}$",
								"type": "string",
								"description": "Category code associated with the merchant's industry.",
								"nullable": true
							}
						},
						"type": "object",
						"description": "Categorizes the type of service or item a merchant is providing."
					},
					"name": {
						"maxLength": 255,
						"minLength": 1,
						"pattern": "^(?!.*[Ww][Ee][Pp][Aa][Yy]).*\\w+.*$",
						"type": "string",
						"nullable": true,
						"description": "Name of the merchant account; use the \"Doing Business As\" title for the merchant. Must not contain the word `wepay`. **Note:** Account names can include any regex word character."
					},
					"organization": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"maxLength": 500,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"description": "The managed account's organization in the partner's hierarchy."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_legal_entity_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payout": {
						"$ref": "#/components/schemas/payout-resp-v3_1"
					},
					"platform_onboarding_time": {
						"type": "integer",
						"minimum": 0,
						"format": "int64",
						"nullable": true,
						"description": "The Unix epoch time (in seconds) when the account finished onboarding to the platform."
					},
					"pricing": {
						"$ref": "#/components/schemas/v3.1.rc.1-pricing-resp-v3_1"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-accounts"
					},
					"statement_description": {
						"maxLength": 255,
						"minLength": 1,
						"type": "string",
						"nullable": true,
						"pattern": "^((?![Ww][Ee][Pp][Aa][Yy])[ -~ùûüÿàâæçéèêëïîôœÙÛÜŸÀÆÇÉÈÊËÏÎÔŒ«»‘“”—–€])*$",
						"description": "A non-empty, ASCII-printable string that does **not** contain the word WePay. This will appear on payers' credit card statements. **Note:** The API allows up to 255 characters, but card issuers will only print 12-14 characters on statements. Find more information [here](/clear/onboard-merchants/)."
					},
					"accepted_method_of_payments": {
						"additionalProperties": false,
						"properties": {
							"countries": {
								"additionalProperties": false,
								"properties": {
									"CA": {
										"additionalProperties": false,
										"properties": {
											"american_express": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"se_number": {
																"type": "string",
																"maxLength": 10,
																"minLength": 10
															},
															"transaction_code": {
																"enum": [
																	"conveyed"
																],
																"x-enumDescriptions": {
																	"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
																},
																"type": "string"
															},
															"seller_id": {
																"type": "string"
															}
														},
														"required": [
															"transaction_code",
															"se_number"
														],
														"type": "object"
													}
												},
												"type": "object"
											},
											"apple_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"diners_club": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"discover": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"electronic_check": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"company_name": {
																"type": "string",
																"maxLength": 16,
																"minLength": 1
															},
															"description": {
																"type": "string",
																"maxLength": 10,
																"minLength": 1
															}
														},
														"type": "object",
														"required": [
															"company_name",
															"description"
														]
													}
												},
												"type": "object"
											},
											"google_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"interac": {
												"additionalProperties": false,
												"properties": {
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"debit": {
																		"type": "boolean",
																		"default": true,
																		"description": "The contactless payment functionality of Interac® Debit is also called Interac Flash."
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"jcb": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"master_card": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"visa": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									},
									"US": {
										"additionalProperties": false,
										"properties": {
											"accel": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"american_express": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"se_number": {
																"type": "string",
																"maxLength": 10,
																"minLength": 10
															},
															"transaction_code": {
																"enum": [
																	"conveyed"
																],
																"x-enumDescriptions": {
																	"conveyed": "Transactions through AmEx methods of payment must be conveyed (i.e. settled outside of WePay)."
																},
																"type": "string"
															},
															"seller_id": {
																"type": "string"
															}
														},
														"required": [
															"transaction_code",
															"se_number"
														],
														"type": "object"
													}
												},
												"type": "object"
											},
											"apple_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"diners_club": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"discover": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"electronic_check": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"configurations": {
														"additionalProperties": false,
														"properties": {
															"company_name": {
																"type": "string",
																"maxLength": 16,
																"minLength": 1
															},
															"description": {
																"type": "string",
																"maxLength": 10,
																"minLength": 1
															}
														},
														"type": "object",
														"required": [
															"company_name",
															"description"
														]
													}
												},
												"type": "object"
											},
											"google_pay": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"type": "boolean",
														"default": true
													},
													"card_present": {
														"type": "boolean",
														"default": true
													}
												},
												"type": "object"
											},
											"jcb": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"master_card": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"nyce": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"pulse": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"star": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"visa": {
												"additionalProperties": false,
												"properties": {
													"card_not_present": {
														"additionalProperties": false,
														"properties": {
															"credit": {
																"type": "boolean",
																"default": true
															},
															"debit": {
																"type": "boolean",
																"default": true
															}
														},
														"type": "object"
													},
													"card_present": {
														"additionalProperties": false,
														"properties": {
															"contact": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															},
															"contactless": {
																"additionalProperties": false,
																"properties": {
																	"credit": {
																		"type": "boolean",
																		"default": true
																	},
																	"debit": {
																		"type": "boolean",
																		"default": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						},
						"type": "object",
						"description": "Provide the merchant's identifiers with different card brands they accept as methods of payment."
					},
					"convenience_fee_amount": {
						"type": "integer",
						"nullable": true,
						"minimum": 0,
						"maximum": 9999999,
						"description": "Describe the [convenience fees](/clear/certify/card-network-rules/#convenience-fees) for [Merchant IC+](/pricing/merchant-interchange-plus/) accounts in cents."
					},
					"enhanced_review": {
						"type": "string",
						"nullable": true,
						"description": "Indicates if the account is under enhanced review by WePay."
					},
					"onboarding_location": {
						"additionalProperties": false,
						"properties": {
							"city": {
								"maxLength": 30,
								"type": "string",
								"description": "City associated with the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							},
							"country": {
								"$ref": "#/components/schemas/country_code"
							},
							"line1": {
								"maxLength": 60,
								"type": "string",
								"description": "First line of the address **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							},
							"postal_code": {
								"maxLength": 14,
								"type": "string",
								"description": "Postal code associated with the address."
							},
							"region": {
								"maxLength": 30,
								"type": "string",
								"description": "Region associated with the address. Expected values are state or province abbreviations for addresses in the US or CA. **Note:** for entity and controller address, the following values are not supported: `PR`, `VI`, `AA`, `AE`, and `AP`."
							},
							"line2": {
								"maxLength": 60,
								"type": "string",
								"description": "Second line of the address. **non-ecma-262 regex constraint: must not contain \"[^\\p{L}\\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}\\s]+\".**"
							}
						},
						"required": [
							"line1",
							"city",
							"postal_code",
							"region",
							"country"
						],
						"type": "object",
						"nullable": true,
						"x-isAddress": true,
						"description": "Address of the legal entity, controller, or additional representatives. When representing the entity's address, send the entity's address of operation. When representing the controller or additional representative send the individual's residential address."
					},
					"projected_monthly_transaction_volume": {
						"type": "integer",
						"nullable": true,
						"description": "The projected monthly transaction volume, TPV, of an account."
					},
					"referral_partner": {
						"maxLength": 75,
						"minLength": 1,
						"type": "string",
						"description": "The non ISV partner/solution that refers merchants for payment processing services"
					},
					"transaction_division_mid": {
						"type": "integer",
						"nullable": true,
						"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_division_mid-nullable/description"
					},
					"transaction_type": {
						"type": "string",
						"enum": [
							"internet",
							"retail"
						],
						"x-enumDescriptions": {
							"internet": "The merchant will process card-not-present web transactions.",
							"retail": "The merchant will process card-present transactions."
						},
						"nullable": true,
						"description": "file:./descriptions/argument_info.shared.json#/accounts_shared/transaction_type/description"
					}
				},
				"required": [
					"api_version",
					"balances",
					"beneficiary",
					"create_time",
					"custom_data",
					"description",
					"documents",
					"id",
					"incoming_payments",
					"industry",
					"name",
					"owner",
					"path",
					"payout",
					"platform_onboarding_time",
					"pricing",
					"reference_id",
					"resource",
					"statement_description"
				],
				"type": "object",
				"x-label": "v3.1.rc.1-account-resp-v3_1"
			},
			"v3.1.rc.1-payments-v3_1": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"type": "integer"
					},
					"amount_disputed": {
						"type": "integer"
					},
					"amount_refunded": {
						"type": "integer"
					},
					"authorization_code": {
						"$ref": "#/components/schemas/cc-authorization_code"
					},
					"capture_at": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"nullable": true
					},
					"create_time": {
						"$ref": "#/components/schemas/create_time"
					},
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"id": {
						"$ref": "#/components/schemas/id"
					},
					"owner": {
						"$ref": "#/components/schemas/shared_owner_is_account_nullable_response"
					},
					"path": {
						"$ref": "#/components/schemas/path"
					},
					"payment_method": {
						"$ref": "#/components/schemas/payment_method_non_expanded"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payments"
					},
					"status": {
						"enum": [
							"pending",
							"completed",
							"failed",
							"canceled"
						],
						"type": "string",
						"x-enumDescriptions": {
							"pending": "This payment is processing, but is not yet included in the account's available or reserve balance. Find more information in the `pending_reasons` structure.",
							"completed": "This payment has finished processing, and is now available in either the account's available or reserved balance. **Note:** A payment can have a completed status and simultaneously have a refund or dispute issued against it.",
							"failed": "This payment has failed to process, and cannot be made available to the merchant. Find more information in the `failure_reason` structure.",
							"canceled": "This payment was canceled. If the cancellation was inadvertent, a new payment will need to be created."
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"auto_capture": {
						"type": "boolean"
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"failure_reason": {
						"$ref": "#/components/schemas/payments_failure_reason_response"
					},
					"fee_amount": {
						"type": "integer"
					},
					"fee_amount_refundable": {
						"type": "integer"
					},
					"fee_type": {
						"enum": [
							"rent_surcharge",
							"platform_fee"
						],
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"x-enumDescriptions": {
							"rent_surcharge": "rent surcharge fee type for which collect net income and corresponding taxes for the merchant(landlord), i.e direct tax ONLY on the rent amount(amount - fee_amount)",
							"platform_fee": "platform fee type"
						},
						"type": "string",
						"description": "Specifies the fee type your platform will use to collect fee from the payment."
					},
					"initiated_by": {
						"$ref": "#/components/schemas/initiated_by-resp"
					},
					"order": {
						"$ref": "#/components/schemas/shared_order_response"
					},
					"pending_reasons": {
						"items": {
							"$ref": "#/components/schemas/payments_pending_reasons_response"
						},
						"type": "array",
						"nullable": true
					},
					"txnr_app_fee": {
						"$ref": "#/components/schemas/transaction_record_non_expanded"
					},
					"txnr_merchant": {
						"$ref": "#/components/schemas/transaction_record_non_expanded"
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"status",
					"amount",
					"amount_refunded",
					"amount_disputed",
					"currency",
					"payment_method",
					"reference_id",
					"capture_at",
					"authorization_code"
				],
				"type": "object",
				"x-label": "v3.1.rc.1-payments-v3_1"
			},
			"v3.1.rc.1-payment_method-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"id": {
						"type": "string",
						"description": "ID of the payment method, generated by WePay when the payment method is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_payment_method_owner_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payment_methods"
					},
					"status": {
						"enum": [
							"unverified",
							"verified",
							"verification_failed",
							"deleted"
						],
						"x-enumDescriptions": {
							"unverified": "This payment method has not been verified yet and cannot be used to create payments until the status updates to `verified`.",
							"verified": "This payment method has successfully been verified and can now be used to create payments.",
							"verification_failed": "Verification attempt(s) for this payment method have failed. If this value returns, the payer should double check their payment details and re-submit them.",
							"deleted": "This payment method has been permanently deleted and cannot be used to create any further payments."
						},
						"type": "string",
						"description": "Possible values include: `deleted`, `unverified`, `verification_failed`, `verified`."
					},
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"encoded_payment_method",
							"google_pay",
							"apple_pay",
							"plaid_processor_token"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						},
						"x-version-enum-values": {
							"apple_pay": {
								"x-versions": [
									"v3.1.rc.1.1"
								]
							},
							"plaid_processor_token": {
								"x-versions": [
									"v3.1.rc.1.3"
								]
							}
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv_provided": {
								"type": "boolean"
							},
							"expiration_month": {
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"description": "The year the credit card expires."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"backing_display_name": {
								"type": "string",
								"nullable": true,
								"description": "The backing display name for the credit card."
							},
							"bin": {
								"type": "string",
								"description": "Bank identification number. The initial six digits of a credit card number. Null is returned if BIN is not available."
							},
							"bin_details": {
								"$ref": "#/components/schemas/v3.1.rc.1-bin_details"
							},
							"card_brand": {
								"enum": [
									"visa",
									"mastercard",
									"discover",
									"amex",
									"jcb",
									"diners"
								],
								"x-enumDescriptions": {
									"visa": "",
									"mastercard": "",
									"discover": "",
									"amex": "",
									"jcb": "",
									"diners": ""
								},
								"type": "string",
								"description": "Brand of the credit card. Possible values include: `amex`, `discover`, `diners`, `jcb`, `mastercard`, `visa`."
							},
							"card_entry_type": {
								"enum": [
									"card_keyed",
									"card_emv",
									"card_swiped",
									"card_manual",
									"card_emv_contactless"
								],
								"x-enumDescriptions": {
									"card_keyed": "",
									"card_emv": "",
									"card_swiped": "",
									"card_manual": "",
									"card_emv_contactless": ""
								},
								"type": "string",
								"description": "Possible values include: `card_keyed`, `card_transfer`."
							},
							"card_funding": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"enum": [
									"credit",
									"debit"
								],
								"x-enumDescriptions": {
									"credit": "Determines if Credit Card processing fees are charged to the merchant/payer.",
									"debit": "Determines if Debit Card processing fees are charged to the merchant/payer."
								},
								"type": "string",
								"nullable": true,
								"description": "This field is used to determine which processing fees are charged to the merchant/payer. Possible values include: `credit`, `debit`."
							},
							"display_name": {
								"type": "string",
								"description": "The display name for the credit card."
							},
							"last_four": {
								"type": "string",
								"description": "The last four digits of the credit card number."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"expiration_month",
							"expiration_year",
							"card_on_file",
							"recurring",
							"cvv_provided"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"payment_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
									"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account. **Note:** If you have verified your account via Plaid, this might be the last four numbers of your tokenized bank account number (TAN)."
							}
						},
						"required": [
							"account_type",
							"last_four",
							"account_holder"
						],
						"type": "object",
						"description": "Raw bank account information."
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"type",
					"status"
				],
				"type": "object",
				"x-label": "v3.1.rc.1-payment_method-resp-v3_1"
			},
			"v3.1.rc.1-embedded-rbits-v3_1": {
				"items": {
					"additionalProperties": false,
					"properties": {
						"receive_time": {
							"type": "integer",
							"format": "int64",
							"minimum": 0,
							"description": "The timestamp the embedded rbit was received indicated by a UNIX timestamp. eg. 1623263544"
						},
						"source": {
							"$ref": "#/components/schemas/rbit-source"
						},
						"type": {
							"$ref": "#/components/schemas/rbit-types-v3_1"
						},
						"address": {
							"$ref": "#/components/schemas/rbits_address"
						},
						"auto_billing": {
							"$ref": "#/components/schemas/shared_auto_billing"
						},
						"business_description": {
							"$ref": "#/components/schemas/shared_business_description"
						},
						"business_name": {
							"$ref": "#/components/schemas/shared_business_name"
						},
						"external_account": {
							"$ref": "#/components/schemas/shared_external_account"
						},
						"fundraising_event": {
							"$ref": "#/components/schemas/shared_fundraising_event"
						},
						"fundraising_update": {
							"$ref": "#/components/schemas/shared_fundraising_update"
						},
						"industry_code": {
							"$ref": "#/components/schemas/shared_industry_code"
						},
						"landlord": {
							"$ref": "#/components/schemas/v3.1.rc.1-shared_landlord"
						},
						"mfa": {
							"$ref": "#/components/schemas/shared_mfa"
						},
						"partner_service": {
							"$ref": "#/components/schemas/shared_partner_service"
						},
						"person": {
							"$ref": "#/components/schemas/shared_person"
						},
						"phone": {
							"$ref": "#/components/schemas/shared_rbits_phone"
						},
						"project": {
							"$ref": "#/components/schemas/shared_project"
						},
						"property": {
							"$ref": "#/components/schemas/v3.1.rc.1-shared_property"
						},
						"rental": {
							"$ref": "#/components/schemas/v3.1.rc.1-shared_rental"
						},
						"revenue": {
							"$ref": "#/components/schemas/shared_revenue"
						},
						"transaction_details": {
							"$ref": "#/components/schemas/shared_transaction_details"
						},
						"website": {
							"$ref": "#/components/schemas/shared_website"
						}
					},
					"required": [
						"receive_time",
						"type",
						"source"
					],
					"type": "object"
				},
				"type": "array",
				"nullable": true,
				"x-label": "v3.1.rc.1-embedded-rbits-v3_1",
				"description": "Any rbit data your platform chooses to attach to this resource. The rbit data must be key-value pairs and can be an array of rbit objects."
			},
			"v3.1.rc.1-pricing-create-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.1.rc.1-pricing_by_currency-create-CAD-v3_1"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.1.rc.1-pricing_by_currency-create-GBP-v3_1"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.1.rc.1-pricing_by_currency-create-USD-v3_1"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing-create-v3_1",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.1.rc.1-pricing-update-v3_1": {
				"additionalProperties": false,
				"properties": {
					"currencies": {
						"description": "[Merchant IC+ pricing](/pricing/merchant-interchange-plus/) is available exclusively for merchants with a `USD` Account or Blended pricing model.",
						"example": {
							"currencies": {
								"USD": {
									"credit_card": {
										"type": "interchange_plus",
										"interchange_plus": {
											"transaction": {
												"fixed_fee_markup_amount": 20,
												"variable_fee_markup_bps": 195
											},
											"auth": {
												"fixed_fee_markup_amount": 20
											},
											"refund_fee_for_transaction_markup": true,
											"chargeback_amount": 1500
										}
									},
									"payment_bank": {
										"type": "standard",
										"standard": {
											"fixed_fee_amount": 10,
											"variable_fee_bps": 195,
											"max_fee_amount": 1000,
											"min_fee_amount": 200,
											"refund_fee_for_standard": true
										}
									},
									"recurring_fee": {
										"period": "monthly",
										"amount": 1500
									}
								}
							}
						},
						"additionalProperties": false,
						"properties": {
							"CAD": {
								"$ref": "#/components/schemas/v3.1.rc.1-pricing_by_currency-update-CAD-v3_1"
							},
							"GBP": {
								"$ref": "#/components/schemas/v3.1.rc.1-pricing_by_currency-update-GBP-v3_1"
							},
							"USD": {
								"$ref": "#/components/schemas/v3.1.rc.1-pricing_by_currency-update-USD-v3_1"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"x-label": "v3.1.rc.1-pricing-update-v3_1",
				"description": "The [Merchant IC+ pricing model](/pricing/merchant-interchange-plus/#define-merchant-ic-pricing) and Blended pricing model to collect platform payment fees from the merchant. Your markup fees should be inclusive of WePay processing fees, which will be debited from your platform Account. For any markup that you define, you'll receive that amount less WePay fees. If you choose to have a lower markup than the fees WePay charges, your Account will be debited to cover the difference.",
				"example": {
					"pricing": {
						"currencies": {
							"USD": {
								"credit_card": {
									"type": "interchange_plus",
									"interchange_plus": {
										"transaction": {
											"fixed_fee_markup_amount": 20,
											"variable_fee_markup_bps": 295
										},
										"auth": {
											"fixed_fee_markup_amount": 20
										},
										"refund_fee_for_transaction_markup": true,
										"chargeback_amount": 1500
									}
								},
								"payment_bank": {
									"type": "standard",
									"standard": {
										"fixed_fee_amount": 10,
										"variable_fee_bps": 195,
										"max_fee_amount": 1000,
										"min_fee_amount": 200,
										"refund_fee_for_standard": true
									}
								},
								"recurring_fee": {
									"period": "monthly",
									"amount": 1500
								}
							}
						}
					}
				}
			},
			"v3.1.rc.1-payment_method_for_payments_v3_1": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_method_id",
							"encoded_payment_method",
							"google_pay",
							"apple_pay",
							"plaid_processor_token"
						],
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_method_id": "This value is required if the `payment_method_id` parameter is being sent after a payment method has already been created.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"x-version-enum-values": {
							"apple_pay": {
								"x-versions": [
									"v3.1.rc.1.1"
								]
							},
							"plaid_processor_token": {
								"x-versions": [
									"v3.1.rc.1.3"
								]
							}
						}
					},
					"apple_pay": {
						"x-versions": [
							"v3.1.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest) received from Apple Pay APIs.",
								"type": "string"
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Apple Pay."
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"bin_details": {
								"$ref": "#/components/schemas/v3.1.rc.1-bin_details"
							},
							"card_funding": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"enum": [
									"credit",
									"debit"
								],
								"x-enumDescriptions": {
									"credit": "Determines if Credit Card processing fees are charged to the merchant/payer.",
									"debit": "Determines if Debit Card processing fees are charged to the merchant/payer."
								},
								"type": "string",
								"nullable": true,
								"description": "This field is used to determine which processing fees are charged to the merchant/payer. Possible values include: `credit`, `debit`."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"google_pay": {
						"x-versions": [
							"v3.0.rc.2.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) received from Google Pay APIs.",
								"type": "string"
							},
							"public_key": {
								"type": "string",
								"description": "Public key received from WePay during your application on-boarding."
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Google Pay."
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"payment_method_id": {
						"$ref": "#/components/schemas/id"
					},
					"plaid_processor_token": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/payment_bank_us_holder-req"
							},
							"processor_token": {
								"description": "Holds Plaid verification token on POST /payment_methods request.",
								"type": "string"
							},
							"plaid_account_id": {
								"description": "Optional field which holds the account id of a Plaid verification request when creating a payment method.",
								"type": "string"
							}
						},
						"required": [
							"processor_token",
							"account_holder"
						],
						"type": "object",
						"description": "A Plaid processor token to make Plaid API calls."
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.1.rc.1-payment_method_for_payments_v3_1",
				"description": "The payment method used to create this payment.**Note:** The payment method's top level data object corresponds with the payment method type. For example, if you set type to `credit_card`, then the payment method's top level data object must be `credit_card`."
			},
			"v3.1.rc.1-payment_method-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"encoded_payment_method",
							"google_pay",
							"apple_pay",
							"plaid_processor_token"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						},
						"x-version-enum-values": {
							"apple_pay": {
								"x-versions": [
									"v3.1.rc.1.1"
								]
							},
							"plaid_processor_token": {
								"x-versions": [
									"v3.1.rc.1.3"
								]
							}
						}
					},
					"apple_pay": {
						"x-versions": [
							"v3.1.rc.1.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest) received from Apple Pay APIs.",
								"type": "string"
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Apple Pay."
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"bin_details": {
								"$ref": "#/components/schemas/v3.1.rc.1-bin_details"
							},
							"card_funding": {
								"x-versions": [
									"v3.1.rc.1.3"
								],
								"enum": [
									"credit",
									"debit"
								],
								"x-enumDescriptions": {
									"credit": "Determines if Credit Card processing fees are charged to the merchant/payer.",
									"debit": "Determines if Debit Card processing fees are charged to the merchant/payer."
								},
								"type": "string",
								"nullable": true,
								"description": "This field is used to determine which processing fees are charged to the merchant/payer. Possible values include: `credit`, `debit`."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"google_pay": {
						"x-versions": [
							"v3.0.rc.2.1"
						],
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"payment_method_data": {
								"description": "Base64 converted [JSON data](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) received from Google Pay APIs.",
								"type": "string"
							},
							"public_key": {
								"type": "string",
								"description": "Public key received from WePay during your application on-boarding."
							}
						},
						"required": [
							"card_holder",
							"payment_method_data"
						],
						"type": "object",
						"description": "Credit card payment method information for Google Pay."
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"plaid_processor_token": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/payment_bank_us_holder-req"
							},
							"processor_token": {
								"description": "Holds Plaid verification token on POST /payment_methods request.",
								"type": "string"
							},
							"plaid_account_id": {
								"description": "Optional field which holds the account id of a Plaid verification request when creating a payment method.",
								"type": "string"
							}
						},
						"required": [
							"processor_token",
							"account_holder"
						],
						"type": "object",
						"description": "A Plaid processor token to make Plaid API calls."
					},
					"rbits": {
						"$ref": "#/components/schemas/v3.1.rc.1-embedded-rbits-v3_1"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "v3.1.rc.1-payment_method-req-v3_1"
			},
			"v3.1.rc.1-payout_method-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "string",
						"description": "The ID of the payout method, generated by WePay when the payout method is created."
					},
					"path": {
						"type": "string",
						"description": "The path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payout_methods"
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0,
						"description": "The time (in UNIX) when the payout method was created."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"nickname": {
						"type": "string",
						"maxLength": 64,
						"minLength": 1,
						"description": "The nickname of the payout method."
					},
					"owner": {
						"$ref": "#/components/schemas/payout_methods_owner_response"
					},
					"paper_check": {
						"additionalProperties": false,
						"properties": {
							"address": {
								"$ref": "#/components/schemas/payout_methods_paper_check_address"
							},
							"memo": {
								"description": "The memo that will be used on the check",
								"type": "string",
								"minLength": 1,
								"maxLength": 70
							}
						},
						"required": [
							"address"
						],
						"description": "Define how to payout a merchant based in the US via paper check. **Note:** Paper checks require permission from WePay, and only US-based merchants can receive payouts via paper check. Reach out to your integration team for further information.",
						"type": "object",
						"x-permission": {
							"type": "can_be_used",
							"phase": "post_token_expansion",
							"partner_config_key_path": "api.v3.payouts.paper_checks_enabled",
							"feature_name": "paper check"
						}
					},
					"payout_bank_ca": {
						"additionalProperties": false,
						"properties": {
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the credit card."
							}
						},
						"required": [
							"account_type",
							"last_four"
						],
						"type": "object",
						"description": "Contains parameters relevant to the payout method."
					},
					"payout_bank_gb": {
						"additionalProperties": false,
						"properties": {
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account."
							}
						},
						"required": [
							"last_four"
						],
						"type": "object",
						"description": "Contains parameters relevant to the payout method."
					},
					"payout_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account."
							}
						},
						"required": [
							"account_type",
							"last_four"
						],
						"type": "object",
						"description": "Contains parameters relevant to the payout method."
					},
					"type": {
						"enum": [
							"payout_bank_ca",
							"payout_bank_gb",
							"payout_bank_us",
							"paper_check"
						],
						"x-enumDescriptions": {
							"payout_bank_ca": "Bank account in Canada.",
							"payout_bank_gb": "Bank account in the UK (not currently supported).",
							"payout_bank_us": "Bank account in the US.",
							"paper_check": "Paper check delivered to an address in the US."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Possible values: `payout_bank_ca`, `payout_bank_us` and `payout_bank_gb`. **Note:** The `paper_check` option requires permission from WePay to use. Reach out to your integration team for assistance."
					},
					"status": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"enum": [
							"active",
							"verified",
							"unverified",
							"pending_verification",
							"disabled",
							"deleted"
						],
						"x-enumDescriptions": {
							"active": "This payout method is active, so it can be queried via the APIs and used as a merchant's payout method.",
							"verified": "This payout method has successfully been verified and can now be used to create payouts.",
							"unverified": "This payout method has not been verified yet and cannot be used to create payouts until the status updates to `verified`.",
							"pending_verification": "This payout method is waiting on micro deposits confirmation and cannot be used to create payouts until the status updates to `verified`",
							"disabled": "Due to three (3) failed attempts to send payouts to this payout method, it has been disabled. Find more information on the failed payouts by examining the `failure_reason` [object](/api/latest/operation/GET_payouts-id/#!c=200&path=failure_reason&t=response) of the payout resource. Note that disabled payout methods cannot be queried via the APIs or used as a merchant's payout method.",
							"deleted": "This payout method has been deleted, so it cannot be queried via the APIs or used as a merchant's payout method. If the payout method was being used as an account's payout method, a new payout method must be provided before the account's payout capability will be enabled again."
						},
						"type": "string",
						"description": "Describes the status of the payout method. Possible values include: `active`, `verified`, `unverified`, `pending_verification`, `disabled`, and `deleted`"
					}
				},
				"required": [
					"resource",
					"id",
					"path"
				],
				"type": "object",
				"x-label": "v3.1.rc.1-payout_method-resp-v3_1"
			},
			"v3.1.rc.1-payments-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"description": "Merchant's account id associated with the payment."
					},
					"amount": {
						"minimum": 100,
						"type": "integer",
						"description": "Amount in the lowest denomination. For example, $1.00 is represented as 100. This applies to all currencies WePay supports."
					},
					"currency": {
						"$ref": "#/components/schemas/permissioned-currency"
					},
					"payment_method": {
						"$ref": "#/components/schemas/v3.1.rc.1-payment_method_for_payments_v3_1"
					},
					"auto_capture": {
						"type": "boolean",
						"description": "For payments with a credit card payment method, set to `false` to create a delayed-capture payment. Capture the payment within 7 days with the [POST /payments/{id}/capture](/api/latest/operation/POST_payments-id-capture/) endpoint. Alternatively, cancel the payment with the [POST /payments/{id}/cancel](/api/latest/operation/POST_payments-id-cancel/) endpoint."
					},
					"capture_at": {
						"type": "integer",
						"nullable": true,
						"description": "Designate the time at which this payment will capture using a UNIX epoch timestamp. The capture time cannot be more than 7 days in the future. Note that epoch timestamps use the UTC timezone."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"fee_amount": {
						"minimum": 0,
						"type": "integer",
						"description": "Specifies the fee amount your platform will collect from the payment. The amount should be in the lowest denomination. For example, $1.00 is represented as 100. This applies to all currencies WePay supports. Note: The upper limit for the fee amount is 20% of the payment. If this field is blank and the merchant is on blended pricing, $0 will be debited from the merchant and credited to your platform account, but WePay’s fees will still be debited from your platform account. Remember to appropriately [calculate fees](/clear/process-payments/#calculate-fees). Payments for merchants on [MIC+](/pricing/merchant-interchange-plus/) should leave this field blank as fees are assessed monthly rather than per transaction. If any number other than 0 is passed it will be ignored, and 0 will be applied and returned."
					},
					"fee_type": {
						"enum": [
							"rent_surcharge",
							"platform_fee"
						],
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"type": "string",
						"x-enumDescriptions": {
							"rent_surcharge": "rent surcharge fee type for which collect net income and corresponding taxes for the merchant(landlord), i.e direct tax ONLY on the rent amount(amount - fee_amount)",
							"platform_fee": "platform fee type"
						},
						"description": "Specifies the fee type your platform will use to collect fee from the payment."
					},
					"initiated_by": {
						"$ref": "#/components/schemas/initiated_by-req"
					},
					"order": {
						"$ref": "#/components/schemas/payments_order_request"
					},
					"order_id": {
						"$ref": "#/components/schemas/id-order"
					},
					"rbits": {
						"$ref": "#/components/schemas/v3.1.rc.1-embedded-rbits-v3_1"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					}
				},
				"required": [
					"amount",
					"currency",
					"account_id",
					"payment_method"
				],
				"type": "object",
				"x-label": "v3.1.rc.1-payments-req-v3_1"
			},
			"v3.1.rc.1-payout_methods_create_data-v3_1": {
				"additionalProperties": false,
				"properties": {
					"legal_entity_id": {
						"$ref": "#/components/schemas/id"
					},
					"nickname": {
						"type": "string",
						"maxLength": 64,
						"minLength": 1
					},
					"type": {
						"enum": [
							"payout_bank_ca",
							"payout_bank_gb",
							"payout_bank_us",
							"paper_check",
							"plaid_processor_token"
						],
						"x-enumDescriptions": {
							"payout_bank_ca": "Bank account in Canada.",
							"payout_bank_gb": "Bank account in the UK (not currently supported).",
							"payout_bank_us": "Bank account in the US.",
							"paper_check": "Paper check delivered to an address in the US.",
							"plaid_processor_token": "Token used by WePay to communicate with Plaid and retrieve bank account information from Plaid."
						},
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Possible values: `payout_bank_ca`, `payout_bank_us` and `payout_bank_gb`. **Note:** The `paper_check` option requires permission from WePay to use. Reach out to your integration team for assistance."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"paper_check": {
						"additionalProperties": false,
						"properties": {
							"address": {
								"$ref": "#/components/schemas/payout_methods_paper_check_address"
							},
							"memo": {
								"description": "The memo that will be used on the check",
								"type": "string",
								"minLength": 1,
								"maxLength": 70
							}
						},
						"required": [
							"address"
						],
						"description": "Define how to payout a merchant based in the US via paper check. **Note:** Paper checks require permission from WePay, and only US-based merchants can receive payouts via paper check. Reach out to your integration team for further information.",
						"type": "object",
						"x-permission": {
							"type": "can_be_used",
							"phase": "post_token_expansion",
							"partner_config_key_path": "api.v3.payouts.paper_checks_enabled",
							"feature_name": "paper check"
						}
					},
					"payout_bank_ca": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"pattern": "^[0-9]{5,17}$",
								"type": "string"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"institution_number": {
								"pattern": "^[0-9]{3}$",
								"type": "string"
							},
							"transit_number": {
								"pattern": "^[0-9]{5}$",
								"type": "string"
							}
						},
						"required": [
							"transit_number",
							"institution_number",
							"account_number",
							"account_type"
						],
						"type": "object"
					},
					"payout_bank_gb": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"pattern": "^[0-9]{8}$",
								"type": "string"
							},
							"sort_code": {
								"pattern": "^[0-9]{6}$",
								"type": "string"
							}
						},
						"required": [
							"sort_code",
							"account_number"
						],
						"type": "object"
					},
					"payout_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_number": {
								"$ref": "#/components/schemas/us_bank_account_number"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the merchant's bank account they are setting up for payouts is a checking account, they must select this option for successful payouts.",
									"savings": "If the merchant's bank account they are setting up for payouts is a savings account, they must select this option for successful payouts."
								}
							},
							"routing_number": {
								"$ref": "#/components/schemas/us_bank_routing_number"
							}
						},
						"required": [
							"routing_number",
							"account_number",
							"account_type"
						],
						"type": "object"
					},
					"plaid_processor_token": {
						"x-versions": [
							"v3.1.rc.1.3"
						],
						"additionalProperties": false,
						"properties": {
							"processor_token": {
								"description": "Holds Plaid verification token on POST /payout_methods request.",
								"type": "string"
							},
							"plaid_account_id": {
								"description": "Optional field which holds the account ID of a Plaid verification request when creating a payout method.",
								"type": "string"
							}
						},
						"required": [
							"processor_token"
						],
						"type": "object",
						"description": "A Plaid processor token to make Plaid API calls."
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"legal_entity_id",
					"nickname",
					"type"
				],
				"type": "object",
				"x-label": "v3.1.rc.1-payout_methods_create_data-v3_1"
			},
			"v3.1.rc.2.1-transaction_level_fee_details-req": {
				"x-versions": [
					"v3.1.rc.2.1"
				],
				"additionalProperties": false,
				"properties": {
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"fee_type": {
						"$ref": "#/components/schemas/fee_type"
					},
					"fees": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"fee_category": {
									"description": "Further breaks down the `fee_type` by providing insight into how different fee categories (e.g `VISA BUSINESS TIER 4 - STANDARD` vs. `VISA BUSINESS TIER 3 - STANDARD`) get billed.",
									"example": "VISA BUSINESS TIER 4 - STANDARD",
									"type": "string"
								},
								"fixed_fee_amount": {
									"description": "The total amount of network and issuer fees for the transactions of the associated `fee_category`. This is a combination of the `variable_fee_bps` and the per-transaction price that networks and issuers charge.",
									"example": 320,
									"type": "integer",
									"nullable": true
								},
								"total_fees": {
									"description": "Total fee amount for the indicated `fee_type` and `fee_category`. The equation for this value is (`total_interchange_fee` + `total_markup`).",
									"example": 360,
									"type": "integer",
									"nullable": true
								},
								"total_interchange_fee": {
									"description": "This is the total fees charged by issuers and networks that the merchant owes for this billing statement. This value is derived from variable bps and fixed fee amount.",
									"example": 320,
									"type": "integer",
									"nullable": true
								},
								"total_markup": {
									"description": "This is the total fees charged by the platform for credit card transactions. This is calculated as (`item_count` * `fixed_fee_markup_amount`) + (`transaction_amount` * `variable_fee_markup_bps`).",
									"example": 40,
									"type": "integer",
									"nullable": true
								},
								"variable_fee_bps": {
									"description": "Basis points to calculate variable fee amount per transaction. Basis points translate directly to percent, so a value of `295` here will be calculated as 2.95% against the `amount` of each item in the billing statement. For credit card transactions, this parameter represents variable network and issuer fees. For ACH payments, this value will be the entire variable processing fee.",
									"example": 295,
									"type": "integer",
									"nullable": true
								}
							},
							"required": [
								"fee_category",
								"variable_fee_bps",
								"fixed_fee_amount",
								"total_interchange_fee",
								"total_markup",
								"total_fees"
							],
							"type": "object",
							"nullable": true
						},
						"type": "array",
						"description": "An array containing fee information for transactions in the given billing statement `id`.",
						"uniqueItems": true
					},
					"owner": {
						"additionalProperties": false,
						"properties": {
							"id": {
								"type": "string",
								"description": "The ID of the resource that the transaction reports on. Possible ID resources include:`payments`, `refunds`."
							},
							"path": {
								"type": "string",
								"description": "Path of resource and resource ID."
							},
							"resource": {
								"enum": [
									"payments",
									"refunds"
								],
								"type": "string",
								"description": "Helps organize information by identifying the resource type of the object data.",
								"x-enumDescriptions": {
									"payments": "The owner object for this transaction record is a payment.",
									"refunds": "The owner object for this transaction record is a refund."
								}
							}
						},
						"required": [
							"id",
							"resource",
							"path"
						],
						"type": "object",
						"description": "Owner returns ID and path. Possible values include: `payments`, `refunds`."
					},
					"total_amount": {
						"description": "Total transaction amount in a billing statement for the given fee type and fee category. This includes the net received by the merchant and all fees.",
						"example": 100,
						"type": "integer",
						"nullable": true
					}
				},
				"required": [
					"owner",
					"fee_type",
					"currency",
					"total_amount",
					"fees"
				],
				"type": "object",
				"nullable": true,
				"x-label": "v3.1.rc.2.1-transaction_level_fee_details-req"
			},
			"payment_method-resp-v3_1": {
				"additionalProperties": false,
				"properties": {
					"create_time": {
						"type": "integer",
						"format": "int64",
						"minimum": 0
					},
					"id": {
						"type": "string",
						"description": "ID of the payment method, generated by WePay when the payment method is created."
					},
					"owner": {
						"$ref": "#/components/schemas/shared_payment_method_owner_response"
					},
					"path": {
						"type": "string",
						"description": "Path of resource and resource ID."
					},
					"resource": {
						"$ref": "#/components/schemas/resource-payment_methods"
					},
					"status": {
						"enum": [
							"unverified",
							"verified",
							"verification_failed",
							"deleted"
						],
						"x-enumDescriptions": {
							"unverified": "This payment method has not been verified yet and cannot be used to create payments until the status updates to `verified`.",
							"verified": "This payment method has successfully been verified and can now be used to create payments.",
							"verification_failed": "Verification attempt(s) for this payment method have failed. If this value returns, the payer should double check their payment details and re-submit them.",
							"deleted": "This payment method has been permanently deleted and cannot be used to create any further payments."
						},
						"type": "string",
						"description": "Possible values include: `deleted`, `unverified`, `verification_failed`, `verified`."
					},
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"encoded_payment_method",
							"google_pay"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						}
					},
					"api_version": {
						"$ref": "#/components/schemas/api_version"
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv_provided": {
								"type": "boolean"
							},
							"expiration_month": {
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"description": "The year the credit card expires."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"backing_display_name": {
								"type": "string",
								"nullable": true,
								"description": "The backing display name for the credit card."
							},
							"bin": {
								"type": "string",
								"description": "Bank identification number. The initial six digits of a credit card number. Null is returned if BIN is not available."
							},
							"card_brand": {
								"enum": [
									"visa",
									"mastercard",
									"discover",
									"amex",
									"jcb",
									"diners"
								],
								"x-enumDescriptions": {
									"visa": "",
									"mastercard": "",
									"discover": "",
									"amex": "",
									"jcb": "",
									"diners": ""
								},
								"type": "string",
								"description": "Brand of the credit card. Possible values include: `amex`, `discover`, `diners`, `jcb`, `mastercard`, `visa`."
							},
							"card_entry_type": {
								"enum": [
									"card_keyed",
									"card_emv",
									"card_swiped",
									"card_manual",
									"card_emv_contactless"
								],
								"x-enumDescriptions": {
									"card_keyed": "",
									"card_emv": "",
									"card_swiped": "",
									"card_manual": "",
									"card_emv_contactless": ""
								},
								"type": "string",
								"description": "Possible values include: `card_keyed`, `card_transfer`."
							},
							"display_name": {
								"type": "string",
								"description": "The display name for the credit card."
							},
							"last_four": {
								"type": "string",
								"description": "The last four digits of the credit card number."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"expiration_month",
							"expiration_year",
							"card_on_file",
							"recurring",
							"cvv_provided"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"payment_bank_us": {
						"additionalProperties": false,
						"properties": {
							"account_holder": {
								"$ref": "#/components/schemas/holder-resp"
							},
							"account_type": {
								"enum": [
									"checking",
									"savings"
								],
								"type": "string",
								"description": "The account type. Possible values include: `checking`, `savings`.",
								"x-enumDescriptions": {
									"checking": "If the payer's bank account is a checking account, they must select this option in order to successfully verify their payment method.",
									"savings": "If the payer's bank account is a savings account, they must select this option in order to successfully verify their payment method."
								}
							},
							"last_four": {
								"type": "string",
								"description": "The last four numbers of the bank account. **Note:** If you have verified your account via Plaid, this might be the last four numbers of your tokenized bank account number (TAN)."
							}
						},
						"required": [
							"account_type",
							"last_four",
							"account_holder"
						],
						"type": "object",
						"description": "Raw bank account information."
					}
				},
				"required": [
					"id",
					"resource",
					"path",
					"owner",
					"create_time",
					"type",
					"status"
				],
				"type": "object",
				"x-label": "payment_method-resp-v3_1"
			},
			"payment_method_for_payments_v3_1": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"payment_method_id",
							"encoded_payment_method",
							"google_pay"
						],
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"payment_method_id": "This value is required if the `payment_method_id` parameter is being sent after a payment method has already been created.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						},
						"type": "string",
						"x-isOneOfKey": true
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"payment_method_id": {
						"$ref": "#/components/schemas/id"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "payment_method_for_payments_v3_1",
				"description": "The payment method used to create this payment.**Note:** The payment method's top level data object corresponds with the payment method type. For example, if you set type to `credit_card`, then the payment method's top level data object must be `credit_card`."
			},
			"payment_method-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"type": {
						"enum": [
							"credit_card",
							"payment_bank_us",
							"encoded_payment_method",
							"google_pay"
						],
						"type": "string",
						"x-isOneOfKey": true,
						"description": "Type of payment method. Possible values include: `credit_card`, `payment_bank_us`, `payment_method_id`, `encoded_payment_method`.",
						"x-enumDescriptions": {
							"credit_card": "This value is required if the `credit_card` structure is being sent with raw credit card data.",
							"payment_bank_us": "This value is required if the `payment_bank_us` structure is being sent with the raw bank account data.",
							"encoded_payment_method": "This value is required if the `encoded_payment_method` structure is being sent with the payment blob from the Card Present SDK.",
							"google_pay": "This value is required if the `google_pay` structure is being sent with google pay data.",
							"apple_pay": "This value is required if the `apple_pay` structure is being sent with apple pay data.",
							"plaid_processor_token": "This value is required if the `plaid_processor_token` structure is being sent with plaid processor token data."
						}
					},
					"credit_card": {
						"additionalProperties": false,
						"properties": {
							"card_holder": {
								"$ref": "#/components/schemas/holder-req"
							},
							"card_number": {
								"pattern": "^[0-9]{12,19}$",
								"type": "string",
								"description": "Card number of the credit card.",
								"x-permission": {
									"type": "can_be_used",
									"phase": "pre_token_expansion",
									"partner_config_key_path": "api.v3.payments.inline_credit_card_enabled",
									"feature_name": "Inline Credit Card"
								}
							},
							"expiration_month": {
								"maximum": 12,
								"minimum": 1,
								"type": "integer",
								"description": "The month the credit card expires."
							},
							"expiration_year": {
								"type": "integer",
								"minimum": 0,
								"description": "The year the credit card expires."
							},
							"auto_update": {
								"type": "boolean",
								"description": "Automatically update credit cards that have been stored with WePay. If a card is expired, or has been replaced (e.g., due to theft), it will be automatically updated based in information provided by card networks. To receive these updates, be sure to [subscribe](/api/latest/operation/POST_notification_preferences/) to the `payment_methods.updated` notification event topic."
							},
							"card_on_file": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a non-recurring payment method."
							},
							"cvv": {
								"pattern": "^[0-9]{3,4}$",
								"type": "string",
								"x-permission": {
									"type": "can_be_optional",
									"phase": "post_token_expansion",
									"partner_config_key_path": "api.v3.credit_cards.optional_cvv_enabled",
									"feature_name": "Credit Card Optional CVV"
								},
								"description": "Card Verification Value (CVV) of the credit card. Requires permission for CVV optional."
							},
							"recurring": {
								"type": "boolean",
								"description": "Indicates if the resulting token will be kept on file as a recurring payment method."
							},
							"trigger_verification": {
								"type": "boolean",
								"description": "Set this parameter to `true` to pre-authorize the card and validate that it is a functional card. This will result in a $0 authorization for Visa, MasterCard, and AmericanExpress cards, and a $0.01 authorization for all other card brands. WePay will not reverse this authorization."
							},
							"virtual_terminal_mode": {
								"enum": [
									"mobile",
									"web"
								],
								"x-enumDescriptions": {
									"mobile": "Indicates that the virtual terminal transaction was completed in a Card Present environment.",
									"web": "Indicates that the virtual terminal transaction was completed in a Card Not Present environment."
								},
								"type": "string",
								"nullable": true,
								"description": "This is set if the merchant manually entered the credit card number. Possible values include: `mobile`, `web`, null."
							}
						},
						"required": [
							"card_holder",
							"card_number",
							"expiration_month",
							"expiration_year"
						],
						"type": "object",
						"description": "Raw credit card information."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"encoded_payment_method": {
						"description": "Encoded payment data. Currently is used for POS payment tokens but in future may be used for other types of encoded payment information",
						"maxLength": 2048,
						"minLength": 1,
						"type": "string"
					},
					"payment_bank_us": {
						"$ref": "#/components/schemas/shared_payment_bank_us_request"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits-v3_1"
					},
					"token": {
						"$ref": "#/components/schemas/shared_token_request"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"x-label": "payment_method-req-v3_1"
			},
			"payments-req-v3_1": {
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"description": "Merchant's account id associated with the payment."
					},
					"amount": {
						"minimum": 100,
						"type": "integer",
						"description": "Amount in the lowest denomination. For example, $1.00 is represented as 100. This applies to all currencies WePay supports."
					},
					"currency": {
						"$ref": "#/components/schemas/permissioned-currency"
					},
					"payment_method": {
						"$ref": "#/components/schemas/payment_method_for_payments_v3_1"
					},
					"auto_capture": {
						"type": "boolean",
						"description": "For payments with a credit card payment method, set to `false` to create a delayed-capture payment. Capture the payment within 7 days with the [POST /payments/{id}/capture](/api/latest/operation/POST_payments-id-capture/) endpoint. Alternatively, cancel the payment with the [POST /payments/{id}/cancel](/api/latest/operation/POST_payments-id-cancel/) endpoint."
					},
					"capture_at": {
						"type": "integer",
						"nullable": true,
						"description": "Designate the time at which this payment will capture using a UNIX epoch timestamp. The capture time cannot be more than 7 days in the future. Note that epoch timestamps use the UTC timezone."
					},
					"custom_data": {
						"$ref": "#/components/schemas/custom_data"
					},
					"fee_amount": {
						"minimum": 0,
						"type": "integer",
						"description": "Specifies the fee amount your platform will collect from the payment. The amount should be in the lowest denomination. For example, $1.00 is represented as 100. This applies to all currencies WePay supports. Note: The upper limit for the fee amount is 20% of the payment. If this field is blank and the merchant is on blended pricing, $0 will be debited from the merchant and credited to your platform account, but WePay’s fees will still be debited from your platform account. Remember to appropriately [calculate fees](/clear/process-payments/#calculate-fees). Payments for merchants on [MIC+](/pricing/merchant-interchange-plus/) should leave this field blank as fees are assessed monthly rather than per transaction. If any number other than 0 is passed it will be ignored, and 0 will be applied and returned."
					},
					"initiated_by": {
						"$ref": "#/components/schemas/initiated_by-req"
					},
					"order": {
						"$ref": "#/components/schemas/payments_order_request"
					},
					"order_id": {
						"$ref": "#/components/schemas/id-order"
					},
					"rbits": {
						"$ref": "#/components/schemas/embedded-rbits-v3_1"
					},
					"reference_id": {
						"$ref": "#/components/schemas/reference_id"
					}
				},
				"required": [
					"amount",
					"currency",
					"account_id",
					"payment_method"
				],
				"type": "object",
				"x-label": "payments-req-v3_1"
			},
			"v3.1.rc.2-transaction_level_fee_details-req": {
				"x-versions": [
					"v3.1.rc.2.1"
				],
				"additionalProperties": false,
				"properties": {
					"currency": {
						"$ref": "#/components/schemas/currency"
					},
					"fee_type": {
						"$ref": "#/components/schemas/fee_type"
					},
					"fees": {
						"items": {
							"additionalProperties": false,
							"properties": {
								"fee_category": {
									"description": "Further breaks down the `fee_type` by providing insight into how different fee categories (e.g `VISA BUSINESS TIER 4 - STANDARD` vs. `VISA BUSINESS TIER 3 - STANDARD`) get billed.",
									"example": "VISA BUSINESS TIER 4 - STANDARD",
									"type": "string"
								},
								"fixed_fee_amount": {
									"description": "The total amount of network and issuer fees for the transactions of the associated `fee_category`. This is a combination of the `variable_fee_bps` and the per-transaction price that networks and issuers charge.",
									"example": 320,
									"type": "integer",
									"nullable": true
								},
								"total_fees": {
									"description": "Total fee amount for the indicated `fee_type` and `fee_category`. The equation for this value is (`total_interchange_fee` + `total_markup`).",
									"example": 360,
									"type": "integer",
									"nullable": true
								},
								"total_interchange_fee": {
									"description": "This is the total fees charged by issuers and networks that the merchant owes for this billing statement. This value is derived from variable bps and fixed fee amount.",
									"example": 320,
									"type": "integer",
									"nullable": true
								},
								"total_markup": {
									"description": "This is the total fees charged by the platform for credit card transactions. This is calculated as (`item_count` * `fixed_fee_markup_amount`) + (`transaction_amount` * `variable_fee_markup_bps`).",
									"example": 40,
									"type": "integer",
									"nullable": true
								},
								"variable_fee_bps": {
									"description": "Basis points to calculate variable fee amount per transaction. Basis points translate directly to percent, so a value of `295` here will be calculated as 2.95% against the `amount` of each item in the billing statement. For credit card transactions, this parameter represents variable network and issuer fees. For ACH payments, this value will be the entire variable processing fee.",
									"example": 295,
									"type": "integer",
									"nullable": true
								}
							},
							"required": [
								"fee_category",
								"variable_fee_bps",
								"fixed_fee_amount",
								"total_interchange_fee",
								"total_markup",
								"total_fees"
							],
							"type": "object",
							"nullable": true
						},
						"type": "array",
						"description": "An array containing fee information for transactions in the given billing statement `id`.",
						"uniqueItems": true
					},
					"owner": {
						"additionalProperties": false,
						"properties": {
							"id": {
								"type": "string",
								"description": "The ID of the resource that the transaction reports on. Possible ID resources include:`payments`, `refunds`."
							},
							"path": {
								"type": "string",
								"description": "Path of resource and resource ID."
							},
							"resource": {
								"enum": [
									"payments",
									"refunds"
								],
								"type": "string",
								"description": "Helps organize information by identifying the resource type of the object data.",
								"x-enumDescriptions": {
									"payments": "The owner object for this transaction record is a payment.",
									"refunds": "The owner object for this transaction record is a refund."
								}
							}
						},
						"required": [
							"id",
							"resource",
							"path"
						],
						"type": "object",
						"description": "Owner returns ID and path. Possible values include: `payments`, `refunds`."
					},
					"total_amount": {
						"description": "Total transaction amount in a billing statement for the given fee type and fee category. This includes the net received by the merchant and all fees.",
						"example": 100,
						"type": "integer",
						"nullable": true
					}
				},
				"required": [
					"owner",
					"fee_type",
					"currency",
					"total_amount",
					"fees"
				],
				"type": "object",
				"nullable": true,
				"x-label": "v3.1.rc.2-transaction_level_fee_details-req"
			}
		},
		"responses": {},
		"parameters": {},
		"examples": {},
		"requestBodies": {},
		"headers": {},
		"securitySchemes": {
			"appIdAuth": {
				"type": "apiKey",
				"in": "header",
				"name": "App-Id",
				"description": "Find your app ID in your dashboard at [partner.wepay.com](https://partner.wepay.com/)."
			},
			"appTokenAuth": {
				"type": "apiKey",
				"in": "header",
				"name": "App-Token",
				"description": "Find or generate a token in your dashboard at [partner.wepay.com](https://partner.wepay.com/)."
			}
		},
		"links": {},
		"callbacks": {}
	},
	"security": [
		{
			"appIdAuth": [],
			"appTokenAuth": []
		}
	]
}